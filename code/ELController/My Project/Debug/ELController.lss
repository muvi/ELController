
ELController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c34  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005c34  00005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000003f4  20000000  00005c3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000130  200003f8  00006038  000203f8  2**3
                  ALLOC
  4 .stack        00000400  20000528  00006168  000203f8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002041c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004d3bd  00000000  00000000  00020475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a2e  00000000  00000000  0006d832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001262d  00000000  00000000  00073260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd0  00000000  00000000  0008588d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d30  00000000  00000000  0008655d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000cceb  00000000  00000000  0008728d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019110  00000000  00000000  00093f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000935c5  00000000  00000000  000ad088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002168  00000000  00000000  00140650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 09 00 20 65 06 00 00 01 2c 00 00 61 06 00 00     (.. e....,..a...
	...
      2c:	61 06 00 00 00 00 00 00 00 00 00 00 61 06 00 00     a...........a...
      3c:	85 2c 00 00 61 06 00 00 61 06 00 00 61 06 00 00     .,..a...a...a...
      4c:	09 09 00 00 65 1c 00 00 89 1e 00 00 61 06 00 00     ....e.......a...
      5c:	61 06 00 00 61 06 00 00 61 06 00 00 61 06 00 00     a...a...a...a...
      6c:	61 06 00 00 81 0a 00 00 61 06 00 00 61 06 00 00     a.......a...a...
      7c:	41 32 00 00 91 28 00 00 41 33 00 00 d5 33 00 00     A2...(..A3...3..
      8c:	a5 35 00 00 05 35 00 00 6d 34 00 00 45 36 00 00     .5...5..m4..E6..
      9c:	51 26 00 00 55 1a 00 00 61 06 00 00 61 06 00 00     Q&..U...a...a...
      ac:	61 06 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003f8 	.word	0x200003f8
      d4:	00000000 	.word	0x00000000
      d8:	00005c3c 	.word	0x00005c3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003fc 	.word	0x200003fc
     108:	00005c3c 	.word	0x00005c3c
     10c:	00005c3c 	.word	0x00005c3c
     110:	00000000 	.word	0x00000000

00000114 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     114:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     116:	6983      	ldr	r3, [r0, #24]
     118:	2b00      	cmp	r3, #0
     11a:	d000      	beq.n	11e <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     11c:	4798      	blx	r3
	}
}
     11e:	bd10      	pop	{r4, pc}

00000120 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     120:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     122:	69c3      	ldr	r3, [r0, #28]
     124:	2b00      	cmp	r3, #0
     126:	d000      	beq.n	12a <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     128:	4798      	blx	r3
	}
}
     12a:	bd10      	pop	{r4, pc}

0000012c <adc_async_channel_conversion_done>:
{
     12c:	b5f0      	push	{r4, r5, r6, r7, lr}
     12e:	b083      	sub	sp, #12
     130:	0005      	movs	r5, r0
     132:	000e      	movs	r6, r1
     134:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     136:	6a03      	ldr	r3, [r0, #32]
     138:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     13a:	0053      	lsls	r3, r2, #1
     13c:	189b      	adds	r3, r3, r2
     13e:	00dc      	lsls	r4, r3, #3
     140:	6a83      	ldr	r3, [r0, #40]	; 0x28
     142:	469c      	mov	ip, r3
     144:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     146:	1d27      	adds	r7, r4, #4
     148:	9101      	str	r1, [sp, #4]
     14a:	466b      	mov	r3, sp
     14c:	7919      	ldrb	r1, [r3, #4]
     14e:	0038      	movs	r0, r7
     150:	4b0c      	ldr	r3, [pc, #48]	; (184 <adc_async_channel_conversion_done+0x58>)
     152:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     154:	0028      	movs	r0, r5
     156:	4b0c      	ldr	r3, [pc, #48]	; (188 <adc_async_channel_conversion_done+0x5c>)
     158:	4798      	blx	r3
     15a:	2801      	cmp	r0, #1
     15c:	d907      	bls.n	16e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     15e:	9b01      	ldr	r3, [sp, #4]
     160:	0a19      	lsrs	r1, r3, #8
     162:	0038      	movs	r0, r7
     164:	4b07      	ldr	r3, [pc, #28]	; (184 <adc_async_channel_conversion_done+0x58>)
     166:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     168:	8aa3      	ldrh	r3, [r4, #20]
     16a:	3301      	adds	r3, #1
     16c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     16e:	8aa3      	ldrh	r3, [r4, #20]
     170:	3301      	adds	r3, #1
     172:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     174:	6823      	ldr	r3, [r4, #0]
     176:	2b00      	cmp	r3, #0
     178:	d002      	beq.n	180 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     17a:	0031      	movs	r1, r6
     17c:	0028      	movs	r0, r5
     17e:	4798      	blx	r3
}
     180:	b003      	add	sp, #12
     182:	bdf0      	pop	{r4, r5, r6, r7, pc}
     184:	00001875 	.word	0x00001875
     188:	00000537 	.word	0x00000537

0000018c <adc_async_init>:
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	46d6      	mov	lr, sl
     190:	b500      	push	{lr}
     192:	b082      	sub	sp, #8
     194:	0005      	movs	r5, r0
     196:	9101      	str	r1, [sp, #4]
     198:	0016      	movs	r6, r2
     19a:	001c      	movs	r4, r3
     19c:	ab08      	add	r3, sp, #32
     19e:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     1a0:	2800      	cmp	r0, #0
     1a2:	d00c      	beq.n	1be <adc_async_init+0x32>
     1a4:	2900      	cmp	r1, #0
     1a6:	d00c      	beq.n	1c2 <adc_async_init+0x36>
     1a8:	2a00      	cmp	r2, #0
     1aa:	d00c      	beq.n	1c6 <adc_async_init+0x3a>
     1ac:	2f00      	cmp	r7, #0
     1ae:	d00c      	beq.n	1ca <adc_async_init+0x3e>
     1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     1b2:	2b00      	cmp	r3, #0
     1b4:	d001      	beq.n	1ba <adc_async_init+0x2e>
     1b6:	2001      	movs	r0, #1
     1b8:	e008      	b.n	1cc <adc_async_init+0x40>
     1ba:	2000      	movs	r0, #0
     1bc:	e006      	b.n	1cc <adc_async_init+0x40>
     1be:	2000      	movs	r0, #0
     1c0:	e004      	b.n	1cc <adc_async_init+0x40>
     1c2:	2000      	movs	r0, #0
     1c4:	e002      	b.n	1cc <adc_async_init+0x40>
     1c6:	2000      	movs	r0, #0
     1c8:	e000      	b.n	1cc <adc_async_init+0x40>
     1ca:	2000      	movs	r0, #0
     1cc:	223f      	movs	r2, #63	; 0x3f
     1ce:	4916      	ldr	r1, [pc, #88]	; (228 <adc_async_init+0x9c>)
     1d0:	4b16      	ldr	r3, [pc, #88]	; (22c <adc_async_init+0xa0>)
     1d2:	469a      	mov	sl, r3
     1d4:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     1d6:	1c62      	adds	r2, r4, #1
     1d8:	0ffb      	lsrs	r3, r7, #31
     1da:	17d0      	asrs	r0, r2, #31
     1dc:	42ba      	cmp	r2, r7
     1de:	4158      	adcs	r0, r3
     1e0:	b2c0      	uxtb	r0, r0
     1e2:	2240      	movs	r2, #64	; 0x40
     1e4:	4910      	ldr	r1, [pc, #64]	; (228 <adc_async_init+0x9c>)
     1e6:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     1e8:	2300      	movs	r3, #0
     1ea:	e003      	b.n	1f4 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     1ec:	22ff      	movs	r2, #255	; 0xff
     1ee:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     1f0:	3301      	adds	r3, #1
     1f2:	b2db      	uxtb	r3, r3
     1f4:	42a3      	cmp	r3, r4
     1f6:	d9f9      	bls.n	1ec <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     1f8:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     1fa:	2324      	movs	r3, #36	; 0x24
     1fc:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     1fe:	3301      	adds	r3, #1
     200:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     202:	9b09      	ldr	r3, [sp, #36]	; 0x24
     204:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     206:	9901      	ldr	r1, [sp, #4]
     208:	0028      	movs	r0, r5
     20a:	4b09      	ldr	r3, [pc, #36]	; (230 <adc_async_init+0xa4>)
     20c:	4798      	blx	r3
	if (init_status) {
     20e:	2800      	cmp	r0, #0
     210:	d105      	bne.n	21e <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     212:	4b08      	ldr	r3, [pc, #32]	; (234 <adc_async_init+0xa8>)
     214:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     216:	4b08      	ldr	r3, [pc, #32]	; (238 <adc_async_init+0xac>)
     218:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     21a:	4b08      	ldr	r3, [pc, #32]	; (23c <adc_async_init+0xb0>)
     21c:	606b      	str	r3, [r5, #4]
}
     21e:	b002      	add	sp, #8
     220:	bc04      	pop	{r2}
     222:	4692      	mov	sl, r2
     224:	bdf0      	pop	{r4, r5, r6, r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00005950 	.word	0x00005950
     22c:	00001821 	.word	0x00001821
     230:	000004d1 	.word	0x000004d1
     234:	0000012d 	.word	0x0000012d
     238:	00000115 	.word	0x00000115
     23c:	00000121 	.word	0x00000121

00000240 <adc_async_register_channel_buffer>:
{
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
     242:	b083      	sub	sp, #12
     244:	0007      	movs	r7, r0
     246:	000c      	movs	r4, r1
     248:	9200      	str	r2, [sp, #0]
     24a:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     24c:	2800      	cmp	r0, #0
     24e:	d019      	beq.n	284 <adc_async_register_channel_buffer+0x44>
     250:	2a00      	cmp	r2, #0
     252:	d019      	beq.n	288 <adc_async_register_channel_buffer+0x48>
     254:	2b00      	cmp	r3, #0
     256:	d119      	bne.n	28c <adc_async_register_channel_buffer+0x4c>
     258:	2000      	movs	r0, #0
     25a:	4e24      	ldr	r6, [pc, #144]	; (2ec <adc_async_register_channel_buffer+0xac>)
     25c:	2266      	movs	r2, #102	; 0x66
     25e:	0031      	movs	r1, r6
     260:	4d23      	ldr	r5, [pc, #140]	; (2f0 <adc_async_register_channel_buffer+0xb0>)
     262:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     264:	2324      	movs	r3, #36	; 0x24
     266:	5cfb      	ldrb	r3, [r7, r3]
     268:	2000      	movs	r0, #0
     26a:	42a3      	cmp	r3, r4
     26c:	4140      	adcs	r0, r0
     26e:	b2c0      	uxtb	r0, r0
     270:	2267      	movs	r2, #103	; 0x67
     272:	0031      	movs	r1, r6
     274:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     276:	6a39      	ldr	r1, [r7, #32]
     278:	5d0b      	ldrb	r3, [r1, r4]
     27a:	2bff      	cmp	r3, #255	; 0xff
     27c:	d12c      	bne.n	2d8 <adc_async_register_channel_buffer+0x98>
     27e:	2600      	movs	r6, #0
     280:	2300      	movs	r3, #0
     282:	e007      	b.n	294 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     284:	2000      	movs	r0, #0
     286:	e7e8      	b.n	25a <adc_async_register_channel_buffer+0x1a>
     288:	2000      	movs	r0, #0
     28a:	e7e6      	b.n	25a <adc_async_register_channel_buffer+0x1a>
     28c:	2001      	movs	r0, #1
     28e:	e7e4      	b.n	25a <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     290:	3301      	adds	r3, #1
     292:	b2db      	uxtb	r3, r3
     294:	2224      	movs	r2, #36	; 0x24
     296:	5cba      	ldrb	r2, [r7, r2]
     298:	4293      	cmp	r3, r2
     29a:	d805      	bhi.n	2a8 <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     29c:	5cca      	ldrb	r2, [r1, r3]
     29e:	2aff      	cmp	r2, #255	; 0xff
     2a0:	d0f6      	beq.n	290 <adc_async_register_channel_buffer+0x50>
			index++;
     2a2:	3601      	adds	r6, #1
     2a4:	b2f6      	uxtb	r6, r6
     2a6:	e7f3      	b.n	290 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     2a8:	2325      	movs	r3, #37	; 0x25
     2aa:	5cfb      	ldrb	r3, [r7, r3]
     2ac:	429e      	cmp	r6, r3
     2ae:	d816      	bhi.n	2de <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     2b0:	0073      	lsls	r3, r6, #1
     2b2:	199b      	adds	r3, r3, r6
     2b4:	00dd      	lsls	r5, r3, #3
     2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     2b8:	1958      	adds	r0, r3, r5
     2ba:	3004      	adds	r0, #4
     2bc:	9a01      	ldr	r2, [sp, #4]
     2be:	9900      	ldr	r1, [sp, #0]
     2c0:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <adc_async_register_channel_buffer+0xb4>)
     2c2:	4798      	blx	r3
     2c4:	2800      	cmp	r0, #0
     2c6:	d10d      	bne.n	2e4 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     2c8:	6a3b      	ldr	r3, [r7, #32]
     2ca:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     2ce:	195b      	adds	r3, r3, r5
     2d0:	2200      	movs	r2, #0
     2d2:	829a      	strh	r2, [r3, #20]
}
     2d4:	b003      	add	sp, #12
     2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     2d8:	200d      	movs	r0, #13
     2da:	4240      	negs	r0, r0
     2dc:	e7fa      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     2de:	201c      	movs	r0, #28
     2e0:	4240      	negs	r0, r0
     2e2:	e7f7      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     2e4:	200d      	movs	r0, #13
     2e6:	4240      	negs	r0, r0
     2e8:	e7f4      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	00005950 	.word	0x00005950
     2f0:	00001821 	.word	0x00001821
     2f4:	00001829 	.word	0x00001829

000002f8 <adc_async_enable_channel>:
{
     2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2fa:	0006      	movs	r6, r0
     2fc:	000c      	movs	r4, r1
	ASSERT(descr);
     2fe:	4d0b      	ldr	r5, [pc, #44]	; (32c <adc_async_enable_channel+0x34>)
     300:	1e43      	subs	r3, r0, #1
     302:	4198      	sbcs	r0, r3
     304:	b2c0      	uxtb	r0, r0
     306:	2283      	movs	r2, #131	; 0x83
     308:	0029      	movs	r1, r5
     30a:	4f09      	ldr	r7, [pc, #36]	; (330 <adc_async_enable_channel+0x38>)
     30c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     30e:	2324      	movs	r3, #36	; 0x24
     310:	5cf3      	ldrb	r3, [r6, r3]
     312:	2000      	movs	r0, #0
     314:	42a3      	cmp	r3, r4
     316:	4140      	adcs	r0, r0
     318:	b2c0      	uxtb	r0, r0
     31a:	2284      	movs	r2, #132	; 0x84
     31c:	0029      	movs	r1, r5
     31e:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     320:	0021      	movs	r1, r4
     322:	0030      	movs	r0, r6
     324:	4b03      	ldr	r3, [pc, #12]	; (334 <adc_async_enable_channel+0x3c>)
     326:	4798      	blx	r3
}
     328:	2000      	movs	r0, #0
     32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     32c:	00005950 	.word	0x00005950
     330:	00001821 	.word	0x00001821
     334:	00000529 	.word	0x00000529

00000338 <adc_async_set_inputs>:
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	b083      	sub	sp, #12
     33c:	0006      	movs	r6, r0
     33e:	9100      	str	r1, [sp, #0]
     340:	9201      	str	r2, [sp, #4]
     342:	001c      	movs	r4, r3
	ASSERT(descr);
     344:	4d0c      	ldr	r5, [pc, #48]	; (378 <adc_async_set_inputs+0x40>)
     346:	1e43      	subs	r3, r0, #1
     348:	4198      	sbcs	r0, r3
     34a:	b2c0      	uxtb	r0, r0
     34c:	22f5      	movs	r2, #245	; 0xf5
     34e:	0029      	movs	r1, r5
     350:	4f0a      	ldr	r7, [pc, #40]	; (37c <adc_async_set_inputs+0x44>)
     352:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     354:	2324      	movs	r3, #36	; 0x24
     356:	5cf3      	ldrb	r3, [r6, r3]
     358:	2000      	movs	r0, #0
     35a:	42a3      	cmp	r3, r4
     35c:	4140      	adcs	r0, r0
     35e:	b2c0      	uxtb	r0, r0
     360:	22f6      	movs	r2, #246	; 0xf6
     362:	0029      	movs	r1, r5
     364:	47b8      	blx	r7
	_adc_async_set_inputs(&descr->device, pos_input, neg_input, channel);
     366:	0023      	movs	r3, r4
     368:	9a01      	ldr	r2, [sp, #4]
     36a:	9900      	ldr	r1, [sp, #0]
     36c:	0030      	movs	r0, r6
     36e:	4c04      	ldr	r4, [pc, #16]	; (380 <adc_async_set_inputs+0x48>)
     370:	47a0      	blx	r4
}
     372:	2000      	movs	r0, #0
     374:	b003      	add	sp, #12
     376:	bdf0      	pop	{r4, r5, r6, r7, pc}
     378:	00005950 	.word	0x00005950
     37c:	00001821 	.word	0x00001821
     380:	00000555 	.word	0x00000555

00000384 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     384:	2000      	movs	r0, #0
     386:	4770      	bx	lr

00000388 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     388:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     38a:	4b0b      	ldr	r3, [pc, #44]	; (3b8 <_adc_get_regs+0x30>)
     38c:	4798      	blx	r3
     38e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     390:	2000      	movs	r0, #0
     392:	2800      	cmp	r0, #0
     394:	d006      	beq.n	3a4 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     396:	227f      	movs	r2, #127	; 0x7f
     398:	4908      	ldr	r1, [pc, #32]	; (3bc <_adc_get_regs+0x34>)
     39a:	2000      	movs	r0, #0
     39c:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_adc_get_regs+0x38>)
     39e:	4798      	blx	r3
	return 0;
     3a0:	2000      	movs	r0, #0
}
     3a2:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     3a4:	00c3      	lsls	r3, r0, #3
     3a6:	1a1b      	subs	r3, r3, r0
     3a8:	0099      	lsls	r1, r3, #2
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <_adc_get_regs+0x3c>)
     3ac:	5ccb      	ldrb	r3, [r1, r3]
     3ae:	429a      	cmp	r2, r3
     3b0:	d0f7      	beq.n	3a2 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     3b2:	3001      	adds	r0, #1
     3b4:	b2c0      	uxtb	r0, r0
     3b6:	e7ec      	b.n	392 <_adc_get_regs+0xa>
     3b8:	00000385 	.word	0x00000385
     3bc:	00005984 	.word	0x00005984
     3c0:	00001821 	.word	0x00001821
     3c4:	00005968 	.word	0x00005968

000003c8 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	0004      	movs	r4, r0
     3cc:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     3ce:	4b3a      	ldr	r3, [pc, #232]	; (4b8 <STACK_SIZE+0xb8>)
     3d0:	18c0      	adds	r0, r0, r3
     3d2:	4243      	negs	r3, r0
     3d4:	4158      	adcs	r0, r3
     3d6:	b2c0      	uxtb	r0, r0
     3d8:	2294      	movs	r2, #148	; 0x94
     3da:	4938      	ldr	r1, [pc, #224]	; (4bc <STACK_SIZE+0xbc>)
     3dc:	4b38      	ldr	r3, [pc, #224]	; (4c0 <STACK_SIZE+0xc0>)
     3de:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     3e0:	4b38      	ldr	r3, [pc, #224]	; (4c4 <STACK_SIZE+0xc4>)
     3e2:	681a      	ldr	r2, [r3, #0]
     3e4:	08d2      	lsrs	r2, r2, #3
     3e6:	0212      	lsls	r2, r2, #8
     3e8:	23e0      	movs	r3, #224	; 0xe0
     3ea:	00db      	lsls	r3, r3, #3
     3ec:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     3ee:	4936      	ldr	r1, [pc, #216]	; (4c8 <STACK_SIZE+0xc8>)
     3f0:	680b      	ldr	r3, [r1, #0]
     3f2:	6849      	ldr	r1, [r1, #4]
     3f4:	0149      	lsls	r1, r1, #5
     3f6:	0edb      	lsrs	r3, r3, #27
     3f8:	430b      	orrs	r3, r1
     3fa:	21ff      	movs	r1, #255	; 0xff
     3fc:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     3fe:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     400:	7e63      	ldrb	r3, [r4, #25]
     402:	09db      	lsrs	r3, r3, #7
     404:	d1fc      	bne.n	400 <STACK_SIZE>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     406:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     408:	079b      	lsls	r3, r3, #30
     40a:	d504      	bpl.n	416 <STACK_SIZE+0x16>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     40c:	2300      	movs	r3, #0
     40e:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     410:	7e63      	ldrb	r3, [r4, #25]
     412:	09db      	lsrs	r3, r3, #7
     414:	d1fc      	bne.n	410 <STACK_SIZE+0x10>
	((Adc *)hw)->CTRLA.reg = data;
     416:	2301      	movs	r3, #1
     418:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     41a:	7e63      	ldrb	r3, [r4, #25]
     41c:	09db      	lsrs	r3, r3, #7
     41e:	d1fc      	bne.n	41a <STACK_SIZE+0x1a>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     420:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     422:	00ea      	lsls	r2, r5, #3
     424:	1b52      	subs	r2, r2, r5
     426:	0091      	lsls	r1, r2, #2
     428:	4b28      	ldr	r3, [pc, #160]	; (4cc <STACK_SIZE+0xcc>)
     42a:	185b      	adds	r3, r3, r1
     42c:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     42e:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     430:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     432:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     434:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     436:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     438:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     43a:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     43c:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     43e:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     440:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     442:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     444:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     446:	222a      	movs	r2, #42	; 0x2a
     448:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     44a:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     44c:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     44e:	7e63      	ldrb	r3, [r4, #25]
     450:	09db      	lsrs	r3, r3, #7
     452:	d1fc      	bne.n	44e <STACK_SIZE+0x4e>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     454:	00eb      	lsls	r3, r5, #3
     456:	1b5b      	subs	r3, r3, r5
     458:	009a      	lsls	r2, r3, #2
     45a:	4b1c      	ldr	r3, [pc, #112]	; (4cc <STACK_SIZE+0xcc>)
     45c:	189b      	adds	r3, r3, r2
     45e:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     460:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     462:	7e63      	ldrb	r3, [r4, #25]
     464:	09db      	lsrs	r3, r3, #7
     466:	d1fc      	bne.n	462 <STACK_SIZE+0x62>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     468:	00eb      	lsls	r3, r5, #3
     46a:	1b5b      	subs	r3, r3, r5
     46c:	009a      	lsls	r2, r3, #2
     46e:	4b17      	ldr	r3, [pc, #92]	; (4cc <STACK_SIZE+0xcc>)
     470:	189b      	adds	r3, r3, r2
     472:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     474:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     476:	7e63      	ldrb	r3, [r4, #25]
     478:	09db      	lsrs	r3, r3, #7
     47a:	d1fc      	bne.n	476 <STACK_SIZE+0x76>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     47c:	00eb      	lsls	r3, r5, #3
     47e:	1b5b      	subs	r3, r3, r5
     480:	009a      	lsls	r2, r3, #2
     482:	4b12      	ldr	r3, [pc, #72]	; (4cc <STACK_SIZE+0xcc>)
     484:	189b      	adds	r3, r3, r2
     486:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     488:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     48a:	7e63      	ldrb	r3, [r4, #25]
     48c:	09db      	lsrs	r3, r3, #7
     48e:	d1fc      	bne.n	48a <STACK_SIZE+0x8a>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     490:	00eb      	lsls	r3, r5, #3
     492:	1b5b      	subs	r3, r3, r5
     494:	009a      	lsls	r2, r3, #2
     496:	4b0d      	ldr	r3, [pc, #52]	; (4cc <STACK_SIZE+0xcc>)
     498:	189b      	adds	r3, r3, r2
     49a:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     49c:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     49e:	7e63      	ldrb	r3, [r4, #25]
     4a0:	09db      	lsrs	r3, r3, #7
     4a2:	d1fc      	bne.n	49e <STACK_SIZE+0x9e>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     4a4:	00eb      	lsls	r3, r5, #3
     4a6:	1b5d      	subs	r5, r3, r5
     4a8:	00aa      	lsls	r2, r5, #2
     4aa:	4b08      	ldr	r3, [pc, #32]	; (4cc <STACK_SIZE+0xcc>)
     4ac:	189b      	adds	r3, r3, r2
     4ae:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
     4b0:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     4b2:	2000      	movs	r0, #0
     4b4:	bd70      	pop	{r4, r5, r6, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	bdffc000 	.word	0xbdffc000
     4bc:	00005984 	.word	0x00005984
     4c0:	00001821 	.word	0x00001821
     4c4:	00806024 	.word	0x00806024
     4c8:	00806020 	.word	0x00806020
     4cc:	00005968 	.word	0x00005968

000004d0 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	0005      	movs	r5, r0
     4d4:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
     4d6:	1e43      	subs	r3, r0, #1
     4d8:	4198      	sbcs	r0, r3
     4da:	b2c0      	uxtb	r0, r0
     4dc:	22d3      	movs	r2, #211	; 0xd3
     4de:	490d      	ldr	r1, [pc, #52]	; (514 <_adc_async_init+0x44>)
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <_adc_async_init+0x48>)
     4e2:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     4e4:	0020      	movs	r0, r4
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <_adc_async_init+0x4c>)
     4e8:	4798      	blx	r3
     4ea:	0001      	movs	r1, r0
     4ec:	0020      	movs	r0, r4
     4ee:	4b0c      	ldr	r3, [pc, #48]	; (520 <_adc_async_init+0x50>)
     4f0:	4798      	blx	r3
	if (init_status) {
     4f2:	2800      	cmp	r0, #0
     4f4:	d10d      	bne.n	512 <_adc_async_init+0x42>
		return init_status;
	}
	device->hw = hw;
     4f6:	616c      	str	r4, [r5, #20]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     4f8:	4b0a      	ldr	r3, [pc, #40]	; (524 <_adc_async_init+0x54>)
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0412      	lsls	r2, r2, #16
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     506:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     50a:	3101      	adds	r1, #1
     50c:	31ff      	adds	r1, #255	; 0xff
     50e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     510:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(ADC_IRQn);
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_EnableIRQ(ADC_IRQn);

	return ERR_NONE;
}
     512:	bd70      	pop	{r4, r5, r6, pc}
     514:	00005984 	.word	0x00005984
     518:	00001821 	.word	0x00001821
     51c:	00000389 	.word	0x00000389
     520:	000003c9 	.word	0x000003c9
     524:	e000e100 	.word	0xe000e100

00000528 <_adc_async_enable_channel>:
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     528:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     52a:	7813      	ldrb	r3, [r2, #0]
     52c:	2102      	movs	r1, #2
     52e:	430b      	orrs	r3, r1
     530:	b2db      	uxtb	r3, r3
     532:	7013      	strb	r3, [r2, #0]
}
     534:	4770      	bx	lr

00000536 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     536:	6942      	ldr	r2, [r0, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     538:	7e53      	ldrb	r3, [r2, #25]
     53a:	09db      	lsrs	r3, r3, #7
     53c:	d1fc      	bne.n	538 <_adc_async_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
     53e:	8892      	ldrh	r2, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
     540:	0912      	lsrs	r2, r2, #4
     542:	3303      	adds	r3, #3
     544:	4013      	ands	r3, r2
     546:	2b03      	cmp	r3, #3
     548:	d001      	beq.n	54e <_adc_async_get_data_size+0x18>
     54a:	2002      	movs	r0, #2
}
     54c:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     54e:	2001      	movs	r0, #1
     550:	e7fc      	b.n	54c <_adc_async_get_data_size+0x16>
	...

00000554 <_adc_async_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_async_set_inputs(struct _adc_async_device *const device, const adc_pos_input_t pos_input,
                           const adc_neg_input_t neg_input, const uint8_t channel)
{
     554:	b530      	push	{r4, r5, lr}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
     556:	6944      	ldr	r4, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     558:	6923      	ldr	r3, [r4, #16]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
     55a:	251f      	movs	r5, #31
     55c:	43ab      	bics	r3, r5
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
     55e:	4029      	ands	r1, r5
     560:	4319      	orrs	r1, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     562:	6121      	str	r1, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     564:	7e63      	ldrb	r3, [r4, #25]
     566:	09db      	lsrs	r3, r3, #7
     568:	d1fc      	bne.n	564 <_adc_async_set_inputs+0x10>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
     56a:	6941      	ldr	r1, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     56c:	690b      	ldr	r3, [r1, #16]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
     56e:	4806      	ldr	r0, [pc, #24]	; (588 <_adc_async_set_inputs+0x34>)
     570:	4003      	ands	r3, r0
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
     572:	0212      	lsls	r2, r2, #8
     574:	20f8      	movs	r0, #248	; 0xf8
     576:	0140      	lsls	r0, r0, #5
     578:	4002      	ands	r2, r0
     57a:	431a      	orrs	r2, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     57c:	610a      	str	r2, [r1, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     57e:	7e4b      	ldrb	r3, [r1, #25]
     580:	09db      	lsrs	r3, r3, #7
     582:	d1fc      	bne.n	57e <_adc_async_set_inputs+0x2a>
}
     584:	bd30      	pop	{r4, r5, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	ffffe0ff 	.word	0xffffe0ff

0000058c <adc_init>:
struct adc_async_channel_descriptor ADC_0_ch[ADC_0_CH_AMOUNT];

static uint8_t ADC_0_buffer[ADC_0_BUFFER_SIZE];
static uint8_t ADC_0_map[ADC_0_CH_MAX + 1];

void adc_init() {
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
     58e:	b085      	sub	sp, #20
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     590:	4a24      	ldr	r2, [pc, #144]	; (624 <adc_init+0x98>)
     592:	6a11      	ldr	r1, [r2, #32]
     594:	2380      	movs	r3, #128	; 0x80
     596:	025b      	lsls	r3, r3, #9
     598:	430b      	orrs	r3, r1
     59a:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     59c:	4a22      	ldr	r2, [pc, #136]	; (628 <adc_init+0x9c>)
     59e:	4b23      	ldr	r3, [pc, #140]	; (62c <adc_init+0xa0>)
     5a0:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     5a2:	4d23      	ldr	r5, [pc, #140]	; (630 <adc_init+0xa4>)
     5a4:	4e23      	ldr	r6, [pc, #140]	; (634 <adc_init+0xa8>)
     5a6:	2300      	movs	r3, #0
     5a8:	9302      	str	r3, [sp, #8]
     5aa:	4b23      	ldr	r3, [pc, #140]	; (638 <adc_init+0xac>)
     5ac:	9301      	str	r3, [sp, #4]
     5ae:	2401      	movs	r4, #1
     5b0:	9400      	str	r4, [sp, #0]
     5b2:	2300      	movs	r3, #0
     5b4:	002a      	movs	r2, r5
     5b6:	4921      	ldr	r1, [pc, #132]	; (63c <adc_init+0xb0>)
     5b8:	0030      	movs	r0, r6
     5ba:	4f21      	ldr	r7, [pc, #132]	; (640 <adc_init+0xb4>)
     5bc:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     5be:	1d2a      	adds	r2, r5, #4
     5c0:	2310      	movs	r3, #16
     5c2:	2100      	movs	r1, #0
     5c4:	0030      	movs	r0, r6
     5c6:	4d1f      	ldr	r5, [pc, #124]	; (644 <adc_init+0xb8>)
     5c8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ca:	26c0      	movs	r6, #192	; 0xc0
     5cc:	05f6      	lsls	r6, r6, #23
     5ce:	2304      	movs	r3, #4
     5d0:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d2:	4b1d      	ldr	r3, [pc, #116]	; (648 <adc_init+0xbc>)
     5d4:	4a1d      	ldr	r2, [pc, #116]	; (64c <adc_init+0xc0>)
     5d6:	629a      	str	r2, [r3, #40]	; 0x28
     5d8:	22c0      	movs	r2, #192	; 0xc0
     5da:	0612      	lsls	r2, r2, #24
     5dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	2042      	movs	r0, #66	; 0x42
     5e0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	2501      	movs	r5, #1
     5e6:	4329      	orrs	r1, r5
     5e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ec:	3811      	subs	r0, #17
     5ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f0:	270f      	movs	r7, #15
     5f2:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     5f4:	4329      	orrs	r1, r5
     5f6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fa:	2108      	movs	r1, #8
     5fc:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5fe:	4914      	ldr	r1, [pc, #80]	; (650 <adc_init+0xc4>)
     600:	6299      	str	r1, [r3, #40]	; 0x28
     602:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     604:	2143      	movs	r1, #67	; 0x43
     606:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     608:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60a:	432a      	orrs	r2, r5
     60c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     610:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     612:	3934      	subs	r1, #52	; 0x34
     614:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     616:	2110      	movs	r1, #16
     618:	430a      	orrs	r2, r1
     61a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61c:	541a      	strb	r2, [r3, r0]

	// Disable digital pin circuitry
	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
     61e:	b005      	add	sp, #20
     620:	bdf0      	pop	{r4, r5, r6, r7, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	40000400 	.word	0x40000400
     628:	0000401e 	.word	0x0000401e
     62c:	40000c00 	.word	0x40000c00
     630:	20000414 	.word	0x20000414
     634:	20000478 	.word	0x20000478
     638:	200004a4 	.word	0x200004a4
     63c:	42004000 	.word	0x42004000
     640:	0000018d 	.word	0x0000018d
     644:	00000241 	.word	0x00000241
     648:	41004400 	.word	0x41004400
     64c:	40000004 	.word	0x40000004
     650:	40000008 	.word	0x40000008

00000654 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     654:	b510      	push	{r4, lr}
	system_init();
     656:	4b01      	ldr	r3, [pc, #4]	; (65c <atmel_start_init+0x8>)
     658:	4798      	blx	r3
}
     65a:	bd10      	pop	{r4, pc}
     65c:	00001099 	.word	0x00001099

00000660 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     660:	e7fe      	b.n	660 <Dummy_Handler>
	...

00000664 <Reset_Handler>:
{
     664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     666:	4a23      	ldr	r2, [pc, #140]	; (6f4 <Reset_Handler+0x90>)
     668:	4b23      	ldr	r3, [pc, #140]	; (6f8 <Reset_Handler+0x94>)
     66a:	429a      	cmp	r2, r3
     66c:	d009      	beq.n	682 <Reset_Handler+0x1e>
     66e:	4b22      	ldr	r3, [pc, #136]	; (6f8 <Reset_Handler+0x94>)
     670:	4a20      	ldr	r2, [pc, #128]	; (6f4 <Reset_Handler+0x90>)
     672:	e003      	b.n	67c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     674:	6811      	ldr	r1, [r2, #0]
     676:	6019      	str	r1, [r3, #0]
     678:	3304      	adds	r3, #4
     67a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     67c:	491f      	ldr	r1, [pc, #124]	; (6fc <Reset_Handler+0x98>)
     67e:	428b      	cmp	r3, r1
     680:	d3f8      	bcc.n	674 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     682:	4b1f      	ldr	r3, [pc, #124]	; (700 <Reset_Handler+0x9c>)
     684:	e002      	b.n	68c <Reset_Handler+0x28>
                *pDest++ = 0;
     686:	2200      	movs	r2, #0
     688:	601a      	str	r2, [r3, #0]
     68a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     68c:	4a1d      	ldr	r2, [pc, #116]	; (704 <Reset_Handler+0xa0>)
     68e:	4293      	cmp	r3, r2
     690:	d3f9      	bcc.n	686 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     692:	4a1d      	ldr	r2, [pc, #116]	; (708 <Reset_Handler+0xa4>)
     694:	21ff      	movs	r1, #255	; 0xff
     696:	4b1d      	ldr	r3, [pc, #116]	; (70c <Reset_Handler+0xa8>)
     698:	438b      	bics	r3, r1
     69a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     69c:	39fd      	subs	r1, #253	; 0xfd
     69e:	2390      	movs	r3, #144	; 0x90
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	4a1b      	ldr	r2, [pc, #108]	; (710 <Reset_Handler+0xac>)
     6a4:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     6a6:	4a1b      	ldr	r2, [pc, #108]	; (714 <Reset_Handler+0xb0>)
     6a8:	78d3      	ldrb	r3, [r2, #3]
     6aa:	2503      	movs	r5, #3
     6ac:	43ab      	bics	r3, r5
     6ae:	2402      	movs	r4, #2
     6b0:	4323      	orrs	r3, r4
     6b2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     6b4:	78d3      	ldrb	r3, [r2, #3]
     6b6:	270c      	movs	r7, #12
     6b8:	43bb      	bics	r3, r7
     6ba:	2608      	movs	r6, #8
     6bc:	4333      	orrs	r3, r6
     6be:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     6c0:	4b15      	ldr	r3, [pc, #84]	; (718 <Reset_Handler+0xb4>)
     6c2:	7b98      	ldrb	r0, [r3, #14]
     6c4:	2230      	movs	r2, #48	; 0x30
     6c6:	4390      	bics	r0, r2
     6c8:	2220      	movs	r2, #32
     6ca:	4310      	orrs	r0, r2
     6cc:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     6ce:	7b99      	ldrb	r1, [r3, #14]
     6d0:	43b9      	bics	r1, r7
     6d2:	4331      	orrs	r1, r6
     6d4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     6d6:	7b9a      	ldrb	r2, [r3, #14]
     6d8:	43aa      	bics	r2, r5
     6da:	4322      	orrs	r2, r4
     6dc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     6de:	4a0f      	ldr	r2, [pc, #60]	; (71c <Reset_Handler+0xb8>)
     6e0:	6851      	ldr	r1, [r2, #4]
     6e2:	2380      	movs	r3, #128	; 0x80
     6e4:	430b      	orrs	r3, r1
     6e6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <Reset_Handler+0xbc>)
     6ea:	4798      	blx	r3
        main();
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <Reset_Handler+0xc0>)
     6ee:	4798      	blx	r3
     6f0:	e7fe      	b.n	6f0 <Reset_Handler+0x8c>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00005c3c 	.word	0x00005c3c
     6f8:	20000000 	.word	0x20000000
     6fc:	200003f4 	.word	0x200003f4
     700:	200003f8 	.word	0x200003f8
     704:	20000528 	.word	0x20000528
     708:	e000ed00 	.word	0xe000ed00
     70c:	00000000 	.word	0x00000000
     710:	41007000 	.word	0x41007000
     714:	41005000 	.word	0x41005000
     718:	41004800 	.word	0x41004800
     71c:	41004000 	.word	0x41004000
     720:	00005909 	.word	0x00005909
     724:	00002db5 	.word	0x00002db5

00000728 <dip_switch_read_group>:
volatile uint16_t dip_switch_dac_data = 1 << (DIP_SWITCH_BITS_PER_CHANNEL - 1);
volatile uint8_t dip_switch_block = 0;
volatile uint16_t dip_switch_data = 0;


uint8_t dip_switch_read_group(uint16_t data) {
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	0006      	movs	r6, r0
	uint8_t result = 0;
	uint8_t pos = 0;
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     72c:	2103      	movs	r1, #3
	uint8_t pos = 0;
     72e:	2200      	movs	r2, #0
	uint8_t result = 0;
     730:	2000      	movs	r0, #0
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     732:	e000      	b.n	736 <dip_switch_read_group+0xe>
     734:	3901      	subs	r1, #1
     736:	2900      	cmp	r1, #0
     738:	db13      	blt.n	762 <dip_switch_read_group+0x3a>
		pos |= 1 << i;
     73a:	2301      	movs	r3, #1
     73c:	408b      	lsls	r3, r1
     73e:	b25b      	sxtb	r3, r3
     740:	431a      	orrs	r2, r3
     742:	b255      	sxtb	r5, r2
     744:	b2ea      	uxtb	r2, r5
		if (data < DIP_SWITCH_THRESHOLDS[pos]) {
     746:	0057      	lsls	r7, r2, #1
     748:	4c06      	ldr	r4, [pc, #24]	; (764 <dip_switch_read_group+0x3c>)
     74a:	5b3c      	ldrh	r4, [r7, r4]
     74c:	42b4      	cmp	r4, r6
     74e:	d9f1      	bls.n	734 <dip_switch_read_group+0xc>
			result |= 1 << (DIP_SWITCH_BITS - i - 1);
     750:	2203      	movs	r2, #3
     752:	1a52      	subs	r2, r2, r1
     754:	2401      	movs	r4, #1
     756:	4094      	lsls	r4, r2
     758:	4320      	orrs	r0, r4
     75a:	b2c0      	uxtb	r0, r0
			pos ^= 1 << i;
     75c:	406b      	eors	r3, r5
     75e:	b2da      	uxtb	r2, r3
     760:	e7e8      	b.n	734 <dip_switch_read_group+0xc>
		}
	}
	
	return result;
}
     762:	bdf0      	pop	{r4, r5, r6, r7, pc}
     764:	00005998 	.word	0x00005998

00000768 <dip_switch_data_read>:

void dip_switch_data_read(const uint16_t data) {
     768:	b510      	push	{r4, lr}
	uint8_t nibble = dip_switch_read_group(data);
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <dip_switch_data_read+0x6c>)
     76c:	4798      	blx	r3
	if (!dip_switch_block) {
     76e:	4b1a      	ldr	r3, [pc, #104]	; (7d8 <dip_switch_data_read+0x70>)
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d102      	bne.n	77c <dip_switch_data_read+0x14>
		dip_switch_data = 0;
     776:	2200      	movs	r2, #0
     778:	4b17      	ldr	r3, [pc, #92]	; (7d8 <dip_switch_data_read+0x70>)
     77a:	805a      	strh	r2, [r3, #2]
	}
	dip_switch_data |= nibble << ((DIP_SWITCH_BLOCKS - dip_switch_block - 1) * DIP_SWITCH_BITS);
     77c:	4c16      	ldr	r4, [pc, #88]	; (7d8 <dip_switch_data_read+0x70>)
     77e:	7822      	ldrb	r2, [r4, #0]
     780:	2302      	movs	r3, #2
     782:	1a9b      	subs	r3, r3, r2
     784:	009b      	lsls	r3, r3, #2
     786:	4098      	lsls	r0, r3
     788:	0003      	movs	r3, r0
     78a:	8860      	ldrh	r0, [r4, #2]
     78c:	4318      	orrs	r0, r3
     78e:	b280      	uxth	r0, r0
     790:	8060      	strh	r0, [r4, #2]
	dip_switch_block = (dip_switch_block + 1) % DIP_SWITCH_BLOCKS;
     792:	7820      	ldrb	r0, [r4, #0]
     794:	3001      	adds	r0, #1
     796:	2103      	movs	r1, #3
     798:	4b10      	ldr	r3, [pc, #64]	; (7dc <dip_switch_data_read+0x74>)
     79a:	4798      	blx	r3
     79c:	b2c9      	uxtb	r1, r1
     79e:	7021      	strb	r1, [r4, #0]

	ac_async_set_positive_input(&AC_0, 0, DIP_SWITCH_BLOCK_TO_AC_MUXPOS_PIN(dip_switch_block));
     7a0:	7822      	ldrb	r2, [r4, #0]
	tmp |= AC_COMPCTRL_MUXPOS(data);
	((Ac *)hw)->COMPCTRL[index].reg = tmp;
}

static inline void _ac_async_set_positive_input(struct _ac_async_device *const device, uint8_t comp, hri_ac_compctrl_reg_t muxpos) {
	hri_ac_clear_COMPCTRL_ENABLE_bit_no_lock(device->hw, comp);
     7a2:	4b0f      	ldr	r3, [pc, #60]	; (7e0 <dip_switch_data_read+0x78>)
     7a4:	68d9      	ldr	r1, [r3, #12]
	((Ac *)hw)->COMPCTRL[index].reg &= ~AC_COMPCTRL_ENABLE;
     7a6:	690b      	ldr	r3, [r1, #16]
     7a8:	2001      	movs	r0, #1
     7aa:	4383      	bics	r3, r0
     7ac:	610b      	str	r3, [r1, #16]
	tmp = ((Ac *)hw)->COMPCTRL[index].reg;
     7ae:	690b      	ldr	r3, [r1, #16]
	tmp &= ~AC_COMPCTRL_MUXPOS_Msk;
     7b0:	480c      	ldr	r0, [pc, #48]	; (7e4 <dip_switch_data_read+0x7c>)
     7b2:	4003      	ands	r3, r0
	tmp |= AC_COMPCTRL_MUXPOS(data);
     7b4:	0312      	lsls	r2, r2, #12
     7b6:	20c0      	movs	r0, #192	; 0xc0
     7b8:	0180      	lsls	r0, r0, #6
     7ba:	4002      	ands	r2, r0
     7bc:	4313      	orrs	r3, r2
	((Ac *)hw)->COMPCTRL[index].reg = tmp;
     7be:	610b      	str	r3, [r1, #16]
	
	if (!dip_switch_block) {
     7c0:	7823      	ldrb	r3, [r4, #0]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d000      	beq.n	7c8 <dip_switch_data_read+0x60>
		dip_switch_data_ready(dip_switch_data);
	}
}
     7c6:	bd10      	pop	{r4, pc}
		dip_switch_data_ready(dip_switch_data);
     7c8:	8860      	ldrh	r0, [r4, #2]
     7ca:	b280      	uxth	r0, r0
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <dip_switch_data_read+0x80>)
     7ce:	4798      	blx	r3
}
     7d0:	e7f9      	b.n	7c6 <dip_switch_data_read+0x5e>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000729 	.word	0x00000729
     7d8:	20000428 	.word	0x20000428
     7dc:	00003a8d 	.word	0x00003a8d
     7e0:	200004ec 	.word	0x200004ec
     7e4:	ffffcfff 	.word	0xffffcfff
     7e8:	00002be9 	.word	0x00002be9

000007ec <dip_switch_comparison_ready>:

//volatile bool comparisonStarted = false;

void dip_switch_comparison_ready(const struct ac_async_descriptor *const descr, const uint8_t comp, const uint8_t result) {
     7ec:	b510      	push	{r4, lr}
	//gpio_set_pin_level(LED1, false);

	dip_switch_dac_data ^= ((uint16_t) (!result)) << dip_switch_bit_pos;
     7ee:	4253      	negs	r3, r2
     7f0:	415a      	adcs	r2, r3
     7f2:	4917      	ldr	r1, [pc, #92]	; (850 <dip_switch_comparison_ready+0x64>)
     7f4:	780b      	ldrb	r3, [r1, #0]
     7f6:	b2db      	uxtb	r3, r3
     7f8:	409a      	lsls	r2, r3
     7fa:	0013      	movs	r3, r2
     7fc:	884a      	ldrh	r2, [r1, #2]
     7fe:	405a      	eors	r2, r3
     800:	b292      	uxth	r2, r2
     802:	804a      	strh	r2, [r1, #2]
	
	
	if (dip_switch_bit_pos) {
     804:	780b      	ldrb	r3, [r1, #0]
     806:	2b00      	cmp	r3, #0
     808:	d018      	beq.n	83c <dip_switch_comparison_ready+0x50>
		dip_switch_bit_pos--;
     80a:	780b      	ldrb	r3, [r1, #0]
     80c:	3b01      	subs	r3, #1
     80e:	b2db      	uxtb	r3, r3
     810:	700b      	strb	r3, [r1, #0]
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
		dip_switch_data_read(dip_switch_dac_data);
		dip_switch_dac_data = 0;
	}

	dip_switch_dac_data |= 1 << dip_switch_bit_pos;
     812:	4a0f      	ldr	r2, [pc, #60]	; (850 <dip_switch_comparison_ready+0x64>)
     814:	7811      	ldrb	r1, [r2, #0]
     816:	b2c9      	uxtb	r1, r1
     818:	2301      	movs	r3, #1
     81a:	408b      	lsls	r3, r1
     81c:	0019      	movs	r1, r3
     81e:	8853      	ldrh	r3, [r2, #2]
     820:	430b      	orrs	r3, r1
     822:	b29b      	uxth	r3, r3
     824:	8053      	strh	r3, [r2, #2]
	uint16_t dac_data = dip_switch_dac_data;
     826:	8853      	ldrh	r3, [r2, #2]
     828:	b29b      	uxth	r3, r3
#ifndef DAC_UTIL_H_
#define DAC_UTIL_H_

static inline void hri_dac_write_DATA_reg_no_lock(const void *const hw, hri_dac_data_reg_t data)
{
	((Dac *)hw)->DATA.reg = data;
     82a:	4a0a      	ldr	r2, [pc, #40]	; (854 <dip_switch_comparison_ready+0x68>)
     82c:	8113      	strh	r3, [r2, #8]
#define RTC_UTIL_H_


static inline void hri_rtcmode0_set_CTRL_ENABLE_bit_no_lock(const void *const hw)
{
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     82e:	4a0a      	ldr	r2, [pc, #40]	; (858 <dip_switch_comparison_ready+0x6c>)
     830:	8813      	ldrh	r3, [r2, #0]
     832:	2102      	movs	r1, #2
     834:	430b      	orrs	r3, r1
     836:	b29b      	uxth	r3, r3
     838:	8013      	strh	r3, [r2, #0]
	
	//start timer to wait for the sample to be ready
	hri_rtcmode0_set_CTRL_ENABLE_bit_no_lock(RTC);

	//gpio_set_pin_level(LED1, true);
}
     83a:	bd10      	pop	{r4, pc}
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
     83c:	4c04      	ldr	r4, [pc, #16]	; (850 <dip_switch_comparison_ready+0x64>)
     83e:	2309      	movs	r3, #9
     840:	7023      	strb	r3, [r4, #0]
		dip_switch_data_read(dip_switch_dac_data);
     842:	8860      	ldrh	r0, [r4, #2]
     844:	b280      	uxth	r0, r0
     846:	4b05      	ldr	r3, [pc, #20]	; (85c <dip_switch_comparison_ready+0x70>)
     848:	4798      	blx	r3
		dip_switch_dac_data = 0;
     84a:	2300      	movs	r3, #0
     84c:	8063      	strh	r3, [r4, #2]
     84e:	e7e0      	b.n	812 <dip_switch_comparison_ready+0x26>
     850:	20000000 	.word	0x20000000
     854:	42004800 	.word	0x42004800
     858:	40001400 	.word	0x40001400
     85c:	00000769 	.word	0x00000769

00000860 <dip_switch_init>:

void dip_switch_init() {
     860:	b530      	push	{r4, r5, lr}
     862:	b083      	sub	sp, #12
	dac_sync_enable_channel(&DAC_0, 0);
     864:	4c1e      	ldr	r4, [pc, #120]	; (8e0 <dip_switch_init+0x80>)
     866:	2100      	movs	r1, #0
     868:	0020      	movs	r0, r4
     86a:	4b1e      	ldr	r3, [pc, #120]	; (8e4 <dip_switch_init+0x84>)
     86c:	4798      	blx	r3
	uint16_t dac_data = dip_switch_dac_data;
     86e:	4b1e      	ldr	r3, [pc, #120]	; (8e8 <dip_switch_init+0x88>)
     870:	885b      	ldrh	r3, [r3, #2]
     872:	466a      	mov	r2, sp
     874:	3206      	adds	r2, #6
     876:	8013      	strh	r3, [r2, #0]
	dac_sync_write(&DAC_0, 0, &dac_data, 1);
     878:	2301      	movs	r3, #1
     87a:	2100      	movs	r1, #0
     87c:	0020      	movs	r0, r4
     87e:	4c1b      	ldr	r4, [pc, #108]	; (8ec <dip_switch_init+0x8c>)
     880:	47a0      	blx	r4
	ac_async_register_callback(&AC_0, AC_COMPARISON_READY_CB, dip_switch_comparison_ready);
     882:	4d1b      	ldr	r5, [pc, #108]	; (8f0 <dip_switch_init+0x90>)
     884:	4a1b      	ldr	r2, [pc, #108]	; (8f4 <dip_switch_init+0x94>)
     886:	2100      	movs	r1, #0
     888:	0028      	movs	r0, r5
     88a:	4b1b      	ldr	r3, [pc, #108]	; (8f8 <dip_switch_init+0x98>)
     88c:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     88e:	4c1b      	ldr	r4, [pc, #108]	; (8fc <dip_switch_init+0x9c>)
     890:	22c6      	movs	r2, #198	; 0xc6
     892:	0092      	lsls	r2, r2, #2
     894:	58a3      	ldr	r3, [r4, r2]
     896:	21ff      	movs	r1, #255	; 0xff
     898:	438b      	bics	r3, r1
     89a:	393f      	subs	r1, #63	; 0x3f
     89c:	430b      	orrs	r3, r1
     89e:	50a3      	str	r3, [r4, r2]
	//Lower dip switch reading priority. This is a really unimportant task.
	NVIC_SetPriority(AC_IRQn, INTERRUPT_PRIORITY_IDLE);
	ac_async_enable(&AC_0);
     8a0:	0028      	movs	r0, r5
     8a2:	4b17      	ldr	r3, [pc, #92]	; (900 <dip_switch_init+0xa0>)
     8a4:	4798      	blx	r3
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8a6:	2208      	movs	r2, #8
     8a8:	2380      	movs	r3, #128	; 0x80
     8aa:	50e2      	str	r2, [r4, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     8ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8b0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8b4:	3301      	adds	r3, #1
     8b6:	33ff      	adds	r3, #255	; 0xff
     8b8:	50e2      	str	r2, [r4, r3]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     8ba:	20c0      	movs	r0, #192	; 0xc0
     8bc:	0080      	lsls	r0, r0, #2
     8be:	5823      	ldr	r3, [r4, r0]
     8c0:	021b      	lsls	r3, r3, #8
     8c2:	0a1b      	lsrs	r3, r3, #8
     8c4:	21c0      	movs	r1, #192	; 0xc0
     8c6:	0609      	lsls	r1, r1, #24
     8c8:	430b      	orrs	r3, r1
     8ca:	5023      	str	r3, [r4, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8cc:	6022      	str	r2, [r4, #0]
	((Ac *)hw)->COMPCTRL[index].reg |= AC_COMPCTRL_ENABLE;
     8ce:	4b0d      	ldr	r3, [pc, #52]	; (904 <dip_switch_init+0xa4>)
     8d0:	691a      	ldr	r2, [r3, #16]
     8d2:	2101      	movs	r1, #1
     8d4:	430a      	orrs	r2, r1
     8d6:	611a      	str	r2, [r3, #16]
	((Ac *)hw)->CTRLB.reg = data;
     8d8:	7059      	strb	r1, [r3, #1]
	
	//start first comparison
	//ac_async_start_comparison(&AC_0, 0);
	hri_ac_set_COMPCTRL_ENABLE_bit_no_lock(AC, 0);
	hri_ac_write_CTRLB_reg_no_lock(AC, AC_CTRLB_START0);
}
     8da:	b003      	add	sp, #12
     8dc:	bd30      	pop	{r4, r5, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	20000500 	.word	0x20000500
     8e4:	0000157d 	.word	0x0000157d
     8e8:	20000000 	.word	0x20000000
     8ec:	000015b5 	.word	0x000015b5
     8f0:	200004ec 	.word	0x200004ec
     8f4:	000007ed 	.word	0x000007ed
     8f8:	000014fd 	.word	0x000014fd
     8fc:	e000e100 	.word	0xe000e100
     900:	000014d5 	.word	0x000014d5
     904:	42004400 	.word	0x42004400

00000908 <RTC_Handler>:
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit_no_lock(const void *const hw)
{
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <RTC_Handler+0x20>)
     90a:	881a      	ldrh	r2, [r3, #0]
     90c:	2102      	movs	r1, #2
     90e:	438a      	bics	r2, r1
     910:	801a      	strh	r2, [r3, #0]
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     912:	2201      	movs	r2, #1
     914:	721a      	strb	r2, [r3, #8]
}

static inline void hri_rtcmode0_write_COUNT_reg_no_lock(const void *const hw, hri_rtcmode0_count_reg_t data)
{
	((Rtc *)hw)->MODE0.COUNT.reg = data;
     916:	2100      	movs	r1, #0
     918:	6119      	str	r1, [r3, #16]
	((Ac *)hw)->COMPCTRL[index].reg |= AC_COMPCTRL_ENABLE;
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <RTC_Handler+0x24>)
     91c:	6919      	ldr	r1, [r3, #16]
     91e:	4311      	orrs	r1, r2
     920:	6119      	str	r1, [r3, #16]
	((Ac *)hw)->CTRLB.reg = data;
     922:	705a      	strb	r2, [r3, #1]
	
	//start comparison
	//ac_async_start_comparison(&AC_0, 0);
	hri_ac_set_COMPCTRL_ENABLE_bit_no_lock(AC, 0);
	hri_ac_write_CTRLB_reg_no_lock(AC, AC_CTRLB_START0);
}
     924:	4770      	bx	lr
     926:	46c0      	nop			; (mov r8, r8)
     928:	40001400 	.word	0x40001400
     92c:	42004400 	.word	0x42004400

00000930 <display_init>:
const uint16_t DISPLAY_SEGMENTS[DISPLAY_NUMSEGMENTS * 2] = {0b0000000000000011, 0b0000000000001100, 0b0000000000110000, 0b0000000011000000, 0b0000001100000000, 0b0000110000000000, 0b0011000000000000, 0b1100000000000000};

volatile uint8_t display_current_segment = 0;
volatile uint8_t display_current_digits[DISPLAY_NUMSEGMENTS * 2] = {DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK};

void display_init() {
     930:	b510      	push	{r4, lr}
	SPI_0_enable();
     932:	4b0b      	ldr	r3, [pc, #44]	; (960 <display_init+0x30>)
     934:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     936:	4b0b      	ldr	r3, [pc, #44]	; (964 <display_init+0x34>)
     938:	21ce      	movs	r1, #206	; 0xce
     93a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     93c:	2001      	movs	r0, #1
     93e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     940:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     942:	22c0      	movs	r2, #192	; 0xc0
     944:	05d2      	lsls	r2, r2, #23
     946:	2180      	movs	r1, #128	; 0x80
     948:	01c9      	lsls	r1, r1, #7
     94a:	3087      	adds	r0, #135	; 0x87
     94c:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94e:	3020      	adds	r0, #32
     950:	4c05      	ldr	r4, [pc, #20]	; (968 <display_init+0x38>)
     952:	501c      	str	r4, [r3, r0]
     954:	24c0      	movs	r4, #192	; 0xc0
     956:	0624      	lsls	r4, r4, #24
     958:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     95a:	2398      	movs	r3, #152	; 0x98
     95c:	50d1      	str	r1, [r2, r3]
	gpio_set_pin_function(DISPLAY_SS, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_direction(DISPLAY_SS, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(DISPLAY_SS, true);
}
     95e:	bd10      	pop	{r4, pc}
     960:	00002051 	.word	0x00002051
     964:	41004400 	.word	0x41004400
     968:	40004000 	.word	0x40004000

0000096c <display_update_base>:
	for (; i < DISPLAY_NUMSEGMENTS; i++) {
		display_set_digit(i, DISPLAY_VALUE_SPACE);
	}
}

void display_update_base(uint16_t value, uint8_t base) {
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96e:	0006      	movs	r6, r0
     970:	000d      	movs	r5, r1
	uint16_t val = value;
	for (int i = DISPLAY_NUMSEGMENTS - 1; i >= 0; i--) {
     972:	2403      	movs	r4, #3
     974:	e017      	b.n	9a6 <display_update_base+0x3a>
		if (val > 0 || i == DISPLAY_NUMSEGMENTS - 1) {
			display_set_digit(i, val % base);
     976:	0029      	movs	r1, r5
     978:	0030      	movs	r0, r6
     97a:	4b13      	ldr	r3, [pc, #76]	; (9c8 <display_update_base+0x5c>)
     97c:	4798      	blx	r3
	display_current_digits[segment * 2] = DISPLAY_VALUES_OUTER[value_index];
     97e:	22ff      	movs	r2, #255	; 0xff
     980:	0013      	movs	r3, r2
     982:	4023      	ands	r3, r4
     984:	005b      	lsls	r3, r3, #1
     986:	4011      	ands	r1, r2
     988:	4a10      	ldr	r2, [pc, #64]	; (9cc <display_update_base+0x60>)
     98a:	5c57      	ldrb	r7, [r2, r1]
     98c:	4810      	ldr	r0, [pc, #64]	; (9d0 <display_update_base+0x64>)
     98e:	54c7      	strb	r7, [r0, r3]
	display_current_digits[segment * 2 + 1] = DISPLAY_VALUES_INNER[value_index];
     990:	3301      	adds	r3, #1
     992:	1851      	adds	r1, r2, r1
     994:	2228      	movs	r2, #40	; 0x28
     996:	5c8a      	ldrb	r2, [r1, r2]
     998:	54c2      	strb	r2, [r0, r3]
			val /= base;
     99a:	0029      	movs	r1, r5
     99c:	0030      	movs	r0, r6
     99e:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <display_update_base+0x68>)
     9a0:	4798      	blx	r3
     9a2:	b286      	uxth	r6, r0
	for (int i = DISPLAY_NUMSEGMENTS - 1; i >= 0; i--) {
     9a4:	3c01      	subs	r4, #1
     9a6:	2c00      	cmp	r4, #0
     9a8:	db0c      	blt.n	9c4 <display_update_base+0x58>
		if (val > 0 || i == DISPLAY_NUMSEGMENTS - 1) {
     9aa:	2e00      	cmp	r6, #0
     9ac:	d1e3      	bne.n	976 <display_update_base+0xa>
     9ae:	2c03      	cmp	r4, #3
     9b0:	d0e1      	beq.n	976 <display_update_base+0xa>
	display_current_digits[segment * 2] = DISPLAY_VALUES_OUTER[value_index];
     9b2:	23ff      	movs	r3, #255	; 0xff
     9b4:	4023      	ands	r3, r4
     9b6:	005b      	lsls	r3, r3, #1
     9b8:	4a05      	ldr	r2, [pc, #20]	; (9d0 <display_update_base+0x64>)
     9ba:	217f      	movs	r1, #127	; 0x7f
     9bc:	54d1      	strb	r1, [r2, r3]
	display_current_digits[segment * 2 + 1] = DISPLAY_VALUES_INNER[value_index];
     9be:	3301      	adds	r3, #1
     9c0:	54d1      	strb	r1, [r2, r3]
     9c2:	e7ef      	b.n	9a4 <display_update_base+0x38>
		} else {
			display_set_digit(i, DISPLAY_VALUE_SPACE);
		}
	}
}
     9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	00003a8d 	.word	0x00003a8d
     9cc:	000059b8 	.word	0x000059b8
     9d0:	20000004 	.word	0x20000004
     9d4:	000038c1 	.word	0x000038c1

000009d8 <display_update>:

void display_update(uint16_t value) {
     9d8:	b510      	push	{r4, lr}
	display_update_base(value, 10);
     9da:	210a      	movs	r1, #10
     9dc:	4b01      	ldr	r3, [pc, #4]	; (9e4 <display_update+0xc>)
     9de:	4798      	blx	r3
}
     9e0:	bd10      	pop	{r4, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	0000096d 	.word	0x0000096d

000009e8 <display_render>:

void display_update_hex(uint16_t value) {
	display_update_base(value, 16);
}

void display_render() {
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	46d6      	mov	lr, sl
     9ec:	464f      	mov	r7, r9
     9ee:	4646      	mov	r6, r8
     9f0:	b5c0      	push	{r6, r7, lr}
     9f2:	b082      	sub	sp, #8
	display_current_segment = (display_current_segment + 1) % (DISPLAY_NUMSEGMENTS * 2);
     9f4:	4d1e      	ldr	r5, [pc, #120]	; (a70 <display_render+0x88>)
     9f6:	782b      	ldrb	r3, [r5, #0]
     9f8:	3301      	adds	r3, #1
     9fa:	17d9      	asrs	r1, r3, #31
     9fc:	0f49      	lsrs	r1, r1, #29
     9fe:	185a      	adds	r2, r3, r1
     a00:	2307      	movs	r3, #7
     a02:	4013      	ands	r3, r2
     a04:	1a5b      	subs	r3, r3, r1
     a06:	b2db      	uxtb	r3, r3
     a08:	702b      	strb	r3, [r5, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	27c0      	movs	r7, #192	; 0xc0
     a0c:	05ff      	lsls	r7, r7, #23
     a0e:	2380      	movs	r3, #128	; 0x80
     a10:	01db      	lsls	r3, r3, #7
     a12:	4698      	mov	r8, r3
     a14:	2394      	movs	r3, #148	; 0x94
     a16:	4642      	mov	r2, r8
     a18:	50fa      	str	r2, [r7, r3]
	uint8_t block;
	gpio_set_pin_level(DISPLAY_SS, false);
	
	block = DISPLAY_SEGMENTS[display_current_segment] >> 8;
     a1a:	782b      	ldrb	r3, [r5, #0]
     a1c:	4e15      	ldr	r6, [pc, #84]	; (a74 <display_render+0x8c>)
     a1e:	2250      	movs	r2, #80	; 0x50
     a20:	4691      	mov	r9, r2
     a22:	005b      	lsls	r3, r3, #1
     a24:	18f3      	adds	r3, r6, r3
     a26:	5a9b      	ldrh	r3, [r3, r2]
     a28:	466a      	mov	r2, sp
     a2a:	1dd4      	adds	r4, r2, #7
     a2c:	0a1b      	lsrs	r3, r3, #8
     a2e:	71d3      	strb	r3, [r2, #7]
	SPI_0_exchange_block(&block, 1);
     a30:	2101      	movs	r1, #1
     a32:	0020      	movs	r0, r4
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <display_render+0x90>)
     a36:	469a      	mov	sl, r3
     a38:	4798      	blx	r3
	
	block = DISPLAY_SEGMENTS[display_current_segment] & 0xFF;
     a3a:	782b      	ldrb	r3, [r5, #0]
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	18f6      	adds	r6, r6, r3
     a40:	464b      	mov	r3, r9
     a42:	5af3      	ldrh	r3, [r6, r3]
     a44:	7023      	strb	r3, [r4, #0]
	SPI_0_exchange_block(&block, 1);
     a46:	2101      	movs	r1, #1
     a48:	0020      	movs	r0, r4
     a4a:	47d0      	blx	sl
	
	block = display_current_digits[display_current_segment];
     a4c:	782b      	ldrb	r3, [r5, #0]
     a4e:	b2db      	uxtb	r3, r3
     a50:	4a0a      	ldr	r2, [pc, #40]	; (a7c <display_render+0x94>)
     a52:	5cd3      	ldrb	r3, [r2, r3]
     a54:	7023      	strb	r3, [r4, #0]
	SPI_0_exchange_block(&block, 1);
     a56:	2101      	movs	r1, #1
     a58:	0020      	movs	r0, r4
     a5a:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a5c:	2398      	movs	r3, #152	; 0x98
     a5e:	4642      	mov	r2, r8
     a60:	50fa      	str	r2, [r7, r3]
	
	gpio_set_pin_level(DISPLAY_SS, true);
     a62:	b002      	add	sp, #8
     a64:	bc1c      	pop	{r2, r3, r4}
     a66:	4690      	mov	r8, r2
     a68:	4699      	mov	r9, r3
     a6a:	46a2      	mov	sl, r4
     a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	2000042c 	.word	0x2000042c
     a74:	000059b8 	.word	0x000059b8
     a78:	00002069 	.word	0x00002069
     a7c:	20000004 	.word	0x20000004

00000a80 <SERCOM3_Handler>:
volatile unsigned short dmxNextAddress = 1;
volatile unsigned short dmxNextAddress2 = 1;
unsigned short dmxStartAddress = 1;
unsigned short currentChannel = 0;

void SERCOM3_Handler() {
     a80:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     a82:	2280      	movs	r2, #128	; 0x80
     a84:	0512      	lsls	r2, r2, #20
     a86:	23c0      	movs	r3, #192	; 0xc0
     a88:	05db      	lsls	r3, r3, #23
     a8a:	61da      	str	r2, [r3, #28]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     a8c:	4b21      	ldr	r3, [pc, #132]	; (b14 <SERCOM3_Handler+0x94>)
     a8e:	7e1b      	ldrb	r3, [r3, #24]
	gpio_toggle_pin_level(LED1);
	if (hri_sercomusart_get_interrupt_ERROR_bit(SERCOM3)) {
     a90:	09db      	lsrs	r3, r3, #7
     a92:	d013      	beq.n	abc <SERCOM3_Handler+0x3c>
}

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     a94:	4b1f      	ldr	r3, [pc, #124]	; (b14 <SERCOM3_Handler+0x94>)
     a96:	2280      	movs	r2, #128	; 0x80
     a98:	761a      	strb	r2, [r3, #24]
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
     a9a:	3a41      	subs	r2, #65	; 0x41
     a9c:	835a      	strh	r2, [r3, #26]
	return ((Sercom *)hw)->USART.DATA.reg;
     a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		hri_sercomusart_clear_interrupt_ERROR_bit(SERCOM3);
		hri_sercomusart_clear_STATUS_reg(SERCOM3, SERCOM_USART_STATUS_MASK);
		hri_sercomusart_read_DATA_reg(SERCOM3);
		currentChannel = 0;
     aa0:	2200      	movs	r2, #0
     aa2:	4b1d      	ldr	r3, [pc, #116]	; (b18 <SERCOM3_Handler+0x98>)
     aa4:	801a      	strh	r2, [r3, #0]
		unsigned short newAddress = dmxNextAddress;
     aa6:	4a1d      	ldr	r2, [pc, #116]	; (b1c <SERCOM3_Handler+0x9c>)
     aa8:	8813      	ldrh	r3, [r2, #0]
     aaa:	b29b      	uxth	r3, r3
		if (newAddress == dmxNextAddress2) {
     aac:	8852      	ldrh	r2, [r2, #2]
     aae:	b292      	uxth	r2, r2
     ab0:	4293      	cmp	r3, r2
     ab2:	d000      	beq.n	ab6 <SERCOM3_Handler+0x36>
		if (currentChannel == dmxStartAddress + DMX_CHANNELS - 1) {
			dmx_received();
		}
		currentChannel++;
	}
}
     ab4:	bd10      	pop	{r4, pc}
			dmxStartAddress = newAddress;
     ab6:	4a19      	ldr	r2, [pc, #100]	; (b1c <SERCOM3_Handler+0x9c>)
     ab8:	8093      	strh	r3, [r2, #4]
     aba:	e7fb      	b.n	ab4 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     abc:	4b15      	ldr	r3, [pc, #84]	; (b14 <SERCOM3_Handler+0x94>)
     abe:	7e1b      	ldrb	r3, [r3, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(SERCOM3)) {
     ac0:	075b      	lsls	r3, r3, #29
     ac2:	d5f7      	bpl.n	ab4 <SERCOM3_Handler+0x34>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     ac4:	4b13      	ldr	r3, [pc, #76]	; (b14 <SERCOM3_Handler+0x94>)
     ac6:	2204      	movs	r2, #4
     ac8:	761a      	strb	r2, [r3, #24]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     aca:	8b5a      	ldrh	r2, [r3, #26]
		if (hri_sercomusart_read_STATUS_reg(SERCOM3) & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
     acc:	2337      	movs	r3, #55	; 0x37
     ace:	421a      	tst	r2, r3
     ad0:	d117      	bne.n	b02 <SERCOM3_Handler+0x82>
	return ((Sercom *)hw)->USART.DATA.reg;
     ad2:	4b10      	ldr	r3, [pc, #64]	; (b14 <SERCOM3_Handler+0x94>)
     ad4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
		uint8_t dmx_value = hri_sercomusart_read_DATA_reg(SERCOM3);
     ad6:	b2c9      	uxtb	r1, r1
		if (currentChannel >= dmxStartAddress) {
     ad8:	4b0f      	ldr	r3, [pc, #60]	; (b18 <SERCOM3_Handler+0x98>)
     ada:	881a      	ldrh	r2, [r3, #0]
     adc:	4b0f      	ldr	r3, [pc, #60]	; (b1c <SERCOM3_Handler+0x9c>)
     ade:	889b      	ldrh	r3, [r3, #4]
     ae0:	429a      	cmp	r2, r3
     ae2:	d306      	bcc.n	af2 <SERCOM3_Handler+0x72>
			if (currentChannel < dmxStartAddress + DMX_CHANNELS) {
     ae4:	0018      	movs	r0, r3
     ae6:	3012      	adds	r0, #18
     ae8:	4282      	cmp	r2, r0
     aea:	da02      	bge.n	af2 <SERCOM3_Handler+0x72>
				dmx[currentChannel - dmxStartAddress] = dmx_value;
     aec:	1ad0      	subs	r0, r2, r3
     aee:	4c0c      	ldr	r4, [pc, #48]	; (b20 <SERCOM3_Handler+0xa0>)
     af0:	5421      	strb	r1, [r4, r0]
		if (currentChannel == dmxStartAddress + DMX_CHANNELS - 1) {
     af2:	3311      	adds	r3, #17
     af4:	429a      	cmp	r2, r3
     af6:	d009      	beq.n	b0c <SERCOM3_Handler+0x8c>
		currentChannel++;
     af8:	4a07      	ldr	r2, [pc, #28]	; (b18 <SERCOM3_Handler+0x98>)
     afa:	8813      	ldrh	r3, [r2, #0]
     afc:	3301      	adds	r3, #1
     afe:	8013      	strh	r3, [r2, #0]
     b00:	e7d8      	b.n	ab4 <SERCOM3_Handler+0x34>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <SERCOM3_Handler+0x94>)
     b04:	223f      	movs	r2, #63	; 0x3f
     b06:	835a      	strh	r2, [r3, #26]
	return ((Sercom *)hw)->USART.DATA.reg;
     b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b0a:	e7d3      	b.n	ab4 <SERCOM3_Handler+0x34>
			dmx_received();
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <SERCOM3_Handler+0xa4>)
     b0e:	4798      	blx	r3
     b10:	e7f2      	b.n	af8 <SERCOM3_Handler+0x78>
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	42001400 	.word	0x42001400
     b18:	2000042e 	.word	0x2000042e
     b1c:	2000000c 	.word	0x2000000c
     b20:	200004bc 	.word	0x200004bc
     b24:	00002c19 	.word	0x00002c19

00000b28 <dmx_set_address>:

void dmx_set_address(unsigned short address) {
	dmxNextAddress = address;
     b28:	4b01      	ldr	r3, [pc, #4]	; (b30 <dmx_set_address+0x8>)
     b2a:	8018      	strh	r0, [r3, #0]
	dmxNextAddress2 = address;
     b2c:	8058      	strh	r0, [r3, #2]
}
     b2e:	4770      	bx	lr
     b30:	2000000c 	.word	0x2000000c

00000b34 <dmx_init>:

void dmx_init() {
     b34:	b510      	push	{r4, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b36:	4b0b      	ldr	r3, [pc, #44]	; (b64 <dmx_init+0x30>)
     b38:	2180      	movs	r1, #128	; 0x80
     b3a:	0149      	lsls	r1, r1, #5
     b3c:	2280      	movs	r2, #128	; 0x80
     b3e:	5099      	str	r1, [r3, r2]
  __ASM volatile ("dsb 0xF":::"memory");
     b40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b44:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b48:	3201      	adds	r2, #1
     b4a:	32ff      	adds	r2, #255	; 0xff
     b4c:	5099      	str	r1, [r3, r2]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     b4e:	20c3      	movs	r0, #195	; 0xc3
     b50:	0080      	lsls	r0, r0, #2
     b52:	581a      	ldr	r2, [r3, r0]
     b54:	24ff      	movs	r4, #255	; 0xff
     b56:	43a2      	bics	r2, r4
     b58:	3cbf      	subs	r4, #191	; 0xbf
     b5a:	4322      	orrs	r2, r4
     b5c:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b5e:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(SERCOM3_IRQn);
	NVIC_ClearPendingIRQ(SERCOM3_IRQn);
	NVIC_SetPriority(SERCOM3_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(SERCOM3_IRQn);
     b60:	bd10      	pop	{r4, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	e000e100 	.word	0xe000e100

00000b68 <EXTERNAL_IRQ_0_init>:
struct ac_async_descriptor AC_0;

struct dac_sync_descriptor DAC_0;

void EXTERNAL_IRQ_0_init(void)
{
     b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b6a:	46de      	mov	lr, fp
     b6c:	4657      	mov	r7, sl
     b6e:	464e      	mov	r6, r9
     b70:	4645      	mov	r5, r8
     b72:	b5e0      	push	{r5, r6, r7, lr}
     b74:	4a49      	ldr	r2, [pc, #292]	; (c9c <EXTERNAL_IRQ_0_init+0x134>)
     b76:	4b4a      	ldr	r3, [pc, #296]	; (ca0 <EXTERNAL_IRQ_0_init+0x138>)
     b78:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b7a:	22c0      	movs	r2, #192	; 0xc0
     b7c:	05d2      	lsls	r2, r2, #23
     b7e:	2184      	movs	r1, #132	; 0x84
     b80:	2540      	movs	r5, #64	; 0x40
     b82:	5055      	str	r5, [r2, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b84:	4b47      	ldr	r3, [pc, #284]	; (ca4 <EXTERNAL_IRQ_0_init+0x13c>)
     b86:	20a8      	movs	r0, #168	; 0xa8
     b88:	4c47      	ldr	r4, [pc, #284]	; (ca8 <EXTERNAL_IRQ_0_init+0x140>)
     b8a:	501c      	str	r4, [r3, r0]
     b8c:	4c47      	ldr	r4, [pc, #284]	; (cac <EXTERNAL_IRQ_0_init+0x144>)
     b8e:	46a0      	mov	r8, r4
     b90:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b92:	5055      	str	r5, [r2, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b94:	24c6      	movs	r4, #198	; 0xc6
     b96:	46a1      	mov	r9, r4
     b98:	5d1c      	ldrb	r4, [r3, r4]
     b9a:	2604      	movs	r6, #4
     b9c:	46b4      	mov	ip, r6
     b9e:	4666      	mov	r6, ip
     ba0:	4334      	orrs	r4, r6
     ba2:	b2e4      	uxtb	r4, r4
     ba4:	464e      	mov	r6, r9
     ba6:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ba8:	2798      	movs	r7, #152	; 0x98
     baa:	51d5      	str	r5, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bac:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bae:	3ec5      	subs	r6, #197	; 0xc5
     bb0:	43b4      	bics	r4, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bb2:	3d3f      	subs	r5, #63	; 0x3f
     bb4:	432c      	orrs	r4, r5
     bb6:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb8:	464d      	mov	r5, r9
     bba:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bbc:	24b3      	movs	r4, #179	; 0xb3
     bbe:	46a1      	mov	r9, r4
     bc0:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bc2:	3db7      	subs	r5, #183	; 0xb7
     bc4:	43ac      	bics	r4, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc6:	464d      	mov	r5, r9
     bc8:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bca:	2480      	movs	r4, #128	; 0x80
     bcc:	46a3      	mov	fp, r4
     bce:	5054      	str	r4, [r2, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bd0:	4c37      	ldr	r4, [pc, #220]	; (cb0 <EXTERNAL_IRQ_0_init+0x148>)
     bd2:	501c      	str	r4, [r3, r0]
     bd4:	4644      	mov	r4, r8
     bd6:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bd8:	465c      	mov	r4, fp
     bda:	5054      	str	r4, [r2, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     bdc:	3447      	adds	r4, #71	; 0x47
     bde:	46a2      	mov	sl, r4
     be0:	5d1c      	ldrb	r4, [r3, r4]
     be2:	4665      	mov	r5, ip
     be4:	432c      	orrs	r4, r5
     be6:	b2e4      	uxtb	r4, r4
     be8:	4655      	mov	r5, sl
     bea:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bec:	465c      	mov	r4, fp
     bee:	51d4      	str	r4, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bf0:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bf2:	43b4      	bics	r4, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bf4:	3dc6      	subs	r5, #198	; 0xc6
     bf6:	432c      	orrs	r4, r5
     bf8:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bfa:	4655      	mov	r5, sl
     bfc:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bfe:	464c      	mov	r4, r9
     c00:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c02:	3db8      	subs	r5, #184	; 0xb8
     c04:	46ab      	mov	fp, r5
     c06:	402c      	ands	r4, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c08:	464d      	mov	r5, r9
     c0a:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c0c:	2480      	movs	r4, #128	; 0x80
     c0e:	0164      	lsls	r4, r4, #5
     c10:	46a2      	mov	sl, r4
     c12:	5054      	str	r4, [r2, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c14:	4c27      	ldr	r4, [pc, #156]	; (cb4 <EXTERNAL_IRQ_0_init+0x14c>)
     c16:	501c      	str	r4, [r3, r0]
     c18:	4644      	mov	r4, r8
     c1a:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c1c:	4654      	mov	r4, sl
     c1e:	5054      	str	r4, [r2, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c20:	24cc      	movs	r4, #204	; 0xcc
     c22:	46a1      	mov	r9, r4
     c24:	5d1c      	ldrb	r4, [r3, r4]
     c26:	4665      	mov	r5, ip
     c28:	432c      	orrs	r4, r5
     c2a:	b2e4      	uxtb	r4, r4
     c2c:	464d      	mov	r5, r9
     c2e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c30:	4654      	mov	r4, sl
     c32:	51d4      	str	r4, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c34:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c36:	43b4      	bics	r4, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c38:	3dcb      	subs	r5, #203	; 0xcb
     c3a:	432c      	orrs	r4, r5
     c3c:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3e:	464d      	mov	r5, r9
     c40:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c42:	24b6      	movs	r4, #182	; 0xb6
     c44:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c46:	3ca7      	subs	r4, #167	; 0xa7
     c48:	43a5      	bics	r5, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4a:	1c2c      	adds	r4, r5, #0
     c4c:	25b6      	movs	r5, #182	; 0xb6
     c4e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c50:	2480      	movs	r4, #128	; 0x80
     c52:	01a4      	lsls	r4, r4, #6
     c54:	46a1      	mov	r9, r4
     c56:	5054      	str	r4, [r2, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c58:	4c17      	ldr	r4, [pc, #92]	; (cb8 <EXTERNAL_IRQ_0_init+0x150>)
     c5a:	501c      	str	r4, [r3, r0]
     c5c:	4644      	mov	r4, r8
     c5e:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c60:	4648      	mov	r0, r9
     c62:	5050      	str	r0, [r2, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c64:	3149      	adds	r1, #73	; 0x49
     c66:	5c58      	ldrb	r0, [r3, r1]
     c68:	4664      	mov	r4, ip
     c6a:	4320      	orrs	r0, r4
     c6c:	b2c0      	uxtb	r0, r0
     c6e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c70:	4648      	mov	r0, r9
     c72:	51d0      	str	r0, [r2, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c74:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c76:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c78:	3db5      	subs	r5, #181	; 0xb5
     c7a:	4315      	orrs	r5, r2
     c7c:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7e:	545d      	strb	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c80:	22b6      	movs	r2, #182	; 0xb6
     c82:	5c9a      	ldrb	r2, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c84:	4659      	mov	r1, fp
     c86:	400a      	ands	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c88:	31a7      	adds	r1, #167	; 0xa7
     c8a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BTN_EXIT, PINMUX_PB13A_EIC_EXTINT13);

	ext_irq_init();
     c8c:	4b0b      	ldr	r3, [pc, #44]	; (cbc <EXTERNAL_IRQ_0_init+0x154>)
     c8e:	4798      	blx	r3
}
     c90:	bc3c      	pop	{r2, r3, r4, r5}
     c92:	4690      	mov	r8, r2
     c94:	4699      	mov	r9, r3
     c96:	46a2      	mov	sl, r4
     c98:	46ab      	mov	fp, r5
     c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c9c:	00004005 	.word	0x00004005
     ca0:	40000c00 	.word	0x40000c00
     ca4:	41004400 	.word	0x41004400
     ca8:	40020040 	.word	0x40020040
     cac:	c0020000 	.word	0xc0020000
     cb0:	40020080 	.word	0x40020080
     cb4:	40021000 	.word	0x40021000
     cb8:	40022000 	.word	0x40022000
     cbc:	000016a1 	.word	0x000016a1

00000cc0 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     cc0:	4a02      	ldr	r2, [pc, #8]	; (ccc <FLASH_0_CLOCK_init+0xc>)
     cc2:	69d3      	ldr	r3, [r2, #28]
     cc4:	2104      	movs	r1, #4
     cc6:	430b      	orrs	r3, r1
     cc8:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     cca:	4770      	bx	lr
     ccc:	40000400 	.word	0x40000400

00000cd0 <FLASH_0_init>:

void FLASH_0_init(void)
{
     cd0:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     cd2:	4b03      	ldr	r3, [pc, #12]	; (ce0 <FLASH_0_init+0x10>)
     cd4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     cd6:	4903      	ldr	r1, [pc, #12]	; (ce4 <FLASH_0_init+0x14>)
     cd8:	4803      	ldr	r0, [pc, #12]	; (ce8 <FLASH_0_init+0x18>)
     cda:	4b04      	ldr	r3, [pc, #16]	; (cec <FLASH_0_init+0x1c>)
     cdc:	4798      	blx	r3
}
     cde:	bd10      	pop	{r4, pc}
     ce0:	00000cc1 	.word	0x00000cc1
     ce4:	41004000 	.word	0x41004000
     ce8:	200004d0 	.word	0x200004d0
     cec:	000017d5 	.word	0x000017d5

00000cf0 <USART_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     cf0:	4a04      	ldr	r2, [pc, #16]	; (d04 <USART_0_CLOCK_init+0x14>)
     cf2:	6a13      	ldr	r3, [r2, #32]
     cf4:	2120      	movs	r1, #32
     cf6:	430b      	orrs	r3, r1
     cf8:	6213      	str	r3, [r2, #32]
     cfa:	4a03      	ldr	r2, [pc, #12]	; (d08 <USART_0_CLOCK_init+0x18>)
     cfc:	4b03      	ldr	r3, [pc, #12]	; (d0c <USART_0_CLOCK_init+0x1c>)
     cfe:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     d00:	4770      	bx	lr
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	40000400 	.word	0x40000400
     d08:	00004017 	.word	0x00004017
     d0c:	40000c00 	.word	0x40000c00

00000d10 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     d10:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d12:	4b0f      	ldr	r3, [pc, #60]	; (d50 <USART_0_PORT_init+0x40>)
     d14:	2256      	movs	r2, #86	; 0x56
     d16:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d18:	2501      	movs	r5, #1
     d1a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d1c:	2401      	movs	r4, #1
     d1e:	4321      	orrs	r1, r4
     d20:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d22:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d24:	203b      	movs	r0, #59	; 0x3b
     d26:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d28:	3a47      	subs	r2, #71	; 0x47
     d2a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     d2c:	2202      	movs	r2, #2
     d2e:	4311      	orrs	r1, r2
     d30:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d32:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d34:	2157      	movs	r1, #87	; 0x57
     d36:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d38:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d3a:	4322      	orrs	r2, r4
     d3c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d3e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d40:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d42:	3948      	subs	r1, #72	; 0x48
     d44:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     d46:	2120      	movs	r1, #32
     d48:	430a      	orrs	r2, r1
     d4a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d4c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(DMX_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(DMX_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     d4e:	bd30      	pop	{r4, r5, pc}
     d50:	41004400 	.word	0x41004400

00000d54 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d56:	24c0      	movs	r4, #192	; 0xc0
     d58:	05e4      	lsls	r4, r4, #23
     d5a:	2380      	movs	r3, #128	; 0x80
     d5c:	015b      	lsls	r3, r3, #5
     d5e:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d60:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d62:	4b22      	ldr	r3, [pc, #136]	; (dec <SPI_0_PORT_init+0x98>)
     d64:	4a22      	ldr	r2, [pc, #136]	; (df0 <SPI_0_PORT_init+0x9c>)
     d66:	629a      	str	r2, [r3, #40]	; 0x28
     d68:	20c0      	movs	r0, #192	; 0xc0
     d6a:	0600      	lsls	r0, r0, #24
     d6c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d6e:	214c      	movs	r1, #76	; 0x4c
     d70:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d72:	2701      	movs	r7, #1
     d74:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d76:	2501      	movs	r5, #1
     d78:	432a      	orrs	r2, r5
     d7a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d7e:	3916      	subs	r1, #22
     d80:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d82:	260f      	movs	r6, #15
     d84:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
     d86:	2603      	movs	r6, #3
     d88:	4332      	orrs	r2, r6
     d8a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8c:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8e:	2280      	movs	r2, #128	; 0x80
     d90:	0192      	lsls	r2, r2, #6
     d92:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d94:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d96:	4a17      	ldr	r2, [pc, #92]	; (df4 <SPI_0_PORT_init+0xa0>)
     d98:	629a      	str	r2, [r3, #40]	; 0x28
     d9a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d9c:	204d      	movs	r0, #77	; 0x4d
     d9e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     da0:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     da2:	432a      	orrs	r2, r5
     da4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da6:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     da8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     daa:	260f      	movs	r6, #15
     dac:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     dae:	2230      	movs	r2, #48	; 0x30
     db0:	4310      	orrs	r0, r2
     db2:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     db4:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     db6:	2180      	movs	r1, #128	; 0x80
     db8:	0209      	lsls	r1, r1, #8
     dba:	2284      	movs	r2, #132	; 0x84
     dbc:	50a1      	str	r1, [r4, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dbe:	3224      	adds	r2, #36	; 0x24
     dc0:	490d      	ldr	r1, [pc, #52]	; (df8 <SPI_0_PORT_init+0xa4>)
     dc2:	5099      	str	r1, [r3, r2]
     dc4:	490d      	ldr	r1, [pc, #52]	; (dfc <SPI_0_PORT_init+0xa8>)
     dc6:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dc8:	3227      	adds	r2, #39	; 0x27
     dca:	5c99      	ldrb	r1, [r3, r2]
     dcc:	2004      	movs	r0, #4
     dce:	4381      	bics	r1, r0
     dd0:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dd4:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dd6:	4329      	orrs	r1, r5
     dd8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dda:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ddc:	21b7      	movs	r1, #183	; 0xb7
     dde:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     de0:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     de2:	2020      	movs	r0, #32
     de4:	4302      	orrs	r2, r0
     de6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     de8:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DISPLAY_MISO, PINMUX_PB15C_SERCOM4_PAD3);
}
     dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dec:	41004400 	.word	0x41004400
     df0:	40001000 	.word	0x40001000
     df4:	40002000 	.word	0x40002000
     df8:	40028000 	.word	0x40028000
     dfc:	c0020000 	.word	0xc0020000

00000e00 <SPI_0_CLOCK_init>:
     e00:	4a04      	ldr	r2, [pc, #16]	; (e14 <SPI_0_CLOCK_init+0x14>)
     e02:	6a13      	ldr	r3, [r2, #32]
     e04:	2140      	movs	r1, #64	; 0x40
     e06:	430b      	orrs	r3, r1
     e08:	6213      	str	r3, [r2, #32]
     e0a:	4a03      	ldr	r2, [pc, #12]	; (e18 <SPI_0_CLOCK_init+0x18>)
     e0c:	4b03      	ldr	r3, [pc, #12]	; (e1c <SPI_0_CLOCK_init+0x1c>)
     e0e:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
     e10:	4770      	bx	lr
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	40000400 	.word	0x40000400
     e18:	00004018 	.word	0x00004018
     e1c:	40000c00 	.word	0x40000c00

00000e20 <TIMER_8_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     e20:	4a04      	ldr	r2, [pc, #16]	; (e34 <TIMER_8_CLOCK_init+0x14>)
     e22:	6993      	ldr	r3, [r2, #24]
     e24:	2120      	movs	r1, #32
     e26:	430b      	orrs	r3, r1
     e28:	6193      	str	r3, [r2, #24]
     e2a:	4a03      	ldr	r2, [pc, #12]	; (e38 <TIMER_8_CLOCK_init+0x18>)
     e2c:	4b03      	ldr	r3, [pc, #12]	; (e3c <TIMER_8_CLOCK_init+0x1c>)
     e2e:	805a      	strh	r2, [r3, #2]
 */
void TIMER_8_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     e30:	4770      	bx	lr
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	40000400 	.word	0x40000400
     e38:	00004004 	.word	0x00004004
     e3c:	40000c00 	.word	0x40000c00

00000e40 <TIMER_3_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     e40:	4a04      	ldr	r2, [pc, #16]	; (e54 <TIMER_3_CLOCK_init+0x14>)
     e42:	6a11      	ldr	r1, [r2, #32]
     e44:	2380      	movs	r3, #128	; 0x80
     e46:	011b      	lsls	r3, r3, #4
     e48:	430b      	orrs	r3, r1
     e4a:	6213      	str	r3, [r2, #32]
     e4c:	4a02      	ldr	r2, [pc, #8]	; (e58 <TIMER_3_CLOCK_init+0x18>)
     e4e:	4b03      	ldr	r3, [pc, #12]	; (e5c <TIMER_3_CLOCK_init+0x1c>)
     e50:	805a      	strh	r2, [r3, #2]
void TIMER_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);

	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     e52:	4770      	bx	lr
     e54:	40000400 	.word	0x40000400
     e58:	0000401b 	.word	0x0000401b
     e5c:	40000c00 	.word	0x40000c00

00000e60 <TIMER_5_CLOCK_init>:
     e60:	4a04      	ldr	r2, [pc, #16]	; (e74 <TIMER_5_CLOCK_init+0x14>)
     e62:	6a11      	ldr	r1, [r2, #32]
     e64:	2380      	movs	r3, #128	; 0x80
     e66:	015b      	lsls	r3, r3, #5
     e68:	430b      	orrs	r3, r1
     e6a:	6213      	str	r3, [r2, #32]
     e6c:	4a02      	ldr	r2, [pc, #8]	; (e78 <TIMER_5_CLOCK_init+0x18>)
     e6e:	4b03      	ldr	r3, [pc, #12]	; (e7c <TIMER_5_CLOCK_init+0x1c>)
     e70:	805a      	strh	r2, [r3, #2]
void TIMER_5_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);

	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);
}
     e72:	4770      	bx	lr
     e74:	40000400 	.word	0x40000400
     e78:	0000401c 	.word	0x0000401c
     e7c:	40000c00 	.word	0x40000c00

00000e80 <TIMER_6_CLOCK_init>:
     e80:	4a04      	ldr	r2, [pc, #16]	; (e94 <TIMER_6_CLOCK_init+0x14>)
     e82:	6a11      	ldr	r1, [r2, #32]
     e84:	2380      	movs	r3, #128	; 0x80
     e86:	019b      	lsls	r3, r3, #6
     e88:	430b      	orrs	r3, r1
     e8a:	6213      	str	r3, [r2, #32]
     e8c:	4a02      	ldr	r2, [pc, #8]	; (e98 <TIMER_6_CLOCK_init+0x18>)
     e8e:	4b03      	ldr	r3, [pc, #12]	; (e9c <TIMER_6_CLOCK_init+0x1c>)
     e90:	805a      	strh	r2, [r3, #2]
void TIMER_6_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC5);

	_gclk_enable_channel(TC5_GCLK_ID, CONF_GCLK_TC5_SRC);
}
     e92:	4770      	bx	lr
     e94:	40000400 	.word	0x40000400
     e98:	0000401c 	.word	0x0000401c
     e9c:	40000c00 	.word	0x40000c00

00000ea0 <TIMER_4_CLOCK_init>:
     ea0:	4a04      	ldr	r2, [pc, #16]	; (eb4 <TIMER_4_CLOCK_init+0x14>)
     ea2:	6a11      	ldr	r1, [r2, #32]
     ea4:	2380      	movs	r3, #128	; 0x80
     ea6:	01db      	lsls	r3, r3, #7
     ea8:	430b      	orrs	r3, r1
     eaa:	6213      	str	r3, [r2, #32]
     eac:	4a02      	ldr	r2, [pc, #8]	; (eb8 <TIMER_4_CLOCK_init+0x18>)
     eae:	4b03      	ldr	r3, [pc, #12]	; (ebc <TIMER_4_CLOCK_init+0x1c>)
     eb0:	805a      	strh	r2, [r3, #2]
void TIMER_4_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC6);

	_gclk_enable_channel(TC6_GCLK_ID, CONF_GCLK_TC6_SRC);
}
     eb2:	4770      	bx	lr
     eb4:	40000400 	.word	0x40000400
     eb8:	0000401d 	.word	0x0000401d
     ebc:	40000c00 	.word	0x40000c00

00000ec0 <TIMER_7_CLOCK_init>:
     ec0:	4a04      	ldr	r2, [pc, #16]	; (ed4 <TIMER_7_CLOCK_init+0x14>)
     ec2:	6a11      	ldr	r1, [r2, #32]
     ec4:	2380      	movs	r3, #128	; 0x80
     ec6:	021b      	lsls	r3, r3, #8
     ec8:	430b      	orrs	r3, r1
     eca:	6213      	str	r3, [r2, #32]
     ecc:	4a02      	ldr	r2, [pc, #8]	; (ed8 <TIMER_7_CLOCK_init+0x18>)
     ece:	4b03      	ldr	r3, [pc, #12]	; (edc <TIMER_7_CLOCK_init+0x1c>)
     ed0:	805a      	strh	r2, [r3, #2]
void TIMER_7_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC7);

	_gclk_enable_channel(TC7_GCLK_ID, CONF_GCLK_TC7_SRC);
}
     ed2:	4770      	bx	lr
     ed4:	40000400 	.word	0x40000400
     ed8:	0000401d 	.word	0x0000401d
     edc:	40000c00 	.word	0x40000c00

00000ee0 <AC_0_PORT_init>:

void AC_0_PORT_init(void)
{
     ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee2:	46c6      	mov	lr, r8
     ee4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ee6:	27c0      	movs	r7, #192	; 0xc0
     ee8:	05ff      	lsls	r7, r7, #23
     eea:	2310      	movs	r3, #16
     eec:	607b      	str	r3, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eee:	4b20      	ldr	r3, [pc, #128]	; (f70 <AC_0_PORT_init+0x90>)
     ef0:	4a20      	ldr	r2, [pc, #128]	; (f74 <AC_0_PORT_init+0x94>)
     ef2:	629a      	str	r2, [r3, #40]	; 0x28
     ef4:	26c0      	movs	r6, #192	; 0xc0
     ef6:	0636      	lsls	r6, r6, #24
     ef8:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     efa:	2144      	movs	r1, #68	; 0x44
     efc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     efe:	2501      	movs	r5, #1
     f00:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f02:	2001      	movs	r0, #1
     f04:	4302      	orrs	r2, r0
     f06:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f08:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f0a:	2232      	movs	r2, #50	; 0x32
     f0c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f0e:	240f      	movs	r4, #15
     f10:	46a0      	mov	r8, r4
     f12:	43a1      	bics	r1, r4
	tmp |= PORT_PMUX_PMUXE(data);
     f14:	4301      	orrs	r1, r0
     f16:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f18:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f1a:	2120      	movs	r1, #32
     f1c:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1e:	4916      	ldr	r1, [pc, #88]	; (f78 <AC_0_PORT_init+0x98>)
     f20:	6299      	str	r1, [r3, #40]	; 0x28
     f22:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f24:	2145      	movs	r1, #69	; 0x45
     f26:	468c      	mov	ip, r1
     f28:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f2a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f2c:	4301      	orrs	r1, r0
     f2e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f30:	4664      	mov	r4, ip
     f32:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f34:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f36:	3c36      	subs	r4, #54	; 0x36
     f38:	4021      	ands	r1, r4
	tmp |= PORT_PMUX_PMUXO(data);
     f3a:	2410      	movs	r4, #16
     f3c:	46a4      	mov	ip, r4
     f3e:	4664      	mov	r4, ip
     f40:	4321      	orrs	r1, r4
     f42:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f44:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f46:	320e      	adds	r2, #14
     f48:	607a      	str	r2, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f4a:	4a0c      	ldr	r2, [pc, #48]	; (f7c <AC_0_PORT_init+0x9c>)
     f4c:	629a      	str	r2, [r3, #40]	; 0x28
     f4e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f50:	2246      	movs	r2, #70	; 0x46
     f52:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f54:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f56:	4301      	orrs	r1, r0
     f58:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f5a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f5c:	2133      	movs	r1, #51	; 0x33
     f5e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f60:	4644      	mov	r4, r8
     f62:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     f64:	4302      	orrs	r2, r0
     f66:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f68:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(CONFIG3, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(CONFIG3, PINMUX_PA06B_AC_AIN2);
}
     f6a:	bc04      	pop	{r2}
     f6c:	4690      	mov	r8, r2
     f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f70:	41004400 	.word	0x41004400
     f74:	40000010 	.word	0x40000010
     f78:	40000020 	.word	0x40000020
     f7c:	40000040 	.word	0x40000040

00000f80 <AC_0_CLOCK_init>:
     f80:	4a05      	ldr	r2, [pc, #20]	; (f98 <AC_0_CLOCK_init+0x18>)
     f82:	6a11      	ldr	r1, [r2, #32]
     f84:	2380      	movs	r3, #128	; 0x80
     f86:	029b      	lsls	r3, r3, #10
     f88:	430b      	orrs	r3, r1
     f8a:	6213      	str	r3, [r2, #32]
     f8c:	4b03      	ldr	r3, [pc, #12]	; (f9c <AC_0_CLOCK_init+0x1c>)
     f8e:	4a04      	ldr	r2, [pc, #16]	; (fa0 <AC_0_CLOCK_init+0x20>)
     f90:	805a      	strh	r2, [r3, #2]
     f92:	4a04      	ldr	r2, [pc, #16]	; (fa4 <AC_0_CLOCK_init+0x24>)
     f94:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBC, AC);
	_gclk_enable_channel(AC_GCLK_ID_DIG, CONF_GCLK_DIG_AC_SRC);
	_gclk_enable_channel(AC_GCLK_ID_ANA, CONF_GCLK_ANA_AC_SRC);
}
     f96:	4770      	bx	lr
     f98:	40000400 	.word	0x40000400
     f9c:	40000c00 	.word	0x40000c00
     fa0:	0000401f 	.word	0x0000401f
     fa4:	00004020 	.word	0x00004020

00000fa8 <AC_0_init>:

void AC_0_init(void)
{
     fa8:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <AC_0_init+0x14>)
     fac:	4798      	blx	r3
	ac_async_init(&AC_0, AC);
     fae:	4904      	ldr	r1, [pc, #16]	; (fc0 <AC_0_init+0x18>)
     fb0:	4804      	ldr	r0, [pc, #16]	; (fc4 <AC_0_init+0x1c>)
     fb2:	4b05      	ldr	r3, [pc, #20]	; (fc8 <AC_0_init+0x20>)
     fb4:	4798      	blx	r3
	AC_0_PORT_init();
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <AC_0_init+0x24>)
     fb8:	4798      	blx	r3
}
     fba:	bd10      	pop	{r4, pc}
     fbc:	00000f81 	.word	0x00000f81
     fc0:	42004400 	.word	0x42004400
     fc4:	200004ec 	.word	0x200004ec
     fc8:	00001491 	.word	0x00001491
     fcc:	00000ee1 	.word	0x00000ee1

00000fd0 <DAC_0_CLOCK_init>:
     fd0:	4a04      	ldr	r2, [pc, #16]	; (fe4 <DAC_0_CLOCK_init+0x14>)
     fd2:	6a11      	ldr	r1, [r2, #32]
     fd4:	2380      	movs	r3, #128	; 0x80
     fd6:	02db      	lsls	r3, r3, #11
     fd8:	430b      	orrs	r3, r1
     fda:	6213      	str	r3, [r2, #32]
     fdc:	4a02      	ldr	r2, [pc, #8]	; (fe8 <DAC_0_CLOCK_init+0x18>)
     fde:	4b03      	ldr	r3, [pc, #12]	; (fec <DAC_0_CLOCK_init+0x1c>)
     fe0:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     fe2:	4770      	bx	lr
     fe4:	40000400 	.word	0x40000400
     fe8:	00004021 	.word	0x00004021
     fec:	40000c00 	.word	0x40000c00

00000ff0 <DAC_0_init>:

void DAC_0_init(void)
{
     ff0:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     ff2:	4b03      	ldr	r3, [pc, #12]	; (1000 <DAC_0_init+0x10>)
     ff4:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     ff6:	4903      	ldr	r1, [pc, #12]	; (1004 <DAC_0_init+0x14>)
     ff8:	4803      	ldr	r0, [pc, #12]	; (1008 <DAC_0_init+0x18>)
     ffa:	4b04      	ldr	r3, [pc, #16]	; (100c <DAC_0_init+0x1c>)
     ffc:	4798      	blx	r3
	DAC_0_PORT_init();
}
     ffe:	bd10      	pop	{r4, pc}
    1000:	00000fd1 	.word	0x00000fd1
    1004:	42004800 	.word	0x42004800
    1008:	20000500 	.word	0x20000500
    100c:	0000152d 	.word	0x0000152d

00001010 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1010:	b510      	push	{r4, lr}
    1012:	4a05      	ldr	r2, [pc, #20]	; (1028 <EVENT_SYSTEM_0_init+0x18>)
    1014:	4b05      	ldr	r3, [pc, #20]	; (102c <EVENT_SYSTEM_0_init+0x1c>)
    1016:	805a      	strh	r2, [r3, #2]
    1018:	4a05      	ldr	r2, [pc, #20]	; (1030 <EVENT_SYSTEM_0_init+0x20>)
    101a:	6a13      	ldr	r3, [r2, #32]
    101c:	2102      	movs	r1, #2
    101e:	430b      	orrs	r3, r1
    1020:	6213      	str	r3, [r2, #32]
	_gclk_enable_channel(EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC);

	_pm_enable_bus_clock(PM_BUS_APBC, EVSYS);

	event_system_init();
    1022:	4b04      	ldr	r3, [pc, #16]	; (1034 <EVENT_SYSTEM_0_init+0x24>)
    1024:	4798      	blx	r3
}
    1026:	bd10      	pop	{r4, pc}
    1028:	00004007 	.word	0x00004007
    102c:	40000c00 	.word	0x40000c00
    1030:	40000400 	.word	0x40000400
    1034:	00001651 	.word	0x00001651

00001038 <TIMER_1_CLOCK_init>:
    1038:	4a04      	ldr	r2, [pc, #16]	; (104c <TIMER_1_CLOCK_init+0x14>)
    103a:	6a11      	ldr	r1, [r2, #32]
    103c:	2380      	movs	r3, #128	; 0x80
    103e:	005b      	lsls	r3, r3, #1
    1040:	430b      	orrs	r3, r1
    1042:	6213      	str	r3, [r2, #32]
    1044:	4a02      	ldr	r2, [pc, #8]	; (1050 <TIMER_1_CLOCK_init+0x18>)
    1046:	4b03      	ldr	r3, [pc, #12]	; (1054 <TIMER_1_CLOCK_init+0x1c>)
    1048:	805a      	strh	r2, [r3, #2]

void TIMER_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
    104a:	4770      	bx	lr
    104c:	40000400 	.word	0x40000400
    1050:	0000401a 	.word	0x0000401a
    1054:	40000c00 	.word	0x40000c00

00001058 <TIMER_0_CLOCK_init>:
    1058:	4a04      	ldr	r2, [pc, #16]	; (106c <TIMER_0_CLOCK_init+0x14>)
    105a:	6a11      	ldr	r1, [r2, #32]
    105c:	2380      	movs	r3, #128	; 0x80
    105e:	009b      	lsls	r3, r3, #2
    1060:	430b      	orrs	r3, r1
    1062:	6213      	str	r3, [r2, #32]
    1064:	4a02      	ldr	r2, [pc, #8]	; (1070 <TIMER_0_CLOCK_init+0x18>)
    1066:	4b03      	ldr	r3, [pc, #12]	; (1074 <TIMER_0_CLOCK_init+0x1c>)
    1068:	805a      	strh	r2, [r3, #2]

void TIMER_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC1);
	_gclk_enable_channel(TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC);
}
    106a:	4770      	bx	lr
    106c:	40000400 	.word	0x40000400
    1070:	0000401a 	.word	0x0000401a
    1074:	40000c00 	.word	0x40000c00

00001078 <TIMER_2_CLOCK_init>:
    1078:	4a04      	ldr	r2, [pc, #16]	; (108c <TIMER_2_CLOCK_init+0x14>)
    107a:	6a11      	ldr	r1, [r2, #32]
    107c:	2380      	movs	r3, #128	; 0x80
    107e:	00db      	lsls	r3, r3, #3
    1080:	430b      	orrs	r3, r1
    1082:	6213      	str	r3, [r2, #32]
    1084:	4a02      	ldr	r2, [pc, #8]	; (1090 <TIMER_2_CLOCK_init+0x18>)
    1086:	4b03      	ldr	r3, [pc, #12]	; (1094 <TIMER_2_CLOCK_init+0x1c>)
    1088:	805a      	strh	r2, [r3, #2]

void TIMER_2_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC2);
	_gclk_enable_channel(TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC);
}
    108a:	4770      	bx	lr
    108c:	40000400 	.word	0x40000400
    1090:	0000401b 	.word	0x0000401b
    1094:	40000c00 	.word	0x40000c00

00001098 <system_init>:

void system_init(void)
{
    1098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    109a:	46de      	mov	lr, fp
    109c:	4657      	mov	r7, sl
    109e:	464e      	mov	r6, r9
    10a0:	4645      	mov	r5, r8
    10a2:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    10a4:	4bc2      	ldr	r3, [pc, #776]	; (13b0 <system_init+0x318>)
    10a6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10a8:	22c0      	movs	r2, #192	; 0xc0
    10aa:	05d2      	lsls	r2, r2, #23
    10ac:	2404      	movs	r4, #4
    10ae:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10b0:	4bc0      	ldr	r3, [pc, #768]	; (13b4 <system_init+0x31c>)
    10b2:	49c1      	ldr	r1, [pc, #772]	; (13b8 <system_init+0x320>)
    10b4:	6299      	str	r1, [r3, #40]	; 0x28
    10b6:	4ec1      	ldr	r6, [pc, #772]	; (13bc <system_init+0x324>)
    10b8:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10ba:	2042      	movs	r0, #66	; 0x42
    10bc:	5c19      	ldrb	r1, [r3, r0]
    10be:	43a1      	bics	r1, r4
    10c0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10c2:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10c4:	2101      	movs	r1, #1
    10c6:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c8:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10ca:	383a      	subs	r0, #58	; 0x3a
    10cc:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10ce:	48bc      	ldr	r0, [pc, #752]	; (13c0 <system_init+0x328>)
    10d0:	6298      	str	r0, [r3, #40]	; 0x28
    10d2:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10d4:	2043      	movs	r0, #67	; 0x43
    10d6:	5c1d      	ldrb	r5, [r3, r0]
    10d8:	43a5      	bics	r5, r4
    10da:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10dc:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10de:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e0:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10e2:	303d      	adds	r0, #61	; 0x3d
    10e4:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10e6:	48b7      	ldr	r0, [pc, #732]	; (13c4 <system_init+0x32c>)
    10e8:	6298      	str	r0, [r3, #40]	; 0x28
    10ea:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10ec:	2047      	movs	r0, #71	; 0x47
    10ee:	5c1d      	ldrb	r5, [r3, r0]
    10f0:	43a5      	bics	r5, r4
    10f2:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10f4:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10f6:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10f8:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10fa:	30b9      	adds	r0, #185	; 0xb9
    10fc:	4681      	mov	r9, r0
    10fe:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1100:	48b1      	ldr	r0, [pc, #708]	; (13c8 <system_init+0x330>)
    1102:	6298      	str	r0, [r3, #40]	; 0x28
    1104:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1106:	4648      	mov	r0, r9
    1108:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    110a:	2548      	movs	r5, #72	; 0x48
    110c:	5d58      	ldrb	r0, [r3, r5]
    110e:	4680      	mov	r8, r0
    1110:	2004      	movs	r0, #4
    1112:	4684      	mov	ip, r0
    1114:	4660      	mov	r0, ip
    1116:	4647      	mov	r7, r8
    1118:	4307      	orrs	r7, r0
    111a:	b2f8      	uxtb	r0, r7
    111c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    111e:	4648      	mov	r0, r9
    1120:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1122:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1124:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1126:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1128:	2080      	movs	r0, #128	; 0x80
    112a:	0080      	lsls	r0, r0, #2
    112c:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    112e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1130:	48a6      	ldr	r0, [pc, #664]	; (13cc <system_init+0x334>)
    1132:	6298      	str	r0, [r3, #40]	; 0x28
    1134:	20c0      	movs	r0, #192	; 0xc0
    1136:	0600      	lsls	r0, r0, #24
    1138:	4680      	mov	r8, r0
    113a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    113c:	3501      	adds	r5, #1
    113e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1140:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1142:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1144:	2080      	movs	r0, #128	; 0x80
    1146:	02c0      	lsls	r0, r0, #11
    1148:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    114a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    114c:	2080      	movs	r0, #128	; 0x80
    114e:	05c0      	lsls	r0, r0, #23
    1150:	6298      	str	r0, [r3, #40]	; 0x28
    1152:	489f      	ldr	r0, [pc, #636]	; (13d0 <system_init+0x338>)
    1154:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1156:	3509      	adds	r5, #9
    1158:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    115a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    115c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    115e:	2080      	movs	r0, #128	; 0x80
    1160:	0300      	lsls	r0, r0, #12
    1162:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1164:	489b      	ldr	r0, [pc, #620]	; (13d4 <system_init+0x33c>)
    1166:	6298      	str	r0, [r3, #40]	; 0x28
    1168:	489b      	ldr	r0, [pc, #620]	; (13d8 <system_init+0x340>)
    116a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    116c:	2053      	movs	r0, #83	; 0x53
    116e:	5c1f      	ldrb	r7, [r3, r0]
    1170:	43a7      	bics	r7, r4
    1172:	541f      	strb	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1174:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1176:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1178:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    117a:	2080      	movs	r0, #128	; 0x80
    117c:	0340      	lsls	r0, r0, #13
    117e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1180:	4894      	ldr	r0, [pc, #592]	; (13d4 <system_init+0x33c>)
    1182:	6298      	str	r0, [r3, #40]	; 0x28
    1184:	4895      	ldr	r0, [pc, #596]	; (13dc <system_init+0x344>)
    1186:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1188:	2054      	movs	r0, #84	; 0x54
    118a:	5c1f      	ldrb	r7, [r3, r0]
    118c:	43a7      	bics	r7, r4
    118e:	541f      	strb	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1190:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1192:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1194:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1196:	2080      	movs	r0, #128	; 0x80
    1198:	0380      	lsls	r0, r0, #14
    119a:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    119c:	488d      	ldr	r0, [pc, #564]	; (13d4 <system_init+0x33c>)
    119e:	6298      	str	r0, [r3, #40]	; 0x28
    11a0:	488f      	ldr	r0, [pc, #572]	; (13e0 <system_init+0x348>)
    11a2:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11a4:	2055      	movs	r0, #85	; 0x55
    11a6:	5c1f      	ldrb	r7, [r3, r0]
    11a8:	43a7      	bics	r7, r4
    11aa:	541f      	strb	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11ac:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ae:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11b0:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11b2:	2080      	movs	r0, #128	; 0x80
    11b4:	0440      	lsls	r0, r0, #17
    11b6:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11b8:	4886      	ldr	r0, [pc, #536]	; (13d4 <system_init+0x33c>)
    11ba:	6298      	str	r0, [r3, #40]	; 0x28
    11bc:	4889      	ldr	r0, [pc, #548]	; (13e4 <system_init+0x34c>)
    11be:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11c0:	2058      	movs	r0, #88	; 0x58
    11c2:	5c1f      	ldrb	r7, [r3, r0]
    11c4:	43a7      	bics	r7, r4
    11c6:	541f      	strb	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11c8:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ca:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11cc:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11ce:	2080      	movs	r0, #128	; 0x80
    11d0:	0480      	lsls	r0, r0, #18
    11d2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11d4:	487f      	ldr	r0, [pc, #508]	; (13d4 <system_init+0x33c>)
    11d6:	6298      	str	r0, [r3, #40]	; 0x28
    11d8:	4883      	ldr	r0, [pc, #524]	; (13e8 <system_init+0x350>)
    11da:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11dc:	2059      	movs	r0, #89	; 0x59
    11de:	5c1f      	ldrb	r7, [r3, r0]
    11e0:	43a7      	bics	r7, r4
    11e2:	541f      	strb	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11e4:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11e6:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11e8:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11ea:	2080      	movs	r0, #128	; 0x80
    11ec:	0500      	lsls	r0, r0, #20
    11ee:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11f0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11f2:	2080      	movs	r0, #128	; 0x80
    11f4:	05c0      	lsls	r0, r0, #23
    11f6:	6298      	str	r0, [r3, #40]	; 0x28
    11f8:	487c      	ldr	r0, [pc, #496]	; (13ec <system_init+0x354>)
    11fa:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11fc:	205b      	movs	r0, #91	; 0x5b
    11fe:	4684      	mov	ip, r0
    1200:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1202:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1204:	4667      	mov	r7, ip
    1206:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1208:	2080      	movs	r0, #128	; 0x80
    120a:	0540      	lsls	r0, r0, #21
    120c:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    120e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1210:	2080      	movs	r0, #128	; 0x80
    1212:	05c0      	lsls	r0, r0, #23
    1214:	6298      	str	r0, [r3, #40]	; 0x28
    1216:	4876      	ldr	r0, [pc, #472]	; (13f0 <system_init+0x358>)
    1218:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    121a:	205c      	movs	r0, #92	; 0x5c
    121c:	4684      	mov	ip, r0
    121e:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1220:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1222:	4667      	mov	r7, ip
    1224:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1226:	2098      	movs	r0, #152	; 0x98
    1228:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    122a:	3810      	subs	r0, #16
    122c:	4684      	mov	ip, r0
    122e:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1230:	3020      	adds	r0, #32
    1232:	4f70      	ldr	r7, [pc, #448]	; (13f4 <system_init+0x35c>)
    1234:	501f      	str	r7, [r3, r0]
    1236:	4647      	mov	r7, r8
    1238:	501f      	str	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    123a:	27c0      	movs	r7, #192	; 0xc0
    123c:	46ba      	mov	sl, r7
    123e:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1240:	438f      	bics	r7, r1
    1242:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1244:	4657      	mov	r7, sl
    1246:	464d      	mov	r5, r9
    1248:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    124a:	2502      	movs	r5, #2
    124c:	46a9      	mov	r9, r5
    124e:	3592      	adds	r5, #146	; 0x92
    1250:	464f      	mov	r7, r9
    1252:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1254:	4665      	mov	r5, ip
    1256:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1258:	4d67      	ldr	r5, [pc, #412]	; (13f8 <system_init+0x360>)
    125a:	501d      	str	r5, [r3, r0]
    125c:	4645      	mov	r5, r8
    125e:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1260:	25c1      	movs	r5, #193	; 0xc1
    1262:	46aa      	mov	sl, r5
    1264:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1266:	002f      	movs	r7, r5
    1268:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    126a:	4655      	mov	r5, sl
    126c:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    126e:	3d3d      	subs	r5, #61	; 0x3d
    1270:	46aa      	mov	sl, r5
    1272:	3d74      	subs	r5, #116	; 0x74
    1274:	46a9      	mov	r9, r5
    1276:	4655      	mov	r5, sl
    1278:	464f      	mov	r7, r9
    127a:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    127c:	4d5f      	ldr	r5, [pc, #380]	; (13fc <system_init+0x364>)
    127e:	501d      	str	r5, [r3, r0]
    1280:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1282:	25c4      	movs	r5, #196	; 0xc4
    1284:	46a9      	mov	r9, r5
    1286:	5d5d      	ldrb	r5, [r3, r5]
    1288:	002f      	movs	r7, r5
    128a:	43a7      	bics	r7, r4
    128c:	464d      	mov	r5, r9
    128e:	555f      	strb	r7, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1290:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1292:	002f      	movs	r7, r5
    1294:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1296:	464d      	mov	r5, r9
    1298:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    129a:	3da4      	subs	r5, #164	; 0xa4
    129c:	46a9      	mov	r9, r5
    129e:	4655      	mov	r5, sl
    12a0:	464f      	mov	r7, r9
    12a2:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12a4:	4d56      	ldr	r5, [pc, #344]	; (1400 <system_init+0x368>)
    12a6:	501d      	str	r5, [r3, r0]
    12a8:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    12aa:	26c5      	movs	r6, #197	; 0xc5
    12ac:	5d9d      	ldrb	r5, [r3, r6]
    12ae:	002f      	movs	r7, r5
    12b0:	43a7      	bics	r7, r4
    12b2:	559f      	strb	r7, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12b4:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12b6:	002f      	movs	r7, r5
    12b8:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ba:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12bc:	2680      	movs	r6, #128	; 0x80
    12be:	01f6      	lsls	r6, r6, #7
    12c0:	2594      	movs	r5, #148	; 0x94
    12c2:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12c4:	4665      	mov	r5, ip
    12c6:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12c8:	4e4e      	ldr	r6, [pc, #312]	; (1404 <system_init+0x36c>)
    12ca:	501e      	str	r6, [r3, r0]
    12cc:	4645      	mov	r5, r8
    12ce:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12d0:	25ce      	movs	r5, #206	; 0xce
    12d2:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d4:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12d6:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12d8:	2680      	movs	r6, #128	; 0x80
    12da:	0276      	lsls	r6, r6, #9
    12dc:	4655      	mov	r5, sl
    12de:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12e0:	4d3c      	ldr	r5, [pc, #240]	; (13d4 <system_init+0x33c>)
    12e2:	501d      	str	r5, [r3, r0]
    12e4:	4d48      	ldr	r5, [pc, #288]	; (1408 <system_init+0x370>)
    12e6:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    12e8:	25d0      	movs	r5, #208	; 0xd0
    12ea:	5d5e      	ldrb	r6, [r3, r5]
    12ec:	43a6      	bics	r6, r4
    12ee:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12f0:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12f2:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12f4:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12f6:	2580      	movs	r5, #128	; 0x80
    12f8:	02ad      	lsls	r5, r5, #10
    12fa:	4666      	mov	r6, ip
    12fc:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12fe:	2680      	movs	r6, #128	; 0x80
    1300:	05f6      	lsls	r6, r6, #23
    1302:	501e      	str	r6, [r3, r0]
    1304:	4e41      	ldr	r6, [pc, #260]	; (140c <system_init+0x374>)
    1306:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1308:	3814      	subs	r0, #20
    130a:	5015      	str	r5, [r2, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    130c:	303d      	adds	r0, #61	; 0x3d
    130e:	5c1a      	ldrb	r2, [r3, r0]
    1310:	43a2      	bics	r2, r4
    1312:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1314:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1316:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1318:	430a      	orrs	r2, r1
    131a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    131c:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    131e:	21b8      	movs	r1, #184	; 0xb8
    1320:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1322:	38c2      	subs	r0, #194	; 0xc2
    1324:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
    1326:	2070      	movs	r0, #112	; 0x70
    1328:	4302      	orrs	r2, r0
    132a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    132c:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      GPIO_PIN_FUNCTION_H);

	EXTERNAL_IRQ_0_init();
    132e:	4b38      	ldr	r3, [pc, #224]	; (1410 <system_init+0x378>)
    1330:	4798      	blx	r3

	FLASH_0_init();
    1332:	4b38      	ldr	r3, [pc, #224]	; (1414 <system_init+0x37c>)
    1334:	4798      	blx	r3

	USART_0_CLOCK_init();
    1336:	4b38      	ldr	r3, [pc, #224]	; (1418 <system_init+0x380>)
    1338:	4798      	blx	r3
	USART_0_init();
    133a:	4b38      	ldr	r3, [pc, #224]	; (141c <system_init+0x384>)
    133c:	4798      	blx	r3
	USART_0_PORT_init();
    133e:	4b38      	ldr	r3, [pc, #224]	; (1420 <system_init+0x388>)
    1340:	4798      	blx	r3

	SPI_0_CLOCK_init();
    1342:	4b38      	ldr	r3, [pc, #224]	; (1424 <system_init+0x38c>)
    1344:	4798      	blx	r3
	SPI_0_init();
    1346:	4b38      	ldr	r3, [pc, #224]	; (1428 <system_init+0x390>)
    1348:	4798      	blx	r3
	SPI_0_PORT_init();
    134a:	4b38      	ldr	r3, [pc, #224]	; (142c <system_init+0x394>)
    134c:	4798      	blx	r3

	TIMER_8_CLOCK_init();
    134e:	4b38      	ldr	r3, [pc, #224]	; (1430 <system_init+0x398>)
    1350:	4798      	blx	r3
	TIMER_8_init();
    1352:	4b38      	ldr	r3, [pc, #224]	; (1434 <system_init+0x39c>)
    1354:	4798      	blx	r3

	TIMER_3_CLOCK_init();
    1356:	4b38      	ldr	r3, [pc, #224]	; (1438 <system_init+0x3a0>)
    1358:	4798      	blx	r3

	TIMER_3_init();
    135a:	4b38      	ldr	r3, [pc, #224]	; (143c <system_init+0x3a4>)
    135c:	4798      	blx	r3

	TIMER_5_CLOCK_init();
    135e:	4b38      	ldr	r3, [pc, #224]	; (1440 <system_init+0x3a8>)
    1360:	4798      	blx	r3

	TIMER_5_init();
    1362:	4b38      	ldr	r3, [pc, #224]	; (1444 <system_init+0x3ac>)
    1364:	4798      	blx	r3

	TIMER_6_CLOCK_init();
    1366:	4b38      	ldr	r3, [pc, #224]	; (1448 <system_init+0x3b0>)
    1368:	4798      	blx	r3

	TIMER_6_init();
    136a:	4b38      	ldr	r3, [pc, #224]	; (144c <system_init+0x3b4>)
    136c:	4798      	blx	r3

	TIMER_4_CLOCK_init();
    136e:	4b38      	ldr	r3, [pc, #224]	; (1450 <system_init+0x3b8>)
    1370:	4798      	blx	r3

	TIMER_4_init();
    1372:	4b38      	ldr	r3, [pc, #224]	; (1454 <system_init+0x3bc>)
    1374:	4798      	blx	r3

	TIMER_7_CLOCK_init();
    1376:	4b38      	ldr	r3, [pc, #224]	; (1458 <system_init+0x3c0>)
    1378:	4798      	blx	r3

	TIMER_7_init();
    137a:	4b38      	ldr	r3, [pc, #224]	; (145c <system_init+0x3c4>)
    137c:	4798      	blx	r3

	AC_0_init();
    137e:	4b38      	ldr	r3, [pc, #224]	; (1460 <system_init+0x3c8>)
    1380:	4798      	blx	r3

	DAC_0_init();
    1382:	4b38      	ldr	r3, [pc, #224]	; (1464 <system_init+0x3cc>)
    1384:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1386:	4b38      	ldr	r3, [pc, #224]	; (1468 <system_init+0x3d0>)
    1388:	4798      	blx	r3

	TIMER_1_CLOCK_init();
    138a:	4b38      	ldr	r3, [pc, #224]	; (146c <system_init+0x3d4>)
    138c:	4798      	blx	r3

	TIMER_1_init();
    138e:	4b38      	ldr	r3, [pc, #224]	; (1470 <system_init+0x3d8>)
    1390:	4798      	blx	r3

	TIMER_0_CLOCK_init();
    1392:	4b38      	ldr	r3, [pc, #224]	; (1474 <system_init+0x3dc>)
    1394:	4798      	blx	r3

	TIMER_0_init();
    1396:	4b38      	ldr	r3, [pc, #224]	; (1478 <system_init+0x3e0>)
    1398:	4798      	blx	r3

	TIMER_2_CLOCK_init();
    139a:	4b38      	ldr	r3, [pc, #224]	; (147c <system_init+0x3e4>)
    139c:	4798      	blx	r3

	TIMER_2_init();
    139e:	4b38      	ldr	r3, [pc, #224]	; (1480 <system_init+0x3e8>)
    13a0:	4798      	blx	r3
}
    13a2:	bc3c      	pop	{r2, r3, r4, r5}
    13a4:	4690      	mov	r8, r2
    13a6:	4699      	mov	r9, r3
    13a8:	46a2      	mov	sl, r4
    13aa:	46ab      	mov	fp, r5
    13ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	00001a99 	.word	0x00001a99
    13b4:	41004400 	.word	0x41004400
    13b8:	40020004 	.word	0x40020004
    13bc:	c0020000 	.word	0xc0020000
    13c0:	40020008 	.word	0x40020008
    13c4:	40020080 	.word	0x40020080
    13c8:	40020100 	.word	0x40020100
    13cc:	40000200 	.word	0x40000200
    13d0:	c0000004 	.word	0xc0000004
    13d4:	40020000 	.word	0x40020000
    13d8:	c0020008 	.word	0xc0020008
    13dc:	c0020010 	.word	0xc0020010
    13e0:	c0020020 	.word	0xc0020020
    13e4:	c0020100 	.word	0xc0020100
    13e8:	c0020200 	.word	0xc0020200
    13ec:	c0000800 	.word	0xc0000800
    13f0:	c0001000 	.word	0xc0001000
    13f4:	40000001 	.word	0x40000001
    13f8:	40000002 	.word	0x40000002
    13fc:	40020010 	.word	0x40020010
    1400:	40020020 	.word	0x40020020
    1404:	40004000 	.word	0x40004000
    1408:	c0020001 	.word	0xc0020001
    140c:	c0000002 	.word	0xc0000002
    1410:	00000b69 	.word	0x00000b69
    1414:	00000cd1 	.word	0x00000cd1
    1418:	00000cf1 	.word	0x00000cf1
    141c:	00002549 	.word	0x00002549
    1420:	00000d11 	.word	0x00000d11
    1424:	00000e01 	.word	0x00000e01
    1428:	00001f95 	.word	0x00001f95
    142c:	00000d55 	.word	0x00000d55
    1430:	00000e21 	.word	0x00000e21
    1434:	00001f1d 	.word	0x00001f1d
    1438:	00000e41 	.word	0x00000e41
    143c:	0000237d 	.word	0x0000237d
    1440:	00000e61 	.word	0x00000e61
    1444:	000023d9 	.word	0x000023d9
    1448:	00000e81 	.word	0x00000e81
    144c:	00002435 	.word	0x00002435
    1450:	00000ea1 	.word	0x00000ea1
    1454:	00002491 	.word	0x00002491
    1458:	00000ec1 	.word	0x00000ec1
    145c:	000024ed 	.word	0x000024ed
    1460:	00000fa9 	.word	0x00000fa9
    1464:	00000ff1 	.word	0x00000ff1
    1468:	00001011 	.word	0x00001011
    146c:	00001039 	.word	0x00001039
    1470:	00002175 	.word	0x00002175
    1474:	00001059 	.word	0x00001059
    1478:	00002249 	.word	0x00002249
    147c:	00001079 	.word	0x00001079
    1480:	000022cd 	.word	0x000022cd

00001484 <ac_async_comparison_ready>:
 *
 * \param[in] device The pointer to AC device structure
 * \param[in] comp Comparator number
 */
static void ac_async_comparison_ready(struct _ac_async_device *device, const uint8_t comp, const uint8_t result)
{
    1484:	b510      	push	{r4, lr}
	struct ac_async_descriptor *const descr = CONTAINER_OF(device, struct ac_async_descriptor, device);

	if (descr->cb.comparison_ready) {
    1486:	6903      	ldr	r3, [r0, #16]
    1488:	2b00      	cmp	r3, #0
    148a:	d000      	beq.n	148e <ac_async_comparison_ready+0xa>
		descr->cb.comparison_ready(descr, comp, result);
    148c:	4798      	blx	r3
	}
}
    148e:	bd10      	pop	{r4, pc}

00001490 <ac_async_init>:
{
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	0004      	movs	r4, r0
    1494:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    1496:	2800      	cmp	r0, #0
    1498:	d011      	beq.n	14be <ac_async_init+0x2e>
    149a:	2900      	cmp	r1, #0
    149c:	d00d      	beq.n	14ba <ac_async_init+0x2a>
    149e:	2001      	movs	r0, #1
    14a0:	2236      	movs	r2, #54	; 0x36
    14a2:	4908      	ldr	r1, [pc, #32]	; (14c4 <ac_async_init+0x34>)
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <ac_async_init+0x38>)
    14a6:	4798      	blx	r3
	init_status = _ac_async_init(&descr->device, hw);
    14a8:	0029      	movs	r1, r5
    14aa:	0020      	movs	r0, r4
    14ac:	4b07      	ldr	r3, [pc, #28]	; (14cc <ac_async_init+0x3c>)
    14ae:	4798      	blx	r3
	if (init_status) {
    14b0:	2800      	cmp	r0, #0
    14b2:	d101      	bne.n	14b8 <ac_async_init+0x28>
	descr->device.cb.comparison_ready_cb = ac_async_comparison_ready;
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <ac_async_init+0x40>)
    14b6:	6023      	str	r3, [r4, #0]
}
    14b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    14ba:	2000      	movs	r0, #0
    14bc:	e7f0      	b.n	14a0 <ac_async_init+0x10>
    14be:	2000      	movs	r0, #0
    14c0:	e7ee      	b.n	14a0 <ac_async_init+0x10>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	00005a18 	.word	0x00005a18
    14c8:	00001821 	.word	0x00001821
    14cc:	0000198d 	.word	0x0000198d
    14d0:	00001485 	.word	0x00001485

000014d4 <ac_async_enable>:
{
    14d4:	b510      	push	{r4, lr}
    14d6:	0004      	movs	r4, r0
	ASSERT(descr);
    14d8:	1e43      	subs	r3, r0, #1
    14da:	4198      	sbcs	r0, r3
    14dc:	b2c0      	uxtb	r0, r0
    14de:	2252      	movs	r2, #82	; 0x52
    14e0:	4903      	ldr	r1, [pc, #12]	; (14f0 <ac_async_enable+0x1c>)
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <ac_async_enable+0x20>)
    14e4:	4798      	blx	r3
	_ac_async_enable(&descr->device);
    14e6:	0020      	movs	r0, r4
    14e8:	4b03      	ldr	r3, [pc, #12]	; (14f8 <ac_async_enable+0x24>)
    14ea:	4798      	blx	r3
}
    14ec:	2000      	movs	r0, #0
    14ee:	bd10      	pop	{r4, pc}
    14f0:	00005a18 	.word	0x00005a18
    14f4:	00001821 	.word	0x00001821
    14f8:	00001a41 	.word	0x00001a41

000014fc <ac_async_register_callback>:
{
    14fc:	b570      	push	{r4, r5, r6, lr}
    14fe:	0004      	movs	r4, r0
    1500:	000d      	movs	r5, r1
    1502:	0016      	movs	r6, r2
	ASSERT(descr);
    1504:	1e43      	subs	r3, r0, #1
    1506:	4198      	sbcs	r0, r3
    1508:	b2c0      	uxtb	r0, r0
    150a:	226b      	movs	r2, #107	; 0x6b
    150c:	4905      	ldr	r1, [pc, #20]	; (1524 <ac_async_register_callback+0x28>)
    150e:	4b06      	ldr	r3, [pc, #24]	; (1528 <ac_async_register_callback+0x2c>)
    1510:	4798      	blx	r3
	switch (type) {
    1512:	2d00      	cmp	r5, #0
    1514:	d102      	bne.n	151c <ac_async_register_callback+0x20>
		descr->cb.comparison_ready = cb;
    1516:	6126      	str	r6, [r4, #16]
	return ERR_NONE;
    1518:	2000      	movs	r0, #0
}
    151a:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    151c:	200d      	movs	r0, #13
    151e:	4240      	negs	r0, r0
    1520:	e7fb      	b.n	151a <ac_async_register_callback+0x1e>
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	00005a18 	.word	0x00005a18
    1528:	00001821 	.word	0x00001821

0000152c <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	0004      	movs	r4, r0
    1530:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1532:	2800      	cmp	r0, #0
    1534:	d010      	beq.n	1558 <dac_sync_init+0x2c>
    1536:	2900      	cmp	r1, #0
    1538:	d00c      	beq.n	1554 <dac_sync_init+0x28>
    153a:	2001      	movs	r0, #1
    153c:	2232      	movs	r2, #50	; 0x32
    153e:	490c      	ldr	r1, [pc, #48]	; (1570 <dac_sync_init+0x44>)
    1540:	4b0c      	ldr	r3, [pc, #48]	; (1574 <dac_sync_init+0x48>)
    1542:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1544:	0029      	movs	r1, r5
    1546:	0020      	movs	r0, r4
    1548:	4b0b      	ldr	r3, [pc, #44]	; (1578 <dac_sync_init+0x4c>)
    154a:	4798      	blx	r3
	if (rc) {
    154c:	2800      	cmp	r0, #0
    154e:	d10e      	bne.n	156e <dac_sync_init+0x42>
    1550:	2300      	movs	r3, #0
    1552:	e00a      	b.n	156a <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    1554:	2000      	movs	r0, #0
    1556:	e7f1      	b.n	153c <dac_sync_init+0x10>
    1558:	2000      	movs	r0, #0
    155a:	e7ef      	b.n	153c <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    155c:	00da      	lsls	r2, r3, #3
    155e:	18a2      	adds	r2, r4, r2
    1560:	2100      	movs	r1, #0
    1562:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    1564:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    1566:	3301      	adds	r3, #1
    1568:	b2db      	uxtb	r3, r3
    156a:	2b00      	cmp	r3, #0
    156c:	d0f6      	beq.n	155c <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    156e:	bd70      	pop	{r4, r5, r6, pc}
    1570:	00005a34 	.word	0x00005a34
    1574:	00001821 	.word	0x00001821
    1578:	00001b15 	.word	0x00001b15

0000157c <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	0004      	movs	r4, r0
    1580:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
    1582:	2800      	cmp	r0, #0
    1584:	d00c      	beq.n	15a0 <dac_sync_enable_channel+0x24>
    1586:	2900      	cmp	r1, #0
    1588:	d00c      	beq.n	15a4 <dac_sync_enable_channel+0x28>
    158a:	2000      	movs	r0, #0
    158c:	2252      	movs	r2, #82	; 0x52
    158e:	4906      	ldr	r1, [pc, #24]	; (15a8 <dac_sync_enable_channel+0x2c>)
    1590:	4b06      	ldr	r3, [pc, #24]	; (15ac <dac_sync_enable_channel+0x30>)
    1592:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    1594:	0029      	movs	r1, r5
    1596:	0020      	movs	r0, r4
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <dac_sync_enable_channel+0x34>)
    159a:	4798      	blx	r3

	return ERR_NONE;
}
    159c:	2000      	movs	r0, #0
    159e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
    15a0:	2000      	movs	r0, #0
    15a2:	e7f3      	b.n	158c <dac_sync_enable_channel+0x10>
    15a4:	2001      	movs	r0, #1
    15a6:	e7f1      	b.n	158c <dac_sync_enable_channel+0x10>
    15a8:	00005a34 	.word	0x00005a34
    15ac:	00001821 	.word	0x00001821
    15b0:	00001b41 	.word	0x00001b41

000015b4 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	46ce      	mov	lr, r9
    15b8:	b500      	push	{lr}
    15ba:	b082      	sub	sp, #8
    15bc:	0007      	movs	r7, r0
    15be:	000d      	movs	r5, r1
    15c0:	0014      	movs	r4, r2
    15c2:	4699      	mov	r9, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    15c4:	2800      	cmp	r0, #0
    15c6:	d007      	beq.n	15d8 <dac_sync_write+0x24>
    15c8:	2900      	cmp	r1, #0
    15ca:	d107      	bne.n	15dc <dac_sync_write+0x28>
    15cc:	2a00      	cmp	r2, #0
    15ce:	d018      	beq.n	1602 <dac_sync_write+0x4e>
    15d0:	2b00      	cmp	r3, #0
    15d2:	d118      	bne.n	1606 <dac_sync_write+0x52>
    15d4:	2000      	movs	r0, #0
    15d6:	e002      	b.n	15de <dac_sync_write+0x2a>
    15d8:	2000      	movs	r0, #0
    15da:	e000      	b.n	15de <dac_sync_write+0x2a>
    15dc:	2000      	movs	r0, #0
    15de:	226a      	movs	r2, #106	; 0x6a
    15e0:	4917      	ldr	r1, [pc, #92]	; (1640 <dac_sync_write+0x8c>)
    15e2:	4b18      	ldr	r3, [pc, #96]	; (1644 <dac_sync_write+0x90>)
    15e4:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
    15e6:	9701      	str	r7, [sp, #4]
    15e8:	0029      	movs	r1, r5
    15ea:	0038      	movs	r0, r7
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <dac_sync_write+0x94>)
    15ee:	4798      	blx	r3
    15f0:	2800      	cmp	r0, #0
    15f2:	d022      	beq.n	163a <dac_sync_write+0x86>
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
    15f4:	002e      	movs	r6, r5
    15f6:	00eb      	lsls	r3, r5, #3
    15f8:	18fb      	adds	r3, r7, r3
    15fa:	605c      	str	r4, [r3, #4]
	descr->sel_ch[ch].length = length;
    15fc:	464a      	mov	r2, r9
    15fe:	609a      	str	r2, [r3, #8]

	while (descr->sel_ch[ch].length) {
    1600:	e011      	b.n	1626 <dac_sync_write+0x72>
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    1602:	2000      	movs	r0, #0
    1604:	e7eb      	b.n	15de <dac_sync_write+0x2a>
    1606:	2001      	movs	r0, #1
    1608:	e7e9      	b.n	15de <dac_sync_write+0x2a>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
    160a:	00f4      	lsls	r4, r6, #3
    160c:	193c      	adds	r4, r7, r4
    160e:	6863      	ldr	r3, [r4, #4]
    1610:	8819      	ldrh	r1, [r3, #0]
    1612:	002a      	movs	r2, r5
    1614:	9801      	ldr	r0, [sp, #4]
    1616:	4b0d      	ldr	r3, [pc, #52]	; (164c <dac_sync_write+0x98>)
    1618:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
    161a:	6863      	ldr	r3, [r4, #4]
    161c:	3302      	adds	r3, #2
    161e:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
    1620:	68a3      	ldr	r3, [r4, #8]
    1622:	3b01      	subs	r3, #1
    1624:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
    1626:	00f3      	lsls	r3, r6, #3
    1628:	18fb      	adds	r3, r7, r3
    162a:	689b      	ldr	r3, [r3, #8]
    162c:	2b00      	cmp	r3, #0
    162e:	d1ec      	bne.n	160a <dac_sync_write+0x56>
	}

	return ERR_NONE;
    1630:	2000      	movs	r0, #0
}
    1632:	b002      	add	sp, #8
    1634:	bc04      	pop	{r2}
    1636:	4691      	mov	r9, r2
    1638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_READY;
    163a:	201d      	movs	r0, #29
    163c:	4240      	negs	r0, r0
    163e:	e7f8      	b.n	1632 <dac_sync_write+0x7e>
    1640:	00005a34 	.word	0x00005a34
    1644:	00001821 	.word	0x00001821
    1648:	00001b55 	.word	0x00001b55
    164c:	00001b67 	.word	0x00001b67

00001650 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1650:	b510      	push	{r4, lr}
	return _event_system_init();
    1652:	4b01      	ldr	r3, [pc, #4]	; (1658 <event_system_init+0x8>)
    1654:	4798      	blx	r3
}
    1656:	bd10      	pop	{r4, pc}
    1658:	00001d21 	.word	0x00001d21

0000165c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    165c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    165e:	2504      	movs	r5, #4
    1660:	2400      	movs	r4, #0

	while (upper >= lower) {
    1662:	e007      	b.n	1674 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    1664:	4a0d      	ldr	r2, [pc, #52]	; (169c <process_ext_irq+0x40>)
    1666:	58b3      	ldr	r3, [r6, r2]
    1668:	2b00      	cmp	r3, #0
    166a:	d000      	beq.n	166e <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    166c:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    166e:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    1670:	3a01      	subs	r2, #1
    1672:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    1674:	42ac      	cmp	r4, r5
    1676:	d8fa      	bhi.n	166e <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1678:	192b      	adds	r3, r5, r4
    167a:	105b      	asrs	r3, r3, #1
    167c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    167e:	2a03      	cmp	r2, #3
    1680:	d8f5      	bhi.n	166e <process_ext_irq+0x12>
    1682:	21ff      	movs	r1, #255	; 0xff
    1684:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    1686:	00de      	lsls	r6, r3, #3
    1688:	4904      	ldr	r1, [pc, #16]	; (169c <process_ext_irq+0x40>)
    168a:	1989      	adds	r1, r1, r6
    168c:	6849      	ldr	r1, [r1, #4]
    168e:	4281      	cmp	r1, r0
    1690:	d0e8      	beq.n	1664 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    1692:	d2ed      	bcs.n	1670 <process_ext_irq+0x14>
			lower = middle + 1;
    1694:	3201      	adds	r2, #1
    1696:	b2d4      	uxtb	r4, r2
    1698:	e7ec      	b.n	1674 <process_ext_irq+0x18>
    169a:	46c0      	nop			; (mov r8, r8)
    169c:	20000430 	.word	0x20000430

000016a0 <ext_irq_init>:
{
    16a0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    16a2:	2300      	movs	r3, #0
    16a4:	e009      	b.n	16ba <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    16a6:	4a08      	ldr	r2, [pc, #32]	; (16c8 <ext_irq_init+0x28>)
    16a8:	00d9      	lsls	r1, r3, #3
    16aa:	1850      	adds	r0, r2, r1
    16ac:	2401      	movs	r4, #1
    16ae:	4264      	negs	r4, r4
    16b0:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    16b2:	2000      	movs	r0, #0
    16b4:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    16b6:	3301      	adds	r3, #1
    16b8:	b29b      	uxth	r3, r3
    16ba:	2b03      	cmp	r3, #3
    16bc:	d9f3      	bls.n	16a6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    16be:	4803      	ldr	r0, [pc, #12]	; (16cc <ext_irq_init+0x2c>)
    16c0:	4b03      	ldr	r3, [pc, #12]	; (16d0 <ext_irq_init+0x30>)
    16c2:	4798      	blx	r3
}
    16c4:	bd10      	pop	{r4, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	20000430 	.word	0x20000430
    16cc:	0000165d 	.word	0x0000165d
    16d0:	00001b75 	.word	0x00001b75

000016d4 <ext_irq_register>:
{
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	46d6      	mov	lr, sl
    16d8:	464f      	mov	r7, r9
    16da:	4646      	mov	r6, r8
    16dc:	b5c0      	push	{r6, r7, lr}
    16de:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    16e0:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    16e2:	2b03      	cmp	r3, #3
    16e4:	d80c      	bhi.n	1700 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    16e6:	00dc      	lsls	r4, r3, #3
    16e8:	4a32      	ldr	r2, [pc, #200]	; (17b4 <ext_irq_register+0xe0>)
    16ea:	1912      	adds	r2, r2, r4
    16ec:	6852      	ldr	r2, [r2, #4]
    16ee:	4282      	cmp	r2, r0
    16f0:	d002      	beq.n	16f8 <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    16f2:	3301      	adds	r3, #1
    16f4:	b2db      	uxtb	r3, r3
    16f6:	e7f4      	b.n	16e2 <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    16f8:	4b2e      	ldr	r3, [pc, #184]	; (17b4 <ext_irq_register+0xe0>)
    16fa:	50e1      	str	r1, [r4, r3]
			found          = true;
    16fc:	2601      	movs	r6, #1
			break;
    16fe:	e000      	b.n	1702 <ext_irq_register+0x2e>
	bool    found = false;
    1700:	2600      	movs	r6, #0
	if (NULL == cb) {
    1702:	2900      	cmp	r1, #0
    1704:	d00c      	beq.n	1720 <ext_irq_register+0x4c>
	if (!found) {
    1706:	2e00      	cmp	r6, #0
    1708:	d142      	bne.n	1790 <ext_irq_register+0xbc>
    170a:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    170c:	2b03      	cmp	r3, #3
    170e:	d811      	bhi.n	1734 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    1710:	00da      	lsls	r2, r3, #3
    1712:	4d28      	ldr	r5, [pc, #160]	; (17b4 <ext_irq_register+0xe0>)
    1714:	5952      	ldr	r2, [r2, r5]
    1716:	2a00      	cmp	r2, #0
    1718:	d007      	beq.n	172a <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    171a:	3301      	adds	r3, #1
    171c:	b2db      	uxtb	r3, r3
    171e:	e7f5      	b.n	170c <ext_irq_register+0x38>
		if (!found) {
    1720:	2e00      	cmp	r6, #0
    1722:	d040      	beq.n	17a6 <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    1724:	4b24      	ldr	r3, [pc, #144]	; (17b8 <ext_irq_register+0xe4>)
    1726:	4798      	blx	r3
    1728:	e037      	b.n	179a <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    172a:	00dc      	lsls	r4, r3, #3
    172c:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    172e:	192c      	adds	r4, r5, r4
    1730:	6060      	str	r0, [r4, #4]
				found           = true;
    1732:	2601      	movs	r6, #1
    1734:	2200      	movs	r2, #0
    1736:	e001      	b.n	173c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1738:	3201      	adds	r2, #1
    173a:	b2d2      	uxtb	r2, r2
    173c:	2a03      	cmp	r2, #3
    173e:	d827      	bhi.n	1790 <ext_irq_register+0xbc>
    1740:	2b03      	cmp	r3, #3
    1742:	d825      	bhi.n	1790 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1744:	9301      	str	r3, [sp, #4]
    1746:	491b      	ldr	r1, [pc, #108]	; (17b4 <ext_irq_register+0xe0>)
    1748:	00dc      	lsls	r4, r3, #3
    174a:	190c      	adds	r4, r1, r4
    174c:	6867      	ldr	r7, [r4, #4]
    174e:	00d4      	lsls	r4, r2, #3
    1750:	1909      	adds	r1, r1, r4
    1752:	6849      	ldr	r1, [r1, #4]
    1754:	428f      	cmp	r7, r1
    1756:	d2ef      	bcs.n	1738 <ext_irq_register+0x64>
    1758:	1c4c      	adds	r4, r1, #1
    175a:	d0ed      	beq.n	1738 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    175c:	a902      	add	r1, sp, #8
    175e:	468c      	mov	ip, r1
    1760:	4c14      	ldr	r4, [pc, #80]	; (17b4 <ext_irq_register+0xe0>)
    1762:	46a0      	mov	r8, r4
    1764:	00d4      	lsls	r4, r2, #3
    1766:	46a1      	mov	r9, r4
    1768:	4644      	mov	r4, r8
    176a:	444c      	add	r4, r9
    176c:	4665      	mov	r5, ip
    176e:	cc82      	ldmia	r4!, {r1, r7}
    1770:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    1772:	9901      	ldr	r1, [sp, #4]
    1774:	00c9      	lsls	r1, r1, #3
    1776:	468a      	mov	sl, r1
    1778:	4649      	mov	r1, r9
    177a:	4441      	add	r1, r8
    177c:	4644      	mov	r4, r8
    177e:	4454      	add	r4, sl
    1780:	cca0      	ldmia	r4!, {r5, r7}
    1782:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    1784:	4645      	mov	r5, r8
    1786:	4455      	add	r5, sl
    1788:	4661      	mov	r1, ip
    178a:	c990      	ldmia	r1!, {r4, r7}
    178c:	c590      	stmia	r5!, {r4, r7}
    178e:	e7d3      	b.n	1738 <ext_irq_register+0x64>
	if (!found) {
    1790:	2e00      	cmp	r6, #0
    1792:	d00b      	beq.n	17ac <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    1794:	2101      	movs	r1, #1
    1796:	4b08      	ldr	r3, [pc, #32]	; (17b8 <ext_irq_register+0xe4>)
    1798:	4798      	blx	r3
}
    179a:	b004      	add	sp, #16
    179c:	bc1c      	pop	{r2, r3, r4}
    179e:	4690      	mov	r8, r2
    17a0:	4699      	mov	r9, r3
    17a2:	46a2      	mov	sl, r4
    17a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    17a6:	200d      	movs	r0, #13
    17a8:	4240      	negs	r0, r0
    17aa:	e7f6      	b.n	179a <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    17ac:	200d      	movs	r0, #13
    17ae:	4240      	negs	r0, r0
    17b0:	e7f3      	b.n	179a <ext_irq_register+0xc6>
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	20000430 	.word	0x20000430
    17b8:	00001c11 	.word	0x00001c11

000017bc <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    17bc:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    17be:	6943      	ldr	r3, [r0, #20]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d000      	beq.n	17c6 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    17c4:	4798      	blx	r3
	}
}
    17c6:	bd10      	pop	{r4, pc}

000017c8 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    17c8:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    17ca:	6983      	ldr	r3, [r0, #24]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d000      	beq.n	17d2 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    17d0:	4798      	blx	r3
	}
}
    17d2:	bd10      	pop	{r4, pc}

000017d4 <flash_init>:
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	0004      	movs	r4, r0
    17d8:	000d      	movs	r5, r1
	ASSERT(flash && hw);
    17da:	2800      	cmp	r0, #0
    17dc:	d013      	beq.n	1806 <flash_init+0x32>
    17de:	2900      	cmp	r1, #0
    17e0:	d00f      	beq.n	1802 <flash_init+0x2e>
    17e2:	2001      	movs	r0, #1
    17e4:	2238      	movs	r2, #56	; 0x38
    17e6:	4909      	ldr	r1, [pc, #36]	; (180c <flash_init+0x38>)
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <flash_init+0x3c>)
    17ea:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    17ec:	0029      	movs	r1, r5
    17ee:	0020      	movs	r0, r4
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <flash_init+0x40>)
    17f2:	4798      	blx	r3
	if (rc) {
    17f4:	2800      	cmp	r0, #0
    17f6:	d103      	bne.n	1800 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <flash_init+0x44>)
    17fa:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    17fc:	4b07      	ldr	r3, [pc, #28]	; (181c <flash_init+0x48>)
    17fe:	6063      	str	r3, [r4, #4]
}
    1800:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
    1802:	2000      	movs	r0, #0
    1804:	e7ee      	b.n	17e4 <flash_init+0x10>
    1806:	2000      	movs	r0, #0
    1808:	e7ec      	b.n	17e4 <flash_init+0x10>
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00005a50 	.word	0x00005a50
    1810:	00001821 	.word	0x00001821
    1814:	00001ddd 	.word	0x00001ddd
    1818:	000017bd 	.word	0x000017bd
    181c:	000017c9 	.word	0x000017c9

00001820 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1820:	2800      	cmp	r0, #0
    1822:	d100      	bne.n	1826 <assert+0x6>
		__asm("BKPT #0");
    1824:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1826:	4770      	bx	lr

00001828 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1828:	b570      	push	{r4, r5, r6, lr}
    182a:	0004      	movs	r4, r0
    182c:	000e      	movs	r6, r1
    182e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1830:	2800      	cmp	r0, #0
    1832:	d012      	beq.n	185a <ringbuffer_init+0x32>
    1834:	2900      	cmp	r1, #0
    1836:	d012      	beq.n	185e <ringbuffer_init+0x36>
    1838:	2a00      	cmp	r2, #0
    183a:	d112      	bne.n	1862 <ringbuffer_init+0x3a>
    183c:	2000      	movs	r0, #0
    183e:	2228      	movs	r2, #40	; 0x28
    1840:	490a      	ldr	r1, [pc, #40]	; (186c <ringbuffer_init+0x44>)
    1842:	4b0b      	ldr	r3, [pc, #44]	; (1870 <ringbuffer_init+0x48>)
    1844:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1846:	1e6b      	subs	r3, r5, #1
    1848:	422b      	tst	r3, r5
    184a:	d10c      	bne.n	1866 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    184c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    184e:	2300      	movs	r3, #0
    1850:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    1852:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1854:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1856:	2000      	movs	r0, #0
}
    1858:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    185a:	2000      	movs	r0, #0
    185c:	e7ef      	b.n	183e <ringbuffer_init+0x16>
    185e:	2000      	movs	r0, #0
    1860:	e7ed      	b.n	183e <ringbuffer_init+0x16>
    1862:	2001      	movs	r0, #1
    1864:	e7eb      	b.n	183e <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    1866:	200d      	movs	r0, #13
    1868:	4240      	negs	r0, r0
    186a:	e7f5      	b.n	1858 <ringbuffer_init+0x30>
    186c:	00005a68 	.word	0x00005a68
    1870:	00001821 	.word	0x00001821

00001874 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	0004      	movs	r4, r0
    1878:	000d      	movs	r5, r1
	ASSERT(rb);
    187a:	1e43      	subs	r3, r0, #1
    187c:	4198      	sbcs	r0, r3
    187e:	b2c0      	uxtb	r0, r0
    1880:	2251      	movs	r2, #81	; 0x51
    1882:	490a      	ldr	r1, [pc, #40]	; (18ac <ringbuffer_put+0x38>)
    1884:	4b0a      	ldr	r3, [pc, #40]	; (18b0 <ringbuffer_put+0x3c>)
    1886:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1888:	6863      	ldr	r3, [r4, #4]
    188a:	68e2      	ldr	r2, [r4, #12]
    188c:	4013      	ands	r3, r2
    188e:	6822      	ldr	r2, [r4, #0]
    1890:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1892:	68e3      	ldr	r3, [r4, #12]
    1894:	68a2      	ldr	r2, [r4, #8]
    1896:	1a9a      	subs	r2, r3, r2
    1898:	6861      	ldr	r1, [r4, #4]
    189a:	428a      	cmp	r2, r1
    189c:	d901      	bls.n	18a2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    189e:	1a59      	subs	r1, r3, r1
    18a0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    18a2:	3301      	adds	r3, #1
    18a4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    18a6:	2000      	movs	r0, #0
    18a8:	bd70      	pop	{r4, r5, r6, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	00005a68 	.word	0x00005a68
    18b0:	00001821 	.word	0x00001821

000018b4 <_ac_init_irq_param>:
/**
 * \brief Init irq param with the given ac hardware instance
 */
static void _ac_init_irq_param(const void *const hw, void *dev)
{
	if (hw == AC) {
    18b4:	4b03      	ldr	r3, [pc, #12]	; (18c4 <_ac_init_irq_param+0x10>)
    18b6:	4298      	cmp	r0, r3
    18b8:	d000      	beq.n	18bc <_ac_init_irq_param+0x8>
		_ac_dev = (struct _ac_async_device *)dev;
	}
}
    18ba:	4770      	bx	lr
		_ac_dev = (struct _ac_async_device *)dev;
    18bc:	4b02      	ldr	r3, [pc, #8]	; (18c8 <_ac_init_irq_param+0x14>)
    18be:	6019      	str	r1, [r3, #0]
}
    18c0:	e7fb      	b.n	18ba <_ac_init_irq_param+0x6>
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	42004400 	.word	0x42004400
    18c8:	20000450 	.word	0x20000450

000018cc <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
    18cc:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    18ce:	2300      	movs	r3, #0
    18d0:	2b00      	cmp	r3, #0
    18d2:	d001      	beq.n	18d8 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
    18d4:	2000      	movs	r0, #0
}
    18d6:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
    18d8:	009a      	lsls	r2, r3, #2
    18da:	18d2      	adds	r2, r2, r3
    18dc:	0091      	lsls	r1, r2, #2
    18de:	4a05      	ldr	r2, [pc, #20]	; (18f4 <_get_ac_cfg+0x28>)
    18e0:	588a      	ldr	r2, [r1, r2]
    18e2:	4282      	cmp	r2, r0
    18e4:	d002      	beq.n	18ec <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    18e6:	3301      	adds	r3, #1
    18e8:	b2db      	uxtb	r3, r3
    18ea:	e7f1      	b.n	18d0 <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
    18ec:	4801      	ldr	r0, [pc, #4]	; (18f4 <_get_ac_cfg+0x28>)
    18ee:	1840      	adds	r0, r0, r1
    18f0:	e7f1      	b.n	18d6 <_get_ac_cfg+0xa>
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	00005a8c 	.word	0x00005a8c

000018f8 <_ac_init>:
{
    18f8:	b510      	push	{r4, lr}
    18fa:	0004      	movs	r4, r0
	ASSERT(hw);
    18fc:	1e43      	subs	r3, r0, #1
    18fe:	4198      	sbcs	r0, r3
    1900:	b2c0      	uxtb	r0, r0
    1902:	2218      	movs	r2, #24
    1904:	32ff      	adds	r2, #255	; 0xff
    1906:	491e      	ldr	r1, [pc, #120]	; (1980 <_ac_init+0x88>)
    1908:	4b1e      	ldr	r3, [pc, #120]	; (1984 <_ac_init+0x8c>)
    190a:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    190c:	0020      	movs	r0, r4
    190e:	4b1e      	ldr	r3, [pc, #120]	; (1988 <_ac_init+0x90>)
    1910:	4798      	blx	r3
	if (cfg == NULL) {
    1912:	2800      	cmp	r0, #0
    1914:	d031      	beq.n	197a <_ac_init+0x82>
typedef uint8_t  hri_ac_statusc_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1916:	7a63      	ldrb	r3, [r4, #9]
    1918:	09db      	lsrs	r3, r3, #7
    191a:	d1fc      	bne.n	1916 <_ac_init+0x1e>
    191c:	7a63      	ldrb	r3, [r4, #9]
    191e:	09db      	lsrs	r3, r3, #7
    1920:	d1fc      	bne.n	191c <_ac_init+0x24>

static inline hri_ac_ctrla_reg_t hri_ac_get_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1922:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
    1924:	079b      	lsls	r3, r3, #30
    1926:	d507      	bpl.n	1938 <_ac_init+0x40>
}

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLA.reg = data;
    1928:	2300      	movs	r3, #0
    192a:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    192c:	7a63      	ldrb	r3, [r4, #9]
    192e:	09db      	lsrs	r3, r3, #7
    1930:	d1fc      	bne.n	192c <_ac_init+0x34>
    1932:	7a63      	ldrb	r3, [r4, #9]
    1934:	09db      	lsrs	r3, r3, #7
    1936:	d1fc      	bne.n	1932 <_ac_init+0x3a>
	((Ac *)hw)->CTRLA.reg = data;
    1938:	2301      	movs	r3, #1
    193a:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    193c:	7a63      	ldrb	r3, [r4, #9]
    193e:	09db      	lsrs	r3, r3, #7
    1940:	d1fc      	bne.n	193c <_ac_init+0x44>
    1942:	7a63      	ldrb	r3, [r4, #9]
    1944:	09db      	lsrs	r3, r3, #7
    1946:	d1fc      	bne.n	1942 <_ac_init+0x4a>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1948:	6883      	ldr	r3, [r0, #8]
    194a:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    194c:	7a63      	ldrb	r3, [r4, #9]
    194e:	09db      	lsrs	r3, r3, #7
    1950:	d1fc      	bne.n	194c <_ac_init+0x54>
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1952:	68c3      	ldr	r3, [r0, #12]
    1954:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1956:	7a63      	ldrb	r3, [r4, #9]
    1958:	09db      	lsrs	r3, r3, #7
    195a:	d1fc      	bne.n	1956 <_ac_init+0x5e>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
    195c:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
    195e:	3320      	adds	r3, #32
    1960:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
    1962:	7c42      	ldrb	r2, [r0, #17]
    1964:	3301      	adds	r3, #1
    1966:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
    1968:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
    196a:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
    196c:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
    196e:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1970:	7a63      	ldrb	r3, [r4, #9]
    1972:	09db      	lsrs	r3, r3, #7
    1974:	d1fc      	bne.n	1970 <_ac_init+0x78>
	return ERR_NONE;
    1976:	2000      	movs	r0, #0
}
    1978:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
    197a:	200a      	movs	r0, #10
    197c:	4240      	negs	r0, r0
    197e:	e7fb      	b.n	1978 <_ac_init+0x80>
    1980:	00005aa0 	.word	0x00005aa0
    1984:	00001821 	.word	0x00001821
    1988:	000018cd 	.word	0x000018cd

0000198c <_ac_async_init>:
{
    198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    198e:	0006      	movs	r6, r0
    1990:	000c      	movs	r4, r1
	ASSERT(device);
    1992:	1e43      	subs	r3, r0, #1
    1994:	4198      	sbcs	r0, r3
    1996:	b2c0      	uxtb	r0, r0
    1998:	2275      	movs	r2, #117	; 0x75
    199a:	4923      	ldr	r1, [pc, #140]	; (1a28 <_ac_async_init+0x9c>)
    199c:	4b23      	ldr	r3, [pc, #140]	; (1a2c <_ac_async_init+0xa0>)
    199e:	4798      	blx	r3
	init_status = _ac_init(hw);
    19a0:	0020      	movs	r0, r4
    19a2:	4b23      	ldr	r3, [pc, #140]	; (1a30 <_ac_async_init+0xa4>)
    19a4:	4798      	blx	r3
    19a6:	1e05      	subs	r5, r0, #0
	if (init_status) {
    19a8:	d001      	beq.n	19ae <_ac_async_init+0x22>
}
    19aa:	0028      	movs	r0, r5
    19ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	device->hw = hw;
    19ae:	60f4      	str	r4, [r6, #12]
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    19b0:	0020      	movs	r0, r4
    19b2:	4b20      	ldr	r3, [pc, #128]	; (1a34 <_ac_async_init+0xa8>)
    19b4:	4798      	blx	r3
    19b6:	1e07      	subs	r7, r0, #0
	if (cfg == NULL) {
    19b8:	d032      	beq.n	1a20 <_ac_async_init+0x94>
	_ac_init_irq_param(hw, (void *)device);
    19ba:	0031      	movs	r1, r6
    19bc:	0020      	movs	r0, r4
    19be:	4b1e      	ldr	r3, [pc, #120]	; (1a38 <_ac_async_init+0xac>)
    19c0:	4798      	blx	r3
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP0;
    19c2:	2301      	movs	r3, #1
    19c4:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP1;
    19c6:	3301      	adds	r3, #1
    19c8:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_WIN0;
    19ca:	330e      	adds	r3, #14
    19cc:	7163      	strb	r3, [r4, #5]
	NVIC_DisableIRQ(cfg->irq);
    19ce:	2304      	movs	r3, #4
    19d0:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    19d2:	2b00      	cmp	r3, #0
    19d4:	db0b      	blt.n	19ee <_ac_async_init+0x62>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19d6:	221f      	movs	r2, #31
    19d8:	4013      	ands	r3, r2
    19da:	3a1e      	subs	r2, #30
    19dc:	409a      	lsls	r2, r3
    19de:	0013      	movs	r3, r2
    19e0:	2280      	movs	r2, #128	; 0x80
    19e2:	4916      	ldr	r1, [pc, #88]	; (1a3c <_ac_async_init+0xb0>)
    19e4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    19e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ea:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
    19ee:	2304      	movs	r3, #4
    19f0:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    19f2:	2b00      	cmp	r3, #0
    19f4:	db08      	blt.n	1a08 <_ac_async_init+0x7c>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19f6:	221f      	movs	r2, #31
    19f8:	4013      	ands	r3, r2
    19fa:	3a1e      	subs	r2, #30
    19fc:	409a      	lsls	r2, r3
    19fe:	0013      	movs	r3, r2
    1a00:	22c0      	movs	r2, #192	; 0xc0
    1a02:	0052      	lsls	r2, r2, #1
    1a04:	490d      	ldr	r1, [pc, #52]	; (1a3c <_ac_async_init+0xb0>)
    1a06:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(cfg->irq);
    1a08:	2304      	movs	r3, #4
    1a0a:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	dbcc      	blt.n	19aa <_ac_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a10:	221f      	movs	r2, #31
    1a12:	4013      	ands	r3, r2
    1a14:	3a1e      	subs	r2, #30
    1a16:	409a      	lsls	r2, r3
    1a18:	0013      	movs	r3, r2
    1a1a:	4a08      	ldr	r2, [pc, #32]	; (1a3c <_ac_async_init+0xb0>)
    1a1c:	6013      	str	r3, [r2, #0]
    1a1e:	e7c4      	b.n	19aa <_ac_async_init+0x1e>
		return ERR_NOT_FOUND;
    1a20:	250a      	movs	r5, #10
    1a22:	426d      	negs	r5, r5
    1a24:	e7c1      	b.n	19aa <_ac_async_init+0x1e>
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00005aa0 	.word	0x00005aa0
    1a2c:	00001821 	.word	0x00001821
    1a30:	000018f9 	.word	0x000018f9
    1a34:	000018cd 	.word	0x000018cd
    1a38:	000018b5 	.word	0x000018b5
    1a3c:	e000e100 	.word	0xe000e100

00001a40 <_ac_async_enable>:
	hri_ac_set_CTRLA_ENABLE_bit(device->hw);
    1a40:	68c2      	ldr	r2, [r0, #12]
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_ENABLE;
    1a42:	7813      	ldrb	r3, [r2, #0]
    1a44:	2102      	movs	r1, #2
    1a46:	430b      	orrs	r3, r1
    1a48:	b2db      	uxtb	r3, r3
    1a4a:	7013      	strb	r3, [r2, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1a4c:	7a53      	ldrb	r3, [r2, #9]
    1a4e:	09db      	lsrs	r3, r3, #7
    1a50:	d1fc      	bne.n	1a4c <_ac_async_enable+0xc>
}
    1a52:	4770      	bx	lr

00001a54 <AC_Handler>:
{
    1a54:	b510      	push	{r4, lr}
	void *const hw    = _ac_dev->hw;
    1a56:	4b0f      	ldr	r3, [pc, #60]	; (1a94 <AC_Handler+0x40>)
    1a58:	6818      	ldr	r0, [r3, #0]
    1a5a:	68c3      	ldr	r3, [r0, #12]
	if (_ac_dev->cb.comparison_ready_cb == NULL) {
    1a5c:	6802      	ldr	r2, [r0, #0]
    1a5e:	2a00      	cmp	r2, #0
    1a60:	d005      	beq.n	1a6e <AC_Handler+0x1a>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP0) >> AC_INTFLAG_COMP0_Pos;
    1a62:	799a      	ldrb	r2, [r3, #6]
	if (hri_ac_get_interrupt_COMP0_bit(hw)) {
    1a64:	07d2      	lsls	r2, r2, #31
    1a66:	d403      	bmi.n	1a70 <AC_Handler+0x1c>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP1) >> AC_INTFLAG_COMP1_Pos;
    1a68:	799a      	ldrb	r2, [r3, #6]
	} else if (hri_ac_get_interrupt_COMP1_bit(hw)) {
    1a6a:	0792      	lsls	r2, r2, #30
    1a6c:	d408      	bmi.n	1a80 <AC_Handler+0x2c>
}
    1a6e:	bd10      	pop	{r4, pc}
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE0) >> AC_STATUSA_STATE0_Pos;
    1a70:	7a1a      	ldrb	r2, [r3, #8]
    1a72:	2101      	movs	r1, #1
    1a74:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP0;
    1a76:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 0, state);
    1a78:	6803      	ldr	r3, [r0, #0]
    1a7a:	2100      	movs	r1, #0
    1a7c:	4798      	blx	r3
    1a7e:	e7f6      	b.n	1a6e <AC_Handler+0x1a>
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE1) >> AC_STATUSA_STATE1_Pos;
    1a80:	7a19      	ldrb	r1, [r3, #8]
    1a82:	0849      	lsrs	r1, r1, #1
    1a84:	2201      	movs	r2, #1
    1a86:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP1;
    1a88:	2102      	movs	r1, #2
    1a8a:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 1, state);
    1a8c:	6803      	ldr	r3, [r0, #0]
    1a8e:	3901      	subs	r1, #1
    1a90:	4798      	blx	r3
    1a92:	e7ec      	b.n	1a6e <AC_Handler+0x1a>
    1a94:	20000450 	.word	0x20000450

00001a98 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a98:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1a9a:	4a08      	ldr	r2, [pc, #32]	; (1abc <_init_chip+0x24>)
    1a9c:	6853      	ldr	r3, [r2, #4]
    1a9e:	2102      	movs	r1, #2
    1aa0:	430b      	orrs	r3, r1
    1aa2:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1aa4:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <_init_chip+0x28>)
    1aa6:	4798      	blx	r3
	_sysctrl_init_sources();
    1aa8:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <_init_chip+0x2c>)
    1aaa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1aac:	2008      	movs	r0, #8
    1aae:	4c06      	ldr	r4, [pc, #24]	; (1ac8 <_init_chip+0x30>)
    1ab0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <_init_chip+0x34>)
    1ab4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1ab6:	20f7      	movs	r0, #247	; 0xf7
    1ab8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1aba:	bd10      	pop	{r4, pc}
    1abc:	41004000 	.word	0x41004000
    1ac0:	00001efd 	.word	0x00001efd
    1ac4:	00002091 	.word	0x00002091
    1ac8:	00001d65 	.word	0x00001d65
    1acc:	000020ed 	.word	0x000020ed

00001ad0 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1ad0:	79c3      	ldrb	r3, [r0, #7]
    1ad2:	09db      	lsrs	r3, r3, #7
    1ad4:	d1fc      	bne.n	1ad0 <_dac_init>
    1ad6:	79c3      	ldrb	r3, [r0, #7]
    1ad8:	09db      	lsrs	r3, r3, #7
    1ada:	d1fc      	bne.n	1ad6 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1adc:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    1ade:	079b      	lsls	r3, r3, #30
    1ae0:	d507      	bpl.n	1af2 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    1ae2:	2300      	movs	r3, #0
    1ae4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1ae6:	79c3      	ldrb	r3, [r0, #7]
    1ae8:	09db      	lsrs	r3, r3, #7
    1aea:	d1fc      	bne.n	1ae6 <_dac_init+0x16>
    1aec:	79c3      	ldrb	r3, [r0, #7]
    1aee:	09db      	lsrs	r3, r3, #7
    1af0:	d1fc      	bne.n	1aec <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    1af2:	2301      	movs	r3, #1
    1af4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1af6:	79c3      	ldrb	r3, [r0, #7]
    1af8:	09db      	lsrs	r3, r3, #7
    1afa:	d1fc      	bne.n	1af6 <_dac_init+0x26>
    1afc:	79c3      	ldrb	r3, [r0, #7]
    1afe:	09db      	lsrs	r3, r3, #7
    1b00:	d1fc      	bne.n	1afc <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1b02:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    1b04:	224a      	movs	r2, #74	; 0x4a
    1b06:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1b08:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1b0a:	79c3      	ldrb	r3, [r0, #7]
    1b0c:	09db      	lsrs	r3, r3, #7
    1b0e:	d1fc      	bne.n	1b0a <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1b10:	2000      	movs	r0, #0
    1b12:	4770      	bx	lr

00001b14 <_dac_sync_init>:
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	0005      	movs	r5, r0
    1b18:	000c      	movs	r4, r1
	ASSERT(device);
    1b1a:	1e43      	subs	r3, r0, #1
    1b1c:	4198      	sbcs	r0, r3
    1b1e:	b2c0      	uxtb	r0, r0
    1b20:	2249      	movs	r2, #73	; 0x49
    1b22:	4904      	ldr	r1, [pc, #16]	; (1b34 <_dac_sync_init+0x20>)
    1b24:	4b04      	ldr	r3, [pc, #16]	; (1b38 <_dac_sync_init+0x24>)
    1b26:	4798      	blx	r3
	device->hw = hw;
    1b28:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1b2a:	0020      	movs	r0, r4
    1b2c:	4b03      	ldr	r3, [pc, #12]	; (1b3c <_dac_sync_init+0x28>)
    1b2e:	4798      	blx	r3
}
    1b30:	bd70      	pop	{r4, r5, r6, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	00005ab4 	.word	0x00005ab4
    1b38:	00001821 	.word	0x00001821
    1b3c:	00001ad1 	.word	0x00001ad1

00001b40 <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    1b40:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1b42:	7813      	ldrb	r3, [r2, #0]
    1b44:	2102      	movs	r1, #2
    1b46:	430b      	orrs	r3, r1
    1b48:	b2db      	uxtb	r3, r3
    1b4a:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1b4c:	79d3      	ldrb	r3, [r2, #7]
    1b4e:	09db      	lsrs	r3, r3, #7
    1b50:	d1fc      	bne.n	1b4c <_dac_sync_enable_channel+0xc>
}
    1b52:	4770      	bx	lr

00001b54 <_dac_sync_is_channel_enable>:
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    1b54:	6802      	ldr	r2, [r0, #0]
    1b56:	79d3      	ldrb	r3, [r2, #7]
    1b58:	09db      	lsrs	r3, r3, #7
    1b5a:	d1fc      	bne.n	1b56 <_dac_sync_is_channel_enable+0x2>
	tmp = ((Dac *)hw)->CTRLA.reg;
    1b5c:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    1b5e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1b60:	2001      	movs	r0, #1
    1b62:	4018      	ands	r0, r3
}
    1b64:	4770      	bx	lr

00001b66 <_dac_sync_write_data>:
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    1b66:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    1b68:	8111      	strh	r1, [r2, #8]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1b6a:	79d3      	ldrb	r3, [r2, #7]
    1b6c:	09db      	lsrs	r3, r3, #7
    1b6e:	d1fc      	bne.n	1b6a <_dac_sync_write_data+0x4>
}
    1b70:	4770      	bx	lr
	...

00001b74 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b74:	4b22      	ldr	r3, [pc, #136]	; (1c00 <_ext_irq_init+0x8c>)
    1b76:	785b      	ldrb	r3, [r3, #1]
    1b78:	09db      	lsrs	r3, r3, #7
    1b7a:	d1fb      	bne.n	1b74 <_ext_irq_init>
    1b7c:	4b20      	ldr	r3, [pc, #128]	; (1c00 <_ext_irq_init+0x8c>)
    1b7e:	785b      	ldrb	r3, [r3, #1]
    1b80:	09db      	lsrs	r3, r3, #7
    1b82:	d1fb      	bne.n	1b7c <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1b84:	4b1e      	ldr	r3, [pc, #120]	; (1c00 <_ext_irq_init+0x8c>)
    1b86:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1b88:	079b      	lsls	r3, r3, #30
    1b8a:	d50a      	bpl.n	1ba2 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1b8c:	2200      	movs	r2, #0
    1b8e:	4b1c      	ldr	r3, [pc, #112]	; (1c00 <_ext_irq_init+0x8c>)
    1b90:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b92:	4b1b      	ldr	r3, [pc, #108]	; (1c00 <_ext_irq_init+0x8c>)
    1b94:	785b      	ldrb	r3, [r3, #1]
    1b96:	09db      	lsrs	r3, r3, #7
    1b98:	d1fb      	bne.n	1b92 <_ext_irq_init+0x1e>
    1b9a:	4b19      	ldr	r3, [pc, #100]	; (1c00 <_ext_irq_init+0x8c>)
    1b9c:	785b      	ldrb	r3, [r3, #1]
    1b9e:	09db      	lsrs	r3, r3, #7
    1ba0:	d1fb      	bne.n	1b9a <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    1ba2:	2201      	movs	r2, #1
    1ba4:	4b16      	ldr	r3, [pc, #88]	; (1c00 <_ext_irq_init+0x8c>)
    1ba6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1ba8:	4b15      	ldr	r3, [pc, #84]	; (1c00 <_ext_irq_init+0x8c>)
    1baa:	785b      	ldrb	r3, [r3, #1]
    1bac:	09db      	lsrs	r3, r3, #7
    1bae:	d1fb      	bne.n	1ba8 <_ext_irq_init+0x34>
    1bb0:	4b13      	ldr	r3, [pc, #76]	; (1c00 <_ext_irq_init+0x8c>)
    1bb2:	785b      	ldrb	r3, [r3, #1]
    1bb4:	09db      	lsrs	r3, r3, #7
    1bb6:	d1fb      	bne.n	1bb0 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1bb8:	4b11      	ldr	r3, [pc, #68]	; (1c00 <_ext_irq_init+0x8c>)
    1bba:	2201      	movs	r2, #1
    1bbc:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1bbe:	2200      	movs	r2, #0
    1bc0:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1bc2:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1bc4:	4a0f      	ldr	r2, [pc, #60]	; (1c04 <_ext_irq_init+0x90>)
    1bc6:	619a      	str	r2, [r3, #24]
    1bc8:	2288      	movs	r2, #136	; 0x88
    1bca:	0392      	lsls	r2, r2, #14
    1bcc:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1bce:	781a      	ldrb	r2, [r3, #0]
    1bd0:	2102      	movs	r1, #2
    1bd2:	430a      	orrs	r2, r1
    1bd4:	b2d2      	uxtb	r2, r2
    1bd6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1bd8:	4b09      	ldr	r3, [pc, #36]	; (1c00 <_ext_irq_init+0x8c>)
    1bda:	785b      	ldrb	r3, [r3, #1]
    1bdc:	09db      	lsrs	r3, r3, #7
    1bde:	d1fb      	bne.n	1bd8 <_ext_irq_init+0x64>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be0:	4b09      	ldr	r3, [pc, #36]	; (1c08 <_ext_irq_init+0x94>)
    1be2:	2210      	movs	r2, #16
    1be4:	2180      	movs	r1, #128	; 0x80
    1be6:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf0:	3101      	adds	r1, #1
    1bf2:	31ff      	adds	r1, #255	; 0xff
    1bf4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf6:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1bf8:	4b04      	ldr	r3, [pc, #16]	; (1c0c <_ext_irq_init+0x98>)
    1bfa:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1bfc:	2000      	movs	r0, #0
    1bfe:	4770      	bx	lr
    1c00:	40001800 	.word	0x40001800
    1c04:	22030000 	.word	0x22030000
    1c08:	e000e100 	.word	0xe000e100
    1c0c:	20000454 	.word	0x20000454

00001c10 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1c10:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    1c12:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    1c14:	2b03      	cmp	r3, #3
    1c16:	d80b      	bhi.n	1c30 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    1c18:	00dc      	lsls	r4, r3, #3
    1c1a:	4a10      	ldr	r2, [pc, #64]	; (1c5c <_ext_irq_enable+0x4c>)
    1c1c:	1912      	adds	r2, r2, r4
    1c1e:	6852      	ldr	r2, [r2, #4]
    1c20:	4282      	cmp	r2, r0
    1c22:	d002      	beq.n	1c2a <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    1c24:	3301      	adds	r3, #1
    1c26:	b2db      	uxtb	r3, r3
    1c28:	e7f4      	b.n	1c14 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1c2a:	4b0c      	ldr	r3, [pc, #48]	; (1c5c <_ext_irq_enable+0x4c>)
    1c2c:	5ce2      	ldrb	r2, [r4, r3]
			break;
    1c2e:	e000      	b.n	1c32 <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1c30:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    1c32:	2aff      	cmp	r2, #255	; 0xff
    1c34:	d00e      	beq.n	1c54 <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    1c36:	2900      	cmp	r1, #0
    1c38:	d106      	bne.n	1c48 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1c3a:	2301      	movs	r3, #1
    1c3c:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1c3e:	4a08      	ldr	r2, [pc, #32]	; (1c60 <_ext_irq_enable+0x50>)
    1c40:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1c42:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    1c44:	2000      	movs	r0, #0
}
    1c46:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1c48:	2301      	movs	r3, #1
    1c4a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1c4c:	4a04      	ldr	r2, [pc, #16]	; (1c60 <_ext_irq_enable+0x50>)
    1c4e:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1c50:	2000      	movs	r0, #0
    1c52:	e7f8      	b.n	1c46 <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    1c54:	200d      	movs	r0, #13
    1c56:	4240      	negs	r0, r0
    1c58:	e7f5      	b.n	1c46 <_ext_irq_enable+0x36>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00005acc 	.word	0x00005acc
    1c60:	40001800 	.word	0x40001800

00001c64 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c66:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1c68:	4b27      	ldr	r3, [pc, #156]	; (1d08 <EIC_Handler+0xa4>)
    1c6a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1c6c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1c6e:	400a      	ands	r2, r1
    1c70:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c72:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1c74:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1c76:	4b25      	ldr	r3, [pc, #148]	; (1d0c <EIC_Handler+0xa8>)
    1c78:	6818      	ldr	r0, [r3, #0]
    1c7a:	1e43      	subs	r3, r0, #1
    1c7c:	4198      	sbcs	r0, r3
    1c7e:	b2c0      	uxtb	r0, r0
    1c80:	22d2      	movs	r2, #210	; 0xd2
    1c82:	4923      	ldr	r1, [pc, #140]	; (1d10 <EIC_Handler+0xac>)
    1c84:	4b23      	ldr	r3, [pc, #140]	; (1d14 <EIC_Handler+0xb0>)
    1c86:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1c88:	2501      	movs	r5, #1
    1c8a:	426d      	negs	r5, r5

	while (flags) {
    1c8c:	e031      	b.n	1cf2 <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1c8e:	00db      	lsls	r3, r3, #3
    1c90:	4a21      	ldr	r2, [pc, #132]	; (1d18 <EIC_Handler+0xb4>)
    1c92:	18d3      	adds	r3, r2, r3
    1c94:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1c96:	1c6b      	adds	r3, r5, #1
    1c98:	d003      	beq.n	1ca2 <EIC_Handler+0x3e>
				callback(pin);
    1c9a:	4b1c      	ldr	r3, [pc, #112]	; (1d0c <EIC_Handler+0xa8>)
    1c9c:	681b      	ldr	r3, [r3, #0]
    1c9e:	0028      	movs	r0, r5
    1ca0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1ca2:	2201      	movs	r2, #1
    1ca4:	40a2      	lsls	r2, r4
    1ca6:	9b01      	ldr	r3, [sp, #4]
    1ca8:	4393      	bics	r3, r2
    1caa:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1cac:	9801      	ldr	r0, [sp, #4]
    1cae:	4b1b      	ldr	r3, [pc, #108]	; (1d1c <EIC_Handler+0xb8>)
    1cb0:	4798      	blx	r3
    1cb2:	3801      	subs	r0, #1
    1cb4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1cb6:	1c63      	adds	r3, r4, #1
    1cb8:	d014      	beq.n	1ce4 <EIC_Handler+0x80>
    1cba:	2604      	movs	r6, #4
    1cbc:	2000      	movs	r0, #0
    1cbe:	e001      	b.n	1cc4 <EIC_Handler+0x60>
					upper = middle - 1;
    1cc0:	3901      	subs	r1, #1
    1cc2:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    1cc4:	42b0      	cmp	r0, r6
    1cc6:	d8e6      	bhi.n	1c96 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    1cc8:	1833      	adds	r3, r6, r0
    1cca:	105b      	asrs	r3, r3, #1
    1ccc:	b2d9      	uxtb	r1, r3
    1cce:	22ff      	movs	r2, #255	; 0xff
    1cd0:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    1cd2:	00df      	lsls	r7, r3, #3
    1cd4:	4a10      	ldr	r2, [pc, #64]	; (1d18 <EIC_Handler+0xb4>)
    1cd6:	5cba      	ldrb	r2, [r7, r2]
    1cd8:	42a2      	cmp	r2, r4
    1cda:	d0d8      	beq.n	1c8e <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    1cdc:	daf0      	bge.n	1cc0 <EIC_Handler+0x5c>
					lower = middle + 1;
    1cde:	3101      	adds	r1, #1
    1ce0:	b2c8      	uxtb	r0, r1
    1ce2:	e7ef      	b.n	1cc4 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    1ce4:	4b08      	ldr	r3, [pc, #32]	; (1d08 <EIC_Handler+0xa4>)
    1ce6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1ce8:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1cea:	400a      	ands	r2, r1
    1cec:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1cee:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1cf0:	611a      	str	r2, [r3, #16]
	while (flags) {
    1cf2:	9b01      	ldr	r3, [sp, #4]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d005      	beq.n	1d04 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    1cf8:	9801      	ldr	r0, [sp, #4]
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <EIC_Handler+0xb8>)
    1cfc:	4798      	blx	r3
    1cfe:	3801      	subs	r0, #1
    1d00:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1d02:	e7d8      	b.n	1cb6 <EIC_Handler+0x52>
	}
}
    1d04:	b003      	add	sp, #12
    1d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d08:	40001800 	.word	0x40001800
    1d0c:	20000454 	.word	0x20000454
    1d10:	00005aec 	.word	0x00005aec
    1d14:	00001821 	.word	0x00001821
    1d18:	00005acc 	.word	0x00005acc
    1d1c:	00003b35 	.word	0x00003b35

00001d20 <_event_system_init>:
int32_t _event_system_init(void)
{
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1d20:	2300      	movs	r3, #0
    1d22:	e006      	b.n	1d32 <_event_system_init+0x12>
		hri_evsys_write_USER_reg(EVSYS, user_mux_confs[i]);
    1d24:	0059      	lsls	r1, r3, #1
    1d26:	4a0d      	ldr	r2, [pc, #52]	; (1d5c <_event_system_init+0x3c>)
    1d28:	5a89      	ldrh	r1, [r1, r2]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER.reg = data;
    1d2a:	4a0d      	ldr	r2, [pc, #52]	; (1d60 <_event_system_init+0x40>)
    1d2c:	8111      	strh	r1, [r2, #8]
	for (i = 0; i < EVSYS_USERS; i++) {
    1d2e:	3301      	adds	r3, #1
    1d30:	b2db      	uxtb	r3, r3
    1d32:	2b1e      	cmp	r3, #30
    1d34:	d9f6      	bls.n	1d24 <_event_system_init+0x4>
    1d36:	2300      	movs	r3, #0
    1d38:	e007      	b.n	1d4a <_event_system_init+0x2a>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, channel_confs[i]);
    1d3a:	0099      	lsls	r1, r3, #2
    1d3c:	4a07      	ldr	r2, [pc, #28]	; (1d5c <_event_system_init+0x3c>)
    1d3e:	1852      	adds	r2, r2, r1
    1d40:	6c11      	ldr	r1, [r2, #64]	; 0x40
	((Evsys *)hw)->CHANNEL.reg = data;
    1d42:	4a07      	ldr	r2, [pc, #28]	; (1d60 <_event_system_init+0x40>)
    1d44:	6051      	str	r1, [r2, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1d46:	3301      	adds	r3, #1
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	2b0b      	cmp	r3, #11
    1d4c:	d9f5      	bls.n	1d3a <_event_system_init+0x1a>
	((Evsys *)hw)->INTENSET.reg = data;
    1d4e:	4b04      	ldr	r3, [pc, #16]	; (1d60 <_event_system_init+0x40>)
    1d50:	2200      	movs	r2, #0
    1d52:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    1d54:	3a01      	subs	r2, #1
    1d56:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    1d58:	2000      	movs	r0, #0
    1d5a:	4770      	bx	lr
    1d5c:	00005b04 	.word	0x00005b04
    1d60:	42000400 	.word	0x42000400

00001d64 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1d64:	07c3      	lsls	r3, r0, #31
    1d66:	d509      	bpl.n	1d7c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1d68:	4b11      	ldr	r3, [pc, #68]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1d6a:	2280      	movs	r2, #128	; 0x80
    1d6c:	0052      	lsls	r2, r2, #1
    1d6e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1d70:	4a10      	ldr	r2, [pc, #64]	; (1db4 <_gclk_init_generators_by_fref+0x50>)
    1d72:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1d74:	4b0e      	ldr	r3, [pc, #56]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1d76:	785b      	ldrb	r3, [r3, #1]
    1d78:	09db      	lsrs	r3, r3, #7
    1d7a:	d1fb      	bne.n	1d74 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1d7c:	0783      	lsls	r3, r0, #30
    1d7e:	d509      	bpl.n	1d94 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1d80:	4b0b      	ldr	r3, [pc, #44]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1d82:	2202      	movs	r2, #2
    1d84:	32ff      	adds	r2, #255	; 0xff
    1d86:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1d88:	4a0b      	ldr	r2, [pc, #44]	; (1db8 <_gclk_init_generators_by_fref+0x54>)
    1d8a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1d8c:	4b08      	ldr	r3, [pc, #32]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1d8e:	785b      	ldrb	r3, [r3, #1]
    1d90:	09db      	lsrs	r3, r3, #7
    1d92:	d1fb      	bne.n	1d8c <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1d94:	0703      	lsls	r3, r0, #28
    1d96:	d509      	bpl.n	1dac <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1d98:	4b05      	ldr	r3, [pc, #20]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1d9a:	2204      	movs	r2, #4
    1d9c:	32ff      	adds	r2, #255	; 0xff
    1d9e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1da0:	4a06      	ldr	r2, [pc, #24]	; (1dbc <_gclk_init_generators_by_fref+0x58>)
    1da2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1da4:	4b02      	ldr	r3, [pc, #8]	; (1db0 <_gclk_init_generators_by_fref+0x4c>)
    1da6:	785b      	ldrb	r3, [r3, #1]
    1da8:	09db      	lsrs	r3, r3, #7
    1daa:	d1fb      	bne.n	1da4 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1dac:	4770      	bx	lr
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	40000c00 	.word	0x40000c00
    1db4:	00090700 	.word	0x00090700
    1db8:	00090701 	.word	0x00090701
    1dbc:	00090503 	.word	0x00090503

00001dc0 <_is_valid_rww_flash_address>:
{
#define RWWEE_ADDR_START NVMCTRL_RWW_EEPROM_ADDR
#define RWWEE_ADDR_END (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES)

	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
    1dc0:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <_is_valid_rww_flash_address+0x18>)
    1dc2:	469c      	mov	ip, r3
    1dc4:	4460      	add	r0, ip
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
    1dc6:	2380      	movs	r3, #128	; 0x80
    1dc8:	011b      	lsls	r3, r3, #4
    1dca:	4298      	cmp	r0, r3
    1dcc:	d801      	bhi.n	1dd2 <_is_valid_rww_flash_address+0x12>
		return false;
	}
	return true;
    1dce:	2001      	movs	r0, #1
}
    1dd0:	4770      	bx	lr
		return false;
    1dd2:	2000      	movs	r0, #0
    1dd4:	e7fc      	b.n	1dd0 <_is_valid_rww_flash_address+0x10>
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	ffc00000 	.word	0xffc00000

00001ddc <_flash_init>:
{
    1ddc:	b570      	push	{r4, r5, r6, lr}
    1dde:	0005      	movs	r5, r0
    1de0:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1de2:	2800      	cmp	r0, #0
    1de4:	d01c      	beq.n	1e20 <_flash_init+0x44>
    1de6:	4b10      	ldr	r3, [pc, #64]	; (1e28 <_flash_init+0x4c>)
    1de8:	4299      	cmp	r1, r3
    1dea:	d01b      	beq.n	1e24 <_flash_init+0x48>
    1dec:	2000      	movs	r0, #0
    1dee:	2246      	movs	r2, #70	; 0x46
    1df0:	490e      	ldr	r1, [pc, #56]	; (1e2c <_flash_init+0x50>)
    1df2:	4b0f      	ldr	r3, [pc, #60]	; (1e30 <_flash_init+0x54>)
    1df4:	4798      	blx	r3
	device->hw = hw;
    1df6:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    1df8:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    1dfa:	239e      	movs	r3, #158	; 0x9e
    1dfc:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    1dfe:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    1e00:	4b0c      	ldr	r3, [pc, #48]	; (1e34 <_flash_init+0x58>)
    1e02:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e04:	4b0c      	ldr	r3, [pc, #48]	; (1e38 <_flash_init+0x5c>)
    1e06:	2220      	movs	r2, #32
    1e08:	2180      	movs	r1, #128	; 0x80
    1e0a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e10:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e14:	3101      	adds	r1, #1
    1e16:	31ff      	adds	r1, #255	; 0xff
    1e18:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e1a:	601a      	str	r2, [r3, #0]
}
    1e1c:	2000      	movs	r0, #0
    1e1e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    1e20:	2000      	movs	r0, #0
    1e22:	e7e4      	b.n	1dee <_flash_init+0x12>
    1e24:	2001      	movs	r0, #1
    1e26:	e7e2      	b.n	1dee <_flash_init+0x12>
    1e28:	41004000 	.word	0x41004000
    1e2c:	00005b74 	.word	0x00005b74
    1e30:	00001821 	.word	0x00001821
    1e34:	20000458 	.word	0x20000458
    1e38:	e000e100 	.word	0xe000e100

00001e3c <_flash_read>:
{
    1e3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    1e3e:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    1e40:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1e42:	7d2e      	ldrb	r6, [r5, #20]
    1e44:	07f6      	lsls	r6, r6, #31
    1e46:	d5fb      	bpl.n	1e40 <_flash_read+0x4>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1e48:	2020      	movs	r0, #32
    1e4a:	30ff      	adds	r0, #255	; 0xff
    1e4c:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
    1e4e:	07c8      	lsls	r0, r1, #31
    1e50:	d507      	bpl.n	1e62 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    1e52:	3401      	adds	r4, #1
    1e54:	2001      	movs	r0, #1
    1e56:	4381      	bics	r1, r0
    1e58:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    1e5a:	0a09      	lsrs	r1, r1, #8
    1e5c:	7011      	strb	r1, [r2, #0]
		i         = 1;
    1e5e:	2101      	movs	r1, #1
    1e60:	e003      	b.n	1e6a <_flash_read+0x2e>
		i = 0;
    1e62:	2100      	movs	r1, #0
    1e64:	e001      	b.n	1e6a <_flash_read+0x2e>
		i += 2;
    1e66:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
    1e68:	002c      	movs	r4, r5
	while (i < length) {
    1e6a:	4299      	cmp	r1, r3
    1e6c:	d20b      	bcs.n	1e86 <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
    1e6e:	1c65      	adds	r5, r4, #1
    1e70:	0064      	lsls	r4, r4, #1
    1e72:	8820      	ldrh	r0, [r4, #0]
    1e74:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
    1e76:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
    1e78:	1e5c      	subs	r4, r3, #1
    1e7a:	42a1      	cmp	r1, r4
    1e7c:	d2f3      	bcs.n	1e66 <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
    1e7e:	1c4c      	adds	r4, r1, #1
    1e80:	0a00      	lsrs	r0, r0, #8
    1e82:	5510      	strb	r0, [r2, r4]
    1e84:	e7ef      	b.n	1e66 <_flash_read+0x2a>
}
    1e86:	bd70      	pop	{r4, r5, r6, pc}

00001e88 <NVMCTRL_Handler>:
{
    1e88:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	; (1eb4 <NVMCTRL_Handler+0x2c>)
    1e8c:	6818      	ldr	r0, [r3, #0]
    1e8e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1e90:	7d1a      	ldrb	r2, [r3, #20]
	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1e92:	07d2      	lsls	r2, r2, #31
    1e94:	d504      	bpl.n	1ea0 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    1e96:	6803      	ldr	r3, [r0, #0]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d000      	beq.n	1e9e <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1e9c:	4798      	blx	r3
}
    1e9e:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1ea0:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    1ea2:	0792      	lsls	r2, r2, #30
    1ea4:	d5fb      	bpl.n	1e9e <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    1ea6:	2202      	movs	r2, #2
    1ea8:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1eaa:	6843      	ldr	r3, [r0, #4]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d0f6      	beq.n	1e9e <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1eb0:	4798      	blx	r3
}
    1eb2:	e7f4      	b.n	1e9e <NVMCTRL_Handler+0x16>
    1eb4:	20000458 	.word	0x20000458

00001eb8 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
    1eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eba:	0006      	movs	r6, r0
    1ebc:	000c      	movs	r4, r1
    1ebe:	0017      	movs	r7, r2
    1ec0:	001d      	movs	r5, r3
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
    1ec2:	0008      	movs	r0, r1
    1ec4:	4b0b      	ldr	r3, [pc, #44]	; (1ef4 <_rww_flash_read+0x3c>)
    1ec6:	4798      	blx	r3
    1ec8:	2800      	cmp	r0, #0
    1eca:	d00c      	beq.n	1ee6 <_rww_flash_read+0x2e>
    1ecc:	1960      	adds	r0, r4, r5
    1ece:	4b09      	ldr	r3, [pc, #36]	; (1ef4 <_rww_flash_read+0x3c>)
    1ed0:	4798      	blx	r3
    1ed2:	2800      	cmp	r0, #0
    1ed4:	d00a      	beq.n	1eec <_rww_flash_read+0x34>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
    1ed6:	002b      	movs	r3, r5
    1ed8:	003a      	movs	r2, r7
    1eda:	0021      	movs	r1, r4
    1edc:	0030      	movs	r0, r6
    1ede:	4c06      	ldr	r4, [pc, #24]	; (1ef8 <_rww_flash_read+0x40>)
    1ee0:	47a0      	blx	r4

	return ERR_NONE;
    1ee2:	2000      	movs	r0, #0
}
    1ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
    1ee6:	200e      	movs	r0, #14
    1ee8:	4240      	negs	r0, r0
    1eea:	e7fb      	b.n	1ee4 <_rww_flash_read+0x2c>
    1eec:	200e      	movs	r0, #14
    1eee:	4240      	negs	r0, r0
    1ef0:	e7f8      	b.n	1ee4 <_rww_flash_read+0x2c>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00001dc1 	.word	0x00001dc1
    1ef8:	00001e3d 	.word	0x00001e3d

00001efc <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1efc:	4b06      	ldr	r3, [pc, #24]	; (1f18 <_pm_init+0x1c>)
    1efe:	7a1a      	ldrb	r2, [r3, #8]
    1f00:	b2d2      	uxtb	r2, r2
    1f02:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1f04:	7a5a      	ldrb	r2, [r3, #9]
    1f06:	b2d2      	uxtb	r2, r2
    1f08:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1f0a:	7a9a      	ldrb	r2, [r3, #10]
    1f0c:	b2d2      	uxtb	r2, r2
    1f0e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1f10:	7ada      	ldrb	r2, [r3, #11]
    1f12:	b2d2      	uxtb	r2, r2
    1f14:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1f16:	4770      	bx	lr
    1f18:	40000400 	.word	0x40000400

00001f1c <TIMER_8_init>:
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1f1c:	4b1c      	ldr	r3, [pc, #112]	; (1f90 <TIMER_8_init+0x74>)
    1f1e:	7a9b      	ldrb	r3, [r3, #10]
    1f20:	09db      	lsrs	r3, r3, #7
    1f22:	d1fb      	bne.n	1f1c <TIMER_8_init>
    1f24:	4b1a      	ldr	r3, [pc, #104]	; (1f90 <TIMER_8_init+0x74>)
    1f26:	7a9b      	ldrb	r3, [r3, #10]
    1f28:	09db      	lsrs	r3, r3, #7
    1f2a:	d1fb      	bne.n	1f24 <TIMER_8_init+0x8>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1f2c:	4b18      	ldr	r3, [pc, #96]	; (1f90 <TIMER_8_init+0x74>)
    1f2e:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_8_init()
{

	hri_rtcmode0_wait_for_sync(RTC);
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(RTC)) {
    1f30:	079b      	lsls	r3, r3, #30
    1f32:	d50c      	bpl.n	1f4e <TIMER_8_init+0x32>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    1f34:	4a16      	ldr	r2, [pc, #88]	; (1f90 <TIMER_8_init+0x74>)
    1f36:	8813      	ldrh	r3, [r2, #0]
    1f38:	2102      	movs	r1, #2
    1f3a:	438b      	bics	r3, r1
    1f3c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1f3e:	4b14      	ldr	r3, [pc, #80]	; (1f90 <TIMER_8_init+0x74>)
    1f40:	7a9b      	ldrb	r3, [r3, #10]
    1f42:	09db      	lsrs	r3, r3, #7
    1f44:	d1fb      	bne.n	1f3e <TIMER_8_init+0x22>
    1f46:	4b12      	ldr	r3, [pc, #72]	; (1f90 <TIMER_8_init+0x74>)
    1f48:	7a9b      	ldrb	r3, [r3, #10]
    1f4a:	09db      	lsrs	r3, r3, #7
    1f4c:	d1fb      	bne.n	1f46 <TIMER_8_init+0x2a>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    1f4e:	4a10      	ldr	r2, [pc, #64]	; (1f90 <TIMER_8_init+0x74>)
    1f50:	8813      	ldrh	r3, [r2, #0]
    1f52:	2101      	movs	r1, #1
    1f54:	430b      	orrs	r3, r1
    1f56:	b29b      	uxth	r3, r3
    1f58:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1f5a:	4b0d      	ldr	r3, [pc, #52]	; (1f90 <TIMER_8_init+0x74>)
    1f5c:	7a9b      	ldrb	r3, [r3, #10]
    1f5e:	09db      	lsrs	r3, r3, #7
    1f60:	d1fb      	bne.n	1f5a <TIMER_8_init+0x3e>
    1f62:	4b0b      	ldr	r3, [pc, #44]	; (1f90 <TIMER_8_init+0x74>)
    1f64:	7a9b      	ldrb	r3, [r3, #10]
    1f66:	09db      	lsrs	r3, r3, #7
    1f68:	d1fb      	bne.n	1f62 <TIMER_8_init+0x46>
}

static inline void hri_rtc_write_READREQ_reg(const void *const hw, hri_rtc_readreq_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg = data;
    1f6a:	4b09      	ldr	r3, [pc, #36]	; (1f90 <TIMER_8_init+0x74>)
    1f6c:	2280      	movs	r2, #128	; 0x80
    1f6e:	01d2      	lsls	r2, r2, #7
    1f70:	805a      	strh	r2, [r3, #2]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1f72:	22f0      	movs	r2, #240	; 0xf0
    1f74:	0112      	lsls	r2, r2, #4
    1f76:	619a      	str	r2, [r3, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <TIMER_8_init+0x74>)
    1f7a:	7a9b      	ldrb	r3, [r3, #10]
    1f7c:	09db      	lsrs	r3, r3, #7
    1f7e:	d1fb      	bne.n	1f78 <TIMER_8_init+0x5c>
	((Rtc *)hw)->MODE0.INTENSET.reg = data;
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <TIMER_8_init+0x74>)
    1f82:	2201      	movs	r2, #1
    1f84:	71da      	strb	r2, [r3, #7]
	((Rtc *)hw)->MODE0.INTENCLR.reg = ~data;
    1f86:	32fd      	adds	r2, #253	; 0xfd
    1f88:	719a      	strb	r2, [r3, #6]
	        | 0 << RTC_MODE0_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: disabled */

	// hri_rtcmode0_write_CTRL_ENABLE_bit(RTC,0 << RTC_MODE0_CTRL_ENABLE_Pos); /* Enable: disabled */

	return 0;
}
    1f8a:	2000      	movs	r0, #0
    1f8c:	4770      	bx	lr
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	40001400 	.word	0x40001400

00001f94 <SPI_0_init>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1f94:	4b2a      	ldr	r3, [pc, #168]	; (2040 <SPI_0_init+0xac>)
    1f96:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize SPI interface
 */
int8_t SPI_0_init()
{

	if (!hri_sercomspi_is_syncing(SERCOM4, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1f98:	07db      	lsls	r3, r3, #31
    1f9a:	d41b      	bmi.n	1fd4 <SPI_0_init+0x40>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f9c:	4b28      	ldr	r3, [pc, #160]	; (2040 <SPI_0_init+0xac>)
    1f9e:	69db      	ldr	r3, [r3, #28]
    1fa0:	079b      	lsls	r3, r3, #30
    1fa2:	d1fb      	bne.n	1f9c <SPI_0_init+0x8>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1fa4:	4b26      	ldr	r3, [pc, #152]	; (2040 <SPI_0_init+0xac>)
    1fa6:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_SPI_CTRLA_MODE(3);
		if (hri_sercomspi_get_CTRLA_reg(SERCOM4, SERCOM_SPI_CTRLA_ENABLE)) {
    1fa8:	079b      	lsls	r3, r3, #30
    1faa:	d50c      	bpl.n	1fc6 <SPI_0_init+0x32>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1fac:	4a24      	ldr	r2, [pc, #144]	; (2040 <SPI_0_init+0xac>)
    1fae:	6813      	ldr	r3, [r2, #0]
    1fb0:	2102      	movs	r1, #2
    1fb2:	438b      	bics	r3, r1
    1fb4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1fb6:	4b22      	ldr	r3, [pc, #136]	; (2040 <SPI_0_init+0xac>)
    1fb8:	69db      	ldr	r3, [r3, #28]
    1fba:	079b      	lsls	r3, r3, #30
    1fbc:	d1fb      	bne.n	1fb6 <SPI_0_init+0x22>
    1fbe:	4b20      	ldr	r3, [pc, #128]	; (2040 <SPI_0_init+0xac>)
    1fc0:	69db      	ldr	r3, [r3, #28]
    1fc2:	079b      	lsls	r3, r3, #30
    1fc4:	d4fb      	bmi.n	1fbe <SPI_0_init+0x2a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1fc6:	220d      	movs	r2, #13
    1fc8:	4b1d      	ldr	r3, [pc, #116]	; (2040 <SPI_0_init+0xac>)
    1fca:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1fcc:	4b1c      	ldr	r3, [pc, #112]	; (2040 <SPI_0_init+0xac>)
    1fce:	69db      	ldr	r3, [r3, #28]
    1fd0:	079b      	lsls	r3, r3, #30
    1fd2:	d1fb      	bne.n	1fcc <SPI_0_init+0x38>
    1fd4:	4b1a      	ldr	r3, [pc, #104]	; (2040 <SPI_0_init+0xac>)
    1fd6:	69db      	ldr	r3, [r3, #28]
    1fd8:	07db      	lsls	r3, r3, #31
    1fda:	d4fb      	bmi.n	1fd4 <SPI_0_init+0x40>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1fdc:	4a19      	ldr	r2, [pc, #100]	; (2044 <SPI_0_init+0xb0>)
    1fde:	4b18      	ldr	r3, [pc, #96]	; (2040 <SPI_0_init+0xac>)
    1fe0:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1fe2:	4b17      	ldr	r3, [pc, #92]	; (2040 <SPI_0_init+0xac>)
    1fe4:	69db      	ldr	r3, [r3, #28]
    1fe6:	079b      	lsls	r3, r3, #30
    1fe8:	d1fb      	bne.n	1fe2 <SPI_0_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1fea:	4a15      	ldr	r2, [pc, #84]	; (2040 <SPI_0_init+0xac>)
    1fec:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_SPI_CTRLA_DOPO_Msk;
    1fee:	4916      	ldr	r1, [pc, #88]	; (2048 <SPI_0_init+0xb4>)
    1ff0:	400b      	ands	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    1ff2:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ff4:	4b12      	ldr	r3, [pc, #72]	; (2040 <SPI_0_init+0xac>)
    1ff6:	69db      	ldr	r3, [r3, #28]
    1ff8:	075b      	lsls	r3, r3, #29
    1ffa:	d1fb      	bne.n	1ff4 <SPI_0_init+0x60>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ffc:	4910      	ldr	r1, [pc, #64]	; (2040 <SPI_0_init+0xac>)
    1ffe:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_SPI_CTRLA_DIPO_Msk;
    2000:	4a12      	ldr	r2, [pc, #72]	; (204c <SPI_0_init+0xb8>)
    2002:	401a      	ands	r2, r3
	tmp |= SERCOM_SPI_CTRLA_DIPO(data);
    2004:	23c0      	movs	r3, #192	; 0xc0
    2006:	039b      	lsls	r3, r3, #14
    2008:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    200a:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    200c:	4b0c      	ldr	r3, [pc, #48]	; (2040 <SPI_0_init+0xac>)
    200e:	69db      	ldr	r3, [r3, #28]
    2010:	075b      	lsls	r3, r3, #29
    2012:	d1fb      	bne.n	200c <SPI_0_init+0x78>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2014:	2280      	movs	r2, #128	; 0x80
    2016:	0292      	lsls	r2, r2, #10
    2018:	4b09      	ldr	r3, [pc, #36]	; (2040 <SPI_0_init+0xac>)
    201a:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    201c:	4b08      	ldr	r3, [pc, #32]	; (2040 <SPI_0_init+0xac>)
    201e:	69db      	ldr	r3, [r3, #28]
    2020:	075b      	lsls	r3, r3, #29
    2022:	d1fb      	bne.n	201c <SPI_0_init+0x88>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2024:	4a06      	ldr	r2, [pc, #24]	; (2040 <SPI_0_init+0xac>)
    2026:	2367      	movs	r3, #103	; 0x67
    2028:	7313      	strb	r3, [r2, #12]
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    202a:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_SPI_CTRLA_ENABLE;
    202c:	2102      	movs	r1, #2
    202e:	438b      	bics	r3, r1
	tmp |= value << SERCOM_SPI_CTRLA_ENABLE_Pos;
    2030:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    2032:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2034:	4b02      	ldr	r3, [pc, #8]	; (2040 <SPI_0_init+0xac>)
    2036:	69db      	ldr	r3, [r3, #28]
    2038:	079b      	lsls	r3, r3, #30
    203a:	d1fb      	bne.n	2034 <SPI_0_init+0xa0>
	//		 | 0 << SERCOM_SPI_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: disabled */

	hri_sercomspi_write_CTRLA_ENABLE_bit(SERCOM4, 1 << SERCOM_SPI_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    203c:	2000      	movs	r0, #0
    203e:	4770      	bx	lr
    2040:	42001800 	.word	0x42001800
    2044:	3000000c 	.word	0x3000000c
    2048:	fffcffff 	.word	0xfffcffff
    204c:	ffcfffff 	.word	0xffcfffff

00002050 <SPI_0_enable>:
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2050:	4a04      	ldr	r2, [pc, #16]	; (2064 <SPI_0_enable+0x14>)
    2052:	6813      	ldr	r3, [r2, #0]
    2054:	2102      	movs	r1, #2
    2056:	430b      	orrs	r3, r1
    2058:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    205a:	4b02      	ldr	r3, [pc, #8]	; (2064 <SPI_0_enable+0x14>)
    205c:	69db      	ldr	r3, [r3, #28]
    205e:	079b      	lsls	r3, r3, #30
    2060:	d1fb      	bne.n	205a <SPI_0_enable+0xa>
 * \brief Enable SPI module
 */
void SPI_0_enable()
{
	hri_sercomspi_set_CTRLA_ENABLE_bit(SERCOM4);
}
    2062:	4770      	bx	lr
    2064:	42001800 	.word	0x42001800

00002068 <SPI_0_exchange_block>:
void SPI_0_exchange_block(void *block, uint8_t size)
{

	uint8_t *b = (uint8_t *)block;

	while (size--) {
    2068:	e00b      	b.n	2082 <SPI_0_exchange_block+0x1a>
		hri_sercomspi_write_DATA_reg(SERCOM4, *b);
    206a:	7801      	ldrb	r1, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <SPI_0_exchange_block+0x24>)
    206e:	6299      	str	r1, [r3, #40]	; 0x28
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2070:	4b06      	ldr	r3, [pc, #24]	; (208c <SPI_0_exchange_block+0x24>)
    2072:	7e1b      	ldrb	r3, [r3, #24]
		while (!(hri_sercomspi_read_INTFLAG_reg(SERCOM4) & SERCOM_SPI_INTFLAG_RXC))
    2074:	075b      	lsls	r3, r3, #29
    2076:	d5fb      	bpl.n	2070 <SPI_0_exchange_block+0x8>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <SPI_0_exchange_block+0x24>)
    207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			;
		*b = hri_sercomspi_read_DATA_reg(SERCOM4);
    207c:	7003      	strb	r3, [r0, #0]
		b++;
    207e:	3001      	adds	r0, #1
	while (size--) {
    2080:	0011      	movs	r1, r2
    2082:	1e4a      	subs	r2, r1, #1
    2084:	b2d2      	uxtb	r2, r2
    2086:	2900      	cmp	r1, #0
    2088:	d1ef      	bne.n	206a <SPI_0_exchange_block+0x2>
	}
}
    208a:	4770      	bx	lr
    208c:	42001800 	.word	0x42001800

00002090 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    2090:	4a14      	ldr	r2, [pc, #80]	; (20e4 <_sysctrl_init_sources+0x54>)
    2092:	230e      	movs	r3, #14
    2094:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2096:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    2098:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    209a:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    209c:	0f9b      	lsrs	r3, r3, #30
    209e:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    20a0:	0409      	lsls	r1, r1, #16
    20a2:	4811      	ldr	r0, [pc, #68]	; (20e8 <_sysctrl_init_sources+0x58>)
    20a4:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    20a6:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    20a8:	2102      	movs	r1, #2
    20aa:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    20ac:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    20ae:	6993      	ldr	r3, [r2, #24]
    20b0:	430b      	orrs	r3, r1
    20b2:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    20b4:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    20b6:	311d      	adds	r1, #29
    20b8:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    20ba:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    20bc:	4b09      	ldr	r3, [pc, #36]	; (20e4 <_sysctrl_init_sources+0x54>)
    20be:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    20c0:	079b      	lsls	r3, r3, #30
    20c2:	d5fb      	bpl.n	20bc <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    20c4:	4a07      	ldr	r2, [pc, #28]	; (20e4 <_sysctrl_init_sources+0x54>)
    20c6:	8a93      	ldrh	r3, [r2, #20]
    20c8:	2180      	movs	r1, #128	; 0x80
    20ca:	430b      	orrs	r3, r1
    20cc:	b29b      	uxth	r3, r3
    20ce:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    20d0:	4b04      	ldr	r3, [pc, #16]	; (20e4 <_sysctrl_init_sources+0x54>)
    20d2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    20d4:	071b      	lsls	r3, r3, #28
    20d6:	d5fb      	bpl.n	20d0 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    20d8:	4a02      	ldr	r2, [pc, #8]	; (20e4 <_sysctrl_init_sources+0x54>)
    20da:	6a13      	ldr	r3, [r2, #32]
    20dc:	2180      	movs	r1, #128	; 0x80
    20de:	430b      	orrs	r3, r1
    20e0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    20e2:	4770      	bx	lr
    20e4:	40000800 	.word	0x40000800
    20e8:	0fff0000 	.word	0x0fff0000

000020ec <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    20ec:	2286      	movs	r2, #134	; 0x86
    20ee:	01d2      	lsls	r2, r2, #7
    20f0:	4b1c      	ldr	r3, [pc, #112]	; (2164 <_sysctrl_init_referenced_generators+0x78>)
    20f2:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    20f4:	2202      	movs	r2, #2
    20f6:	4b1c      	ldr	r3, [pc, #112]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    20f8:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    20fa:	4b1b      	ldr	r3, [pc, #108]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    20fc:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    20fe:	06db      	lsls	r3, r3, #27
    2100:	d5fb      	bpl.n	20fa <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    2102:	4a1a      	ldr	r2, [pc, #104]	; (216c <_sysctrl_init_referenced_generators+0x80>)
    2104:	4b18      	ldr	r3, [pc, #96]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    2106:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2108:	4b19      	ldr	r3, [pc, #100]	; (2170 <_sysctrl_init_referenced_generators+0x84>)
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	0e9b      	lsrs	r3, r3, #26
    210e:	2b3f      	cmp	r3, #63	; 0x3f
    2110:	d020      	beq.n	2154 <_sysctrl_init_referenced_generators+0x68>
    2112:	029b      	lsls	r3, r3, #10
    2114:	2280      	movs	r2, #128	; 0x80
    2116:	0092      	lsls	r2, r2, #2
    2118:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    211a:	4a13      	ldr	r2, [pc, #76]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    211c:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    211e:	2306      	movs	r3, #6
    2120:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2122:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2124:	075b      	lsls	r3, r3, #29
    2126:	d518      	bpl.n	215a <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2128:	4b0f      	ldr	r3, [pc, #60]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    212a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    212c:	23d0      	movs	r3, #208	; 0xd0
    212e:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2130:	2bd0      	cmp	r3, #208	; 0xd0
    2132:	d1f9      	bne.n	2128 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    2134:	4a0c      	ldr	r2, [pc, #48]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    2136:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2138:	2180      	movs	r1, #128	; 0x80
    213a:	430b      	orrs	r3, r1
    213c:	b29b      	uxth	r3, r3
    213e:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    2140:	4b08      	ldr	r3, [pc, #32]	; (2164 <_sysctrl_init_referenced_generators+0x78>)
    2142:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2144:	09db      	lsrs	r3, r3, #7
    2146:	d1fb      	bne.n	2140 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    2148:	4a07      	ldr	r2, [pc, #28]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    214a:	6993      	ldr	r3, [r2, #24]
    214c:	2102      	movs	r1, #2
    214e:	438b      	bics	r3, r1
    2150:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2152:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2154:	23fc      	movs	r3, #252	; 0xfc
    2156:	01db      	lsls	r3, r3, #7
    2158:	e7df      	b.n	211a <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    215a:	4b03      	ldr	r3, [pc, #12]	; (2168 <_sysctrl_init_referenced_generators+0x7c>)
    215c:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    215e:	06db      	lsls	r3, r3, #27
    2160:	d5fb      	bpl.n	215a <_sysctrl_init_referenced_generators+0x6e>
    2162:	e7e7      	b.n	2134 <_sysctrl_init_referenced_generators+0x48>
    2164:	40000c00 	.word	0x40000c00
    2168:	40000800 	.word	0x40000800
    216c:	040105b8 	.word	0x040105b8
    2170:	00806024 	.word	0x00806024

00002174 <TIMER_1_init>:
	};
}

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    2174:	4b33      	ldr	r3, [pc, #204]	; (2244 <TIMER_1_init+0xd0>)
    2176:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2178:	07db      	lsls	r3, r3, #31
    217a:	d41b      	bmi.n	21b4 <TIMER_1_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    217c:	4b31      	ldr	r3, [pc, #196]	; (2244 <TIMER_1_init+0xd0>)
    217e:	689b      	ldr	r3, [r3, #8]
    2180:	079b      	lsls	r3, r3, #30
    2182:	d1fb      	bne.n	217c <TIMER_1_init+0x8>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2184:	4b2f      	ldr	r3, [pc, #188]	; (2244 <TIMER_1_init+0xd0>)
    2186:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2188:	079b      	lsls	r3, r3, #30
    218a:	d50c      	bpl.n	21a6 <TIMER_1_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    218c:	4a2d      	ldr	r2, [pc, #180]	; (2244 <TIMER_1_init+0xd0>)
    218e:	6813      	ldr	r3, [r2, #0]
    2190:	2102      	movs	r1, #2
    2192:	438b      	bics	r3, r1
    2194:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2196:	4b2b      	ldr	r3, [pc, #172]	; (2244 <TIMER_1_init+0xd0>)
    2198:	689b      	ldr	r3, [r3, #8]
    219a:	079b      	lsls	r3, r3, #30
    219c:	d1fb      	bne.n	2196 <TIMER_1_init+0x22>
    219e:	4b29      	ldr	r3, [pc, #164]	; (2244 <TIMER_1_init+0xd0>)
    21a0:	689b      	ldr	r3, [r3, #8]
    21a2:	079b      	lsls	r3, r3, #30
    21a4:	d4fb      	bmi.n	219e <TIMER_1_init+0x2a>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    21a6:	2201      	movs	r2, #1
    21a8:	4b26      	ldr	r3, [pc, #152]	; (2244 <TIMER_1_init+0xd0>)
    21aa:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21ac:	4b25      	ldr	r3, [pc, #148]	; (2244 <TIMER_1_init+0xd0>)
    21ae:	689b      	ldr	r3, [r3, #8]
    21b0:	079b      	lsls	r3, r3, #30
    21b2:	d1fb      	bne.n	21ac <TIMER_1_init+0x38>
    21b4:	4b23      	ldr	r3, [pc, #140]	; (2244 <TIMER_1_init+0xd0>)
    21b6:	689b      	ldr	r3, [r3, #8]
    21b8:	07db      	lsls	r3, r3, #31
    21ba:	d4fb      	bmi.n	21b4 <TIMER_1_init+0x40>
	((Tcc *)hw)->CTRLA.reg = data;
    21bc:	22c0      	movs	r2, #192	; 0xc0
    21be:	0092      	lsls	r2, r2, #2
    21c0:	4b20      	ldr	r3, [pc, #128]	; (2244 <TIMER_1_init+0xd0>)
    21c2:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21c4:	4b1f      	ldr	r3, [pc, #124]	; (2244 <TIMER_1_init+0xd0>)
    21c6:	689b      	ldr	r3, [r3, #8]
    21c8:	079b      	lsls	r3, r3, #30
    21ca:	d1fb      	bne.n	21c4 <TIMER_1_init+0x50>
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    21cc:	227f      	movs	r2, #127	; 0x7f
    21ce:	4b1d      	ldr	r3, [pc, #116]	; (2244 <TIMER_1_init+0xd0>)
    21d0:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21d2:	4b1c      	ldr	r3, [pc, #112]	; (2244 <TIMER_1_init+0xd0>)
    21d4:	689a      	ldr	r2, [r3, #8]
    21d6:	23f0      	movs	r3, #240	; 0xf0
    21d8:	011b      	lsls	r3, r3, #4
    21da:	421a      	tst	r2, r3
    21dc:	d1f9      	bne.n	21d2 <TIMER_1_init+0x5e>
	((Tcc *)hw)->CC[index].reg = data;
    21de:	227f      	movs	r2, #127	; 0x7f
    21e0:	4b18      	ldr	r3, [pc, #96]	; (2244 <TIMER_1_init+0xd0>)
    21e2:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21e4:	4b17      	ldr	r3, [pc, #92]	; (2244 <TIMER_1_init+0xd0>)
    21e6:	689a      	ldr	r2, [r3, #8]
    21e8:	23f0      	movs	r3, #240	; 0xf0
    21ea:	011b      	lsls	r3, r3, #4
    21ec:	421a      	tst	r2, r3
    21ee:	d1f9      	bne.n	21e4 <TIMER_1_init+0x70>
	((Tcc *)hw)->CC[index].reg = data;
    21f0:	227f      	movs	r2, #127	; 0x7f
    21f2:	4b14      	ldr	r3, [pc, #80]	; (2244 <TIMER_1_init+0xd0>)
    21f4:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21f6:	4b13      	ldr	r3, [pc, #76]	; (2244 <TIMER_1_init+0xd0>)
    21f8:	689a      	ldr	r2, [r3, #8]
    21fa:	23f0      	movs	r3, #240	; 0xf0
    21fc:	011b      	lsls	r3, r3, #4
    21fe:	421a      	tst	r2, r3
    2200:	d1f9      	bne.n	21f6 <TIMER_1_init+0x82>
	((Tcc *)hw)->CC[index].reg = data;
    2202:	227f      	movs	r2, #127	; 0x7f
    2204:	4b0f      	ldr	r3, [pc, #60]	; (2244 <TIMER_1_init+0xd0>)
    2206:	651a      	str	r2, [r3, #80]	; 0x50
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2208:	4b0e      	ldr	r3, [pc, #56]	; (2244 <TIMER_1_init+0xd0>)
    220a:	689a      	ldr	r2, [r3, #8]
    220c:	23f0      	movs	r3, #240	; 0xf0
    220e:	011b      	lsls	r3, r3, #4
    2210:	421a      	tst	r2, r3
    2212:	d1f9      	bne.n	2208 <TIMER_1_init+0x94>
	((Tcc *)hw)->PER.reg = data;
    2214:	22fe      	movs	r2, #254	; 0xfe
    2216:	4b0b      	ldr	r3, [pc, #44]	; (2244 <TIMER_1_init+0xd0>)
    2218:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    221a:	4b0a      	ldr	r3, [pc, #40]	; (2244 <TIMER_1_init+0xd0>)
    221c:	689b      	ldr	r3, [r3, #8]
    221e:	061b      	lsls	r3, r3, #24
    2220:	d4fb      	bmi.n	221a <TIMER_1_init+0xa6>
	((Tcc *)hw)->INTENSET.reg = data;
    2222:	4a08      	ldr	r2, [pc, #32]	; (2244 <TIMER_1_init+0xd0>)
    2224:	2301      	movs	r3, #1
    2226:	6293      	str	r3, [r2, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    2228:	3b03      	subs	r3, #3
    222a:	6253      	str	r3, [r2, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    222c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    222e:	2102      	movs	r1, #2
    2230:	438b      	bics	r3, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2232:	430b      	orrs	r3, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    2234:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2236:	4b03      	ldr	r3, [pc, #12]	; (2244 <TIMER_1_init+0xd0>)
    2238:	689b      	ldr	r3, [r3, #8]
    223a:	079b      	lsls	r3, r3, #30
    223c:	d1fb      	bne.n	2236 <TIMER_1_init+0xc2>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    223e:	2000      	movs	r0, #0
    2240:	4770      	bx	lr
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	42002000 	.word	0x42002000

00002248 <TIMER_0_init>:
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    2248:	4b1e      	ldr	r3, [pc, #120]	; (22c4 <TIMER_0_init+0x7c>)
    224a:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tcc_is_syncing(TCC1, TCC_SYNCBUSY_SWRST)) {
    224c:	07db      	lsls	r3, r3, #31
    224e:	d41b      	bmi.n	2288 <TIMER_0_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2250:	4b1c      	ldr	r3, [pc, #112]	; (22c4 <TIMER_0_init+0x7c>)
    2252:	689b      	ldr	r3, [r3, #8]
    2254:	079b      	lsls	r3, r3, #30
    2256:	d1fb      	bne.n	2250 <TIMER_0_init+0x8>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2258:	4b1a      	ldr	r3, [pc, #104]	; (22c4 <TIMER_0_init+0x7c>)
    225a:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC1, TCC_CTRLA_ENABLE)) {
    225c:	079b      	lsls	r3, r3, #30
    225e:	d50c      	bpl.n	227a <TIMER_0_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2260:	4a18      	ldr	r2, [pc, #96]	; (22c4 <TIMER_0_init+0x7c>)
    2262:	6813      	ldr	r3, [r2, #0]
    2264:	2102      	movs	r1, #2
    2266:	438b      	bics	r3, r1
    2268:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    226a:	4b16      	ldr	r3, [pc, #88]	; (22c4 <TIMER_0_init+0x7c>)
    226c:	689b      	ldr	r3, [r3, #8]
    226e:	079b      	lsls	r3, r3, #30
    2270:	d1fb      	bne.n	226a <TIMER_0_init+0x22>
    2272:	4b14      	ldr	r3, [pc, #80]	; (22c4 <TIMER_0_init+0x7c>)
    2274:	689b      	ldr	r3, [r3, #8]
    2276:	079b      	lsls	r3, r3, #30
    2278:	d4fb      	bmi.n	2272 <TIMER_0_init+0x2a>
	((Tcc *)hw)->CTRLA.reg = data;
    227a:	2201      	movs	r2, #1
    227c:	4b11      	ldr	r3, [pc, #68]	; (22c4 <TIMER_0_init+0x7c>)
    227e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2280:	4b10      	ldr	r3, [pc, #64]	; (22c4 <TIMER_0_init+0x7c>)
    2282:	689b      	ldr	r3, [r3, #8]
    2284:	079b      	lsls	r3, r3, #30
    2286:	d1fb      	bne.n	2280 <TIMER_0_init+0x38>
    2288:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <TIMER_0_init+0x7c>)
    228a:	689b      	ldr	r3, [r3, #8]
    228c:	07db      	lsls	r3, r3, #31
    228e:	d4fb      	bmi.n	2288 <TIMER_0_init+0x40>
	((Tcc *)hw)->PER.reg = data;
    2290:	4a0d      	ldr	r2, [pc, #52]	; (22c8 <TIMER_0_init+0x80>)
    2292:	4b0c      	ldr	r3, [pc, #48]	; (22c4 <TIMER_0_init+0x7c>)
    2294:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2296:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <TIMER_0_init+0x7c>)
    2298:	689b      	ldr	r3, [r3, #8]
    229a:	061b      	lsls	r3, r3, #24
    229c:	d4fb      	bmi.n	2296 <TIMER_0_init+0x4e>
	((Tcc *)hw)->EVCTRL.reg = data;
    229e:	4b09      	ldr	r3, [pc, #36]	; (22c4 <TIMER_0_init+0x7c>)
    22a0:	2280      	movs	r2, #128	; 0x80
    22a2:	0452      	lsls	r2, r2, #17
    22a4:	621a      	str	r2, [r3, #32]
	((Tcc *)hw)->INTENSET.reg = data;
    22a6:	2201      	movs	r2, #1
    22a8:	629a      	str	r2, [r3, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    22aa:	3a03      	subs	r2, #3
    22ac:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    22ae:	681a      	ldr	r2, [r3, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    22b0:	2102      	movs	r1, #2
    22b2:	438a      	bics	r2, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    22b4:	430a      	orrs	r2, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    22b6:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    22b8:	4b02      	ldr	r3, [pc, #8]	; (22c4 <TIMER_0_init+0x7c>)
    22ba:	689b      	ldr	r3, [r3, #8]
    22bc:	079b      	lsls	r3, r3, #30
    22be:	d1fb      	bne.n	22b8 <TIMER_0_init+0x70>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC1, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    22c0:	2000      	movs	r0, #0
    22c2:	4770      	bx	lr
    22c4:	42002400 	.word	0x42002400
    22c8:	0000ffff 	.word	0x0000ffff

000022cc <TIMER_2_init>:
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    22cc:	4b2a      	ldr	r3, [pc, #168]	; (2378 <TIMER_2_init+0xac>)
    22ce:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_2_init()
{

	if (!hri_tcc_is_syncing(TCC2, TCC_SYNCBUSY_SWRST)) {
    22d0:	07db      	lsls	r3, r3, #31
    22d2:	d41b      	bmi.n	230c <TIMER_2_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    22d4:	4b28      	ldr	r3, [pc, #160]	; (2378 <TIMER_2_init+0xac>)
    22d6:	689b      	ldr	r3, [r3, #8]
    22d8:	079b      	lsls	r3, r3, #30
    22da:	d1fb      	bne.n	22d4 <TIMER_2_init+0x8>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    22dc:	4b26      	ldr	r3, [pc, #152]	; (2378 <TIMER_2_init+0xac>)
    22de:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC2, TCC_CTRLA_ENABLE)) {
    22e0:	079b      	lsls	r3, r3, #30
    22e2:	d50c      	bpl.n	22fe <TIMER_2_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    22e4:	4a24      	ldr	r2, [pc, #144]	; (2378 <TIMER_2_init+0xac>)
    22e6:	6813      	ldr	r3, [r2, #0]
    22e8:	2102      	movs	r1, #2
    22ea:	438b      	bics	r3, r1
    22ec:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    22ee:	4b22      	ldr	r3, [pc, #136]	; (2378 <TIMER_2_init+0xac>)
    22f0:	689b      	ldr	r3, [r3, #8]
    22f2:	079b      	lsls	r3, r3, #30
    22f4:	d1fb      	bne.n	22ee <TIMER_2_init+0x22>
    22f6:	4b20      	ldr	r3, [pc, #128]	; (2378 <TIMER_2_init+0xac>)
    22f8:	689b      	ldr	r3, [r3, #8]
    22fa:	079b      	lsls	r3, r3, #30
    22fc:	d4fb      	bmi.n	22f6 <TIMER_2_init+0x2a>
	((Tcc *)hw)->CTRLA.reg = data;
    22fe:	2201      	movs	r2, #1
    2300:	4b1d      	ldr	r3, [pc, #116]	; (2378 <TIMER_2_init+0xac>)
    2302:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2304:	4b1c      	ldr	r3, [pc, #112]	; (2378 <TIMER_2_init+0xac>)
    2306:	689b      	ldr	r3, [r3, #8]
    2308:	079b      	lsls	r3, r3, #30
    230a:	d1fb      	bne.n	2304 <TIMER_2_init+0x38>
    230c:	4b1a      	ldr	r3, [pc, #104]	; (2378 <TIMER_2_init+0xac>)
    230e:	689b      	ldr	r3, [r3, #8]
    2310:	07db      	lsls	r3, r3, #31
    2312:	d4fb      	bmi.n	230c <TIMER_2_init+0x40>
	((Tcc *)hw)->CTRLA.reg = data;
    2314:	22c0      	movs	r2, #192	; 0xc0
    2316:	0092      	lsls	r2, r2, #2
    2318:	4b17      	ldr	r3, [pc, #92]	; (2378 <TIMER_2_init+0xac>)
    231a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    231c:	4b16      	ldr	r3, [pc, #88]	; (2378 <TIMER_2_init+0xac>)
    231e:	689b      	ldr	r3, [r3, #8]
    2320:	079b      	lsls	r3, r3, #30
    2322:	d1fb      	bne.n	231c <TIMER_2_init+0x50>
	((Tcc *)hw)->CC[index].reg = data;
    2324:	227f      	movs	r2, #127	; 0x7f
    2326:	4b14      	ldr	r3, [pc, #80]	; (2378 <TIMER_2_init+0xac>)
    2328:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    232a:	4b13      	ldr	r3, [pc, #76]	; (2378 <TIMER_2_init+0xac>)
    232c:	689a      	ldr	r2, [r3, #8]
    232e:	23f0      	movs	r3, #240	; 0xf0
    2330:	011b      	lsls	r3, r3, #4
    2332:	421a      	tst	r2, r3
    2334:	d1f9      	bne.n	232a <TIMER_2_init+0x5e>
	((Tcc *)hw)->CC[index].reg = data;
    2336:	227f      	movs	r2, #127	; 0x7f
    2338:	4b0f      	ldr	r3, [pc, #60]	; (2378 <TIMER_2_init+0xac>)
    233a:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    233c:	4b0e      	ldr	r3, [pc, #56]	; (2378 <TIMER_2_init+0xac>)
    233e:	689a      	ldr	r2, [r3, #8]
    2340:	23f0      	movs	r3, #240	; 0xf0
    2342:	011b      	lsls	r3, r3, #4
    2344:	421a      	tst	r2, r3
    2346:	d1f9      	bne.n	233c <TIMER_2_init+0x70>
	((Tcc *)hw)->PER.reg = data;
    2348:	22fe      	movs	r2, #254	; 0xfe
    234a:	4b0b      	ldr	r3, [pc, #44]	; (2378 <TIMER_2_init+0xac>)
    234c:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    234e:	4b0a      	ldr	r3, [pc, #40]	; (2378 <TIMER_2_init+0xac>)
    2350:	689b      	ldr	r3, [r3, #8]
    2352:	061b      	lsls	r3, r3, #24
    2354:	d4fb      	bmi.n	234e <TIMER_2_init+0x82>
	((Tcc *)hw)->INTENSET.reg = data;
    2356:	4a08      	ldr	r2, [pc, #32]	; (2378 <TIMER_2_init+0xac>)
    2358:	2301      	movs	r3, #1
    235a:	6293      	str	r3, [r2, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    235c:	3b03      	subs	r3, #3
    235e:	6253      	str	r3, [r2, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2360:	6813      	ldr	r3, [r2, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    2362:	2102      	movs	r1, #2
    2364:	438b      	bics	r3, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2366:	430b      	orrs	r3, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    2368:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    236a:	4b03      	ldr	r3, [pc, #12]	; (2378 <TIMER_2_init+0xac>)
    236c:	689b      	ldr	r3, [r3, #8]
    236e:	079b      	lsls	r3, r3, #30
    2370:	d1fb      	bne.n	236a <TIMER_2_init+0x9e>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC2, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2372:	2000      	movs	r0, #0
    2374:	4770      	bx	lr
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	42002800 	.word	0x42002800

0000237c <TIMER_3_init>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    237c:	4b15      	ldr	r3, [pc, #84]	; (23d4 <TIMER_3_init+0x58>)
    237e:	7bdb      	ldrb	r3, [r3, #15]
    2380:	09db      	lsrs	r3, r3, #7
    2382:	d1fb      	bne.n	237c <TIMER_3_init>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2384:	4b13      	ldr	r3, [pc, #76]	; (23d4 <TIMER_3_init+0x58>)
    2386:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_3_init()
{

	hri_tc_wait_for_sync(TC3);
	if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    2388:	079b      	lsls	r3, r3, #30
    238a:	d508      	bpl.n	239e <TIMER_3_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    238c:	4a11      	ldr	r2, [pc, #68]	; (23d4 <TIMER_3_init+0x58>)
    238e:	8813      	ldrh	r3, [r2, #0]
    2390:	2102      	movs	r1, #2
    2392:	438b      	bics	r3, r1
    2394:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2396:	4b0f      	ldr	r3, [pc, #60]	; (23d4 <TIMER_3_init+0x58>)
    2398:	7bdb      	ldrb	r3, [r3, #15]
    239a:	09db      	lsrs	r3, r3, #7
    239c:	d1fb      	bne.n	2396 <TIMER_3_init+0x1a>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    239e:	2201      	movs	r2, #1
    23a0:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <TIMER_3_init+0x58>)
    23a2:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23a4:	4b0b      	ldr	r3, [pc, #44]	; (23d4 <TIMER_3_init+0x58>)
    23a6:	7bdb      	ldrb	r3, [r3, #15]
    23a8:	09db      	lsrs	r3, r3, #7
    23aa:	d1fb      	bne.n	23a4 <TIMER_3_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    23ac:	4b09      	ldr	r3, [pc, #36]	; (23d4 <TIMER_3_init+0x58>)
    23ae:	22d1      	movs	r2, #209	; 0xd1
    23b0:	0092      	lsls	r2, r2, #2
    23b2:	801a      	strh	r2, [r3, #0]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    23b4:	227f      	movs	r2, #127	; 0x7f
    23b6:	761a      	strb	r2, [r3, #24]
    23b8:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    23ba:	327f      	adds	r2, #127	; 0x7f
    23bc:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    23be:	2101      	movs	r1, #1
    23c0:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    23c2:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    23c4:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    23c6:	3101      	adds	r1, #1
    23c8:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    23ca:	430a      	orrs	r2, r1
    23cc:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    23ce:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    23d0:	2000      	movs	r0, #0
    23d2:	4770      	bx	lr
    23d4:	42002c00 	.word	0x42002c00

000023d8 <TIMER_5_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23d8:	4b15      	ldr	r3, [pc, #84]	; (2430 <TIMER_5_init+0x58>)
    23da:	7bdb      	ldrb	r3, [r3, #15]
    23dc:	09db      	lsrs	r3, r3, #7
    23de:	d1fb      	bne.n	23d8 <TIMER_5_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    23e0:	4b13      	ldr	r3, [pc, #76]	; (2430 <TIMER_5_init+0x58>)
    23e2:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_5_init()
{

	hri_tc_wait_for_sync(TC4);
	if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    23e4:	079b      	lsls	r3, r3, #30
    23e6:	d508      	bpl.n	23fa <TIMER_5_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    23e8:	4a11      	ldr	r2, [pc, #68]	; (2430 <TIMER_5_init+0x58>)
    23ea:	8813      	ldrh	r3, [r2, #0]
    23ec:	2102      	movs	r1, #2
    23ee:	438b      	bics	r3, r1
    23f0:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23f2:	4b0f      	ldr	r3, [pc, #60]	; (2430 <TIMER_5_init+0x58>)
    23f4:	7bdb      	ldrb	r3, [r3, #15]
    23f6:	09db      	lsrs	r3, r3, #7
    23f8:	d1fb      	bne.n	23f2 <TIMER_5_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    23fa:	2201      	movs	r2, #1
    23fc:	4b0c      	ldr	r3, [pc, #48]	; (2430 <TIMER_5_init+0x58>)
    23fe:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2400:	4b0b      	ldr	r3, [pc, #44]	; (2430 <TIMER_5_init+0x58>)
    2402:	7bdb      	ldrb	r3, [r3, #15]
    2404:	09db      	lsrs	r3, r3, #7
    2406:	d1fb      	bne.n	2400 <TIMER_5_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2408:	4b09      	ldr	r3, [pc, #36]	; (2430 <TIMER_5_init+0x58>)
    240a:	22d1      	movs	r2, #209	; 0xd1
    240c:	0092      	lsls	r2, r2, #2
    240e:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2410:	227f      	movs	r2, #127	; 0x7f
    2412:	761a      	strb	r2, [r3, #24]
    2414:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2416:	327f      	adds	r2, #127	; 0x7f
    2418:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    241a:	2101      	movs	r1, #1
    241c:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    241e:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2420:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    2422:	3101      	adds	r1, #1
    2424:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    2426:	430a      	orrs	r2, r1
    2428:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    242a:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    242c:	2000      	movs	r0, #0
    242e:	4770      	bx	lr
    2430:	42003000 	.word	0x42003000

00002434 <TIMER_6_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2434:	4b15      	ldr	r3, [pc, #84]	; (248c <TIMER_6_init+0x58>)
    2436:	7bdb      	ldrb	r3, [r3, #15]
    2438:	09db      	lsrs	r3, r3, #7
    243a:	d1fb      	bne.n	2434 <TIMER_6_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    243c:	4b13      	ldr	r3, [pc, #76]	; (248c <TIMER_6_init+0x58>)
    243e:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_6_init()
{

	hri_tc_wait_for_sync(TC5);
	if (hri_tc_get_CTRLA_reg(TC5, TC_CTRLA_ENABLE)) {
    2440:	079b      	lsls	r3, r3, #30
    2442:	d508      	bpl.n	2456 <TIMER_6_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2444:	4a11      	ldr	r2, [pc, #68]	; (248c <TIMER_6_init+0x58>)
    2446:	8813      	ldrh	r3, [r2, #0]
    2448:	2102      	movs	r1, #2
    244a:	438b      	bics	r3, r1
    244c:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    244e:	4b0f      	ldr	r3, [pc, #60]	; (248c <TIMER_6_init+0x58>)
    2450:	7bdb      	ldrb	r3, [r3, #15]
    2452:	09db      	lsrs	r3, r3, #7
    2454:	d1fb      	bne.n	244e <TIMER_6_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2456:	2201      	movs	r2, #1
    2458:	4b0c      	ldr	r3, [pc, #48]	; (248c <TIMER_6_init+0x58>)
    245a:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    245c:	4b0b      	ldr	r3, [pc, #44]	; (248c <TIMER_6_init+0x58>)
    245e:	7bdb      	ldrb	r3, [r3, #15]
    2460:	09db      	lsrs	r3, r3, #7
    2462:	d1fb      	bne.n	245c <TIMER_6_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2464:	4b09      	ldr	r3, [pc, #36]	; (248c <TIMER_6_init+0x58>)
    2466:	22d1      	movs	r2, #209	; 0xd1
    2468:	0092      	lsls	r2, r2, #2
    246a:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    246c:	227f      	movs	r2, #127	; 0x7f
    246e:	761a      	strb	r2, [r3, #24]
    2470:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2472:	327f      	adds	r2, #127	; 0x7f
    2474:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    2476:	2101      	movs	r1, #1
    2478:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    247a:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    247c:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    247e:	3101      	adds	r1, #1
    2480:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    2482:	430a      	orrs	r2, r1
    2484:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    2486:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC5, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2488:	2000      	movs	r0, #0
    248a:	4770      	bx	lr
    248c:	42003400 	.word	0x42003400

00002490 <TIMER_4_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2490:	4b15      	ldr	r3, [pc, #84]	; (24e8 <TIMER_4_init+0x58>)
    2492:	7bdb      	ldrb	r3, [r3, #15]
    2494:	09db      	lsrs	r3, r3, #7
    2496:	d1fb      	bne.n	2490 <TIMER_4_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2498:	4b13      	ldr	r3, [pc, #76]	; (24e8 <TIMER_4_init+0x58>)
    249a:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_4_init()
{

	hri_tc_wait_for_sync(TC6);
	if (hri_tc_get_CTRLA_reg(TC6, TC_CTRLA_ENABLE)) {
    249c:	079b      	lsls	r3, r3, #30
    249e:	d508      	bpl.n	24b2 <TIMER_4_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    24a0:	4a11      	ldr	r2, [pc, #68]	; (24e8 <TIMER_4_init+0x58>)
    24a2:	8813      	ldrh	r3, [r2, #0]
    24a4:	2102      	movs	r1, #2
    24a6:	438b      	bics	r3, r1
    24a8:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    24aa:	4b0f      	ldr	r3, [pc, #60]	; (24e8 <TIMER_4_init+0x58>)
    24ac:	7bdb      	ldrb	r3, [r3, #15]
    24ae:	09db      	lsrs	r3, r3, #7
    24b0:	d1fb      	bne.n	24aa <TIMER_4_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    24b2:	2201      	movs	r2, #1
    24b4:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <TIMER_4_init+0x58>)
    24b6:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    24b8:	4b0b      	ldr	r3, [pc, #44]	; (24e8 <TIMER_4_init+0x58>)
    24ba:	7bdb      	ldrb	r3, [r3, #15]
    24bc:	09db      	lsrs	r3, r3, #7
    24be:	d1fb      	bne.n	24b8 <TIMER_4_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    24c0:	4b09      	ldr	r3, [pc, #36]	; (24e8 <TIMER_4_init+0x58>)
    24c2:	22d1      	movs	r2, #209	; 0xd1
    24c4:	0092      	lsls	r2, r2, #2
    24c6:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    24c8:	227f      	movs	r2, #127	; 0x7f
    24ca:	761a      	strb	r2, [r3, #24]
    24cc:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    24ce:	327f      	adds	r2, #127	; 0x7f
    24d0:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    24d2:	2101      	movs	r1, #1
    24d4:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    24d6:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    24d8:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    24da:	3101      	adds	r1, #1
    24dc:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    24de:	430a      	orrs	r2, r1
    24e0:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    24e2:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC6, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    24e4:	2000      	movs	r0, #0
    24e6:	4770      	bx	lr
    24e8:	42003800 	.word	0x42003800

000024ec <TIMER_7_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    24ec:	4b15      	ldr	r3, [pc, #84]	; (2544 <TIMER_7_init+0x58>)
    24ee:	7bdb      	ldrb	r3, [r3, #15]
    24f0:	09db      	lsrs	r3, r3, #7
    24f2:	d1fb      	bne.n	24ec <TIMER_7_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    24f4:	4b13      	ldr	r3, [pc, #76]	; (2544 <TIMER_7_init+0x58>)
    24f6:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_7_init()
{

	hri_tc_wait_for_sync(TC7);
	if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    24f8:	079b      	lsls	r3, r3, #30
    24fa:	d508      	bpl.n	250e <TIMER_7_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    24fc:	4a11      	ldr	r2, [pc, #68]	; (2544 <TIMER_7_init+0x58>)
    24fe:	8813      	ldrh	r3, [r2, #0]
    2500:	2102      	movs	r1, #2
    2502:	438b      	bics	r3, r1
    2504:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2506:	4b0f      	ldr	r3, [pc, #60]	; (2544 <TIMER_7_init+0x58>)
    2508:	7bdb      	ldrb	r3, [r3, #15]
    250a:	09db      	lsrs	r3, r3, #7
    250c:	d1fb      	bne.n	2506 <TIMER_7_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    250e:	2201      	movs	r2, #1
    2510:	4b0c      	ldr	r3, [pc, #48]	; (2544 <TIMER_7_init+0x58>)
    2512:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2514:	4b0b      	ldr	r3, [pc, #44]	; (2544 <TIMER_7_init+0x58>)
    2516:	7bdb      	ldrb	r3, [r3, #15]
    2518:	09db      	lsrs	r3, r3, #7
    251a:	d1fb      	bne.n	2514 <TIMER_7_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    251c:	4b09      	ldr	r3, [pc, #36]	; (2544 <TIMER_7_init+0x58>)
    251e:	22d1      	movs	r2, #209	; 0xd1
    2520:	0092      	lsls	r2, r2, #2
    2522:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2524:	227f      	movs	r2, #127	; 0x7f
    2526:	761a      	strb	r2, [r3, #24]
    2528:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    252a:	327f      	adds	r2, #127	; 0x7f
    252c:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    252e:	2101      	movs	r1, #1
    2530:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    2532:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2534:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    2536:	3101      	adds	r1, #1
    2538:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    253a:	430a      	orrs	r2, r1
    253c:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    253e:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2540:	2000      	movs	r0, #0
    2542:	4770      	bx	lr
    2544:	42003c00 	.word	0x42003c00

00002548 <USART_0_init>:
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2548:	4b2c      	ldr	r3, [pc, #176]	; (25fc <USART_0_init+0xb4>)
    254a:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize USART interface
 */
int8_t USART_0_init()
{

	if (!hri_sercomusart_is_syncing(SERCOM3, SERCOM_USART_SYNCBUSY_SWRST)) {
    254c:	07db      	lsls	r3, r3, #31
    254e:	d41b      	bmi.n	2588 <USART_0_init+0x40>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2550:	4b2a      	ldr	r3, [pc, #168]	; (25fc <USART_0_init+0xb4>)
    2552:	69db      	ldr	r3, [r3, #28]
    2554:	079b      	lsls	r3, r3, #30
    2556:	d1fb      	bne.n	2550 <USART_0_init+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2558:	4b28      	ldr	r3, [pc, #160]	; (25fc <USART_0_init+0xb4>)
    255a:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_USART_CTRLA_MODE(1);
		if (hri_sercomusart_get_CTRLA_reg(SERCOM3, SERCOM_USART_CTRLA_ENABLE)) {
    255c:	079b      	lsls	r3, r3, #30
    255e:	d50c      	bpl.n	257a <USART_0_init+0x32>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2560:	4a26      	ldr	r2, [pc, #152]	; (25fc <USART_0_init+0xb4>)
    2562:	6813      	ldr	r3, [r2, #0]
    2564:	2102      	movs	r1, #2
    2566:	438b      	bics	r3, r1
    2568:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    256a:	4b24      	ldr	r3, [pc, #144]	; (25fc <USART_0_init+0xb4>)
    256c:	69db      	ldr	r3, [r3, #28]
    256e:	079b      	lsls	r3, r3, #30
    2570:	d1fb      	bne.n	256a <USART_0_init+0x22>
    2572:	4b22      	ldr	r3, [pc, #136]	; (25fc <USART_0_init+0xb4>)
    2574:	69db      	ldr	r3, [r3, #28]
    2576:	079b      	lsls	r3, r3, #30
    2578:	d4fb      	bmi.n	2572 <USART_0_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    257a:	2205      	movs	r2, #5
    257c:	4b1f      	ldr	r3, [pc, #124]	; (25fc <USART_0_init+0xb4>)
    257e:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2580:	4b1e      	ldr	r3, [pc, #120]	; (25fc <USART_0_init+0xb4>)
    2582:	69db      	ldr	r3, [r3, #28]
    2584:	079b      	lsls	r3, r3, #30
    2586:	d1fb      	bne.n	2580 <USART_0_init+0x38>
    2588:	4b1c      	ldr	r3, [pc, #112]	; (25fc <USART_0_init+0xb4>)
    258a:	69db      	ldr	r3, [r3, #28]
    258c:	07db      	lsls	r3, r3, #31
    258e:	d4fb      	bmi.n	2588 <USART_0_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2590:	4a1b      	ldr	r2, [pc, #108]	; (2600 <USART_0_init+0xb8>)
    2592:	4b1a      	ldr	r3, [pc, #104]	; (25fc <USART_0_init+0xb4>)
    2594:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2596:	4b19      	ldr	r3, [pc, #100]	; (25fc <USART_0_init+0xb4>)
    2598:	69db      	ldr	r3, [r3, #28]
    259a:	079b      	lsls	r3, r3, #30
    259c:	d1fb      	bne.n	2596 <USART_0_init+0x4e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    259e:	4a17      	ldr	r2, [pc, #92]	; (25fc <USART_0_init+0xb4>)
    25a0:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_USART_CTRLA_TXPO_Msk;
    25a2:	4918      	ldr	r1, [pc, #96]	; (2604 <USART_0_init+0xbc>)
    25a4:	400b      	ands	r3, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    25a6:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    25a8:	4b14      	ldr	r3, [pc, #80]	; (25fc <USART_0_init+0xb4>)
    25aa:	69db      	ldr	r3, [r3, #28]
    25ac:	075b      	lsls	r3, r3, #29
    25ae:	d1fb      	bne.n	25a8 <USART_0_init+0x60>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    25b0:	4912      	ldr	r1, [pc, #72]	; (25fc <USART_0_init+0xb4>)
    25b2:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_USART_CTRLA_RXPO_Msk;
    25b4:	4a14      	ldr	r2, [pc, #80]	; (2608 <USART_0_init+0xc0>)
    25b6:	401a      	ands	r2, r3
	tmp |= SERCOM_USART_CTRLA_RXPO(data);
    25b8:	2380      	movs	r3, #128	; 0x80
    25ba:	035b      	lsls	r3, r3, #13
    25bc:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    25be:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    25c0:	4b0e      	ldr	r3, [pc, #56]	; (25fc <USART_0_init+0xb4>)
    25c2:	69db      	ldr	r3, [r3, #28]
    25c4:	075b      	lsls	r3, r3, #29
    25c6:	d1fb      	bne.n	25c0 <USART_0_init+0x78>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    25c8:	4a10      	ldr	r2, [pc, #64]	; (260c <USART_0_init+0xc4>)
    25ca:	4b0c      	ldr	r3, [pc, #48]	; (25fc <USART_0_init+0xb4>)
    25cc:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    25ce:	4b0b      	ldr	r3, [pc, #44]	; (25fc <USART_0_init+0xb4>)
    25d0:	69db      	ldr	r3, [r3, #28]
    25d2:	075b      	lsls	r3, r3, #29
    25d4:	d1fb      	bne.n	25ce <USART_0_init+0x86>
	((Sercom *)hw)->USART.BAUD.reg = data;
    25d6:	4b09      	ldr	r3, [pc, #36]	; (25fc <USART_0_init+0xb4>)
    25d8:	4a0d      	ldr	r2, [pc, #52]	; (2610 <USART_0_init+0xc8>)
    25da:	819a      	strh	r2, [r3, #12]
	((Sercom *)hw)->USART.INTENSET.reg = data;
    25dc:	2284      	movs	r2, #132	; 0x84
    25de:	759a      	strb	r2, [r3, #22]
	((Sercom *)hw)->USART.INTENCLR.reg = ~data;
    25e0:	3a09      	subs	r2, #9
    25e2:	751a      	strb	r2, [r3, #20]
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    25e4:	681a      	ldr	r2, [r3, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    25e6:	2102      	movs	r1, #2
    25e8:	438a      	bics	r2, r1
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    25ea:	430a      	orrs	r2, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    25ec:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    25ee:	4b03      	ldr	r3, [pc, #12]	; (25fc <USART_0_init+0xb4>)
    25f0:	69db      	ldr	r3, [r3, #28]
    25f2:	079b      	lsls	r3, r3, #30
    25f4:	d1fb      	bne.n	25ee <USART_0_init+0xa6>
	        | 0 << SERCOM_USART_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: disabled */

	hri_sercomusart_write_CTRLA_ENABLE_bit(SERCOM3, 1 << SERCOM_USART_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    25f6:	2000      	movs	r0, #0
    25f8:	4770      	bx	lr
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	42001400 	.word	0x42001400
    2600:	40000004 	.word	0x40000004
    2604:	fffcffff 	.word	0xfffcffff
    2608:	ffcfffff 	.word	0xffcfffff
    260c:	00020040 	.word	0x00020040
    2610:	ffffeaa7 	.word	0xffffeaa7

00002614 <hv_dc_supply_cancel>:
		}
	}
}

void hv_dc_supply_cancel() {
	hv_dc_supply_state = HV_DC_SUPPLY_STATE_OFF;
    2614:	2200      	movs	r2, #0
    2616:	4b0a      	ldr	r3, [pc, #40]	; (2640 <hv_dc_supply_cancel+0x2c>)
    2618:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_tcc_get_STATUS_PERBV_bit(const void *const hw)
{
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    261a:	4b0a      	ldr	r3, [pc, #40]	; (2644 <hv_dc_supply_cancel+0x30>)
    261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    261e:	061b      	lsls	r3, r3, #24
    2620:	d409      	bmi.n	2636 <hv_dc_supply_cancel+0x22>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    2622:	4b08      	ldr	r3, [pc, #32]	; (2644 <hv_dc_supply_cancel+0x30>)
    2624:	3202      	adds	r2, #2
    2626:	715a      	strb	r2, [r3, #5]
#ifndef TCC_UTIL_H_
#define TCC_UTIL_H_

static inline void hri_tcc_write_CCB_reg_no_lock(const void *const hw, uint8_t index, hri_tcc_ccb_reg_t data)
{
	((Tcc *)hw)->CCB[index].reg = data;
    2628:	2100      	movs	r1, #0
    262a:	6759      	str	r1, [r3, #116]	; 0x74
    262c:	4906      	ldr	r1, [pc, #24]	; (2648 <hv_dc_supply_cancel+0x34>)
    262e:	6719      	str	r1, [r3, #112]	; 0x70
}

static inline void hri_tcc_write_PERB_reg_no_lock(const void *const hw, hri_tcc_perb_reg_t data)
{
	((Tcc *)hw)->PERB.reg = data;
    2630:	4906      	ldr	r1, [pc, #24]	; (264c <hv_dc_supply_cancel+0x38>)
    2632:	66d9      	str	r1, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    2634:	711a      	strb	r2, [r3, #4]
	//CAUTION: This step can be skipped by a pending update. Sometimes, it has to be done again in TCC1_Handler
	hv_dc_supply_set_timer(0x000000, HV_DC_SUPPLY_MAX_BURST_CYCLES, true);
	hv_dc_supply_sensed_voltage = 0;
    2636:	2200      	movs	r2, #0
    2638:	4b01      	ldr	r3, [pc, #4]	; (2640 <hv_dc_supply_cancel+0x2c>)
    263a:	805a      	strh	r2, [r3, #2]
}
    263c:	4770      	bx	lr
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	20000460 	.word	0x20000460
    2644:	42002400 	.word	0x42002400
    2648:	00ffffff 	.word	0x00ffffff
    264c:	0003a8f4 	.word	0x0003a8f4

00002650 <ADC_Handler>:
void ADC_Handler() {
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	46ce      	mov	lr, r9
    2654:	4647      	mov	r7, r8
    2656:	b580      	push	{r7, lr}
    2658:	b087      	sub	sp, #28
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    265a:	2201      	movs	r2, #1
    265c:	4b7f      	ldr	r3, [pc, #508]	; (285c <ADC_Handler+0x20c>)
    265e:	761a      	strb	r2, [r3, #24]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    2660:	4b7e      	ldr	r3, [pc, #504]	; (285c <ADC_Handler+0x20c>)
    2662:	7e5b      	ldrb	r3, [r3, #25]
    2664:	09db      	lsrs	r3, r3, #7
    2666:	d1fb      	bne.n	2660 <ADC_Handler+0x10>
	return ((Adc *)hw)->RESULT.reg;
    2668:	4b7c      	ldr	r3, [pc, #496]	; (285c <ADC_Handler+0x20c>)
    266a:	8b59      	ldrh	r1, [r3, #26]
    266c:	b289      	uxth	r1, r1
	hv_dc_supply_sensed_voltage = voltage;
    266e:	4b7c      	ldr	r3, [pc, #496]	; (2860 <ADC_Handler+0x210>)
    2670:	8059      	strh	r1, [r3, #2]
	switch (hv_dc_supply_state) {
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	b2db      	uxtb	r3, r3
    2676:	2b01      	cmp	r3, #1
    2678:	d007      	beq.n	268a <ADC_Handler+0x3a>
    267a:	2b02      	cmp	r3, #2
    267c:	d100      	bne.n	2680 <ADC_Handler+0x30>
    267e:	e06d      	b.n	275c <ADC_Handler+0x10c>
}
    2680:	b007      	add	sp, #28
    2682:	bc0c      	pop	{r2, r3}
    2684:	4690      	mov	r8, r2
    2686:	4699      	mov	r9, r3
    2688:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (voltage >= HV_DC_SUPPLY_SENSE_TARGET) {
    268a:	4b76      	ldr	r3, [pc, #472]	; (2864 <ADC_Handler+0x214>)
    268c:	4299      	cmp	r1, r3
    268e:	d90f      	bls.n	26b0 <ADC_Handler+0x60>
				hv_dc_supply_state = HV_DC_SUPPLY_STATE_REGULATE;
    2690:	2202      	movs	r2, #2
    2692:	4b73      	ldr	r3, [pc, #460]	; (2860 <ADC_Handler+0x210>)
    2694:	701a      	strb	r2, [r3, #0]
	controller->integral_max = tuneFrom->integral_max;
}
#endif

static inline void pid_controller_init(PidController* controller, PID_VALUE_T current_output) {
	controller->last_error = 0;
    2696:	4874      	ldr	r0, [pc, #464]	; (2868 <ADC_Handler+0x218>)
    2698:	2200      	movs	r2, #0
    269a:	2300      	movs	r3, #0
    269c:	6502      	str	r2, [r0, #80]	; 0x50
    269e:	6543      	str	r3, [r0, #84]	; 0x54
	controller->last_integral_value = 0;
    26a0:	6582      	str	r2, [r0, #88]	; 0x58
    26a2:	65c3      	str	r3, [r0, #92]	; 0x5c
	controller->last_derivative_value = 0;
    26a4:	6602      	str	r2, [r0, #96]	; 0x60
    26a6:	6643      	str	r3, [r0, #100]	; 0x64
	controller->last_output = current_output * controller->kpid_divisor;
    26a8:	6904      	ldr	r4, [r0, #16]
    26aa:	6945      	ldr	r5, [r0, #20]
    26ac:	6682      	str	r2, [r0, #104]	; 0x68
    26ae:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (voltage >= HV_DC_SUPPLY_LOCKOUT_OVERVOLTAGE_TARGET) {
    26b0:	4b6e      	ldr	r3, [pc, #440]	; (286c <ADC_Handler+0x21c>)
    26b2:	4299      	cmp	r1, r3
    26b4:	d859      	bhi.n	276a <ADC_Handler+0x11a>
	switch (hv_dc_supply_state) {
    26b6:	4b6a      	ldr	r3, [pc, #424]	; (2860 <ADC_Handler+0x210>)
    26b8:	781b      	ldrb	r3, [r3, #0]
    26ba:	b2db      	uxtb	r3, r3
    26bc:	2b01      	cmp	r3, #1
    26be:	d057      	beq.n	2770 <ADC_Handler+0x120>
    26c0:	2b02      	cmp	r3, #2
    26c2:	d1dd      	bne.n	2680 <ADC_Handler+0x30>
			int32_t error = ((int32_t) HV_DC_SUPPLY_SENSE_TARGET) - ((int32_t) voltage);
    26c4:	2397      	movs	r3, #151	; 0x97
    26c6:	00db      	lsls	r3, r3, #3
    26c8:	1a59      	subs	r1, r3, r1
			PID_VALUE_T duty_cycle = pid_controller_update(&controller, error);
    26ca:	000e      	movs	r6, r1
    26cc:	17cf      	asrs	r7, r1, #31
}

static inline PID_VALUE_T pid_controller_update(PidController* controller, const PID_VALUE_T error) {
	//calculate basic p, i and d terms
	PID_VALUE_T proportional = (controller->kp_factor * error);
    26ce:	4b66      	ldr	r3, [pc, #408]	; (2868 <ADC_Handler+0x218>)
    26d0:	4698      	mov	r8, r3
    26d2:	681a      	ldr	r2, [r3, #0]
    26d4:	685b      	ldr	r3, [r3, #4]
    26d6:	4966      	ldr	r1, [pc, #408]	; (2870 <ADC_Handler+0x220>)
    26d8:	4689      	mov	r9, r1
    26da:	0030      	movs	r0, r6
    26dc:	0039      	movs	r1, r7
    26de:	47c8      	blx	r9
    26e0:	9000      	str	r0, [sp, #0]
    26e2:	9101      	str	r1, [sp, #4]
	PID_VALUE_T integral = (controller->ki_factor * (error + controller->last_error)) + controller->last_integral_value;
    26e4:	4643      	mov	r3, r8
    26e6:	6898      	ldr	r0, [r3, #8]
    26e8:	68d9      	ldr	r1, [r3, #12]
    26ea:	6d1c      	ldr	r4, [r3, #80]	; 0x50
    26ec:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    26ee:	0032      	movs	r2, r6
    26f0:	003b      	movs	r3, r7
    26f2:	1912      	adds	r2, r2, r4
    26f4:	416b      	adcs	r3, r5
    26f6:	47c8      	blx	r9
    26f8:	4643      	mov	r3, r8
    26fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    26fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    26fe:	1812      	adds	r2, r2, r0
    2700:	414b      	adcs	r3, r1
    2702:	9204      	str	r2, [sp, #16]
    2704:	9305      	str	r3, [sp, #20]
	PID_VALUE_T derivative = ((controller->kd_factor * (error - controller->last_error)) + (controller->kd_filter_factor * controller->last_derivative_value)) / controller->kd_divisor;
    2706:	4643      	mov	r3, r8
    2708:	6998      	ldr	r0, [r3, #24]
    270a:	69d9      	ldr	r1, [r3, #28]
    270c:	0032      	movs	r2, r6
    270e:	003b      	movs	r3, r7
    2710:	1b12      	subs	r2, r2, r4
    2712:	41ab      	sbcs	r3, r5
    2714:	47c8      	blx	r9
    2716:	0004      	movs	r4, r0
    2718:	000d      	movs	r5, r1
    271a:	4643      	mov	r3, r8
    271c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    271e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2724:	47c8      	blx	r9
    2726:	1900      	adds	r0, r0, r4
    2728:	4169      	adcs	r1, r5
    272a:	4643      	mov	r3, r8
    272c:	6a1a      	ldr	r2, [r3, #32]
    272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2730:	4c50      	ldr	r4, [pc, #320]	; (2874 <ADC_Handler+0x224>)
    2732:	47a0      	blx	r4
    2734:	9002      	str	r0, [sp, #8]
    2736:	9103      	str	r1, [sp, #12]

	//integrator anti-windup
	PID_VALUE_T integrator_limit;
	if (proportional < controller->integral_max) {
    2738:	4643      	mov	r3, r8
    273a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    273e:	9c00      	ldr	r4, [sp, #0]
    2740:	9d01      	ldr	r5, [sp, #4]
    2742:	42ab      	cmp	r3, r5
    2744:	dc02      	bgt.n	274c <ADC_Handler+0xfc>
    2746:	d129      	bne.n	279c <ADC_Handler+0x14c>
    2748:	42a2      	cmp	r2, r4
    274a:	d927      	bls.n	279c <ADC_Handler+0x14c>
		integrator_limit = controller->integral_max - proportional;
    274c:	4b46      	ldr	r3, [pc, #280]	; (2868 <ADC_Handler+0x218>)
    274e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
    2750:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    2752:	9a00      	ldr	r2, [sp, #0]
    2754:	9b01      	ldr	r3, [sp, #4]
    2756:	1aa4      	subs	r4, r4, r2
    2758:	419d      	sbcs	r5, r3
    275a:	e021      	b.n	27a0 <ADC_Handler+0x150>
			if (voltage <= HV_DC_SUPPLY_REGULATION_END_TARGET) {
    275c:	4b46      	ldr	r3, [pc, #280]	; (2878 <ADC_Handler+0x228>)
    275e:	4299      	cmp	r1, r3
    2760:	d8a6      	bhi.n	26b0 <ADC_Handler+0x60>
				hv_dc_supply_state = HV_DC_SUPPLY_STATE_INITIALIZE;
    2762:	2201      	movs	r2, #1
    2764:	4b3e      	ldr	r3, [pc, #248]	; (2860 <ADC_Handler+0x210>)
    2766:	701a      	strb	r2, [r3, #0]
    2768:	e7a2      	b.n	26b0 <ADC_Handler+0x60>
		hv_dc_supply_cancel();
    276a:	4b44      	ldr	r3, [pc, #272]	; (287c <ADC_Handler+0x22c>)
    276c:	4798      	blx	r3
    276e:	e787      	b.n	2680 <ADC_Handler+0x30>
	return (duty_cycle * HV_DC_SUPPLY_CONDUCTION_TIME_FACTOR) / (voltage + HV_DC_SUPPLY_DIODE_VOLTAGE_VALUE);
    2770:	3106      	adds	r1, #6
    2772:	4843      	ldr	r0, [pc, #268]	; (2880 <ADC_Handler+0x230>)
    2774:	4b43      	ldr	r3, [pc, #268]	; (2884 <ADC_Handler+0x234>)
    2776:	4798      	blx	r3
	return hv_dc_supply_conduction_time(voltage, duty_cycle) + HV_DC_SUPPLY_BURST_SAFETY_MARGIN_CYCLES + duty_cycle;
    2778:	0003      	movs	r3, r0
    277a:	33e1      	adds	r3, #225	; 0xe1
    277c:	33ff      	adds	r3, #255	; 0xff
    277e:	b29b      	uxth	r3, r3
	if (value < min) {
    2780:	4a41      	ldr	r2, [pc, #260]	; (2888 <ADC_Handler+0x238>)
    2782:	4293      	cmp	r3, r2
    2784:	d908      	bls.n	2798 <ADC_Handler+0x148>
	hv_dc_supply_duty_cycle = duty_cycle;
    2786:	2090      	movs	r0, #144	; 0x90
    2788:	0040      	lsls	r0, r0, #1
    278a:	2100      	movs	r1, #0
    278c:	4a34      	ldr	r2, [pc, #208]	; (2860 <ADC_Handler+0x210>)
    278e:	6090      	str	r0, [r2, #8]
    2790:	60d1      	str	r1, [r2, #12]
	hv_dc_supply_period = period;
    2792:	4a35      	ldr	r2, [pc, #212]	; (2868 <ADC_Handler+0x218>)
    2794:	6713      	str	r3, [r2, #112]	; 0x70
    2796:	e773      	b.n	2680 <ADC_Handler+0x30>
		return min;
    2798:	4b3c      	ldr	r3, [pc, #240]	; (288c <ADC_Handler+0x23c>)
    279a:	e7f4      	b.n	2786 <ADC_Handler+0x136>
	} else {
		integrator_limit = 0;
    279c:	2400      	movs	r4, #0
    279e:	2500      	movs	r5, #0
	}
	if (integral > integrator_limit) {
    27a0:	9a04      	ldr	r2, [sp, #16]
    27a2:	9b05      	ldr	r3, [sp, #20]
    27a4:	42ab      	cmp	r3, r5
    27a6:	dc04      	bgt.n	27b2 <ADC_Handler+0x162>
    27a8:	d101      	bne.n	27ae <ADC_Handler+0x15e>
    27aa:	42a2      	cmp	r2, r4
    27ac:	d801      	bhi.n	27b2 <ADC_Handler+0x162>
	PID_VALUE_T integral = (controller->ki_factor * (error + controller->last_error)) + controller->last_integral_value;
    27ae:	9c04      	ldr	r4, [sp, #16]
    27b0:	9d05      	ldr	r5, [sp, #20]
		integral = integrator_limit;
	}
	
	if (proportional > controller->integral_min) {
    27b2:	4b2d      	ldr	r3, [pc, #180]	; (2868 <ADC_Handler+0x218>)
    27b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    27b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27b8:	9901      	ldr	r1, [sp, #4]
    27ba:	4299      	cmp	r1, r3
    27bc:	dc03      	bgt.n	27c6 <ADC_Handler+0x176>
    27be:	d10a      	bne.n	27d6 <ADC_Handler+0x186>
    27c0:	9900      	ldr	r1, [sp, #0]
    27c2:	4291      	cmp	r1, r2
    27c4:	d907      	bls.n	27d6 <ADC_Handler+0x186>
		integrator_limit = controller->integral_min - proportional;
    27c6:	4b28      	ldr	r3, [pc, #160]	; (2868 <ADC_Handler+0x218>)
    27c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    27ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27cc:	9800      	ldr	r0, [sp, #0]
    27ce:	9901      	ldr	r1, [sp, #4]
    27d0:	1a12      	subs	r2, r2, r0
    27d2:	418b      	sbcs	r3, r1
    27d4:	e001      	b.n	27da <ADC_Handler+0x18a>
	} else {
		integrator_limit = 0;
    27d6:	2200      	movs	r2, #0
    27d8:	2300      	movs	r3, #0
	}
	if (integral < integrator_limit) {
    27da:	42ab      	cmp	r3, r5
    27dc:	dc04      	bgt.n	27e8 <ADC_Handler+0x198>
    27de:	d101      	bne.n	27e4 <ADC_Handler+0x194>
    27e0:	42a2      	cmp	r2, r4
    27e2:	d801      	bhi.n	27e8 <ADC_Handler+0x198>
    27e4:	0022      	movs	r2, r4
    27e6:	002b      	movs	r3, r5
		integral = integrator_limit;
	}

	//store current values
	controller->last_error = error;
    27e8:	4c1f      	ldr	r4, [pc, #124]	; (2868 <ADC_Handler+0x218>)
    27ea:	6526      	str	r6, [r4, #80]	; 0x50
    27ec:	6567      	str	r7, [r4, #84]	; 0x54
	controller->last_integral_value = integral;
    27ee:	65a2      	str	r2, [r4, #88]	; 0x58
    27f0:	65e3      	str	r3, [r4, #92]	; 0x5c
	controller->last_derivative_value = derivative;
    27f2:	9802      	ldr	r0, [sp, #8]
    27f4:	9903      	ldr	r1, [sp, #12]
    27f6:	6620      	str	r0, [r4, #96]	; 0x60
    27f8:	6661      	str	r1, [r4, #100]	; 0x64
	
	PID_VALUE_T result = controller->last_output + proportional + integral + derivative;
    27fa:	9e00      	ldr	r6, [sp, #0]
    27fc:	9f01      	ldr	r7, [sp, #4]
    27fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    2800:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    2802:	1836      	adds	r6, r6, r0
    2804:	414f      	adcs	r7, r1
    2806:	1992      	adds	r2, r2, r6
    2808:	417b      	adcs	r3, r7
    280a:	9802      	ldr	r0, [sp, #8]
    280c:	9903      	ldr	r1, [sp, #12]
    280e:	1880      	adds	r0, r0, r2
    2810:	4159      	adcs	r1, r3
		//gpio_set_pin_level(LED2, result != 0);
		//gpio_set_pin_level(LED2, result <= controller->min + (controller->max - controller->min) / 2 && result >= controller->min);
		//gpio_set_pin_level(LED2, result >= controller->min + (controller->max - controller->min) / 2 && result <= controller->max);
	//}
	
	if (result > controller->max) {
    2812:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2816:	4299      	cmp	r1, r3
    2818:	dc02      	bgt.n	2820 <ADC_Handler+0x1d0>
    281a:	d104      	bne.n	2826 <ADC_Handler+0x1d6>
    281c:	4290      	cmp	r0, r2
    281e:	d902      	bls.n	2826 <ADC_Handler+0x1d6>
		result = controller->max;
    2820:	4b11      	ldr	r3, [pc, #68]	; (2868 <ADC_Handler+0x218>)
    2822:	6b98      	ldr	r0, [r3, #56]	; 0x38
    2824:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	}
	if (result < controller->min) {
    2826:	4b10      	ldr	r3, [pc, #64]	; (2868 <ADC_Handler+0x218>)
    2828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    282c:	428b      	cmp	r3, r1
    282e:	dd0f      	ble.n	2850 <ADC_Handler+0x200>
		result = controller->min;
    2830:	4b0d      	ldr	r3, [pc, #52]	; (2868 <ADC_Handler+0x218>)
    2832:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2834:	6b59      	ldr	r1, [r3, #52]	; 0x34
	}
	
	//gpio_set_pin_level(GPIO1, result > controller->min + (controller->max - controller->min) / 2);
	
	controller->last_output = result;
    2836:	4c0c      	ldr	r4, [pc, #48]	; (2868 <ADC_Handler+0x218>)
    2838:	66a0      	str	r0, [r4, #104]	; 0x68
    283a:	66e1      	str	r1, [r4, #108]	; 0x6c
	return result / controller->kpid_divisor;
    283c:	6922      	ldr	r2, [r4, #16]
    283e:	6963      	ldr	r3, [r4, #20]
    2840:	4d0c      	ldr	r5, [pc, #48]	; (2874 <ADC_Handler+0x224>)
    2842:	47a8      	blx	r5
	hv_dc_supply_duty_cycle = duty_cycle;
    2844:	4b06      	ldr	r3, [pc, #24]	; (2860 <ADC_Handler+0x210>)
    2846:	6098      	str	r0, [r3, #8]
    2848:	60d9      	str	r1, [r3, #12]
	hv_dc_supply_period = period;
    284a:	4b10      	ldr	r3, [pc, #64]	; (288c <ADC_Handler+0x23c>)
    284c:	6723      	str	r3, [r4, #112]	; 0x70
}
    284e:	e717      	b.n	2680 <ADC_Handler+0x30>
	if (result < controller->min) {
    2850:	428b      	cmp	r3, r1
    2852:	d1f0      	bne.n	2836 <ADC_Handler+0x1e6>
    2854:	4282      	cmp	r2, r0
    2856:	d8eb      	bhi.n	2830 <ADC_Handler+0x1e0>
    2858:	e7ed      	b.n	2836 <ADC_Handler+0x1e6>
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	42004000 	.word	0x42004000
    2860:	20000460 	.word	0x20000460
    2864:	000004b7 	.word	0x000004b7
    2868:	20000018 	.word	0x20000018
    286c:	0000054f 	.word	0x0000054f
    2870:	00003ae1 	.word	0x00003ae1
    2874:	00003a99 	.word	0x00003a99
    2878:	000002f9 	.word	0x000002f9
    287c:	00002615 	.word	0x00002615
    2880:	00040200 	.word	0x00040200
    2884:	000037ad 	.word	0x000037ad
    2888:	000003be 	.word	0x000003be
    288c:	000003bf 	.word	0x000003bf

00002890 <TCC1_Handler>:
void TCC1_Handler() {
    2890:	b510      	push	{r4, lr}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2892:	2201      	movs	r2, #1
    2894:	4b28      	ldr	r3, [pc, #160]	; (2938 <TCC1_Handler+0xa8>)
    2896:	62da      	str	r2, [r3, #44]	; 0x2c
	hv_dc_supply_counter++;
    2898:	4a28      	ldr	r2, [pc, #160]	; (293c <TCC1_Handler+0xac>)
    289a:	8a13      	ldrh	r3, [r2, #16]
    289c:	3301      	adds	r3, #1
    289e:	b29b      	uxth	r3, r3
    28a0:	8213      	strh	r3, [r2, #16]
	if (!hv_dc_supply_state || hv_dc_supply_counter >= HV_DC_SUPPLY_MAX_CYCLES) {
    28a2:	7813      	ldrb	r3, [r2, #0]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d016      	beq.n	28d6 <TCC1_Handler+0x46>
    28a8:	0013      	movs	r3, r2
    28aa:	8a1a      	ldrh	r2, [r3, #16]
		if (!(hv_dc_supply_counter & HV_DC_SUPPLY_NON_MEASURABLE_CYCLES)) {
    28ac:	8a1b      	ldrh	r3, [r3, #16]
    28ae:	071b      	lsls	r3, r3, #28
    28b0:	d014      	beq.n	28dc <TCC1_Handler+0x4c>
			hv_dc_supply_set_timer(hv_dc_supply_duty_cycle, hv_dc_supply_period, false);
    28b2:	4b22      	ldr	r3, [pc, #136]	; (293c <TCC1_Handler+0xac>)
    28b4:	6898      	ldr	r0, [r3, #8]
    28b6:	68d9      	ldr	r1, [r3, #12]
    28b8:	4b21      	ldr	r3, [pc, #132]	; (2940 <TCC1_Handler+0xb0>)
    28ba:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    28bc:	4b1e      	ldr	r3, [pc, #120]	; (2938 <TCC1_Handler+0xa8>)
    28be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    28c0:	061b      	lsls	r3, r3, #24
    28c2:	d407      	bmi.n	28d4 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    28c4:	4b1c      	ldr	r3, [pc, #112]	; (2938 <TCC1_Handler+0xa8>)
    28c6:	2202      	movs	r2, #2
    28c8:	715a      	strb	r2, [r3, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    28ca:	6758      	str	r0, [r3, #116]	; 0x74
    28cc:	491d      	ldr	r1, [pc, #116]	; (2944 <TCC1_Handler+0xb4>)
    28ce:	6719      	str	r1, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    28d0:	66dc      	str	r4, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    28d2:	711a      	strb	r2, [r3, #4]
}
    28d4:	bd10      	pop	{r4, pc}
		hv_dc_supply_cancel();
    28d6:	4b1c      	ldr	r3, [pc, #112]	; (2948 <TCC1_Handler+0xb8>)
    28d8:	4798      	blx	r3
    28da:	e7fb      	b.n	28d4 <TCC1_Handler+0x44>
			if (hv_dc_supply_is_measurable(hv_dc_supply_duty_cycle)) {
    28dc:	4b17      	ldr	r3, [pc, #92]	; (293c <TCC1_Handler+0xac>)
    28de:	689a      	ldr	r2, [r3, #8]
    28e0:	68db      	ldr	r3, [r3, #12]
    28e2:	b292      	uxth	r2, r2
    28e4:	2a55      	cmp	r2, #85	; 0x55
    28e6:	d918      	bls.n	291a <TCC1_Handler+0x8a>
				hv_dc_supply_set_timer(hv_dc_supply_duty_cycle, hv_dc_supply_period, true);
    28e8:	4b14      	ldr	r3, [pc, #80]	; (293c <TCC1_Handler+0xac>)
    28ea:	689a      	ldr	r2, [r3, #8]
    28ec:	68db      	ldr	r3, [r3, #12]
    28ee:	4914      	ldr	r1, [pc, #80]	; (2940 <TCC1_Handler+0xb0>)
    28f0:	6f08      	ldr	r0, [r1, #112]	; 0x70
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    28f2:	4911      	ldr	r1, [pc, #68]	; (2938 <TCC1_Handler+0xa8>)
    28f4:	6b09      	ldr	r1, [r1, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    28f6:	0609      	lsls	r1, r1, #24
    28f8:	d4ec      	bmi.n	28d4 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    28fa:	490f      	ldr	r1, [pc, #60]	; (2938 <TCC1_Handler+0xa8>)
    28fc:	2402      	movs	r4, #2
    28fe:	714c      	strb	r4, [r1, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    2900:	674a      	str	r2, [r1, #116]	; 0x74
		hri_tcc_write_CCB_reg_no_lock(HV_SW_TIMER, 0, (measure && hv_dc_supply_is_measurable(duty_cycle)) ? duty_cycle + HV_DC_SUPPLY_BURST_END_RIPPLE_CYCLES : 0xFFFFFF);
    2902:	b291      	uxth	r1, r2
    2904:	2955      	cmp	r1, #85	; 0x55
    2906:	d906      	bls.n	2916 <TCC1_Handler+0x86>
    2908:	3213      	adds	r2, #19
    290a:	4b0b      	ldr	r3, [pc, #44]	; (2938 <TCC1_Handler+0xa8>)
    290c:	671a      	str	r2, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    290e:	66d8      	str	r0, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    2910:	2202      	movs	r2, #2
    2912:	711a      	strb	r2, [r3, #4]
    2914:	e7de      	b.n	28d4 <TCC1_Handler+0x44>
    2916:	4a0b      	ldr	r2, [pc, #44]	; (2944 <TCC1_Handler+0xb4>)
    2918:	e7f7      	b.n	290a <TCC1_Handler+0x7a>
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    291a:	4b07      	ldr	r3, [pc, #28]	; (2938 <TCC1_Handler+0xa8>)
    291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    291e:	061b      	lsls	r3, r3, #24
    2920:	d4d8      	bmi.n	28d4 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    2922:	4b05      	ldr	r3, [pc, #20]	; (2938 <TCC1_Handler+0xa8>)
    2924:	2202      	movs	r2, #2
    2926:	715a      	strb	r2, [r3, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    2928:	2156      	movs	r1, #86	; 0x56
    292a:	6759      	str	r1, [r3, #116]	; 0x74
    292c:	3113      	adds	r1, #19
    292e:	6719      	str	r1, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    2930:	4906      	ldr	r1, [pc, #24]	; (294c <TCC1_Handler+0xbc>)
    2932:	66d9      	str	r1, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    2934:	711a      	strb	r2, [r3, #4]
    2936:	e7cd      	b.n	28d4 <TCC1_Handler+0x44>
    2938:	42002400 	.word	0x42002400
    293c:	20000460 	.word	0x20000460
    2940:	20000018 	.word	0x20000018
    2944:	00ffffff 	.word	0x00ffffff
    2948:	00002615 	.word	0x00002615
    294c:	000003bf 	.word	0x000003bf

00002950 <hv_dc_supply_power_pulse>:

void hv_dc_supply_power_pulse() {
	hv_dc_supply_counter = 0;
    2950:	4b06      	ldr	r3, [pc, #24]	; (296c <hv_dc_supply_power_pulse+0x1c>)
    2952:	2200      	movs	r2, #0
    2954:	821a      	strh	r2, [r3, #16]
	hv_dc_supply_state = HV_DC_SUPPLY_STATE_ON;
    2956:	3201      	adds	r2, #1
    2958:	701a      	strb	r2, [r3, #0]
	hv_dc_supply_duty_cycle = duty_cycle;
    295a:	2090      	movs	r0, #144	; 0x90
    295c:	0040      	lsls	r0, r0, #1
    295e:	2100      	movs	r1, #0
    2960:	6098      	str	r0, [r3, #8]
    2962:	60d9      	str	r1, [r3, #12]
	hv_dc_supply_period = period;
    2964:	4a02      	ldr	r2, [pc, #8]	; (2970 <hv_dc_supply_power_pulse+0x20>)
    2966:	4b03      	ldr	r3, [pc, #12]	; (2974 <hv_dc_supply_power_pulse+0x24>)
    2968:	671a      	str	r2, [r3, #112]	; 0x70
	hv_dc_supply_configure_timer(HV_DC_SUPPLY_INIT_DUTY_CYCLE_CYCLES, HV_DC_SUPPLY_MAX_BURST_CYCLES);
}
    296a:	4770      	bx	lr
    296c:	20000460 	.word	0x20000460
    2970:	0003a8f4 	.word	0x0003a8f4
    2974:	20000018 	.word	0x20000018

00002978 <hv_dc_supply_enable_adc>:

void hv_dc_supply_enable_adc() {
    2978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    297a:	26c0      	movs	r6, #192	; 0xc0
    297c:	05f6      	lsls	r6, r6, #23
    297e:	2304      	movs	r3, #4
    2980:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2982:	4b1a      	ldr	r3, [pc, #104]	; (29ec <hv_dc_supply_enable_adc+0x74>)
    2984:	4a1a      	ldr	r2, [pc, #104]	; (29f0 <hv_dc_supply_enable_adc+0x78>)
    2986:	629a      	str	r2, [r3, #40]	; 0x28
    2988:	22c0      	movs	r2, #192	; 0xc0
    298a:	0612      	lsls	r2, r2, #24
    298c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    298e:	2042      	movs	r0, #66	; 0x42
    2990:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2992:	2401      	movs	r4, #1
    2994:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2996:	2501      	movs	r5, #1
    2998:	4329      	orrs	r1, r5
    299a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    299c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    299e:	3811      	subs	r0, #17
    29a0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    29a2:	270f      	movs	r7, #15
    29a4:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    29a6:	4329      	orrs	r1, r5
    29a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29aa:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    29ac:	2108      	movs	r1, #8
    29ae:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29b0:	4910      	ldr	r1, [pc, #64]	; (29f4 <hv_dc_supply_enable_adc+0x7c>)
    29b2:	6299      	str	r1, [r3, #40]	; 0x28
    29b4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29b6:	2143      	movs	r1, #67	; 0x43
    29b8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    29ba:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    29bc:	432a      	orrs	r2, r5
    29be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29c0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    29c2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    29c4:	3934      	subs	r1, #52	; 0x34
    29c6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    29c8:	2110      	movs	r1, #16
    29ca:	430a      	orrs	r2, r1
    29cc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29ce:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PWR_SENSE, PINMUX_PA02B_ADC_AIN0);

	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
	
	adc_async_set_inputs(&ADC_0, ADC_MUXPOS_AIN1, ADC_MUXNEG_AIN0, 0);
    29d0:	4d09      	ldr	r5, [pc, #36]	; (29f8 <hv_dc_supply_enable_adc+0x80>)
    29d2:	2300      	movs	r3, #0
    29d4:	2200      	movs	r2, #0
    29d6:	2101      	movs	r1, #1
    29d8:	0028      	movs	r0, r5
    29da:	4e08      	ldr	r6, [pc, #32]	; (29fc <hv_dc_supply_enable_adc+0x84>)
    29dc:	47b0      	blx	r6
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    29de:	4b08      	ldr	r3, [pc, #32]	; (2a00 <hv_dc_supply_enable_adc+0x88>)
    29e0:	75dc      	strb	r4, [r3, #23]
	
	hri_adc_write_INTEN_RESRDY_bit(ADC, true);
	adc_async_enable_channel(&ADC_0, 0);
    29e2:	2100      	movs	r1, #0
    29e4:	0028      	movs	r0, r5
    29e6:	4b07      	ldr	r3, [pc, #28]	; (2a04 <hv_dc_supply_enable_adc+0x8c>)
    29e8:	4798      	blx	r3
}
    29ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29ec:	41004400 	.word	0x41004400
    29f0:	40000004 	.word	0x40000004
    29f4:	40000008 	.word	0x40000008
    29f8:	20000478 	.word	0x20000478
    29fc:	00000339 	.word	0x00000339
    2a00:	42004000 	.word	0x42004000
    2a04:	000002f9 	.word	0x000002f9

00002a08 <hv_dc_supply_init_timer>:

void hv_dc_supply_init_timer() {
    2a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0a:	46ce      	mov	lr, r9
    2a0c:	4647      	mov	r7, r8
    2a0e:	b580      	push	{r7, lr}
	((Tcc *)hw)->PER.reg = data;
    2a10:	4a38      	ldr	r2, [pc, #224]	; (2af4 <hv_dc_supply_init_timer+0xec>)
    2a12:	4b39      	ldr	r3, [pc, #228]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a14:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a16:	4b38      	ldr	r3, [pc, #224]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a18:	689b      	ldr	r3, [r3, #8]
    2a1a:	061b      	lsls	r3, r3, #24
    2a1c:	d4fb      	bmi.n	2a16 <hv_dc_supply_init_timer+0xe>
	((Tcc *)hw)->CC[index].reg = data;
    2a1e:	2200      	movs	r2, #0
    2a20:	4b35      	ldr	r3, [pc, #212]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a22:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a24:	4b34      	ldr	r3, [pc, #208]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a26:	689a      	ldr	r2, [r3, #8]
    2a28:	23f0      	movs	r3, #240	; 0xf0
    2a2a:	011b      	lsls	r3, r3, #4
    2a2c:	421a      	tst	r2, r3
    2a2e:	d1f9      	bne.n	2a24 <hv_dc_supply_init_timer+0x1c>
	((Tcc *)hw)->CC[index].reg = data;
    2a30:	4a32      	ldr	r2, [pc, #200]	; (2afc <hv_dc_supply_init_timer+0xf4>)
    2a32:	4b31      	ldr	r3, [pc, #196]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a34:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a36:	4b30      	ldr	r3, [pc, #192]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a38:	689a      	ldr	r2, [r3, #8]
    2a3a:	23f0      	movs	r3, #240	; 0xf0
    2a3c:	011b      	lsls	r3, r3, #4
    2a3e:	421a      	tst	r2, r3
    2a40:	d1f9      	bne.n	2a36 <hv_dc_supply_init_timer+0x2e>
	((Tcc *)hw)->WAVE.reg = data;
    2a42:	4a2f      	ldr	r2, [pc, #188]	; (2b00 <hv_dc_supply_init_timer+0xf8>)
    2a44:	4b2c      	ldr	r3, [pc, #176]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a46:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a48:	4b2b      	ldr	r3, [pc, #172]	; (2af8 <hv_dc_supply_init_timer+0xf0>)
    2a4a:	689a      	ldr	r2, [r3, #8]
    2a4c:	4b2d      	ldr	r3, [pc, #180]	; (2b04 <hv_dc_supply_init_timer+0xfc>)
    2a4e:	421a      	tst	r2, r3
    2a50:	d1fa      	bne.n	2a48 <hv_dc_supply_init_timer+0x40>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a52:	24c0      	movs	r4, #192	; 0xc0
    2a54:	05e4      	lsls	r4, r4, #23
    2a56:	2080      	movs	r0, #128	; 0x80
    2a58:	61a0      	str	r0, [r4, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a5a:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a5c:	4b2a      	ldr	r3, [pc, #168]	; (2b08 <hv_dc_supply_init_timer+0x100>)
    2a5e:	4a2b      	ldr	r2, [pc, #172]	; (2b0c <hv_dc_supply_init_timer+0x104>)
    2a60:	629a      	str	r2, [r3, #40]	; 0x28
    2a62:	22c0      	movs	r2, #192	; 0xc0
    2a64:	0612      	lsls	r2, r2, #24
    2a66:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2a68:	2747      	movs	r7, #71	; 0x47
    2a6a:	5dd9      	ldrb	r1, [r3, r7]
    2a6c:	2240      	movs	r2, #64	; 0x40
    2a6e:	4311      	orrs	r1, r2
    2a70:	b2c9      	uxtb	r1, r1
    2a72:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a74:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a76:	2601      	movs	r6, #1
    2a78:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a7a:	2501      	movs	r5, #1
    2a7c:	46a9      	mov	r9, r5
    2a7e:	464d      	mov	r5, r9
    2a80:	4329      	orrs	r1, r5
    2a82:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a84:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a86:	3f14      	subs	r7, #20
    2a88:	5dd9      	ldrb	r1, [r3, r7]
    2a8a:	4688      	mov	r8, r1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2a8c:	210f      	movs	r1, #15
    2a8e:	4645      	mov	r5, r8
    2a90:	400d      	ands	r5, r1
    2a92:	0029      	movs	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2a94:	4311      	orrs	r1, r2
    2a96:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a98:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a9a:	2180      	movs	r1, #128	; 0x80
    2a9c:	0449      	lsls	r1, r1, #17
    2a9e:	61a1      	str	r1, [r4, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2aa0:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2aa2:	2180      	movs	r1, #128	; 0x80
    2aa4:	05c9      	lsls	r1, r1, #23
    2aa6:	6299      	str	r1, [r3, #40]	; 0x28
    2aa8:	4919      	ldr	r1, [pc, #100]	; (2b10 <hv_dc_supply_init_timer+0x108>)
    2aaa:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2aac:	2458      	movs	r4, #88	; 0x58
    2aae:	5d19      	ldrb	r1, [r3, r4]
    2ab0:	430a      	orrs	r2, r1
    2ab2:	b2d2      	uxtb	r2, r2
    2ab4:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ab6:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ab8:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2aba:	4649      	mov	r1, r9
    2abc:	430a      	orrs	r2, r1
    2abe:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ac0:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ac2:	213c      	movs	r1, #60	; 0x3c
    2ac4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ac6:	3c49      	subs	r4, #73	; 0x49
    2ac8:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
    2aca:	2405      	movs	r4, #5
    2acc:	4322      	orrs	r2, r4
    2ace:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ad0:	545a      	strb	r2, [r3, r1]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ad2:	4b10      	ldr	r3, [pc, #64]	; (2b14 <hv_dc_supply_init_timer+0x10c>)
    2ad4:	2280      	movs	r2, #128	; 0x80
    2ad6:	0252      	lsls	r2, r2, #9
    2ad8:	501a      	str	r2, [r3, r0]
  __ASM volatile ("dsb 0xF":::"memory");
    2ada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ade:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ae2:	3145      	adds	r1, #69	; 0x45
    2ae4:	31ff      	adds	r1, #255	; 0xff
    2ae6:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ae8:	601a      	str	r2, [r3, #0]
	//---
	
	NVIC_DisableIRQ(TCC1_IRQn);
	NVIC_ClearPendingIRQ(TCC1_IRQn);
	NVIC_EnableIRQ(TCC1_IRQn);
}
    2aea:	bc0c      	pop	{r2, r3}
    2aec:	4690      	mov	r8, r2
    2aee:	4699      	mov	r9, r3
    2af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	0003a8f4 	.word	0x0003a8f4
    2af8:	42002400 	.word	0x42002400
    2afc:	00ffffff 	.word	0x00ffffff
    2b00:	00020002 	.word	0x00020002
    2b04:	007f0fff 	.word	0x007f0fff
    2b08:	41004400 	.word	0x41004400
    2b0c:	40000080 	.word	0x40000080
    2b10:	c0000100 	.word	0xc0000100
    2b14:	e000e100 	.word	0xe000e100

00002b18 <hv_dc_supply_init>:

void hv_dc_supply_init() {
    2b18:	b510      	push	{r4, lr}
	adc_init();
    2b1a:	4b03      	ldr	r3, [pc, #12]	; (2b28 <hv_dc_supply_init+0x10>)
    2b1c:	4798      	blx	r3
	hv_dc_supply_init_timer();
    2b1e:	4b03      	ldr	r3, [pc, #12]	; (2b2c <hv_dc_supply_init+0x14>)
    2b20:	4798      	blx	r3
	hv_dc_supply_enable_adc();
    2b22:	4b03      	ldr	r3, [pc, #12]	; (2b30 <hv_dc_supply_init+0x18>)
    2b24:	4798      	blx	r3
}
    2b26:	bd10      	pop	{r4, pc}
    2b28:	0000058d 	.word	0x0000058d
    2b2c:	00002a09 	.word	0x00002a09
    2b30:	00002979 	.word	0x00002979

00002b34 <hv_dc_supply_get_voltage>:

float hv_dc_supply_get_voltage() {
    2b34:	b510      	push	{r4, lr}
	return HV_DC_SUPPLY_SENSE_TARGET_TO_VOLTAGE((float) hv_dc_supply_sensed_voltage);
    2b36:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <hv_dc_supply_get_voltage+0x30>)
    2b38:	8858      	ldrh	r0, [r3, #2]
    2b3a:	b280      	uxth	r0, r0
    2b3c:	4b0a      	ldr	r3, [pc, #40]	; (2b68 <hv_dc_supply_get_voltage+0x34>)
    2b3e:	4798      	blx	r3
    2b40:	4b0a      	ldr	r3, [pc, #40]	; (2b6c <hv_dc_supply_get_voltage+0x38>)
    2b42:	4798      	blx	r3
    2b44:	4a0a      	ldr	r2, [pc, #40]	; (2b70 <hv_dc_supply_get_voltage+0x3c>)
    2b46:	4b0b      	ldr	r3, [pc, #44]	; (2b74 <hv_dc_supply_get_voltage+0x40>)
    2b48:	4c0b      	ldr	r4, [pc, #44]	; (2b78 <hv_dc_supply_get_voltage+0x44>)
    2b4a:	47a0      	blx	r4
    2b4c:	4a0b      	ldr	r2, [pc, #44]	; (2b7c <hv_dc_supply_get_voltage+0x48>)
    2b4e:	4b0c      	ldr	r3, [pc, #48]	; (2b80 <hv_dc_supply_get_voltage+0x4c>)
    2b50:	4c0c      	ldr	r4, [pc, #48]	; (2b84 <hv_dc_supply_get_voltage+0x50>)
    2b52:	47a0      	blx	r4
    2b54:	2200      	movs	r2, #0
    2b56:	4b0c      	ldr	r3, [pc, #48]	; (2b88 <hv_dc_supply_get_voltage+0x54>)
    2b58:	4c0c      	ldr	r4, [pc, #48]	; (2b8c <hv_dc_supply_get_voltage+0x58>)
    2b5a:	47a0      	blx	r4
    2b5c:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <hv_dc_supply_get_voltage+0x5c>)
    2b5e:	4798      	blx	r3
}
    2b60:	bd10      	pop	{r4, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	20000460 	.word	0x20000460
    2b68:	00004169 	.word	0x00004169
    2b6c:	00005341 	.word	0x00005341
    2b70:	d0d3a3d0 	.word	0xd0d3a3d0
    2b74:	3fc0d3a3 	.word	0x3fc0d3a3
    2b78:	00004815 	.word	0x00004815
    2b7c:	c28f5c29 	.word	0xc28f5c29
    2b80:	3fec28f5 	.word	0x3fec28f5
    2b84:	00004d15 	.word	0x00004d15
    2b88:	40280000 	.word	0x40280000
    2b8c:	000041f5 	.word	0x000041f5
    2b90:	000053e5 	.word	0x000053e5

00002b94 <btn_enter_pressed>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b94:	2280      	movs	r2, #128	; 0x80
    2b96:	0092      	lsls	r2, r2, #2
    2b98:	23c0      	movs	r3, #192	; 0xc0
    2b9a:	05db      	lsls	r3, r3, #23
    2b9c:	619a      	str	r2, [r3, #24]
	hv_dc_supply_power_pulse();
}

void btn_enter_pressed() {
	hv_dc_supply_disable_output();
}
    2b9e:	4770      	bx	lr

00002ba0 <btn_exit_pressed>:

void btn_exit_pressed() {
}
    2ba0:	4770      	bx	lr
	...

00002ba4 <btn_up_pressed>:
void btn_up_pressed() {
    2ba4:	b510      	push	{r4, lr}
	hv_dc_supply_cancel();
    2ba6:	4b01      	ldr	r3, [pc, #4]	; (2bac <btn_up_pressed+0x8>)
    2ba8:	4798      	blx	r3
}
    2baa:	bd10      	pop	{r4, pc}
    2bac:	00002615 	.word	0x00002615

00002bb0 <btn_down_pressed>:
void btn_down_pressed() {
    2bb0:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2bb2:	4a0a      	ldr	r2, [pc, #40]	; (2bdc <btn_down_pressed+0x2c>)
    2bb4:	2149      	movs	r1, #73	; 0x49
    2bb6:	5c53      	ldrb	r3, [r2, r1]
    2bb8:	2040      	movs	r0, #64	; 0x40
    2bba:	4303      	orrs	r3, r0
    2bbc:	b2db      	uxtb	r3, r3
    2bbe:	5453      	strb	r3, [r2, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2bc0:	23c0      	movs	r3, #192	; 0xc0
    2bc2:	05db      	lsls	r3, r3, #23
    2bc4:	31b8      	adds	r1, #184	; 0xb8
    2bc6:	31ff      	adds	r1, #255	; 0xff
    2bc8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bca:	4805      	ldr	r0, [pc, #20]	; (2be0 <btn_down_pressed+0x30>)
    2bcc:	6290      	str	r0, [r2, #40]	; 0x28
    2bce:	20c0      	movs	r0, #192	; 0xc0
    2bd0:	0600      	lsls	r0, r0, #24
    2bd2:	6290      	str	r0, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bd4:	6159      	str	r1, [r3, #20]
	hv_dc_supply_power_pulse();
    2bd6:	4b03      	ldr	r3, [pc, #12]	; (2be4 <btn_down_pressed+0x34>)
    2bd8:	4798      	blx	r3
}
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	41004400 	.word	0x41004400
    2be0:	40000200 	.word	0x40000200
    2be4:	00002951 	.word	0x00002951

00002be8 <dip_switch_data_ready>:

uint16_t dmx_address = 0;

void dip_switch_data_ready(uint16_t data) {
    2be8:	b510      	push	{r4, lr}
	dmx_address = data;
    2bea:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <dip_switch_data_ready+0x10>)
    2bec:	8018      	strh	r0, [r3, #0]
	dmx_set_address(data & DMX_ADDRESS_MASK);
    2bee:	0540      	lsls	r0, r0, #21
    2bf0:	0d40      	lsrs	r0, r0, #21
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <dip_switch_data_ready+0x14>)
    2bf4:	4798      	blx	r3
}
    2bf6:	bd10      	pop	{r4, pc}
    2bf8:	20000472 	.word	0x20000472
    2bfc:	00000b29 	.word	0x00000b29

00002c00 <NonMaskableInt_Handler>:

void NonMaskableInt_Handler() {
    2c00:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c02:	2280      	movs	r2, #128	; 0x80
    2c04:	0092      	lsls	r2, r2, #2
    2c06:	23c0      	movs	r3, #192	; 0xc0
    2c08:	05db      	lsls	r3, r3, #23
    2c0a:	619a      	str	r2, [r3, #24]
	hv_dc_supply_disable_output();
	hv_dc_supply_cancel();
    2c0c:	4b01      	ldr	r3, [pc, #4]	; (2c14 <NonMaskableInt_Handler+0x14>)
    2c0e:	4798      	blx	r3
}
    2c10:	bd10      	pop	{r4, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	00002615 	.word	0x00002615

00002c18 <dmx_received>:


uint8_t dmx_buffer[DMX_CHANNELS];

void dmx_received() {
    2c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t dmx_pos = OUTPUT_CHANNEL_DMX_OFFSET;
	for (uint8_t i = 0; i < OUTPUT_CHANNELS_COUNT; i++) {
    2c1a:	2400      	movs	r4, #0
	uint8_t dmx_pos = OUTPUT_CHANNEL_DMX_OFFSET;
    2c1c:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < OUTPUT_CHANNELS_COUNT; i++) {
    2c1e:	e001      	b.n	2c24 <dmx_received+0xc>
    2c20:	3401      	adds	r4, #1
    2c22:	b2e4      	uxtb	r4, r4
    2c24:	2c07      	cmp	r4, #7
    2c26:	d821      	bhi.n	2c6c <dmx_received+0x54>
		uint8_t frequency = dmx[dmx_pos++];
    2c28:	1c6b      	adds	r3, r5, #1
    2c2a:	b2db      	uxtb	r3, r3
    2c2c:	4a10      	ldr	r2, [pc, #64]	; (2c70 <dmx_received+0x58>)
    2c2e:	5d50      	ldrb	r0, [r2, r5]
		uint8_t amplitude = dmx[dmx_pos++];
    2c30:	3502      	adds	r5, #2
    2c32:	b2ed      	uxtb	r5, r5
    2c34:	5cd6      	ldrb	r6, [r2, r3]
    2c36:	b2f6      	uxtb	r6, r6
static const sine_wave_frequency_t OUTPUT_CHANNELS_FREQUENCY_RANGE_VALUE = OUTPUT_CHANNELS_MAX_FREQUENCY_VALUE_DEF - OUTPUT_CHANNELS_MIN_FREQUENCY_VALUE_DEF;

void output_channels_init();

static inline void output_channels_update(uint8_t channel, uint8_t frequency, uint8_t amplitude) {
	sine_wave_update(&(output_channels_wave_form[channel]), OUTPUT_CHANNELS_MIN_FREQUENCY_VALUE + (frequency * OUTPUT_CHANNELS_FREQUENCY_RANGE_VALUE / 0xFF), amplitude);
    2c38:	4b0e      	ldr	r3, [pc, #56]	; (2c74 <dmx_received+0x5c>)
    2c3a:	4358      	muls	r0, r3
    2c3c:	21ff      	movs	r1, #255	; 0xff
    2c3e:	4b0e      	ldr	r3, [pc, #56]	; (2c78 <dmx_received+0x60>)
    2c40:	4798      	blx	r3
    2c42:	4b0e      	ldr	r3, [pc, #56]	; (2c7c <dmx_received+0x64>)
    2c44:	469c      	mov	ip, r3
    2c46:	4460      	add	r0, ip
    2c48:	b280      	uxth	r0, r0
	//return result; //(sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS] * sine->amplitude) / SINE_WAVE_MAX_VALUE + (SINE_WAVE_MAX_VALUE - sine->amplitude) / 2;
}

static inline void sine_wave_update(SineWave* sine, sine_wave_frequency_t _frequency, sine_wave_output_t _amplitude) {
	//if there is a pending update, do that first
	if (!sine->updated) {
    2c4a:	0063      	lsls	r3, r4, #1
    2c4c:	191b      	adds	r3, r3, r4
    2c4e:	009a      	lsls	r2, r3, #2
    2c50:	4b0b      	ldr	r3, [pc, #44]	; (2c80 <dmx_received+0x68>)
    2c52:	189b      	adds	r3, r3, r2
    2c54:	7a9b      	ldrb	r3, [r3, #10]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d1e2      	bne.n	2c20 <dmx_received+0x8>
		sine->frequency_buffer = _frequency;
    2c5a:	4909      	ldr	r1, [pc, #36]	; (2c80 <dmx_received+0x68>)
    2c5c:	0017      	movs	r7, r2
    2c5e:	188a      	adds	r2, r1, r2
    2c60:	8110      	strh	r0, [r2, #8]
		sine->amplitude_buffer = _amplitude;
    2c62:	7196      	strb	r6, [r2, #6]
		sine->updated = true;
    2c64:	19c9      	adds	r1, r1, r7
    2c66:	2301      	movs	r3, #1
    2c68:	728b      	strb	r3, [r1, #10]
    2c6a:	e7d9      	b.n	2c20 <dmx_received+0x8>
		output_channels_update(i, frequency, amplitude);
	}
}
    2c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	200004bc 	.word	0x200004bc
    2c74:	00001ccc 	.word	0x00001ccc
    2c78:	000038c1 	.word	0x000038c1
    2c7c:	0000041d 	.word	0x0000041d
    2c80:	2000008c 	.word	0x2000008c

00002c84 <SysTick_Handler>:

uint8_t stepCounter = 0;
//uint32_t counter = 0;

void SysTick_Handler() {
    2c84:	b510      	push	{r4, lr}
	stepCounter++;
    2c86:	4a0d      	ldr	r2, [pc, #52]	; (2cbc <SysTick_Handler+0x38>)
    2c88:	7893      	ldrb	r3, [r2, #2]
    2c8a:	3301      	adds	r3, #1
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	7093      	strb	r3, [r2, #2]
	if (!(stepCounter & 0b11111)) {
    2c90:	06db      	lsls	r3, r3, #27
    2c92:	d002      	beq.n	2c9a <SysTick_Handler+0x16>
		float voltage = round(hv_dc_supply_get_voltage() * 10);
		display_update(voltage);
		
		//display_update(dmx_address);
	}
	display_render();
    2c94:	4b0a      	ldr	r3, [pc, #40]	; (2cc0 <SysTick_Handler+0x3c>)
    2c96:	4798      	blx	r3
}
    2c98:	bd10      	pop	{r4, pc}
		float voltage = round(hv_dc_supply_get_voltage() * 10);
    2c9a:	4b0a      	ldr	r3, [pc, #40]	; (2cc4 <SysTick_Handler+0x40>)
    2c9c:	4798      	blx	r3
    2c9e:	490a      	ldr	r1, [pc, #40]	; (2cc8 <SysTick_Handler+0x44>)
    2ca0:	4b0a      	ldr	r3, [pc, #40]	; (2ccc <SysTick_Handler+0x48>)
    2ca2:	4798      	blx	r3
    2ca4:	4b0a      	ldr	r3, [pc, #40]	; (2cd0 <SysTick_Handler+0x4c>)
    2ca6:	4798      	blx	r3
    2ca8:	4b0a      	ldr	r3, [pc, #40]	; (2cd4 <SysTick_Handler+0x50>)
    2caa:	4798      	blx	r3
    2cac:	4b0a      	ldr	r3, [pc, #40]	; (2cd8 <SysTick_Handler+0x54>)
    2cae:	4798      	blx	r3
		display_update(voltage);
    2cb0:	4b0a      	ldr	r3, [pc, #40]	; (2cdc <SysTick_Handler+0x58>)
    2cb2:	4798      	blx	r3
    2cb4:	b280      	uxth	r0, r0
    2cb6:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <SysTick_Handler+0x5c>)
    2cb8:	4798      	blx	r3
    2cba:	e7eb      	b.n	2c94 <SysTick_Handler+0x10>
    2cbc:	20000472 	.word	0x20000472
    2cc0:	000009e9 	.word	0x000009e9
    2cc4:	00002b35 	.word	0x00002b35
    2cc8:	41200000 	.word	0x41200000
    2ccc:	00003bb1 	.word	0x00003bb1
    2cd0:	00005341 	.word	0x00005341
    2cd4:	00003701 	.word	0x00003701
    2cd8:	000053e5 	.word	0x000053e5
    2cdc:	00003b49 	.word	0x00003b49
    2ce0:	000009d9 	.word	0x000009d9

00002ce4 <init>:

volatile uint32_t prio;

void init() {
    2ce4:	b510      	push	{r4, lr}
static inline void user_settings_save() {
	_rww_flash_write(&(FLASH_0.dev), NVMCTRL_RWW_EEPROM_ADDR, &(userSettings.buffer), sizeof(userSettings));
}

static inline void user_settings_load() {
	_rww_flash_read(&(FLASH_0.dev), NVMCTRL_RWW_EEPROM_ADDR, &(userSettings.buffer), sizeof(userSettings));
    2ce6:	2302      	movs	r3, #2
    2ce8:	4a20      	ldr	r2, [pc, #128]	; (2d6c <init+0x88>)
    2cea:	2180      	movs	r1, #128	; 0x80
    2cec:	03c9      	lsls	r1, r1, #15
    2cee:	4820      	ldr	r0, [pc, #128]	; (2d70 <init+0x8c>)
    2cf0:	4c20      	ldr	r4, [pc, #128]	; (2d74 <init+0x90>)
    2cf2:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2cf4:	4920      	ldr	r1, [pc, #128]	; (2d78 <init+0x94>)
    2cf6:	235b      	movs	r3, #91	; 0x5b
    2cf8:	5cca      	ldrb	r2, [r1, r3]
    2cfa:	2040      	movs	r0, #64	; 0x40
    2cfc:	4302      	orrs	r2, r0
    2cfe:	b2d2      	uxtb	r2, r2
    2d00:	54ca      	strb	r2, [r1, r3]
    2d02:	225c      	movs	r2, #92	; 0x5c
    2d04:	5c8b      	ldrb	r3, [r1, r2]
    2d06:	4303      	orrs	r3, r0
    2d08:	b2db      	uxtb	r3, r3
    2d0a:	548b      	strb	r3, [r1, r2]
	user_settings_load();
	
	gpio_set_pin_drive_strength(LED1);
	gpio_set_pin_drive_strength(LED2);
	
	ext_irq_register(BTN_UP, btn_up_pressed);
    2d0c:	491b      	ldr	r1, [pc, #108]	; (2d7c <init+0x98>)
    2d0e:	2026      	movs	r0, #38	; 0x26
    2d10:	4c1b      	ldr	r4, [pc, #108]	; (2d80 <init+0x9c>)
    2d12:	47a0      	blx	r4
	ext_irq_register(BTN_DOWN, btn_down_pressed);
    2d14:	491b      	ldr	r1, [pc, #108]	; (2d84 <init+0xa0>)
    2d16:	2027      	movs	r0, #39	; 0x27
    2d18:	47a0      	blx	r4
	ext_irq_register(BTN_ENTER, btn_enter_pressed);
    2d1a:	491b      	ldr	r1, [pc, #108]	; (2d88 <init+0xa4>)
    2d1c:	202c      	movs	r0, #44	; 0x2c
    2d1e:	47a0      	blx	r4
	ext_irq_register(BTN_EXIT, btn_exit_pressed);
    2d20:	491a      	ldr	r1, [pc, #104]	; (2d8c <init+0xa8>)
    2d22:	202d      	movs	r0, #45	; 0x2d
    2d24:	47a0      	blx	r4
	
	dmx_set_address(1);
    2d26:	2001      	movs	r0, #1
    2d28:	4b19      	ldr	r3, [pc, #100]	; (2d90 <init+0xac>)
    2d2a:	4798      	blx	r3
	dmx_init();
    2d2c:	4b19      	ldr	r3, [pc, #100]	; (2d94 <init+0xb0>)
    2d2e:	4798      	blx	r3
	
	hv_dc_supply_init();
    2d30:	4b19      	ldr	r3, [pc, #100]	; (2d98 <init+0xb4>)
    2d32:	4798      	blx	r3
	
	dip_switch_init();
    2d34:	4b19      	ldr	r3, [pc, #100]	; (2d9c <init+0xb8>)
    2d36:	4798      	blx	r3
	
	output_channels_init();
    2d38:	4b19      	ldr	r3, [pc, #100]	; (2da0 <init+0xbc>)
    2d3a:	4798      	blx	r3
	
	display_init();
    2d3c:	4b19      	ldr	r3, [pc, #100]	; (2da4 <init+0xc0>)
    2d3e:	4798      	blx	r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2d40:	4a19      	ldr	r2, [pc, #100]	; (2da8 <init+0xc4>)
    2d42:	6a13      	ldr	r3, [r2, #32]
    2d44:	021b      	lsls	r3, r3, #8
    2d46:	0a1b      	lsrs	r3, r3, #8
    2d48:	21c0      	movs	r1, #192	; 0xc0
    2d4a:	0609      	lsls	r1, r1, #24
    2d4c:	430b      	orrs	r3, r1
    2d4e:	6213      	str	r3, [r2, #32]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2d50:	4816      	ldr	r0, [pc, #88]	; (2dac <init+0xc8>)
    2d52:	4b17      	ldr	r3, [pc, #92]	; (2db0 <init+0xcc>)
    2d54:	6043      	str	r3, [r0, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2d56:	6a13      	ldr	r3, [r2, #32]
    2d58:	021b      	lsls	r3, r3, #8
    2d5a:	0a1b      	lsrs	r3, r3, #8
    2d5c:	430b      	orrs	r3, r1
    2d5e:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2d60:	2300      	movs	r3, #0
    2d62:	6083      	str	r3, [r0, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2d64:	3307      	adds	r3, #7
    2d66:	6003      	str	r3, [r0, #0]
	
	//lower SysTick priority to minimum, so the dip switch reading does not interfere with power supply regulation
	NVIC_SetPriority(SysTick_IRQn, INTERRUPT_PRIORITY_IDLE);
	SysTick_Config(100000);
	//SysTick_Config(160000);
}
    2d68:	bd10      	pop	{r4, pc}
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	20000524 	.word	0x20000524
    2d70:	200004d0 	.word	0x200004d0
    2d74:	00001eb9 	.word	0x00001eb9
    2d78:	41004400 	.word	0x41004400
    2d7c:	00002ba5 	.word	0x00002ba5
    2d80:	000016d5 	.word	0x000016d5
    2d84:	00002bb1 	.word	0x00002bb1
    2d88:	00002b95 	.word	0x00002b95
    2d8c:	00002ba1 	.word	0x00002ba1
    2d90:	00000b29 	.word	0x00000b29
    2d94:	00000b35 	.word	0x00000b35
    2d98:	00002b19 	.word	0x00002b19
    2d9c:	00000861 	.word	0x00000861
    2da0:	000036e5 	.word	0x000036e5
    2da4:	00000931 	.word	0x00000931
    2da8:	e000ed00 	.word	0xe000ed00
    2dac:	e000e010 	.word	0xe000e010
    2db0:	0001869f 	.word	0x0001869f

00002db4 <main>:

int main(void)
{
    2db4:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2db6:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <main+0xc>)
    2db8:	4798      	blx	r3

	init();
    2dba:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <main+0x10>)
    2dbc:	4798      	blx	r3
    2dbe:	e7fe      	b.n	2dbe <main+0xa>
    2dc0:	00000655 	.word	0x00000655
    2dc4:	00002ce5 	.word	0x00002ce5

00002dc8 <output_channels_init_pins>:
	SINE_WAVE(OUTPUT_CHANNELS_DEFAULT_FREQUENCY_VALUE_DEF, SINE_WAVE_MAX_VALUE),
	SINE_WAVE(OUTPUT_CHANNELS_DEFAULT_FREQUENCY_VALUE_DEF, SINE_WAVE_MAX_VALUE),
	SINE_WAVE(OUTPUT_CHANNELS_DEFAULT_FREQUENCY_VALUE_DEF, SINE_WAVE_MAX_VALUE)
};

void output_channels_init_pins(const uint8_t positive_pin, const uint8_t negative_pin) {
    2dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dca:	46ce      	mov	lr, r9
    2dcc:	4647      	mov	r7, r8
    2dce:	b580      	push	{r7, lr}
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2dd0:	0942      	lsrs	r2, r0, #5
    2dd2:	271f      	movs	r7, #31
    2dd4:	4038      	ands	r0, r7
    2dd6:	2401      	movs	r4, #1
    2dd8:	0025      	movs	r5, r4
    2dda:	4085      	lsls	r5, r0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ddc:	01d2      	lsls	r2, r2, #7
    2dde:	23c0      	movs	r3, #192	; 0xc0
    2de0:	05db      	lsls	r3, r3, #23
    2de2:	18d6      	adds	r6, r2, r3
    2de4:	61b5      	str	r5, [r6, #24]
    2de6:	094b      	lsrs	r3, r1, #5
    2de8:	4039      	ands	r1, r7
    2dea:	408c      	lsls	r4, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dec:	01db      	lsls	r3, r3, #7
    2dee:	4699      	mov	r9, r3
    2df0:	27c0      	movs	r7, #192	; 0xc0
    2df2:	05ff      	lsls	r7, r7, #23
    2df4:	444f      	add	r7, r9
    2df6:	617c      	str	r4, [r7, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2df8:	60b5      	str	r5, [r6, #8]
		                                | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2dfa:	042e      	lsls	r6, r5, #16
    2dfc:	0c36      	lsrs	r6, r6, #16
    2dfe:	2380      	movs	r3, #128	; 0x80
    2e00:	05db      	lsls	r3, r3, #23
    2e02:	469c      	mov	ip, r3
    2e04:	431e      	orrs	r6, r3
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e06:	4b12      	ldr	r3, [pc, #72]	; (2e50 <output_channels_init_pins+0x88>)
    2e08:	4698      	mov	r8, r3
    2e0a:	4442      	add	r2, r8
    2e0c:	6296      	str	r6, [r2, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e0e:	0c2d      	lsrs	r5, r5, #16
		hri_port_write_WRCONFIG_reg(
    2e10:	26c0      	movs	r6, #192	; 0xc0
    2e12:	0636      	lsls	r6, r6, #24
    2e14:	4335      	orrs	r5, r6
    2e16:	6295      	str	r5, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e18:	60bc      	str	r4, [r7, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e1a:	0425      	lsls	r5, r4, #16
    2e1c:	0c2d      	lsrs	r5, r5, #16
    2e1e:	4663      	mov	r3, ip
    2e20:	431d      	orrs	r5, r3
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e22:	464b      	mov	r3, r9
    2e24:	4443      	add	r3, r8
    2e26:	629d      	str	r5, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e28:	0c24      	lsrs	r4, r4, #16
		hri_port_write_WRCONFIG_reg(
    2e2a:	4334      	orrs	r4, r6
    2e2c:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2e2e:	1812      	adds	r2, r2, r0
    2e30:	3240      	adds	r2, #64	; 0x40
    2e32:	7810      	ldrb	r0, [r2, #0]
    2e34:	2440      	movs	r4, #64	; 0x40
    2e36:	4320      	orrs	r0, r4
    2e38:	b2c0      	uxtb	r0, r0
    2e3a:	7010      	strb	r0, [r2, #0]
    2e3c:	185b      	adds	r3, r3, r1
    2e3e:	3340      	adds	r3, #64	; 0x40
    2e40:	781a      	ldrb	r2, [r3, #0]
    2e42:	4322      	orrs	r2, r4
    2e44:	b2d2      	uxtb	r2, r2
    2e46:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(negative_pin, false);
	gpio_set_pin_direction(positive_pin, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(negative_pin, GPIO_DIRECTION_OUT);
	gpio_set_pin_drive_strength(positive_pin);
	gpio_set_pin_drive_strength(negative_pin);
}
    2e48:	bc0c      	pop	{r2, r3}
    2e4a:	4690      	mov	r8, r2
    2e4c:	4699      	mov	r9, r3
    2e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e50:	41004400 	.word	0x41004400

00002e54 <output_channels_init_1_and_2>:

void output_channels_init_1_and_2() {
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e56:	4b30      	ldr	r3, [pc, #192]	; (2f18 <output_channels_init_1_and_2+0xc4>)
    2e58:	2280      	movs	r2, #128	; 0x80
    2e5a:	0212      	lsls	r2, r2, #8
    2e5c:	2180      	movs	r1, #128	; 0x80
    2e5e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e64:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e68:	3101      	adds	r1, #1
    2e6a:	31ff      	adds	r1, #255	; 0xff
    2e6c:	505a      	str	r2, [r3, r1]
	((Tcc *)hw)->WAVE.reg = data;
    2e6e:	4a2b      	ldr	r2, [pc, #172]	; (2f1c <output_channels_init_1_and_2+0xc8>)
    2e70:	4b2b      	ldr	r3, [pc, #172]	; (2f20 <output_channels_init_1_and_2+0xcc>)
    2e72:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2e74:	4b2a      	ldr	r3, [pc, #168]	; (2f20 <output_channels_init_1_and_2+0xcc>)
    2e76:	689a      	ldr	r2, [r3, #8]
    2e78:	4b2a      	ldr	r3, [pc, #168]	; (2f24 <output_channels_init_1_and_2+0xd0>)
    2e7a:	421a      	tst	r2, r3
    2e7c:	d1fa      	bne.n	2e74 <output_channels_init_1_and_2+0x20>
	| 0 << TCC_WAVE_CIPEREN_Pos
	| 0 << TCC_WAVE_RAMP_Pos
	| TCC_WAVE_WAVEGEN_NPWM_Val << TCC_WAVE_WAVEGEN_Pos
	);

	output_channels_init_pins(CH1P, CH1N);
    2e7e:	210b      	movs	r1, #11
    2e80:	200a      	movs	r0, #10
    2e82:	4c29      	ldr	r4, [pc, #164]	; (2f28 <output_channels_init_1_and_2+0xd4>)
    2e84:	47a0      	blx	r4
	output_channels_init_pins(CH2P, CH2N);
    2e86:	213f      	movs	r1, #63	; 0x3f
    2e88:	203e      	movs	r0, #62	; 0x3e
    2e8a:	47a0      	blx	r4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e8c:	4b27      	ldr	r3, [pc, #156]	; (2f2c <output_channels_init_1_and_2+0xd8>)
    2e8e:	204a      	movs	r0, #74	; 0x4a
    2e90:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e92:	2601      	movs	r6, #1
    2e94:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e96:	2201      	movs	r2, #1
    2e98:	4311      	orrs	r1, r2
    2e9a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e9c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e9e:	3815      	subs	r0, #21
    2ea0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ea2:	270f      	movs	r7, #15
    2ea4:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2ea6:	2405      	movs	r4, #5
    2ea8:	4321      	orrs	r1, r4
    2eaa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2eac:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2eae:	244b      	movs	r4, #75	; 0x4b
    2eb0:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2eb2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2eb4:	4311      	orrs	r1, r2
    2eb6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2eb8:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2eba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2ebc:	250f      	movs	r5, #15
    2ebe:	4029      	ands	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2ec0:	2450      	movs	r4, #80	; 0x50
    2ec2:	4321      	orrs	r1, r4
    2ec4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ec6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ec8:	21de      	movs	r1, #222	; 0xde
    2eca:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ecc:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2ece:	4310      	orrs	r0, r2
    2ed0:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ed2:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ed4:	24bf      	movs	r4, #191	; 0xbf
    2ed6:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ed8:	43b8      	bics	r0, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2eda:	2104      	movs	r1, #4
    2edc:	4308      	orrs	r0, r1
    2ede:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ee0:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ee2:	20df      	movs	r0, #223	; 0xdf
    2ee4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ee6:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2ee8:	4311      	orrs	r1, r2
    2eea:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2eec:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2eee:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2ef0:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2ef2:	2140      	movs	r1, #64	; 0x40
    2ef4:	430a      	orrs	r2, r1
    2ef6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ef8:	551a      	strb	r2, [r3, r4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2efa:	4a07      	ldr	r2, [pc, #28]	; (2f18 <output_channels_init_1_and_2+0xc4>)
    2efc:	20c3      	movs	r0, #195	; 0xc3
    2efe:	0080      	lsls	r0, r0, #2
    2f00:	5813      	ldr	r3, [r2, r0]
    2f02:	021b      	lsls	r3, r3, #8
    2f04:	0a1b      	lsrs	r3, r3, #8
    2f06:	2180      	movs	r1, #128	; 0x80
    2f08:	05c9      	lsls	r1, r1, #23
    2f0a:	430b      	orrs	r3, r1
    2f0c:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f0e:	2380      	movs	r3, #128	; 0x80
    2f10:	021b      	lsls	r3, r3, #8
    2f12:	6013      	str	r3, [r2, #0]
	gpio_set_pin_function(CH2P, PINMUX_PB30E_TCC0_WO0);
	gpio_set_pin_function(CH2N, PINMUX_PB31E_TCC0_WO1);
	
	NVIC_SetPriority(TCC0_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(TCC0_IRQn);
}
    2f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	e000e100 	.word	0xe000e100
    2f1c:	000a0002 	.word	0x000a0002
    2f20:	42002000 	.word	0x42002000
    2f24:	007f0fff 	.word	0x007f0fff
    2f28:	00002dc9 	.word	0x00002dc9
    2f2c:	41004400 	.word	0x41004400

00002f30 <output_channels_init_3>:

void output_channels_init_3() {
    2f30:	b570      	push	{r4, r5, r6, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f32:	4b22      	ldr	r3, [pc, #136]	; (2fbc <output_channels_init_3+0x8c>)
    2f34:	2280      	movs	r2, #128	; 0x80
    2f36:	0292      	lsls	r2, r2, #10
    2f38:	2180      	movs	r1, #128	; 0x80
    2f3a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f40:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f44:	3101      	adds	r1, #1
    2f46:	31ff      	adds	r1, #255	; 0xff
    2f48:	505a      	str	r2, [r3, r1]
	((Tcc *)hw)->WAVE.reg = data;
    2f4a:	4a1d      	ldr	r2, [pc, #116]	; (2fc0 <output_channels_init_3+0x90>)
    2f4c:	4b1d      	ldr	r3, [pc, #116]	; (2fc4 <output_channels_init_3+0x94>)
    2f4e:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2f50:	4b1c      	ldr	r3, [pc, #112]	; (2fc4 <output_channels_init_3+0x94>)
    2f52:	689a      	ldr	r2, [r3, #8]
    2f54:	4b1c      	ldr	r3, [pc, #112]	; (2fc8 <output_channels_init_3+0x98>)
    2f56:	421a      	tst	r2, r3
    2f58:	d1fa      	bne.n	2f50 <output_channels_init_3+0x20>
	| 0 << TCC_WAVE_CIPEREN_Pos
	| 0 << TCC_WAVE_RAMP_Pos
	| TCC_WAVE_WAVEGEN_NPWM_Val << TCC_WAVE_WAVEGEN_Pos
	);

	output_channels_init_pins(CH3P, CH3N);
    2f5a:	2111      	movs	r1, #17
    2f5c:	2010      	movs	r0, #16
    2f5e:	4b1b      	ldr	r3, [pc, #108]	; (2fcc <output_channels_init_3+0x9c>)
    2f60:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f62:	4b1b      	ldr	r3, [pc, #108]	; (2fd0 <output_channels_init_3+0xa0>)
    2f64:	2250      	movs	r2, #80	; 0x50
    2f66:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f68:	2501      	movs	r5, #1
    2f6a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f6c:	2401      	movs	r4, #1
    2f6e:	4321      	orrs	r1, r4
    2f70:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f72:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f74:	2038      	movs	r0, #56	; 0x38
    2f76:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f78:	3a41      	subs	r2, #65	; 0x41
    2f7a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2f7c:	2204      	movs	r2, #4
    2f7e:	4311      	orrs	r1, r2
    2f80:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f82:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f84:	2151      	movs	r1, #81	; 0x51
    2f86:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f88:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f8a:	4322      	orrs	r2, r4
    2f8c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f8e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f90:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f92:	3942      	subs	r1, #66	; 0x42
    2f94:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2f96:	2140      	movs	r1, #64	; 0x40
    2f98:	430a      	orrs	r2, r1
    2f9a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f9c:	541a      	strb	r2, [r3, r0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2f9e:	4b07      	ldr	r3, [pc, #28]	; (2fbc <output_channels_init_3+0x8c>)
    2fa0:	20c4      	movs	r0, #196	; 0xc4
    2fa2:	0080      	lsls	r0, r0, #2
    2fa4:	581a      	ldr	r2, [r3, r0]
    2fa6:	490b      	ldr	r1, [pc, #44]	; (2fd4 <output_channels_init_3+0xa4>)
    2fa8:	4011      	ands	r1, r2
    2faa:	2280      	movs	r2, #128	; 0x80
    2fac:	01d2      	lsls	r2, r2, #7
    2fae:	430a      	orrs	r2, r1
    2fb0:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fb2:	2280      	movs	r2, #128	; 0x80
    2fb4:	0292      	lsls	r2, r2, #10
    2fb6:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(CH3P, PINMUX_PA16E_TCC2_WO0);
	gpio_set_pin_function(CH3N, PINMUX_PA17E_TCC2_WO1);
	
	NVIC_SetPriority(TCC2_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(TCC2_IRQn);
}
    2fb8:	bd70      	pop	{r4, r5, r6, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	e000e100 	.word	0xe000e100
    2fc0:	00020002 	.word	0x00020002
    2fc4:	42002800 	.word	0x42002800
    2fc8:	007f0fff 	.word	0x007f0fff
    2fcc:	00002dc9 	.word	0x00002dc9
    2fd0:	41004400 	.word	0x41004400
    2fd4:	ffff00ff 	.word	0xffff00ff

00002fd8 <output_channels_init_tc>:

void output_channels_init_tc(const IRQn_Type IRQn, const void *const hw, uint32_t pin_p, uint32_t pin_n, uint32_t function_p, uint32_t function_n) {
    2fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fda:	0004      	movs	r4, r0
    2fdc:	0017      	movs	r7, r2
    2fde:	001d      	movs	r5, r3
  if ((int32_t)(IRQn) >= 0)
    2fe0:	2800      	cmp	r0, #0
    2fe2:	db0a      	blt.n	2ffa <output_channels_init_tc+0x22>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fe4:	221f      	movs	r2, #31
    2fe6:	4002      	ands	r2, r0
    2fe8:	2301      	movs	r3, #1
    2fea:	4093      	lsls	r3, r2
    2fec:	2280      	movs	r2, #128	; 0x80
    2fee:	4867      	ldr	r0, [pc, #412]	; (318c <output_channels_init_tc+0x1b4>)
    2ff0:	5083      	str	r3, [r0, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ff6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2ffa:	2c00      	cmp	r4, #0
    2ffc:	db07      	blt.n	300e <output_channels_init_tc+0x36>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ffe:	221f      	movs	r2, #31
    3000:	4022      	ands	r2, r4
    3002:	2301      	movs	r3, #1
    3004:	4093      	lsls	r3, r2
    3006:	22c0      	movs	r2, #192	; 0xc0
    3008:	0052      	lsls	r2, r2, #1
    300a:	4860      	ldr	r0, [pc, #384]	; (318c <output_channels_init_tc+0x1b4>)
    300c:	5083      	str	r3, [r0, r2]
	((Tc *)hw)->COUNT16.CTRLC.reg = data;
    300e:	2302      	movs	r3, #2
    3010:	718b      	strb	r3, [r1, #6]
	| 0 << TC_CTRLC_CPTEN1_Pos
	| 0 << TC_CTRLC_INVEN0_Pos
	| 1 << TC_CTRLC_INVEN1_Pos
	);

	output_channels_init_pins(pin_p, pin_n);
    3012:	b2e9      	uxtb	r1, r5
    3014:	b2fe      	uxtb	r6, r7
    3016:	0030      	movs	r0, r6
    3018:	4b5d      	ldr	r3, [pc, #372]	; (3190 <output_channels_init_tc+0x1b8>)
    301a:	4798      	blx	r3
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    301c:	097f      	lsrs	r7, r7, #5
	uint8_t pin  = GPIO_PIN(gpio);
    301e:	201f      	movs	r0, #31
    3020:	4030      	ands	r0, r6

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3022:	9b06      	ldr	r3, [sp, #24]
    3024:	3301      	adds	r3, #1
    3026:	d061      	beq.n	30ec <output_channels_init_tc+0x114>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3028:	22ff      	movs	r2, #255	; 0xff
    302a:	403a      	ands	r2, r7
    302c:	01d3      	lsls	r3, r2, #7
    302e:	4959      	ldr	r1, [pc, #356]	; (3194 <output_channels_init_tc+0x1bc>)
    3030:	468c      	mov	ip, r1
    3032:	4463      	add	r3, ip
    3034:	181b      	adds	r3, r3, r0
    3036:	3340      	adds	r3, #64	; 0x40
    3038:	7819      	ldrb	r1, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    303a:	2701      	movs	r7, #1
    303c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    303e:	4339      	orrs	r1, r7
    3040:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3042:	7019      	strb	r1, [r3, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    3044:	07f3      	lsls	r3, r6, #31
    3046:	d45e      	bmi.n	3106 <output_channels_init_tc+0x12e>
			// Odd numbered pin
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3048:	0840      	lsrs	r0, r0, #1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    304a:	01d2      	lsls	r2, r2, #7
    304c:	4b51      	ldr	r3, [pc, #324]	; (3194 <output_channels_init_tc+0x1bc>)
    304e:	469c      	mov	ip, r3
    3050:	4462      	add	r2, ip
    3052:	1812      	adds	r2, r2, r0
    3054:	3230      	adds	r2, #48	; 0x30
    3056:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3058:	210f      	movs	r1, #15
    305a:	438b      	bics	r3, r1
    305c:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    305e:	230f      	movs	r3, #15
    3060:	9806      	ldr	r0, [sp, #24]
    3062:	4003      	ands	r3, r0
    3064:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3066:	7013      	strb	r3, [r2, #0]
	uint8_t port = GPIO_PORT(gpio);
    3068:	096a      	lsrs	r2, r5, #5
	uint8_t pin  = GPIO_PIN(gpio);
    306a:	b2ed      	uxtb	r5, r5
    306c:	201f      	movs	r0, #31
    306e:	4028      	ands	r0, r5
	if (function == GPIO_PIN_FUNCTION_OFF) {
    3070:	9b07      	ldr	r3, [sp, #28]
    3072:	3301      	adds	r3, #1
    3074:	d056      	beq.n	3124 <output_channels_init_tc+0x14c>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3076:	23ff      	movs	r3, #255	; 0xff
    3078:	401a      	ands	r2, r3
    307a:	01d1      	lsls	r1, r2, #7
    307c:	4b45      	ldr	r3, [pc, #276]	; (3194 <output_channels_init_tc+0x1bc>)
    307e:	469c      	mov	ip, r3
    3080:	4461      	add	r1, ip
    3082:	1809      	adds	r1, r1, r0
    3084:	3140      	adds	r1, #64	; 0x40
    3086:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3088:	2601      	movs	r6, #1
    308a:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    308c:	4333      	orrs	r3, r6
    308e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3090:	700b      	strb	r3, [r1, #0]
		if (pin & 1) {
    3092:	07eb      	lsls	r3, r5, #31
    3094:	d453      	bmi.n	313e <output_channels_init_tc+0x166>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3096:	0840      	lsrs	r0, r0, #1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3098:	01d2      	lsls	r2, r2, #7
    309a:	4b3e      	ldr	r3, [pc, #248]	; (3194 <output_channels_init_tc+0x1bc>)
    309c:	469c      	mov	ip, r3
    309e:	4462      	add	r2, ip
    30a0:	1812      	adds	r2, r2, r0
    30a2:	3230      	adds	r2, #48	; 0x30
    30a4:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    30a6:	210f      	movs	r1, #15
    30a8:	438b      	bics	r3, r1
    30aa:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    30ac:	230f      	movs	r3, #15
    30ae:	9807      	ldr	r0, [sp, #28]
    30b0:	4003      	ands	r3, r0
    30b2:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30b4:	7013      	strb	r3, [r2, #0]
  if ((int32_t)(IRQn) >= 0)
    30b6:	2c00      	cmp	r4, #0
    30b8:	db50      	blt.n	315c <output_channels_init_tc+0x184>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    30ba:	08a3      	lsrs	r3, r4, #2
    30bc:	4833      	ldr	r0, [pc, #204]	; (318c <output_channels_init_tc+0x1b4>)
    30be:	33c0      	adds	r3, #192	; 0xc0
    30c0:	009b      	lsls	r3, r3, #2
    30c2:	5819      	ldr	r1, [r3, r0]
    30c4:	2203      	movs	r2, #3
    30c6:	4022      	ands	r2, r4
    30c8:	00d2      	lsls	r2, r2, #3
    30ca:	25ff      	movs	r5, #255	; 0xff
    30cc:	4095      	lsls	r5, r2
    30ce:	43a9      	bics	r1, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    30d0:	2540      	movs	r5, #64	; 0x40
    30d2:	4095      	lsls	r5, r2
    30d4:	002a      	movs	r2, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    30d6:	430a      	orrs	r2, r1
    30d8:	501a      	str	r2, [r3, r0]
  if ((int32_t)(IRQn) >= 0)
    30da:	2c00      	cmp	r4, #0
    30dc:	db05      	blt.n	30ea <output_channels_init_tc+0x112>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30de:	231f      	movs	r3, #31
    30e0:	401c      	ands	r4, r3
    30e2:	3b1e      	subs	r3, #30
    30e4:	40a3      	lsls	r3, r4
    30e6:	4a29      	ldr	r2, [pc, #164]	; (318c <output_channels_init_tc+0x1b4>)
    30e8:	6013      	str	r3, [r2, #0]
	gpio_set_pin_function(pin_p, function_p);
	gpio_set_pin_function(pin_n, function_n);
	
	NVIC_SetPriority(IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(IRQn);
}
    30ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30ec:	22ff      	movs	r2, #255	; 0xff
    30ee:	4017      	ands	r7, r2
    30f0:	01ff      	lsls	r7, r7, #7
    30f2:	4b28      	ldr	r3, [pc, #160]	; (3194 <output_channels_init_tc+0x1bc>)
    30f4:	469c      	mov	ip, r3
    30f6:	4467      	add	r7, ip
    30f8:	1838      	adds	r0, r7, r0
    30fa:	3040      	adds	r0, #64	; 0x40
    30fc:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    30fe:	3afe      	subs	r2, #254	; 0xfe
    3100:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3102:	7003      	strb	r3, [r0, #0]
    3104:	e7b0      	b.n	3068 <output_channels_init_tc+0x90>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3106:	0843      	lsrs	r3, r0, #1
    3108:	4669      	mov	r1, sp
    310a:	7e09      	ldrb	r1, [r1, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    310c:	01d0      	lsls	r0, r2, #7
    310e:	4460      	add	r0, ip
    3110:	18c0      	adds	r0, r0, r3
    3112:	3030      	adds	r0, #48	; 0x30
    3114:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3116:	220f      	movs	r2, #15
    3118:	4013      	ands	r3, r2
	tmp |= PORT_PMUX_PMUXO(data);
    311a:	0109      	lsls	r1, r1, #4
    311c:	b2ca      	uxtb	r2, r1
    311e:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3120:	7003      	strb	r3, [r0, #0]
    3122:	e7a1      	b.n	3068 <output_channels_init_tc+0x90>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3124:	23ff      	movs	r3, #255	; 0xff
    3126:	4013      	ands	r3, r2
    3128:	01db      	lsls	r3, r3, #7
    312a:	4a1a      	ldr	r2, [pc, #104]	; (3194 <output_channels_init_tc+0x1bc>)
    312c:	4694      	mov	ip, r2
    312e:	4463      	add	r3, ip
    3130:	1818      	adds	r0, r3, r0
    3132:	3040      	adds	r0, #64	; 0x40
    3134:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3136:	2201      	movs	r2, #1
    3138:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    313a:	7003      	strb	r3, [r0, #0]
    313c:	e7bb      	b.n	30b6 <output_channels_init_tc+0xde>
    313e:	0840      	lsrs	r0, r0, #1
    3140:	466b      	mov	r3, sp
    3142:	7f19      	ldrb	r1, [r3, #28]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3144:	01d2      	lsls	r2, r2, #7
    3146:	4462      	add	r2, ip
    3148:	1812      	adds	r2, r2, r0
    314a:	3230      	adds	r2, #48	; 0x30
    314c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    314e:	200f      	movs	r0, #15
    3150:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
    3152:	0109      	lsls	r1, r1, #4
    3154:	b2c9      	uxtb	r1, r1
    3156:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3158:	7013      	strb	r3, [r2, #0]
    315a:	e7ac      	b.n	30b6 <output_channels_init_tc+0xde>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    315c:	b2e2      	uxtb	r2, r4
    315e:	230f      	movs	r3, #15
    3160:	0010      	movs	r0, r2
    3162:	4013      	ands	r3, r2
    3164:	3b08      	subs	r3, #8
    3166:	089b      	lsrs	r3, r3, #2
    3168:	3306      	adds	r3, #6
    316a:	009b      	lsls	r3, r3, #2
    316c:	4a0a      	ldr	r2, [pc, #40]	; (3198 <output_channels_init_tc+0x1c0>)
    316e:	4694      	mov	ip, r2
    3170:	4463      	add	r3, ip
    3172:	6859      	ldr	r1, [r3, #4]
    3174:	2203      	movs	r2, #3
    3176:	4002      	ands	r2, r0
    3178:	00d2      	lsls	r2, r2, #3
    317a:	20ff      	movs	r0, #255	; 0xff
    317c:	4090      	lsls	r0, r2
    317e:	4381      	bics	r1, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    3180:	2040      	movs	r0, #64	; 0x40
    3182:	4090      	lsls	r0, r2
    3184:	0002      	movs	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3186:	430a      	orrs	r2, r1
    3188:	605a      	str	r2, [r3, #4]
    318a:	e7a6      	b.n	30da <output_channels_init_tc+0x102>
    318c:	e000e100 	.word	0xe000e100
    3190:	00002dc9 	.word	0x00002dc9
    3194:	41004400 	.word	0x41004400
    3198:	e000ed00 	.word	0xe000ed00

0000319c <output_channels_init_4_5_6_7_8>:

void output_channels_init_4_5_6_7_8() {
    319c:	b510      	push	{r4, lr}
    319e:	b082      	sub	sp, #8
	output_channels_init_tc(TC3_IRQn, TC3, CH4P, CH4N, PINMUX_PA14E_TC3_WO0, PINMUX_PA15E_TC3_WO1);
    31a0:	4b17      	ldr	r3, [pc, #92]	; (3200 <output_channels_init_4_5_6_7_8+0x64>)
    31a2:	9301      	str	r3, [sp, #4]
    31a4:	4b17      	ldr	r3, [pc, #92]	; (3204 <output_channels_init_4_5_6_7_8+0x68>)
    31a6:	9300      	str	r3, [sp, #0]
    31a8:	230f      	movs	r3, #15
    31aa:	220e      	movs	r2, #14
    31ac:	4916      	ldr	r1, [pc, #88]	; (3208 <output_channels_init_4_5_6_7_8+0x6c>)
    31ae:	2012      	movs	r0, #18
    31b0:	4c16      	ldr	r4, [pc, #88]	; (320c <output_channels_init_4_5_6_7_8+0x70>)
    31b2:	47a0      	blx	r4
	output_channels_init_tc(TC6_IRQn, TC6, CH5P, CH5N, PINMUX_PB02E_TC6_WO0, PINMUX_PB03E_TC6_WO1);
    31b4:	4b16      	ldr	r3, [pc, #88]	; (3210 <output_channels_init_4_5_6_7_8+0x74>)
    31b6:	9301      	str	r3, [sp, #4]
    31b8:	4b16      	ldr	r3, [pc, #88]	; (3214 <output_channels_init_4_5_6_7_8+0x78>)
    31ba:	9300      	str	r3, [sp, #0]
    31bc:	2323      	movs	r3, #35	; 0x23
    31be:	2222      	movs	r2, #34	; 0x22
    31c0:	4915      	ldr	r1, [pc, #84]	; (3218 <output_channels_init_4_5_6_7_8+0x7c>)
    31c2:	2015      	movs	r0, #21
    31c4:	47a0      	blx	r4
	output_channels_init_tc(TC5_IRQn, TC5, CH6P, CH6N, PINMUX_PB10E_TC5_WO0, PINMUX_PB11E_TC5_WO1);
    31c6:	4b15      	ldr	r3, [pc, #84]	; (321c <output_channels_init_4_5_6_7_8+0x80>)
    31c8:	9301      	str	r3, [sp, #4]
    31ca:	4b15      	ldr	r3, [pc, #84]	; (3220 <output_channels_init_4_5_6_7_8+0x84>)
    31cc:	9300      	str	r3, [sp, #0]
    31ce:	232b      	movs	r3, #43	; 0x2b
    31d0:	222a      	movs	r2, #42	; 0x2a
    31d2:	4914      	ldr	r1, [pc, #80]	; (3224 <output_channels_init_4_5_6_7_8+0x88>)
    31d4:	2014      	movs	r0, #20
    31d6:	47a0      	blx	r4
	output_channels_init_tc(TC4_IRQn, TC4, CH7P, CH7N, PINMUX_PB08E_TC4_WO0, PINMUX_PB09E_TC4_WO1);
    31d8:	4b13      	ldr	r3, [pc, #76]	; (3228 <output_channels_init_4_5_6_7_8+0x8c>)
    31da:	9301      	str	r3, [sp, #4]
    31dc:	4b13      	ldr	r3, [pc, #76]	; (322c <output_channels_init_4_5_6_7_8+0x90>)
    31de:	9300      	str	r3, [sp, #0]
    31e0:	2329      	movs	r3, #41	; 0x29
    31e2:	2228      	movs	r2, #40	; 0x28
    31e4:	4912      	ldr	r1, [pc, #72]	; (3230 <output_channels_init_4_5_6_7_8+0x94>)
    31e6:	2013      	movs	r0, #19
    31e8:	47a0      	blx	r4
	output_channels_init_tc(TC7_IRQn, TC7, CH8P, CH8N, PINMUX_PB22E_TC7_WO0, PINMUX_PB23E_TC7_WO1);
    31ea:	4b12      	ldr	r3, [pc, #72]	; (3234 <output_channels_init_4_5_6_7_8+0x98>)
    31ec:	9301      	str	r3, [sp, #4]
    31ee:	4b12      	ldr	r3, [pc, #72]	; (3238 <output_channels_init_4_5_6_7_8+0x9c>)
    31f0:	9300      	str	r3, [sp, #0]
    31f2:	2337      	movs	r3, #55	; 0x37
    31f4:	2236      	movs	r2, #54	; 0x36
    31f6:	4911      	ldr	r1, [pc, #68]	; (323c <output_channels_init_4_5_6_7_8+0xa0>)
    31f8:	2016      	movs	r0, #22
    31fa:	47a0      	blx	r4
}
    31fc:	b002      	add	sp, #8
    31fe:	bd10      	pop	{r4, pc}
    3200:	000f0004 	.word	0x000f0004
    3204:	000e0004 	.word	0x000e0004
    3208:	42002c00 	.word	0x42002c00
    320c:	00002fd9 	.word	0x00002fd9
    3210:	00230004 	.word	0x00230004
    3214:	00220004 	.word	0x00220004
    3218:	42003800 	.word	0x42003800
    321c:	002b0004 	.word	0x002b0004
    3220:	002a0004 	.word	0x002a0004
    3224:	42003400 	.word	0x42003400
    3228:	00290004 	.word	0x00290004
    322c:	00280004 	.word	0x00280004
    3230:	42003000 	.word	0x42003000
    3234:	00370004 	.word	0x00370004
    3238:	00360004 	.word	0x00360004
    323c:	42003c00 	.word	0x42003c00

00003240 <TCC0_Handler>:

void TCC0_Handler() {
    3240:	b510      	push	{r4, lr}
    3242:	b084      	sub	sp, #16
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    3244:	2201      	movs	r2, #1
    3246:	4b39      	ldr	r3, [pc, #228]	; (332c <TCC0_Handler+0xec>)
    3248:	62da      	str	r2, [r3, #44]	; 0x2c
	if (sine->updated) {
    324a:	4b39      	ldr	r3, [pc, #228]	; (3330 <TCC0_Handler+0xf0>)
    324c:	7a9b      	ldrb	r3, [r3, #10]
    324e:	2b00      	cmp	r3, #0
    3250:	d006      	beq.n	3260 <TCC0_Handler+0x20>
		sine->frequency = sine->frequency_buffer;
    3252:	4b37      	ldr	r3, [pc, #220]	; (3330 <TCC0_Handler+0xf0>)
    3254:	891a      	ldrh	r2, [r3, #8]
    3256:	809a      	strh	r2, [r3, #4]
		sine->amplitude = sine->amplitude_buffer;
    3258:	799a      	ldrb	r2, [r3, #6]
    325a:	709a      	strb	r2, [r3, #2]
		sine->updated = false;
    325c:	2200      	movs	r2, #0
    325e:	729a      	strb	r2, [r3, #10]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3260:	4c33      	ldr	r4, [pc, #204]	; (3330 <TCC0_Handler+0xf0>)
    3262:	8820      	ldrh	r0, [r4, #0]
    3264:	88a3      	ldrh	r3, [r4, #4]
    3266:	18c0      	adds	r0, r0, r3
    3268:	4932      	ldr	r1, [pc, #200]	; (3334 <TCC0_Handler+0xf4>)
    326a:	4b33      	ldr	r3, [pc, #204]	; (3338 <TCC0_Handler+0xf8>)
    326c:	4798      	blx	r3
    326e:	b289      	uxth	r1, r1
    3270:	8021      	strh	r1, [r4, #0]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    3272:	09c9      	lsrs	r1, r1, #7
    3274:	0049      	lsls	r1, r1, #1
    3276:	4b31      	ldr	r3, [pc, #196]	; (333c <TCC0_Handler+0xfc>)
    3278:	5ec9      	ldrsh	r1, [r1, r3]
    327a:	78a3      	ldrb	r3, [r4, #2]
    327c:	1c5a      	adds	r2, r3, #1
    327e:	434a      	muls	r2, r1
    3280:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    3282:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3284:	1ad3      	subs	r3, r2, r3
    3286:	3b01      	subs	r3, #1
    3288:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    328a:	2a7e      	cmp	r2, #126	; 0x7e
    328c:	d945      	bls.n	331a <TCC0_Handler+0xda>
    328e:	22ff      	movs	r2, #255	; 0xff
    3290:	4669      	mov	r1, sp
    3292:	700a      	strb	r2, [r1, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3294:	2b7e      	cmp	r3, #126	; 0x7e
    3296:	d842      	bhi.n	331e <TCC0_Handler+0xde>
    3298:	2300      	movs	r3, #0
    329a:	466a      	mov	r2, sp
    329c:	7053      	strb	r3, [r2, #1]
	return sample;
    329e:	8813      	ldrh	r3, [r2, #0]
    32a0:	aa03      	add	r2, sp, #12
    32a2:	8013      	strh	r3, [r2, #0]
    32a4:	a901      	add	r1, sp, #4
    32a6:	800b      	strh	r3, [r1, #0]
	hri_tcc_clear_interrupt_OVF_bit(TCC0);

	//channel 1
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[0]));
	hri_tcc_write_CCB_reg_no_lock(TCC0, 2, next_value.pos);
    32a8:	b2db      	uxtb	r3, r3
	((Tcc *)hw)->CCB[index].reg = data;
    32aa:	4a20      	ldr	r2, [pc, #128]	; (332c <TCC0_Handler+0xec>)
    32ac:	6793      	str	r3, [r2, #120]	; 0x78
	hri_tcc_write_CCB_reg_no_lock(TCC0, 3, next_value.neg);
    32ae:	784b      	ldrb	r3, [r1, #1]
    32b0:	67d3      	str	r3, [r2, #124]	; 0x7c
	if (sine->updated) {
    32b2:	4b1f      	ldr	r3, [pc, #124]	; (3330 <TCC0_Handler+0xf0>)
    32b4:	7d9b      	ldrb	r3, [r3, #22]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d006      	beq.n	32c8 <TCC0_Handler+0x88>
		sine->frequency = sine->frequency_buffer;
    32ba:	4b1d      	ldr	r3, [pc, #116]	; (3330 <TCC0_Handler+0xf0>)
    32bc:	8a9a      	ldrh	r2, [r3, #20]
    32be:	821a      	strh	r2, [r3, #16]
		sine->amplitude = sine->amplitude_buffer;
    32c0:	7c9a      	ldrb	r2, [r3, #18]
    32c2:	739a      	strb	r2, [r3, #14]
		sine->updated = false;
    32c4:	2200      	movs	r2, #0
    32c6:	759a      	strb	r2, [r3, #22]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    32c8:	4c19      	ldr	r4, [pc, #100]	; (3330 <TCC0_Handler+0xf0>)
    32ca:	89a0      	ldrh	r0, [r4, #12]
    32cc:	8a23      	ldrh	r3, [r4, #16]
    32ce:	18c0      	adds	r0, r0, r3
    32d0:	4918      	ldr	r1, [pc, #96]	; (3334 <TCC0_Handler+0xf4>)
    32d2:	4b19      	ldr	r3, [pc, #100]	; (3338 <TCC0_Handler+0xf8>)
    32d4:	4798      	blx	r3
    32d6:	b289      	uxth	r1, r1
    32d8:	81a1      	strh	r1, [r4, #12]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    32da:	09c9      	lsrs	r1, r1, #7
    32dc:	0049      	lsls	r1, r1, #1
    32de:	4b17      	ldr	r3, [pc, #92]	; (333c <TCC0_Handler+0xfc>)
    32e0:	5ec9      	ldrsh	r1, [r1, r3]
    32e2:	7ba3      	ldrb	r3, [r4, #14]
    32e4:	1c5a      	adds	r2, r3, #1
    32e6:	434a      	muls	r2, r1
    32e8:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    32ea:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    32ec:	1ad3      	subs	r3, r2, r3
    32ee:	3b01      	subs	r3, #1
    32f0:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    32f2:	2a7e      	cmp	r2, #126	; 0x7e
    32f4:	d915      	bls.n	3322 <TCC0_Handler+0xe2>
    32f6:	22ff      	movs	r2, #255	; 0xff
    32f8:	4669      	mov	r1, sp
    32fa:	700a      	strb	r2, [r1, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    32fc:	2b7e      	cmp	r3, #126	; 0x7e
    32fe:	d812      	bhi.n	3326 <TCC0_Handler+0xe6>
    3300:	2300      	movs	r3, #0
    3302:	466a      	mov	r2, sp
    3304:	7053      	strb	r3, [r2, #1]
    3306:	a901      	add	r1, sp, #4
    3308:	8813      	ldrh	r3, [r2, #0]
    330a:	800b      	strh	r3, [r1, #0]
		
	//channel 2
	next_value = sine_wave_next(&(output_channels_wave_form[1]));
	hri_tcc_write_CCB_reg_no_lock(TCC0, 0, next_value.pos);
    330c:	b2db      	uxtb	r3, r3
    330e:	4a07      	ldr	r2, [pc, #28]	; (332c <TCC0_Handler+0xec>)
    3310:	6713      	str	r3, [r2, #112]	; 0x70
	hri_tcc_write_CCB_reg_no_lock(TCC0, 1, next_value.neg);
    3312:	784b      	ldrb	r3, [r1, #1]
    3314:	6753      	str	r3, [r2, #116]	; 0x74
	//gpio_set_pin_level(LED2, next_value.pos != 0);
}
    3316:	b004      	add	sp, #16
    3318:	bd10      	pop	{r4, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    331a:	2200      	movs	r2, #0
    331c:	e7b8      	b.n	3290 <TCC0_Handler+0x50>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    331e:	23ff      	movs	r3, #255	; 0xff
    3320:	e7bb      	b.n	329a <TCC0_Handler+0x5a>
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3322:	2200      	movs	r2, #0
    3324:	e7e8      	b.n	32f8 <TCC0_Handler+0xb8>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3326:	23ff      	movs	r3, #255	; 0xff
    3328:	e7eb      	b.n	3302 <TCC0_Handler+0xc2>
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	42002000 	.word	0x42002000
    3330:	2000008c 	.word	0x2000008c
    3334:	0000c180 	.word	0x0000c180
    3338:	00003a8d 	.word	0x00003a8d
    333c:	200000ec 	.word	0x200000ec

00003340 <TCC2_Handler>:

void TCC2_Handler() {
    3340:	b510      	push	{r4, lr}
    3342:	b084      	sub	sp, #16
    3344:	2201      	movs	r2, #1
    3346:	4b1e      	ldr	r3, [pc, #120]	; (33c0 <TCC2_Handler+0x80>)
    3348:	62da      	str	r2, [r3, #44]	; 0x2c
	if (sine->updated) {
    334a:	2322      	movs	r3, #34	; 0x22
    334c:	4a1d      	ldr	r2, [pc, #116]	; (33c4 <TCC2_Handler+0x84>)
    334e:	5cd3      	ldrb	r3, [r2, r3]
    3350:	2b00      	cmp	r3, #0
    3352:	d007      	beq.n	3364 <TCC2_Handler+0x24>
		sine->frequency = sine->frequency_buffer;
    3354:	0013      	movs	r3, r2
    3356:	8c12      	ldrh	r2, [r2, #32]
    3358:	839a      	strh	r2, [r3, #28]
		sine->amplitude = sine->amplitude_buffer;
    335a:	7f9a      	ldrb	r2, [r3, #30]
    335c:	769a      	strb	r2, [r3, #26]
		sine->updated = false;
    335e:	2100      	movs	r1, #0
    3360:	2222      	movs	r2, #34	; 0x22
    3362:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3364:	4c17      	ldr	r4, [pc, #92]	; (33c4 <TCC2_Handler+0x84>)
    3366:	8b20      	ldrh	r0, [r4, #24]
    3368:	8ba3      	ldrh	r3, [r4, #28]
    336a:	18c0      	adds	r0, r0, r3
    336c:	4916      	ldr	r1, [pc, #88]	; (33c8 <TCC2_Handler+0x88>)
    336e:	4b17      	ldr	r3, [pc, #92]	; (33cc <TCC2_Handler+0x8c>)
    3370:	4798      	blx	r3
    3372:	b289      	uxth	r1, r1
    3374:	8321      	strh	r1, [r4, #24]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    3376:	09c9      	lsrs	r1, r1, #7
    3378:	0049      	lsls	r1, r1, #1
    337a:	4b15      	ldr	r3, [pc, #84]	; (33d0 <TCC2_Handler+0x90>)
    337c:	5ec9      	ldrsh	r1, [r1, r3]
    337e:	7ea3      	ldrb	r3, [r4, #26]
    3380:	1c5a      	adds	r2, r3, #1
    3382:	434a      	muls	r2, r1
    3384:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    3386:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3388:	1ad3      	subs	r3, r2, r3
    338a:	3b01      	subs	r3, #1
    338c:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    338e:	2a7e      	cmp	r2, #126	; 0x7e
    3390:	d911      	bls.n	33b6 <TCC2_Handler+0x76>
    3392:	21ff      	movs	r1, #255	; 0xff
    3394:	aa01      	add	r2, sp, #4
    3396:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3398:	2b7e      	cmp	r3, #126	; 0x7e
    339a:	d80e      	bhi.n	33ba <TCC2_Handler+0x7a>
    339c:	2200      	movs	r2, #0
    339e:	ab01      	add	r3, sp, #4
    33a0:	705a      	strb	r2, [r3, #1]
    33a2:	a902      	add	r1, sp, #8
    33a4:	881b      	ldrh	r3, [r3, #0]
    33a6:	800b      	strh	r3, [r1, #0]
	hri_tcc_clear_interrupt_OVF_bit(TCC2);

	//channel 3
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[2]));
	hri_tcc_write_CCB_reg_no_lock(TCC2, 0, next_value.pos);
    33a8:	b2db      	uxtb	r3, r3
    33aa:	4a05      	ldr	r2, [pc, #20]	; (33c0 <TCC2_Handler+0x80>)
    33ac:	6713      	str	r3, [r2, #112]	; 0x70
	hri_tcc_write_CCB_reg_no_lock(TCC2, 1, next_value.neg);
    33ae:	784b      	ldrb	r3, [r1, #1]
    33b0:	6753      	str	r3, [r2, #116]	; 0x74
}
    33b2:	b004      	add	sp, #16
    33b4:	bd10      	pop	{r4, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    33b6:	2100      	movs	r1, #0
    33b8:	e7ec      	b.n	3394 <TCC2_Handler+0x54>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    33ba:	22ff      	movs	r2, #255	; 0xff
    33bc:	e7ef      	b.n	339e <TCC2_Handler+0x5e>
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	42002800 	.word	0x42002800
    33c4:	2000008c 	.word	0x2000008c
    33c8:	0000c180 	.word	0x0000c180
    33cc:	00003a8d 	.word	0x00003a8d
    33d0:	200000ec 	.word	0x200000ec

000033d4 <TC3_Handler>:
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[channel])); \
	hri_tccount8_write_CC_reg_no_lock(hw, 0, next_value.pos); \
	hri_tccount8_write_CC_reg_no_lock(hw, 1, next_value.neg); \
}

TC_HANDLER(TC3, 3)
    33d4:	b510      	push	{r4, lr}
    33d6:	b084      	sub	sp, #16
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    33d8:	2201      	movs	r2, #1
    33da:	4b1f      	ldr	r3, [pc, #124]	; (3458 <TC3_Handler+0x84>)
    33dc:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    33de:	232e      	movs	r3, #46	; 0x2e
    33e0:	4a1e      	ldr	r2, [pc, #120]	; (345c <TC3_Handler+0x88>)
    33e2:	5cd3      	ldrb	r3, [r2, r3]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d009      	beq.n	33fc <TC3_Handler+0x28>
		sine->frequency = sine->frequency_buffer;
    33e8:	0013      	movs	r3, r2
    33ea:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    33ec:	851a      	strh	r2, [r3, #40]	; 0x28
		sine->amplitude = sine->amplitude_buffer;
    33ee:	222a      	movs	r2, #42	; 0x2a
    33f0:	5c99      	ldrb	r1, [r3, r2]
    33f2:	3a04      	subs	r2, #4
    33f4:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    33f6:	2100      	movs	r1, #0
    33f8:	3208      	adds	r2, #8
    33fa:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    33fc:	4c17      	ldr	r4, [pc, #92]	; (345c <TC3_Handler+0x88>)
    33fe:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    3400:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3402:	18c0      	adds	r0, r0, r3
    3404:	4916      	ldr	r1, [pc, #88]	; (3460 <TC3_Handler+0x8c>)
    3406:	4b17      	ldr	r3, [pc, #92]	; (3464 <TC3_Handler+0x90>)
    3408:	4798      	blx	r3
    340a:	b289      	uxth	r1, r1
    340c:	84a1      	strh	r1, [r4, #36]	; 0x24
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    340e:	09c9      	lsrs	r1, r1, #7
    3410:	0049      	lsls	r1, r1, #1
    3412:	4b15      	ldr	r3, [pc, #84]	; (3468 <TC3_Handler+0x94>)
    3414:	5ec9      	ldrsh	r1, [r1, r3]
    3416:	2326      	movs	r3, #38	; 0x26
    3418:	5ce3      	ldrb	r3, [r4, r3]
    341a:	1c5a      	adds	r2, r3, #1
    341c:	434a      	muls	r2, r1
    341e:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    3420:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3422:	1ad3      	subs	r3, r2, r3
    3424:	3b01      	subs	r3, #1
    3426:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3428:	2a7e      	cmp	r2, #126	; 0x7e
    342a:	d911      	bls.n	3450 <TC3_Handler+0x7c>
    342c:	21ff      	movs	r1, #255	; 0xff
    342e:	aa01      	add	r2, sp, #4
    3430:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3432:	2b7e      	cmp	r3, #126	; 0x7e
    3434:	d80e      	bhi.n	3454 <TC3_Handler+0x80>
    3436:	2200      	movs	r2, #0
    3438:	ab01      	add	r3, sp, #4
    343a:	705a      	strb	r2, [r3, #1]
    343c:	a902      	add	r1, sp, #8
    343e:	881b      	ldrh	r3, [r3, #0]
    3440:	800b      	strh	r3, [r1, #0]
    3442:	b2db      	uxtb	r3, r3
#ifndef TC_UTIL_H_
#define TC_UTIL_H_

static inline void hri_tccount8_write_CC_reg_no_lock(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3444:	4a04      	ldr	r2, [pc, #16]	; (3458 <TC3_Handler+0x84>)
    3446:	7613      	strb	r3, [r2, #24]
    3448:	784b      	ldrb	r3, [r1, #1]
    344a:	7653      	strb	r3, [r2, #25]
    344c:	b004      	add	sp, #16
    344e:	bd10      	pop	{r4, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3450:	2100      	movs	r1, #0
    3452:	e7ec      	b.n	342e <TC3_Handler+0x5a>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3454:	22ff      	movs	r2, #255	; 0xff
    3456:	e7ef      	b.n	3438 <TC3_Handler+0x64>
    3458:	42002c00 	.word	0x42002c00
    345c:	2000008c 	.word	0x2000008c
    3460:	0000c180 	.word	0x0000c180
    3464:	00003a8d 	.word	0x00003a8d
    3468:	200000ec 	.word	0x200000ec

0000346c <TC6_Handler>:
TC_HANDLER(TC6, 4)
    346c:	b510      	push	{r4, lr}
    346e:	b084      	sub	sp, #16
    3470:	2201      	movs	r2, #1
    3472:	4b1f      	ldr	r3, [pc, #124]	; (34f0 <TC6_Handler+0x84>)
    3474:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    3476:	233a      	movs	r3, #58	; 0x3a
    3478:	4a1e      	ldr	r2, [pc, #120]	; (34f4 <TC6_Handler+0x88>)
    347a:	5cd3      	ldrb	r3, [r2, r3]
    347c:	2b00      	cmp	r3, #0
    347e:	d009      	beq.n	3494 <TC6_Handler+0x28>
		sine->frequency = sine->frequency_buffer;
    3480:	0013      	movs	r3, r2
    3482:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    3484:	869a      	strh	r2, [r3, #52]	; 0x34
		sine->amplitude = sine->amplitude_buffer;
    3486:	2236      	movs	r2, #54	; 0x36
    3488:	5c99      	ldrb	r1, [r3, r2]
    348a:	3a04      	subs	r2, #4
    348c:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    348e:	2100      	movs	r1, #0
    3490:	3208      	adds	r2, #8
    3492:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3494:	4c17      	ldr	r4, [pc, #92]	; (34f4 <TC6_Handler+0x88>)
    3496:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    3498:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    349a:	18c0      	adds	r0, r0, r3
    349c:	4916      	ldr	r1, [pc, #88]	; (34f8 <TC6_Handler+0x8c>)
    349e:	4b17      	ldr	r3, [pc, #92]	; (34fc <TC6_Handler+0x90>)
    34a0:	4798      	blx	r3
    34a2:	b289      	uxth	r1, r1
    34a4:	8621      	strh	r1, [r4, #48]	; 0x30
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    34a6:	09c9      	lsrs	r1, r1, #7
    34a8:	0049      	lsls	r1, r1, #1
    34aa:	4b15      	ldr	r3, [pc, #84]	; (3500 <TC6_Handler+0x94>)
    34ac:	5ec9      	ldrsh	r1, [r1, r3]
    34ae:	2332      	movs	r3, #50	; 0x32
    34b0:	5ce3      	ldrb	r3, [r4, r3]
    34b2:	1c5a      	adds	r2, r3, #1
    34b4:	434a      	muls	r2, r1
    34b6:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    34b8:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    34ba:	1ad3      	subs	r3, r2, r3
    34bc:	3b01      	subs	r3, #1
    34be:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    34c0:	2a7e      	cmp	r2, #126	; 0x7e
    34c2:	d911      	bls.n	34e8 <TC6_Handler+0x7c>
    34c4:	21ff      	movs	r1, #255	; 0xff
    34c6:	aa01      	add	r2, sp, #4
    34c8:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    34ca:	2b7e      	cmp	r3, #126	; 0x7e
    34cc:	d80e      	bhi.n	34ec <TC6_Handler+0x80>
    34ce:	2200      	movs	r2, #0
    34d0:	ab01      	add	r3, sp, #4
    34d2:	705a      	strb	r2, [r3, #1]
    34d4:	a902      	add	r1, sp, #8
    34d6:	881b      	ldrh	r3, [r3, #0]
    34d8:	800b      	strh	r3, [r1, #0]
    34da:	b2db      	uxtb	r3, r3
    34dc:	4a04      	ldr	r2, [pc, #16]	; (34f0 <TC6_Handler+0x84>)
    34de:	7613      	strb	r3, [r2, #24]
    34e0:	784b      	ldrb	r3, [r1, #1]
    34e2:	7653      	strb	r3, [r2, #25]
    34e4:	b004      	add	sp, #16
    34e6:	bd10      	pop	{r4, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    34e8:	2100      	movs	r1, #0
    34ea:	e7ec      	b.n	34c6 <TC6_Handler+0x5a>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    34ec:	22ff      	movs	r2, #255	; 0xff
    34ee:	e7ef      	b.n	34d0 <TC6_Handler+0x64>
    34f0:	42003800 	.word	0x42003800
    34f4:	2000008c 	.word	0x2000008c
    34f8:	0000c180 	.word	0x0000c180
    34fc:	00003a8d 	.word	0x00003a8d
    3500:	200000ec 	.word	0x200000ec

00003504 <TC5_Handler>:
TC_HANDLER(TC5, 5)
    3504:	b510      	push	{r4, lr}
    3506:	b084      	sub	sp, #16
    3508:	2201      	movs	r2, #1
    350a:	4b21      	ldr	r3, [pc, #132]	; (3590 <TC5_Handler+0x8c>)
    350c:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    350e:	2346      	movs	r3, #70	; 0x46
    3510:	4a20      	ldr	r2, [pc, #128]	; (3594 <TC5_Handler+0x90>)
    3512:	5cd3      	ldrb	r3, [r2, r3]
    3514:	2b00      	cmp	r3, #0
    3516:	d00b      	beq.n	3530 <TC5_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    3518:	0013      	movs	r3, r2
    351a:	2244      	movs	r2, #68	; 0x44
    351c:	5a99      	ldrh	r1, [r3, r2]
    351e:	3a04      	subs	r2, #4
    3520:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    3522:	3202      	adds	r2, #2
    3524:	5c99      	ldrb	r1, [r3, r2]
    3526:	3a04      	subs	r2, #4
    3528:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    352a:	2100      	movs	r1, #0
    352c:	3208      	adds	r2, #8
    352e:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3530:	4c18      	ldr	r4, [pc, #96]	; (3594 <TC5_Handler+0x90>)
    3532:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    3534:	2340      	movs	r3, #64	; 0x40
    3536:	5ae3      	ldrh	r3, [r4, r3]
    3538:	18c0      	adds	r0, r0, r3
    353a:	4917      	ldr	r1, [pc, #92]	; (3598 <TC5_Handler+0x94>)
    353c:	4b17      	ldr	r3, [pc, #92]	; (359c <TC5_Handler+0x98>)
    353e:	4798      	blx	r3
    3540:	b289      	uxth	r1, r1
    3542:	87a1      	strh	r1, [r4, #60]	; 0x3c
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    3544:	09c9      	lsrs	r1, r1, #7
    3546:	0049      	lsls	r1, r1, #1
    3548:	4b15      	ldr	r3, [pc, #84]	; (35a0 <TC5_Handler+0x9c>)
    354a:	5ec9      	ldrsh	r1, [r1, r3]
    354c:	233e      	movs	r3, #62	; 0x3e
    354e:	5ce3      	ldrb	r3, [r4, r3]
    3550:	1c5a      	adds	r2, r3, #1
    3552:	434a      	muls	r2, r1
    3554:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    3556:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3558:	1ad3      	subs	r3, r2, r3
    355a:	3b01      	subs	r3, #1
    355c:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    355e:	2a7e      	cmp	r2, #126	; 0x7e
    3560:	d911      	bls.n	3586 <TC5_Handler+0x82>
    3562:	21ff      	movs	r1, #255	; 0xff
    3564:	aa01      	add	r2, sp, #4
    3566:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    3568:	2b7e      	cmp	r3, #126	; 0x7e
    356a:	d80e      	bhi.n	358a <TC5_Handler+0x86>
    356c:	2200      	movs	r2, #0
    356e:	ab01      	add	r3, sp, #4
    3570:	705a      	strb	r2, [r3, #1]
    3572:	a902      	add	r1, sp, #8
    3574:	881b      	ldrh	r3, [r3, #0]
    3576:	800b      	strh	r3, [r1, #0]
    3578:	b2db      	uxtb	r3, r3
    357a:	4a05      	ldr	r2, [pc, #20]	; (3590 <TC5_Handler+0x8c>)
    357c:	7613      	strb	r3, [r2, #24]
    357e:	784b      	ldrb	r3, [r1, #1]
    3580:	7653      	strb	r3, [r2, #25]
    3582:	b004      	add	sp, #16
    3584:	bd10      	pop	{r4, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3586:	2100      	movs	r1, #0
    3588:	e7ec      	b.n	3564 <TC5_Handler+0x60>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    358a:	22ff      	movs	r2, #255	; 0xff
    358c:	e7ef      	b.n	356e <TC5_Handler+0x6a>
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	42003400 	.word	0x42003400
    3594:	2000008c 	.word	0x2000008c
    3598:	0000c180 	.word	0x0000c180
    359c:	00003a8d 	.word	0x00003a8d
    35a0:	200000ec 	.word	0x200000ec

000035a4 <TC4_Handler>:
TC_HANDLER(TC4, 6)
    35a4:	b530      	push	{r4, r5, lr}
    35a6:	b085      	sub	sp, #20
    35a8:	2201      	movs	r2, #1
    35aa:	4b21      	ldr	r3, [pc, #132]	; (3630 <TC4_Handler+0x8c>)
    35ac:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    35ae:	2352      	movs	r3, #82	; 0x52
    35b0:	4a20      	ldr	r2, [pc, #128]	; (3634 <TC4_Handler+0x90>)
    35b2:	5cd3      	ldrb	r3, [r2, r3]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d00b      	beq.n	35d0 <TC4_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    35b8:	0013      	movs	r3, r2
    35ba:	2250      	movs	r2, #80	; 0x50
    35bc:	5a99      	ldrh	r1, [r3, r2]
    35be:	3a04      	subs	r2, #4
    35c0:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    35c2:	3202      	adds	r2, #2
    35c4:	5c99      	ldrb	r1, [r3, r2]
    35c6:	3a04      	subs	r2, #4
    35c8:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    35ca:	2100      	movs	r1, #0
    35cc:	3208      	adds	r2, #8
    35ce:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    35d0:	4c18      	ldr	r4, [pc, #96]	; (3634 <TC4_Handler+0x90>)
    35d2:	2548      	movs	r5, #72	; 0x48
    35d4:	5b60      	ldrh	r0, [r4, r5]
    35d6:	234c      	movs	r3, #76	; 0x4c
    35d8:	5ae3      	ldrh	r3, [r4, r3]
    35da:	18c0      	adds	r0, r0, r3
    35dc:	4916      	ldr	r1, [pc, #88]	; (3638 <TC4_Handler+0x94>)
    35de:	4b17      	ldr	r3, [pc, #92]	; (363c <TC4_Handler+0x98>)
    35e0:	4798      	blx	r3
    35e2:	b289      	uxth	r1, r1
    35e4:	5361      	strh	r1, [r4, r5]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    35e6:	09c9      	lsrs	r1, r1, #7
    35e8:	0049      	lsls	r1, r1, #1
    35ea:	4b15      	ldr	r3, [pc, #84]	; (3640 <TC4_Handler+0x9c>)
    35ec:	5ec9      	ldrsh	r1, [r1, r3]
    35ee:	234a      	movs	r3, #74	; 0x4a
    35f0:	5ce3      	ldrb	r3, [r4, r3]
    35f2:	1c5a      	adds	r2, r3, #1
    35f4:	434a      	muls	r2, r1
    35f6:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    35f8:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    35fa:	1ad3      	subs	r3, r2, r3
    35fc:	3b01      	subs	r3, #1
    35fe:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3600:	2a7e      	cmp	r2, #126	; 0x7e
    3602:	d911      	bls.n	3628 <TC4_Handler+0x84>
    3604:	21ff      	movs	r1, #255	; 0xff
    3606:	aa01      	add	r2, sp, #4
    3608:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    360a:	2b7e      	cmp	r3, #126	; 0x7e
    360c:	d80e      	bhi.n	362c <TC4_Handler+0x88>
    360e:	2200      	movs	r2, #0
    3610:	ab01      	add	r3, sp, #4
    3612:	705a      	strb	r2, [r3, #1]
    3614:	a902      	add	r1, sp, #8
    3616:	881b      	ldrh	r3, [r3, #0]
    3618:	800b      	strh	r3, [r1, #0]
    361a:	b2db      	uxtb	r3, r3
    361c:	4a04      	ldr	r2, [pc, #16]	; (3630 <TC4_Handler+0x8c>)
    361e:	7613      	strb	r3, [r2, #24]
    3620:	784b      	ldrb	r3, [r1, #1]
    3622:	7653      	strb	r3, [r2, #25]
    3624:	b005      	add	sp, #20
    3626:	bd30      	pop	{r4, r5, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    3628:	2100      	movs	r1, #0
    362a:	e7ec      	b.n	3606 <TC4_Handler+0x62>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    362c:	22ff      	movs	r2, #255	; 0xff
    362e:	e7ef      	b.n	3610 <TC4_Handler+0x6c>
    3630:	42003000 	.word	0x42003000
    3634:	2000008c 	.word	0x2000008c
    3638:	0000c180 	.word	0x0000c180
    363c:	00003a8d 	.word	0x00003a8d
    3640:	200000ec 	.word	0x200000ec

00003644 <TC7_Handler>:
TC_HANDLER(TC7, 7)
    3644:	b530      	push	{r4, r5, lr}
    3646:	b085      	sub	sp, #20
    3648:	2201      	movs	r2, #1
    364a:	4b21      	ldr	r3, [pc, #132]	; (36d0 <TC7_Handler+0x8c>)
    364c:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    364e:	235e      	movs	r3, #94	; 0x5e
    3650:	4a20      	ldr	r2, [pc, #128]	; (36d4 <TC7_Handler+0x90>)
    3652:	5cd3      	ldrb	r3, [r2, r3]
    3654:	2b00      	cmp	r3, #0
    3656:	d00b      	beq.n	3670 <TC7_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    3658:	0013      	movs	r3, r2
    365a:	225c      	movs	r2, #92	; 0x5c
    365c:	5a99      	ldrh	r1, [r3, r2]
    365e:	3a04      	subs	r2, #4
    3660:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    3662:	3202      	adds	r2, #2
    3664:	5c99      	ldrb	r1, [r3, r2]
    3666:	3a04      	subs	r2, #4
    3668:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    366a:	2100      	movs	r1, #0
    366c:	3208      	adds	r2, #8
    366e:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3670:	4c18      	ldr	r4, [pc, #96]	; (36d4 <TC7_Handler+0x90>)
    3672:	2554      	movs	r5, #84	; 0x54
    3674:	5b60      	ldrh	r0, [r4, r5]
    3676:	2358      	movs	r3, #88	; 0x58
    3678:	5ae3      	ldrh	r3, [r4, r3]
    367a:	18c0      	adds	r0, r0, r3
    367c:	4916      	ldr	r1, [pc, #88]	; (36d8 <TC7_Handler+0x94>)
    367e:	4b17      	ldr	r3, [pc, #92]	; (36dc <TC7_Handler+0x98>)
    3680:	4798      	blx	r3
    3682:	b289      	uxth	r1, r1
    3684:	5361      	strh	r1, [r4, r5]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    3686:	09c9      	lsrs	r1, r1, #7
    3688:	0049      	lsls	r1, r1, #1
    368a:	4b15      	ldr	r3, [pc, #84]	; (36e0 <TC7_Handler+0x9c>)
    368c:	5ec9      	ldrsh	r1, [r1, r3]
    368e:	2356      	movs	r3, #86	; 0x56
    3690:	5ce3      	ldrb	r3, [r4, r3]
    3692:	1c5a      	adds	r2, r3, #1
    3694:	434a      	muls	r2, r1
    3696:	1212      	asrs	r2, r2, #8
	sample.pos = result;
    3698:	b2d2      	uxtb	r2, r2
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    369a:	1ad3      	subs	r3, r2, r3
    369c:	3b01      	subs	r3, #1
    369e:	b2db      	uxtb	r3, r3
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    36a0:	2a7e      	cmp	r2, #126	; 0x7e
    36a2:	d911      	bls.n	36c8 <TC7_Handler+0x84>
    36a4:	21ff      	movs	r1, #255	; 0xff
    36a6:	aa01      	add	r2, sp, #4
    36a8:	7011      	strb	r1, [r2, #0]
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    36aa:	2b7e      	cmp	r3, #126	; 0x7e
    36ac:	d80e      	bhi.n	36cc <TC7_Handler+0x88>
    36ae:	2200      	movs	r2, #0
    36b0:	ab01      	add	r3, sp, #4
    36b2:	705a      	strb	r2, [r3, #1]
    36b4:	a902      	add	r1, sp, #8
    36b6:	881b      	ldrh	r3, [r3, #0]
    36b8:	800b      	strh	r3, [r1, #0]
    36ba:	b2db      	uxtb	r3, r3
    36bc:	4a04      	ldr	r2, [pc, #16]	; (36d0 <TC7_Handler+0x8c>)
    36be:	7613      	strb	r3, [r2, #24]
    36c0:	784b      	ldrb	r3, [r1, #1]
    36c2:	7653      	strb	r3, [r2, #25]
    36c4:	b005      	add	sp, #20
    36c6:	bd30      	pop	{r4, r5, pc}
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
    36c8:	2100      	movs	r1, #0
    36ca:	e7ec      	b.n	36a6 <TC7_Handler+0x62>
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
    36cc:	22ff      	movs	r2, #255	; 0xff
    36ce:	e7ef      	b.n	36b0 <TC7_Handler+0x6c>
    36d0:	42003c00 	.word	0x42003c00
    36d4:	2000008c 	.word	0x2000008c
    36d8:	0000c180 	.word	0x0000c180
    36dc:	00003a8d 	.word	0x00003a8d
    36e0:	200000ec 	.word	0x200000ec

000036e4 <output_channels_init>:

void output_channels_init() {
    36e4:	b510      	push	{r4, lr}
	output_channels_init_1_and_2();
    36e6:	4b03      	ldr	r3, [pc, #12]	; (36f4 <output_channels_init+0x10>)
    36e8:	4798      	blx	r3
	output_channels_init_3();
    36ea:	4b03      	ldr	r3, [pc, #12]	; (36f8 <output_channels_init+0x14>)
    36ec:	4798      	blx	r3
	output_channels_init_4_5_6_7_8();
    36ee:	4b03      	ldr	r3, [pc, #12]	; (36fc <output_channels_init+0x18>)
    36f0:	4798      	blx	r3
    36f2:	bd10      	pop	{r4, pc}
    36f4:	00002e55 	.word	0x00002e55
    36f8:	00002f31 	.word	0x00002f31
    36fc:	0000319d 	.word	0x0000319d

00003700 <round>:
    3700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3702:	4a26      	ldr	r2, [pc, #152]	; (379c <round+0x9c>)
    3704:	004b      	lsls	r3, r1, #1
    3706:	0d5b      	lsrs	r3, r3, #21
    3708:	189a      	adds	r2, r3, r2
    370a:	0007      	movs	r7, r0
    370c:	000c      	movs	r4, r1
    370e:	2a13      	cmp	r2, #19
    3710:	dc10      	bgt.n	3734 <round+0x34>
    3712:	2a00      	cmp	r2, #0
    3714:	db39      	blt.n	378a <round+0x8a>
    3716:	4b22      	ldr	r3, [pc, #136]	; (37a0 <round+0xa0>)
    3718:	4113      	asrs	r3, r2
    371a:	420b      	tst	r3, r1
    371c:	d030      	beq.n	3780 <round+0x80>
    371e:	2480      	movs	r4, #128	; 0x80
    3720:	0324      	lsls	r4, r4, #12
    3722:	4114      	asrs	r4, r2
    3724:	2000      	movs	r0, #0
    3726:	1864      	adds	r4, r4, r1
    3728:	439c      	bics	r4, r3
    372a:	0006      	movs	r6, r0
    372c:	0025      	movs	r5, r4
    372e:	0030      	movs	r0, r6
    3730:	0029      	movs	r1, r5
    3732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3734:	2a33      	cmp	r2, #51	; 0x33
    3736:	dd0c      	ble.n	3752 <round+0x52>
    3738:	2380      	movs	r3, #128	; 0x80
    373a:	0006      	movs	r6, r0
    373c:	00db      	lsls	r3, r3, #3
    373e:	000d      	movs	r5, r1
    3740:	429a      	cmp	r2, r3
    3742:	d1f4      	bne.n	372e <round+0x2e>
    3744:	0002      	movs	r2, r0
    3746:	000b      	movs	r3, r1
    3748:	f000 fd54 	bl	41f4 <__aeabi_dadd>
    374c:	0006      	movs	r6, r0
    374e:	000d      	movs	r5, r1
    3750:	e7ed      	b.n	372e <round+0x2e>
    3752:	4d14      	ldr	r5, [pc, #80]	; (37a4 <round+0xa4>)
    3754:	0006      	movs	r6, r0
    3756:	46ac      	mov	ip, r5
    3758:	2501      	movs	r5, #1
    375a:	4463      	add	r3, ip
    375c:	426d      	negs	r5, r5
    375e:	40dd      	lsrs	r5, r3
    3760:	46ac      	mov	ip, r5
    3762:	4663      	mov	r3, ip
    3764:	000d      	movs	r5, r1
    3766:	4203      	tst	r3, r0
    3768:	d0e1      	beq.n	372e <round+0x2e>
    376a:	2333      	movs	r3, #51	; 0x33
    376c:	1a9a      	subs	r2, r3, r2
    376e:	3b32      	subs	r3, #50	; 0x32
    3770:	4093      	lsls	r3, r2
    3772:	1818      	adds	r0, r3, r0
    3774:	4287      	cmp	r7, r0
    3776:	d900      	bls.n	377a <round+0x7a>
    3778:	1c4c      	adds	r4, r1, #1
    377a:	4663      	mov	r3, ip
    377c:	4398      	bics	r0, r3
    377e:	e7d4      	b.n	372a <round+0x2a>
    3780:	0006      	movs	r6, r0
    3782:	000d      	movs	r5, r1
    3784:	2800      	cmp	r0, #0
    3786:	d1ca      	bne.n	371e <round+0x1e>
    3788:	e7d1      	b.n	372e <round+0x2e>
    378a:	0fc9      	lsrs	r1, r1, #31
    378c:	07cc      	lsls	r4, r1, #31
    378e:	2000      	movs	r0, #0
    3790:	1c53      	adds	r3, r2, #1
    3792:	d1ca      	bne.n	372a <round+0x2a>
    3794:	4b04      	ldr	r3, [pc, #16]	; (37a8 <round+0xa8>)
    3796:	431c      	orrs	r4, r3
    3798:	e7c7      	b.n	372a <round+0x2a>
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	fffffc01 	.word	0xfffffc01
    37a0:	000fffff 	.word	0x000fffff
    37a4:	fffffbed 	.word	0xfffffbed
    37a8:	3ff00000 	.word	0x3ff00000

000037ac <__udivsi3>:
    37ac:	2200      	movs	r2, #0
    37ae:	0843      	lsrs	r3, r0, #1
    37b0:	428b      	cmp	r3, r1
    37b2:	d374      	bcc.n	389e <__udivsi3+0xf2>
    37b4:	0903      	lsrs	r3, r0, #4
    37b6:	428b      	cmp	r3, r1
    37b8:	d35f      	bcc.n	387a <__udivsi3+0xce>
    37ba:	0a03      	lsrs	r3, r0, #8
    37bc:	428b      	cmp	r3, r1
    37be:	d344      	bcc.n	384a <__udivsi3+0x9e>
    37c0:	0b03      	lsrs	r3, r0, #12
    37c2:	428b      	cmp	r3, r1
    37c4:	d328      	bcc.n	3818 <__udivsi3+0x6c>
    37c6:	0c03      	lsrs	r3, r0, #16
    37c8:	428b      	cmp	r3, r1
    37ca:	d30d      	bcc.n	37e8 <__udivsi3+0x3c>
    37cc:	22ff      	movs	r2, #255	; 0xff
    37ce:	0209      	lsls	r1, r1, #8
    37d0:	ba12      	rev	r2, r2
    37d2:	0c03      	lsrs	r3, r0, #16
    37d4:	428b      	cmp	r3, r1
    37d6:	d302      	bcc.n	37de <__udivsi3+0x32>
    37d8:	1212      	asrs	r2, r2, #8
    37da:	0209      	lsls	r1, r1, #8
    37dc:	d065      	beq.n	38aa <__udivsi3+0xfe>
    37de:	0b03      	lsrs	r3, r0, #12
    37e0:	428b      	cmp	r3, r1
    37e2:	d319      	bcc.n	3818 <__udivsi3+0x6c>
    37e4:	e000      	b.n	37e8 <__udivsi3+0x3c>
    37e6:	0a09      	lsrs	r1, r1, #8
    37e8:	0bc3      	lsrs	r3, r0, #15
    37ea:	428b      	cmp	r3, r1
    37ec:	d301      	bcc.n	37f2 <__udivsi3+0x46>
    37ee:	03cb      	lsls	r3, r1, #15
    37f0:	1ac0      	subs	r0, r0, r3
    37f2:	4152      	adcs	r2, r2
    37f4:	0b83      	lsrs	r3, r0, #14
    37f6:	428b      	cmp	r3, r1
    37f8:	d301      	bcc.n	37fe <__udivsi3+0x52>
    37fa:	038b      	lsls	r3, r1, #14
    37fc:	1ac0      	subs	r0, r0, r3
    37fe:	4152      	adcs	r2, r2
    3800:	0b43      	lsrs	r3, r0, #13
    3802:	428b      	cmp	r3, r1
    3804:	d301      	bcc.n	380a <__udivsi3+0x5e>
    3806:	034b      	lsls	r3, r1, #13
    3808:	1ac0      	subs	r0, r0, r3
    380a:	4152      	adcs	r2, r2
    380c:	0b03      	lsrs	r3, r0, #12
    380e:	428b      	cmp	r3, r1
    3810:	d301      	bcc.n	3816 <__udivsi3+0x6a>
    3812:	030b      	lsls	r3, r1, #12
    3814:	1ac0      	subs	r0, r0, r3
    3816:	4152      	adcs	r2, r2
    3818:	0ac3      	lsrs	r3, r0, #11
    381a:	428b      	cmp	r3, r1
    381c:	d301      	bcc.n	3822 <__udivsi3+0x76>
    381e:	02cb      	lsls	r3, r1, #11
    3820:	1ac0      	subs	r0, r0, r3
    3822:	4152      	adcs	r2, r2
    3824:	0a83      	lsrs	r3, r0, #10
    3826:	428b      	cmp	r3, r1
    3828:	d301      	bcc.n	382e <__udivsi3+0x82>
    382a:	028b      	lsls	r3, r1, #10
    382c:	1ac0      	subs	r0, r0, r3
    382e:	4152      	adcs	r2, r2
    3830:	0a43      	lsrs	r3, r0, #9
    3832:	428b      	cmp	r3, r1
    3834:	d301      	bcc.n	383a <__udivsi3+0x8e>
    3836:	024b      	lsls	r3, r1, #9
    3838:	1ac0      	subs	r0, r0, r3
    383a:	4152      	adcs	r2, r2
    383c:	0a03      	lsrs	r3, r0, #8
    383e:	428b      	cmp	r3, r1
    3840:	d301      	bcc.n	3846 <__udivsi3+0x9a>
    3842:	020b      	lsls	r3, r1, #8
    3844:	1ac0      	subs	r0, r0, r3
    3846:	4152      	adcs	r2, r2
    3848:	d2cd      	bcs.n	37e6 <__udivsi3+0x3a>
    384a:	09c3      	lsrs	r3, r0, #7
    384c:	428b      	cmp	r3, r1
    384e:	d301      	bcc.n	3854 <__udivsi3+0xa8>
    3850:	01cb      	lsls	r3, r1, #7
    3852:	1ac0      	subs	r0, r0, r3
    3854:	4152      	adcs	r2, r2
    3856:	0983      	lsrs	r3, r0, #6
    3858:	428b      	cmp	r3, r1
    385a:	d301      	bcc.n	3860 <__udivsi3+0xb4>
    385c:	018b      	lsls	r3, r1, #6
    385e:	1ac0      	subs	r0, r0, r3
    3860:	4152      	adcs	r2, r2
    3862:	0943      	lsrs	r3, r0, #5
    3864:	428b      	cmp	r3, r1
    3866:	d301      	bcc.n	386c <__udivsi3+0xc0>
    3868:	014b      	lsls	r3, r1, #5
    386a:	1ac0      	subs	r0, r0, r3
    386c:	4152      	adcs	r2, r2
    386e:	0903      	lsrs	r3, r0, #4
    3870:	428b      	cmp	r3, r1
    3872:	d301      	bcc.n	3878 <__udivsi3+0xcc>
    3874:	010b      	lsls	r3, r1, #4
    3876:	1ac0      	subs	r0, r0, r3
    3878:	4152      	adcs	r2, r2
    387a:	08c3      	lsrs	r3, r0, #3
    387c:	428b      	cmp	r3, r1
    387e:	d301      	bcc.n	3884 <__udivsi3+0xd8>
    3880:	00cb      	lsls	r3, r1, #3
    3882:	1ac0      	subs	r0, r0, r3
    3884:	4152      	adcs	r2, r2
    3886:	0883      	lsrs	r3, r0, #2
    3888:	428b      	cmp	r3, r1
    388a:	d301      	bcc.n	3890 <__udivsi3+0xe4>
    388c:	008b      	lsls	r3, r1, #2
    388e:	1ac0      	subs	r0, r0, r3
    3890:	4152      	adcs	r2, r2
    3892:	0843      	lsrs	r3, r0, #1
    3894:	428b      	cmp	r3, r1
    3896:	d301      	bcc.n	389c <__udivsi3+0xf0>
    3898:	004b      	lsls	r3, r1, #1
    389a:	1ac0      	subs	r0, r0, r3
    389c:	4152      	adcs	r2, r2
    389e:	1a41      	subs	r1, r0, r1
    38a0:	d200      	bcs.n	38a4 <__udivsi3+0xf8>
    38a2:	4601      	mov	r1, r0
    38a4:	4152      	adcs	r2, r2
    38a6:	4610      	mov	r0, r2
    38a8:	4770      	bx	lr
    38aa:	e7ff      	b.n	38ac <__udivsi3+0x100>
    38ac:	b501      	push	{r0, lr}
    38ae:	2000      	movs	r0, #0
    38b0:	f000 f8f0 	bl	3a94 <__aeabi_idiv0>
    38b4:	bd02      	pop	{r1, pc}
    38b6:	46c0      	nop			; (mov r8, r8)

000038b8 <__aeabi_uidivmod>:
    38b8:	2900      	cmp	r1, #0
    38ba:	d0f7      	beq.n	38ac <__udivsi3+0x100>
    38bc:	e776      	b.n	37ac <__udivsi3>
    38be:	4770      	bx	lr

000038c0 <__divsi3>:
    38c0:	4603      	mov	r3, r0
    38c2:	430b      	orrs	r3, r1
    38c4:	d47f      	bmi.n	39c6 <__divsi3+0x106>
    38c6:	2200      	movs	r2, #0
    38c8:	0843      	lsrs	r3, r0, #1
    38ca:	428b      	cmp	r3, r1
    38cc:	d374      	bcc.n	39b8 <__divsi3+0xf8>
    38ce:	0903      	lsrs	r3, r0, #4
    38d0:	428b      	cmp	r3, r1
    38d2:	d35f      	bcc.n	3994 <__divsi3+0xd4>
    38d4:	0a03      	lsrs	r3, r0, #8
    38d6:	428b      	cmp	r3, r1
    38d8:	d344      	bcc.n	3964 <__divsi3+0xa4>
    38da:	0b03      	lsrs	r3, r0, #12
    38dc:	428b      	cmp	r3, r1
    38de:	d328      	bcc.n	3932 <__divsi3+0x72>
    38e0:	0c03      	lsrs	r3, r0, #16
    38e2:	428b      	cmp	r3, r1
    38e4:	d30d      	bcc.n	3902 <__divsi3+0x42>
    38e6:	22ff      	movs	r2, #255	; 0xff
    38e8:	0209      	lsls	r1, r1, #8
    38ea:	ba12      	rev	r2, r2
    38ec:	0c03      	lsrs	r3, r0, #16
    38ee:	428b      	cmp	r3, r1
    38f0:	d302      	bcc.n	38f8 <__divsi3+0x38>
    38f2:	1212      	asrs	r2, r2, #8
    38f4:	0209      	lsls	r1, r1, #8
    38f6:	d065      	beq.n	39c4 <__divsi3+0x104>
    38f8:	0b03      	lsrs	r3, r0, #12
    38fa:	428b      	cmp	r3, r1
    38fc:	d319      	bcc.n	3932 <__divsi3+0x72>
    38fe:	e000      	b.n	3902 <__divsi3+0x42>
    3900:	0a09      	lsrs	r1, r1, #8
    3902:	0bc3      	lsrs	r3, r0, #15
    3904:	428b      	cmp	r3, r1
    3906:	d301      	bcc.n	390c <__divsi3+0x4c>
    3908:	03cb      	lsls	r3, r1, #15
    390a:	1ac0      	subs	r0, r0, r3
    390c:	4152      	adcs	r2, r2
    390e:	0b83      	lsrs	r3, r0, #14
    3910:	428b      	cmp	r3, r1
    3912:	d301      	bcc.n	3918 <__divsi3+0x58>
    3914:	038b      	lsls	r3, r1, #14
    3916:	1ac0      	subs	r0, r0, r3
    3918:	4152      	adcs	r2, r2
    391a:	0b43      	lsrs	r3, r0, #13
    391c:	428b      	cmp	r3, r1
    391e:	d301      	bcc.n	3924 <__divsi3+0x64>
    3920:	034b      	lsls	r3, r1, #13
    3922:	1ac0      	subs	r0, r0, r3
    3924:	4152      	adcs	r2, r2
    3926:	0b03      	lsrs	r3, r0, #12
    3928:	428b      	cmp	r3, r1
    392a:	d301      	bcc.n	3930 <__divsi3+0x70>
    392c:	030b      	lsls	r3, r1, #12
    392e:	1ac0      	subs	r0, r0, r3
    3930:	4152      	adcs	r2, r2
    3932:	0ac3      	lsrs	r3, r0, #11
    3934:	428b      	cmp	r3, r1
    3936:	d301      	bcc.n	393c <__divsi3+0x7c>
    3938:	02cb      	lsls	r3, r1, #11
    393a:	1ac0      	subs	r0, r0, r3
    393c:	4152      	adcs	r2, r2
    393e:	0a83      	lsrs	r3, r0, #10
    3940:	428b      	cmp	r3, r1
    3942:	d301      	bcc.n	3948 <__divsi3+0x88>
    3944:	028b      	lsls	r3, r1, #10
    3946:	1ac0      	subs	r0, r0, r3
    3948:	4152      	adcs	r2, r2
    394a:	0a43      	lsrs	r3, r0, #9
    394c:	428b      	cmp	r3, r1
    394e:	d301      	bcc.n	3954 <__divsi3+0x94>
    3950:	024b      	lsls	r3, r1, #9
    3952:	1ac0      	subs	r0, r0, r3
    3954:	4152      	adcs	r2, r2
    3956:	0a03      	lsrs	r3, r0, #8
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__divsi3+0xa0>
    395c:	020b      	lsls	r3, r1, #8
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	d2cd      	bcs.n	3900 <__divsi3+0x40>
    3964:	09c3      	lsrs	r3, r0, #7
    3966:	428b      	cmp	r3, r1
    3968:	d301      	bcc.n	396e <__divsi3+0xae>
    396a:	01cb      	lsls	r3, r1, #7
    396c:	1ac0      	subs	r0, r0, r3
    396e:	4152      	adcs	r2, r2
    3970:	0983      	lsrs	r3, r0, #6
    3972:	428b      	cmp	r3, r1
    3974:	d301      	bcc.n	397a <__divsi3+0xba>
    3976:	018b      	lsls	r3, r1, #6
    3978:	1ac0      	subs	r0, r0, r3
    397a:	4152      	adcs	r2, r2
    397c:	0943      	lsrs	r3, r0, #5
    397e:	428b      	cmp	r3, r1
    3980:	d301      	bcc.n	3986 <__divsi3+0xc6>
    3982:	014b      	lsls	r3, r1, #5
    3984:	1ac0      	subs	r0, r0, r3
    3986:	4152      	adcs	r2, r2
    3988:	0903      	lsrs	r3, r0, #4
    398a:	428b      	cmp	r3, r1
    398c:	d301      	bcc.n	3992 <__divsi3+0xd2>
    398e:	010b      	lsls	r3, r1, #4
    3990:	1ac0      	subs	r0, r0, r3
    3992:	4152      	adcs	r2, r2
    3994:	08c3      	lsrs	r3, r0, #3
    3996:	428b      	cmp	r3, r1
    3998:	d301      	bcc.n	399e <__divsi3+0xde>
    399a:	00cb      	lsls	r3, r1, #3
    399c:	1ac0      	subs	r0, r0, r3
    399e:	4152      	adcs	r2, r2
    39a0:	0883      	lsrs	r3, r0, #2
    39a2:	428b      	cmp	r3, r1
    39a4:	d301      	bcc.n	39aa <__divsi3+0xea>
    39a6:	008b      	lsls	r3, r1, #2
    39a8:	1ac0      	subs	r0, r0, r3
    39aa:	4152      	adcs	r2, r2
    39ac:	0843      	lsrs	r3, r0, #1
    39ae:	428b      	cmp	r3, r1
    39b0:	d301      	bcc.n	39b6 <__divsi3+0xf6>
    39b2:	004b      	lsls	r3, r1, #1
    39b4:	1ac0      	subs	r0, r0, r3
    39b6:	4152      	adcs	r2, r2
    39b8:	1a41      	subs	r1, r0, r1
    39ba:	d200      	bcs.n	39be <__divsi3+0xfe>
    39bc:	4601      	mov	r1, r0
    39be:	4152      	adcs	r2, r2
    39c0:	4610      	mov	r0, r2
    39c2:	4770      	bx	lr
    39c4:	e05d      	b.n	3a82 <__divsi3+0x1c2>
    39c6:	0fca      	lsrs	r2, r1, #31
    39c8:	d000      	beq.n	39cc <__divsi3+0x10c>
    39ca:	4249      	negs	r1, r1
    39cc:	1003      	asrs	r3, r0, #32
    39ce:	d300      	bcc.n	39d2 <__divsi3+0x112>
    39d0:	4240      	negs	r0, r0
    39d2:	4053      	eors	r3, r2
    39d4:	2200      	movs	r2, #0
    39d6:	469c      	mov	ip, r3
    39d8:	0903      	lsrs	r3, r0, #4
    39da:	428b      	cmp	r3, r1
    39dc:	d32d      	bcc.n	3a3a <__divsi3+0x17a>
    39de:	0a03      	lsrs	r3, r0, #8
    39e0:	428b      	cmp	r3, r1
    39e2:	d312      	bcc.n	3a0a <__divsi3+0x14a>
    39e4:	22fc      	movs	r2, #252	; 0xfc
    39e6:	0189      	lsls	r1, r1, #6
    39e8:	ba12      	rev	r2, r2
    39ea:	0a03      	lsrs	r3, r0, #8
    39ec:	428b      	cmp	r3, r1
    39ee:	d30c      	bcc.n	3a0a <__divsi3+0x14a>
    39f0:	0189      	lsls	r1, r1, #6
    39f2:	1192      	asrs	r2, r2, #6
    39f4:	428b      	cmp	r3, r1
    39f6:	d308      	bcc.n	3a0a <__divsi3+0x14a>
    39f8:	0189      	lsls	r1, r1, #6
    39fa:	1192      	asrs	r2, r2, #6
    39fc:	428b      	cmp	r3, r1
    39fe:	d304      	bcc.n	3a0a <__divsi3+0x14a>
    3a00:	0189      	lsls	r1, r1, #6
    3a02:	d03a      	beq.n	3a7a <__divsi3+0x1ba>
    3a04:	1192      	asrs	r2, r2, #6
    3a06:	e000      	b.n	3a0a <__divsi3+0x14a>
    3a08:	0989      	lsrs	r1, r1, #6
    3a0a:	09c3      	lsrs	r3, r0, #7
    3a0c:	428b      	cmp	r3, r1
    3a0e:	d301      	bcc.n	3a14 <__divsi3+0x154>
    3a10:	01cb      	lsls	r3, r1, #7
    3a12:	1ac0      	subs	r0, r0, r3
    3a14:	4152      	adcs	r2, r2
    3a16:	0983      	lsrs	r3, r0, #6
    3a18:	428b      	cmp	r3, r1
    3a1a:	d301      	bcc.n	3a20 <__divsi3+0x160>
    3a1c:	018b      	lsls	r3, r1, #6
    3a1e:	1ac0      	subs	r0, r0, r3
    3a20:	4152      	adcs	r2, r2
    3a22:	0943      	lsrs	r3, r0, #5
    3a24:	428b      	cmp	r3, r1
    3a26:	d301      	bcc.n	3a2c <__divsi3+0x16c>
    3a28:	014b      	lsls	r3, r1, #5
    3a2a:	1ac0      	subs	r0, r0, r3
    3a2c:	4152      	adcs	r2, r2
    3a2e:	0903      	lsrs	r3, r0, #4
    3a30:	428b      	cmp	r3, r1
    3a32:	d301      	bcc.n	3a38 <__divsi3+0x178>
    3a34:	010b      	lsls	r3, r1, #4
    3a36:	1ac0      	subs	r0, r0, r3
    3a38:	4152      	adcs	r2, r2
    3a3a:	08c3      	lsrs	r3, r0, #3
    3a3c:	428b      	cmp	r3, r1
    3a3e:	d301      	bcc.n	3a44 <__divsi3+0x184>
    3a40:	00cb      	lsls	r3, r1, #3
    3a42:	1ac0      	subs	r0, r0, r3
    3a44:	4152      	adcs	r2, r2
    3a46:	0883      	lsrs	r3, r0, #2
    3a48:	428b      	cmp	r3, r1
    3a4a:	d301      	bcc.n	3a50 <__divsi3+0x190>
    3a4c:	008b      	lsls	r3, r1, #2
    3a4e:	1ac0      	subs	r0, r0, r3
    3a50:	4152      	adcs	r2, r2
    3a52:	d2d9      	bcs.n	3a08 <__divsi3+0x148>
    3a54:	0843      	lsrs	r3, r0, #1
    3a56:	428b      	cmp	r3, r1
    3a58:	d301      	bcc.n	3a5e <__divsi3+0x19e>
    3a5a:	004b      	lsls	r3, r1, #1
    3a5c:	1ac0      	subs	r0, r0, r3
    3a5e:	4152      	adcs	r2, r2
    3a60:	1a41      	subs	r1, r0, r1
    3a62:	d200      	bcs.n	3a66 <__divsi3+0x1a6>
    3a64:	4601      	mov	r1, r0
    3a66:	4663      	mov	r3, ip
    3a68:	4152      	adcs	r2, r2
    3a6a:	105b      	asrs	r3, r3, #1
    3a6c:	4610      	mov	r0, r2
    3a6e:	d301      	bcc.n	3a74 <__divsi3+0x1b4>
    3a70:	4240      	negs	r0, r0
    3a72:	2b00      	cmp	r3, #0
    3a74:	d500      	bpl.n	3a78 <__divsi3+0x1b8>
    3a76:	4249      	negs	r1, r1
    3a78:	4770      	bx	lr
    3a7a:	4663      	mov	r3, ip
    3a7c:	105b      	asrs	r3, r3, #1
    3a7e:	d300      	bcc.n	3a82 <__divsi3+0x1c2>
    3a80:	4240      	negs	r0, r0
    3a82:	b501      	push	{r0, lr}
    3a84:	2000      	movs	r0, #0
    3a86:	f000 f805 	bl	3a94 <__aeabi_idiv0>
    3a8a:	bd02      	pop	{r1, pc}

00003a8c <__aeabi_idivmod>:
    3a8c:	2900      	cmp	r1, #0
    3a8e:	d0f8      	beq.n	3a82 <__divsi3+0x1c2>
    3a90:	e716      	b.n	38c0 <__divsi3>
    3a92:	4770      	bx	lr

00003a94 <__aeabi_idiv0>:
    3a94:	4770      	bx	lr
    3a96:	46c0      	nop			; (mov r8, r8)

00003a98 <__aeabi_ldivmod>:
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d115      	bne.n	3ac8 <__aeabi_ldivmod+0x30>
    3a9c:	2a00      	cmp	r2, #0
    3a9e:	d113      	bne.n	3ac8 <__aeabi_ldivmod+0x30>
    3aa0:	2900      	cmp	r1, #0
    3aa2:	db06      	blt.n	3ab2 <__aeabi_ldivmod+0x1a>
    3aa4:	dc01      	bgt.n	3aaa <__aeabi_ldivmod+0x12>
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d006      	beq.n	3ab8 <__aeabi_ldivmod+0x20>
    3aaa:	2000      	movs	r0, #0
    3aac:	43c0      	mvns	r0, r0
    3aae:	0841      	lsrs	r1, r0, #1
    3ab0:	e002      	b.n	3ab8 <__aeabi_ldivmod+0x20>
    3ab2:	2180      	movs	r1, #128	; 0x80
    3ab4:	0609      	lsls	r1, r1, #24
    3ab6:	2000      	movs	r0, #0
    3ab8:	b407      	push	{r0, r1, r2}
    3aba:	4802      	ldr	r0, [pc, #8]	; (3ac4 <__aeabi_ldivmod+0x2c>)
    3abc:	a101      	add	r1, pc, #4	; (adr r1, 3ac4 <__aeabi_ldivmod+0x2c>)
    3abe:	1840      	adds	r0, r0, r1
    3ac0:	9002      	str	r0, [sp, #8]
    3ac2:	bd03      	pop	{r0, r1, pc}
    3ac4:	ffffffd1 	.word	0xffffffd1
    3ac8:	b403      	push	{r0, r1}
    3aca:	4668      	mov	r0, sp
    3acc:	b501      	push	{r0, lr}
    3ace:	9802      	ldr	r0, [sp, #8]
    3ad0:	f000 f852 	bl	3b78 <__gnu_ldivmod_helper>
    3ad4:	9b01      	ldr	r3, [sp, #4]
    3ad6:	469e      	mov	lr, r3
    3ad8:	b002      	add	sp, #8
    3ada:	bc0c      	pop	{r2, r3}
    3adc:	4770      	bx	lr
    3ade:	46c0      	nop			; (mov r8, r8)

00003ae0 <__aeabi_lmul>:
    3ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae2:	46ce      	mov	lr, r9
    3ae4:	4647      	mov	r7, r8
    3ae6:	0415      	lsls	r5, r2, #16
    3ae8:	0c2d      	lsrs	r5, r5, #16
    3aea:	002e      	movs	r6, r5
    3aec:	b580      	push	{r7, lr}
    3aee:	0407      	lsls	r7, r0, #16
    3af0:	0c14      	lsrs	r4, r2, #16
    3af2:	0c3f      	lsrs	r7, r7, #16
    3af4:	4699      	mov	r9, r3
    3af6:	0c03      	lsrs	r3, r0, #16
    3af8:	437e      	muls	r6, r7
    3afa:	435d      	muls	r5, r3
    3afc:	4367      	muls	r7, r4
    3afe:	4363      	muls	r3, r4
    3b00:	197f      	adds	r7, r7, r5
    3b02:	0c34      	lsrs	r4, r6, #16
    3b04:	19e4      	adds	r4, r4, r7
    3b06:	469c      	mov	ip, r3
    3b08:	42a5      	cmp	r5, r4
    3b0a:	d903      	bls.n	3b14 <__aeabi_lmul+0x34>
    3b0c:	2380      	movs	r3, #128	; 0x80
    3b0e:	025b      	lsls	r3, r3, #9
    3b10:	4698      	mov	r8, r3
    3b12:	44c4      	add	ip, r8
    3b14:	464b      	mov	r3, r9
    3b16:	4351      	muls	r1, r2
    3b18:	4343      	muls	r3, r0
    3b1a:	0436      	lsls	r6, r6, #16
    3b1c:	0c36      	lsrs	r6, r6, #16
    3b1e:	0c25      	lsrs	r5, r4, #16
    3b20:	0424      	lsls	r4, r4, #16
    3b22:	4465      	add	r5, ip
    3b24:	19a4      	adds	r4, r4, r6
    3b26:	1859      	adds	r1, r3, r1
    3b28:	1949      	adds	r1, r1, r5
    3b2a:	0020      	movs	r0, r4
    3b2c:	bc0c      	pop	{r2, r3}
    3b2e:	4690      	mov	r8, r2
    3b30:	4699      	mov	r9, r3
    3b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b34 <__ffssi2>:
    3b34:	b510      	push	{r4, lr}
    3b36:	2300      	movs	r3, #0
    3b38:	2800      	cmp	r0, #0
    3b3a:	d002      	beq.n	3b42 <__ffssi2+0xe>
    3b3c:	f001 fd34 	bl	55a8 <__ctzsi2>
    3b40:	1c43      	adds	r3, r0, #1
    3b42:	0018      	movs	r0, r3
    3b44:	bd10      	pop	{r4, pc}
    3b46:	46c0      	nop			; (mov r8, r8)

00003b48 <__aeabi_f2uiz>:
    3b48:	219e      	movs	r1, #158	; 0x9e
    3b4a:	b510      	push	{r4, lr}
    3b4c:	05c9      	lsls	r1, r1, #23
    3b4e:	1c04      	adds	r4, r0, #0
    3b50:	f001 fd02 	bl	5558 <__aeabi_fcmpge>
    3b54:	2800      	cmp	r0, #0
    3b56:	d103      	bne.n	3b60 <__aeabi_f2uiz+0x18>
    3b58:	1c20      	adds	r0, r4, #0
    3b5a:	f000 fae5 	bl	4128 <__aeabi_f2iz>
    3b5e:	bd10      	pop	{r4, pc}
    3b60:	219e      	movs	r1, #158	; 0x9e
    3b62:	1c20      	adds	r0, r4, #0
    3b64:	05c9      	lsls	r1, r1, #23
    3b66:	f000 f943 	bl	3df0 <__aeabi_fsub>
    3b6a:	f000 fadd 	bl	4128 <__aeabi_f2iz>
    3b6e:	2380      	movs	r3, #128	; 0x80
    3b70:	061b      	lsls	r3, r3, #24
    3b72:	469c      	mov	ip, r3
    3b74:	4460      	add	r0, ip
    3b76:	e7f2      	b.n	3b5e <__aeabi_f2uiz+0x16>

00003b78 <__gnu_ldivmod_helper>:
    3b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7a:	b083      	sub	sp, #12
    3b7c:	0016      	movs	r6, r2
    3b7e:	001f      	movs	r7, r3
    3b80:	9000      	str	r0, [sp, #0]
    3b82:	9101      	str	r1, [sp, #4]
    3b84:	f001 fd30 	bl	55e8 <__divdi3>
    3b88:	0004      	movs	r4, r0
    3b8a:	000d      	movs	r5, r1
    3b8c:	0002      	movs	r2, r0
    3b8e:	000b      	movs	r3, r1
    3b90:	0030      	movs	r0, r6
    3b92:	0039      	movs	r1, r7
    3b94:	f7ff ffa4 	bl	3ae0 <__aeabi_lmul>
    3b98:	9a00      	ldr	r2, [sp, #0]
    3b9a:	9b01      	ldr	r3, [sp, #4]
    3b9c:	1a12      	subs	r2, r2, r0
    3b9e:	418b      	sbcs	r3, r1
    3ba0:	9908      	ldr	r1, [sp, #32]
    3ba2:	0020      	movs	r0, r4
    3ba4:	600a      	str	r2, [r1, #0]
    3ba6:	604b      	str	r3, [r1, #4]
    3ba8:	0029      	movs	r1, r5
    3baa:	b003      	add	sp, #12
    3bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bae:	46c0      	nop			; (mov r8, r8)

00003bb0 <__aeabi_fmul>:
    3bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb2:	4657      	mov	r7, sl
    3bb4:	464e      	mov	r6, r9
    3bb6:	4645      	mov	r5, r8
    3bb8:	46de      	mov	lr, fp
    3bba:	b5e0      	push	{r5, r6, r7, lr}
    3bbc:	0247      	lsls	r7, r0, #9
    3bbe:	0046      	lsls	r6, r0, #1
    3bc0:	4688      	mov	r8, r1
    3bc2:	0a7f      	lsrs	r7, r7, #9
    3bc4:	0e36      	lsrs	r6, r6, #24
    3bc6:	0fc4      	lsrs	r4, r0, #31
    3bc8:	2e00      	cmp	r6, #0
    3bca:	d047      	beq.n	3c5c <__aeabi_fmul+0xac>
    3bcc:	2eff      	cmp	r6, #255	; 0xff
    3bce:	d024      	beq.n	3c1a <__aeabi_fmul+0x6a>
    3bd0:	00fb      	lsls	r3, r7, #3
    3bd2:	2780      	movs	r7, #128	; 0x80
    3bd4:	04ff      	lsls	r7, r7, #19
    3bd6:	431f      	orrs	r7, r3
    3bd8:	2300      	movs	r3, #0
    3bda:	4699      	mov	r9, r3
    3bdc:	469a      	mov	sl, r3
    3bde:	3e7f      	subs	r6, #127	; 0x7f
    3be0:	4643      	mov	r3, r8
    3be2:	025d      	lsls	r5, r3, #9
    3be4:	0058      	lsls	r0, r3, #1
    3be6:	0fdb      	lsrs	r3, r3, #31
    3be8:	0a6d      	lsrs	r5, r5, #9
    3bea:	0e00      	lsrs	r0, r0, #24
    3bec:	4698      	mov	r8, r3
    3bee:	d043      	beq.n	3c78 <__aeabi_fmul+0xc8>
    3bf0:	28ff      	cmp	r0, #255	; 0xff
    3bf2:	d03b      	beq.n	3c6c <__aeabi_fmul+0xbc>
    3bf4:	00eb      	lsls	r3, r5, #3
    3bf6:	2580      	movs	r5, #128	; 0x80
    3bf8:	2200      	movs	r2, #0
    3bfa:	04ed      	lsls	r5, r5, #19
    3bfc:	431d      	orrs	r5, r3
    3bfe:	387f      	subs	r0, #127	; 0x7f
    3c00:	1836      	adds	r6, r6, r0
    3c02:	1c73      	adds	r3, r6, #1
    3c04:	4641      	mov	r1, r8
    3c06:	469b      	mov	fp, r3
    3c08:	464b      	mov	r3, r9
    3c0a:	4061      	eors	r1, r4
    3c0c:	4313      	orrs	r3, r2
    3c0e:	2b0f      	cmp	r3, #15
    3c10:	d864      	bhi.n	3cdc <__aeabi_fmul+0x12c>
    3c12:	4875      	ldr	r0, [pc, #468]	; (3de8 <__aeabi_fmul+0x238>)
    3c14:	009b      	lsls	r3, r3, #2
    3c16:	58c3      	ldr	r3, [r0, r3]
    3c18:	469f      	mov	pc, r3
    3c1a:	2f00      	cmp	r7, #0
    3c1c:	d142      	bne.n	3ca4 <__aeabi_fmul+0xf4>
    3c1e:	2308      	movs	r3, #8
    3c20:	4699      	mov	r9, r3
    3c22:	3b06      	subs	r3, #6
    3c24:	26ff      	movs	r6, #255	; 0xff
    3c26:	469a      	mov	sl, r3
    3c28:	e7da      	b.n	3be0 <__aeabi_fmul+0x30>
    3c2a:	4641      	mov	r1, r8
    3c2c:	2a02      	cmp	r2, #2
    3c2e:	d028      	beq.n	3c82 <__aeabi_fmul+0xd2>
    3c30:	2a03      	cmp	r2, #3
    3c32:	d100      	bne.n	3c36 <__aeabi_fmul+0x86>
    3c34:	e0ce      	b.n	3dd4 <__aeabi_fmul+0x224>
    3c36:	2a01      	cmp	r2, #1
    3c38:	d000      	beq.n	3c3c <__aeabi_fmul+0x8c>
    3c3a:	e0ac      	b.n	3d96 <__aeabi_fmul+0x1e6>
    3c3c:	4011      	ands	r1, r2
    3c3e:	2000      	movs	r0, #0
    3c40:	2200      	movs	r2, #0
    3c42:	b2cc      	uxtb	r4, r1
    3c44:	0240      	lsls	r0, r0, #9
    3c46:	05d2      	lsls	r2, r2, #23
    3c48:	0a40      	lsrs	r0, r0, #9
    3c4a:	07e4      	lsls	r4, r4, #31
    3c4c:	4310      	orrs	r0, r2
    3c4e:	4320      	orrs	r0, r4
    3c50:	bc3c      	pop	{r2, r3, r4, r5}
    3c52:	4690      	mov	r8, r2
    3c54:	4699      	mov	r9, r3
    3c56:	46a2      	mov	sl, r4
    3c58:	46ab      	mov	fp, r5
    3c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c5c:	2f00      	cmp	r7, #0
    3c5e:	d115      	bne.n	3c8c <__aeabi_fmul+0xdc>
    3c60:	2304      	movs	r3, #4
    3c62:	4699      	mov	r9, r3
    3c64:	3b03      	subs	r3, #3
    3c66:	2600      	movs	r6, #0
    3c68:	469a      	mov	sl, r3
    3c6a:	e7b9      	b.n	3be0 <__aeabi_fmul+0x30>
    3c6c:	20ff      	movs	r0, #255	; 0xff
    3c6e:	2202      	movs	r2, #2
    3c70:	2d00      	cmp	r5, #0
    3c72:	d0c5      	beq.n	3c00 <__aeabi_fmul+0x50>
    3c74:	2203      	movs	r2, #3
    3c76:	e7c3      	b.n	3c00 <__aeabi_fmul+0x50>
    3c78:	2d00      	cmp	r5, #0
    3c7a:	d119      	bne.n	3cb0 <__aeabi_fmul+0x100>
    3c7c:	2000      	movs	r0, #0
    3c7e:	2201      	movs	r2, #1
    3c80:	e7be      	b.n	3c00 <__aeabi_fmul+0x50>
    3c82:	2401      	movs	r4, #1
    3c84:	22ff      	movs	r2, #255	; 0xff
    3c86:	400c      	ands	r4, r1
    3c88:	2000      	movs	r0, #0
    3c8a:	e7db      	b.n	3c44 <__aeabi_fmul+0x94>
    3c8c:	0038      	movs	r0, r7
    3c8e:	f001 fc6d 	bl	556c <__clzsi2>
    3c92:	2676      	movs	r6, #118	; 0x76
    3c94:	1f43      	subs	r3, r0, #5
    3c96:	409f      	lsls	r7, r3
    3c98:	2300      	movs	r3, #0
    3c9a:	4276      	negs	r6, r6
    3c9c:	1a36      	subs	r6, r6, r0
    3c9e:	4699      	mov	r9, r3
    3ca0:	469a      	mov	sl, r3
    3ca2:	e79d      	b.n	3be0 <__aeabi_fmul+0x30>
    3ca4:	230c      	movs	r3, #12
    3ca6:	4699      	mov	r9, r3
    3ca8:	3b09      	subs	r3, #9
    3caa:	26ff      	movs	r6, #255	; 0xff
    3cac:	469a      	mov	sl, r3
    3cae:	e797      	b.n	3be0 <__aeabi_fmul+0x30>
    3cb0:	0028      	movs	r0, r5
    3cb2:	f001 fc5b 	bl	556c <__clzsi2>
    3cb6:	1f43      	subs	r3, r0, #5
    3cb8:	409d      	lsls	r5, r3
    3cba:	2376      	movs	r3, #118	; 0x76
    3cbc:	425b      	negs	r3, r3
    3cbe:	1a18      	subs	r0, r3, r0
    3cc0:	2200      	movs	r2, #0
    3cc2:	e79d      	b.n	3c00 <__aeabi_fmul+0x50>
    3cc4:	2080      	movs	r0, #128	; 0x80
    3cc6:	2400      	movs	r4, #0
    3cc8:	03c0      	lsls	r0, r0, #15
    3cca:	22ff      	movs	r2, #255	; 0xff
    3ccc:	e7ba      	b.n	3c44 <__aeabi_fmul+0x94>
    3cce:	003d      	movs	r5, r7
    3cd0:	4652      	mov	r2, sl
    3cd2:	e7ab      	b.n	3c2c <__aeabi_fmul+0x7c>
    3cd4:	003d      	movs	r5, r7
    3cd6:	0021      	movs	r1, r4
    3cd8:	4652      	mov	r2, sl
    3cda:	e7a7      	b.n	3c2c <__aeabi_fmul+0x7c>
    3cdc:	0c3b      	lsrs	r3, r7, #16
    3cde:	469c      	mov	ip, r3
    3ce0:	042a      	lsls	r2, r5, #16
    3ce2:	0c12      	lsrs	r2, r2, #16
    3ce4:	0c2b      	lsrs	r3, r5, #16
    3ce6:	0014      	movs	r4, r2
    3ce8:	4660      	mov	r0, ip
    3cea:	4665      	mov	r5, ip
    3cec:	043f      	lsls	r7, r7, #16
    3cee:	0c3f      	lsrs	r7, r7, #16
    3cf0:	437c      	muls	r4, r7
    3cf2:	4342      	muls	r2, r0
    3cf4:	435d      	muls	r5, r3
    3cf6:	437b      	muls	r3, r7
    3cf8:	0c27      	lsrs	r7, r4, #16
    3cfa:	189b      	adds	r3, r3, r2
    3cfc:	18ff      	adds	r7, r7, r3
    3cfe:	42ba      	cmp	r2, r7
    3d00:	d903      	bls.n	3d0a <__aeabi_fmul+0x15a>
    3d02:	2380      	movs	r3, #128	; 0x80
    3d04:	025b      	lsls	r3, r3, #9
    3d06:	469c      	mov	ip, r3
    3d08:	4465      	add	r5, ip
    3d0a:	0424      	lsls	r4, r4, #16
    3d0c:	043a      	lsls	r2, r7, #16
    3d0e:	0c24      	lsrs	r4, r4, #16
    3d10:	1912      	adds	r2, r2, r4
    3d12:	0193      	lsls	r3, r2, #6
    3d14:	1e5c      	subs	r4, r3, #1
    3d16:	41a3      	sbcs	r3, r4
    3d18:	0c3f      	lsrs	r7, r7, #16
    3d1a:	0e92      	lsrs	r2, r2, #26
    3d1c:	197d      	adds	r5, r7, r5
    3d1e:	431a      	orrs	r2, r3
    3d20:	01ad      	lsls	r5, r5, #6
    3d22:	4315      	orrs	r5, r2
    3d24:	012b      	lsls	r3, r5, #4
    3d26:	d504      	bpl.n	3d32 <__aeabi_fmul+0x182>
    3d28:	2301      	movs	r3, #1
    3d2a:	465e      	mov	r6, fp
    3d2c:	086a      	lsrs	r2, r5, #1
    3d2e:	401d      	ands	r5, r3
    3d30:	4315      	orrs	r5, r2
    3d32:	0032      	movs	r2, r6
    3d34:	327f      	adds	r2, #127	; 0x7f
    3d36:	2a00      	cmp	r2, #0
    3d38:	dd25      	ble.n	3d86 <__aeabi_fmul+0x1d6>
    3d3a:	076b      	lsls	r3, r5, #29
    3d3c:	d004      	beq.n	3d48 <__aeabi_fmul+0x198>
    3d3e:	230f      	movs	r3, #15
    3d40:	402b      	ands	r3, r5
    3d42:	2b04      	cmp	r3, #4
    3d44:	d000      	beq.n	3d48 <__aeabi_fmul+0x198>
    3d46:	3504      	adds	r5, #4
    3d48:	012b      	lsls	r3, r5, #4
    3d4a:	d503      	bpl.n	3d54 <__aeabi_fmul+0x1a4>
    3d4c:	0032      	movs	r2, r6
    3d4e:	4b27      	ldr	r3, [pc, #156]	; (3dec <__aeabi_fmul+0x23c>)
    3d50:	3280      	adds	r2, #128	; 0x80
    3d52:	401d      	ands	r5, r3
    3d54:	2afe      	cmp	r2, #254	; 0xfe
    3d56:	dc94      	bgt.n	3c82 <__aeabi_fmul+0xd2>
    3d58:	2401      	movs	r4, #1
    3d5a:	01a8      	lsls	r0, r5, #6
    3d5c:	0a40      	lsrs	r0, r0, #9
    3d5e:	b2d2      	uxtb	r2, r2
    3d60:	400c      	ands	r4, r1
    3d62:	e76f      	b.n	3c44 <__aeabi_fmul+0x94>
    3d64:	2080      	movs	r0, #128	; 0x80
    3d66:	03c0      	lsls	r0, r0, #15
    3d68:	4207      	tst	r7, r0
    3d6a:	d007      	beq.n	3d7c <__aeabi_fmul+0x1cc>
    3d6c:	4205      	tst	r5, r0
    3d6e:	d105      	bne.n	3d7c <__aeabi_fmul+0x1cc>
    3d70:	4328      	orrs	r0, r5
    3d72:	0240      	lsls	r0, r0, #9
    3d74:	0a40      	lsrs	r0, r0, #9
    3d76:	4644      	mov	r4, r8
    3d78:	22ff      	movs	r2, #255	; 0xff
    3d7a:	e763      	b.n	3c44 <__aeabi_fmul+0x94>
    3d7c:	4338      	orrs	r0, r7
    3d7e:	0240      	lsls	r0, r0, #9
    3d80:	0a40      	lsrs	r0, r0, #9
    3d82:	22ff      	movs	r2, #255	; 0xff
    3d84:	e75e      	b.n	3c44 <__aeabi_fmul+0x94>
    3d86:	2401      	movs	r4, #1
    3d88:	1aa3      	subs	r3, r4, r2
    3d8a:	2b1b      	cmp	r3, #27
    3d8c:	dd05      	ble.n	3d9a <__aeabi_fmul+0x1ea>
    3d8e:	400c      	ands	r4, r1
    3d90:	2200      	movs	r2, #0
    3d92:	2000      	movs	r0, #0
    3d94:	e756      	b.n	3c44 <__aeabi_fmul+0x94>
    3d96:	465e      	mov	r6, fp
    3d98:	e7cb      	b.n	3d32 <__aeabi_fmul+0x182>
    3d9a:	002a      	movs	r2, r5
    3d9c:	2020      	movs	r0, #32
    3d9e:	40da      	lsrs	r2, r3
    3da0:	1ac3      	subs	r3, r0, r3
    3da2:	409d      	lsls	r5, r3
    3da4:	002b      	movs	r3, r5
    3da6:	1e5d      	subs	r5, r3, #1
    3da8:	41ab      	sbcs	r3, r5
    3daa:	4313      	orrs	r3, r2
    3dac:	075a      	lsls	r2, r3, #29
    3dae:	d004      	beq.n	3dba <__aeabi_fmul+0x20a>
    3db0:	220f      	movs	r2, #15
    3db2:	401a      	ands	r2, r3
    3db4:	2a04      	cmp	r2, #4
    3db6:	d000      	beq.n	3dba <__aeabi_fmul+0x20a>
    3db8:	3304      	adds	r3, #4
    3dba:	015a      	lsls	r2, r3, #5
    3dbc:	d504      	bpl.n	3dc8 <__aeabi_fmul+0x218>
    3dbe:	2401      	movs	r4, #1
    3dc0:	2201      	movs	r2, #1
    3dc2:	400c      	ands	r4, r1
    3dc4:	2000      	movs	r0, #0
    3dc6:	e73d      	b.n	3c44 <__aeabi_fmul+0x94>
    3dc8:	2401      	movs	r4, #1
    3dca:	019b      	lsls	r3, r3, #6
    3dcc:	0a58      	lsrs	r0, r3, #9
    3dce:	400c      	ands	r4, r1
    3dd0:	2200      	movs	r2, #0
    3dd2:	e737      	b.n	3c44 <__aeabi_fmul+0x94>
    3dd4:	2080      	movs	r0, #128	; 0x80
    3dd6:	2401      	movs	r4, #1
    3dd8:	03c0      	lsls	r0, r0, #15
    3dda:	4328      	orrs	r0, r5
    3ddc:	0240      	lsls	r0, r0, #9
    3dde:	0a40      	lsrs	r0, r0, #9
    3de0:	400c      	ands	r4, r1
    3de2:	22ff      	movs	r2, #255	; 0xff
    3de4:	e72e      	b.n	3c44 <__aeabi_fmul+0x94>
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	00005b94 	.word	0x00005b94
    3dec:	f7ffffff 	.word	0xf7ffffff

00003df0 <__aeabi_fsub>:
    3df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3df2:	464f      	mov	r7, r9
    3df4:	46d6      	mov	lr, sl
    3df6:	4646      	mov	r6, r8
    3df8:	0044      	lsls	r4, r0, #1
    3dfa:	b5c0      	push	{r6, r7, lr}
    3dfc:	0fc2      	lsrs	r2, r0, #31
    3dfe:	0247      	lsls	r7, r0, #9
    3e00:	0248      	lsls	r0, r1, #9
    3e02:	0a40      	lsrs	r0, r0, #9
    3e04:	4684      	mov	ip, r0
    3e06:	4666      	mov	r6, ip
    3e08:	0a7b      	lsrs	r3, r7, #9
    3e0a:	0048      	lsls	r0, r1, #1
    3e0c:	0fc9      	lsrs	r1, r1, #31
    3e0e:	469a      	mov	sl, r3
    3e10:	0e24      	lsrs	r4, r4, #24
    3e12:	0015      	movs	r5, r2
    3e14:	00db      	lsls	r3, r3, #3
    3e16:	0e00      	lsrs	r0, r0, #24
    3e18:	4689      	mov	r9, r1
    3e1a:	00f6      	lsls	r6, r6, #3
    3e1c:	28ff      	cmp	r0, #255	; 0xff
    3e1e:	d100      	bne.n	3e22 <__aeabi_fsub+0x32>
    3e20:	e08f      	b.n	3f42 <__aeabi_fsub+0x152>
    3e22:	2101      	movs	r1, #1
    3e24:	464f      	mov	r7, r9
    3e26:	404f      	eors	r7, r1
    3e28:	0039      	movs	r1, r7
    3e2a:	4291      	cmp	r1, r2
    3e2c:	d066      	beq.n	3efc <__aeabi_fsub+0x10c>
    3e2e:	1a22      	subs	r2, r4, r0
    3e30:	2a00      	cmp	r2, #0
    3e32:	dc00      	bgt.n	3e36 <__aeabi_fsub+0x46>
    3e34:	e09d      	b.n	3f72 <__aeabi_fsub+0x182>
    3e36:	2800      	cmp	r0, #0
    3e38:	d13d      	bne.n	3eb6 <__aeabi_fsub+0xc6>
    3e3a:	2e00      	cmp	r6, #0
    3e3c:	d100      	bne.n	3e40 <__aeabi_fsub+0x50>
    3e3e:	e08b      	b.n	3f58 <__aeabi_fsub+0x168>
    3e40:	1e51      	subs	r1, r2, #1
    3e42:	2900      	cmp	r1, #0
    3e44:	d000      	beq.n	3e48 <__aeabi_fsub+0x58>
    3e46:	e0b5      	b.n	3fb4 <__aeabi_fsub+0x1c4>
    3e48:	2401      	movs	r4, #1
    3e4a:	1b9b      	subs	r3, r3, r6
    3e4c:	015a      	lsls	r2, r3, #5
    3e4e:	d544      	bpl.n	3eda <__aeabi_fsub+0xea>
    3e50:	019b      	lsls	r3, r3, #6
    3e52:	099f      	lsrs	r7, r3, #6
    3e54:	0038      	movs	r0, r7
    3e56:	f001 fb89 	bl	556c <__clzsi2>
    3e5a:	3805      	subs	r0, #5
    3e5c:	4087      	lsls	r7, r0
    3e5e:	4284      	cmp	r4, r0
    3e60:	dd00      	ble.n	3e64 <__aeabi_fsub+0x74>
    3e62:	e096      	b.n	3f92 <__aeabi_fsub+0x1a2>
    3e64:	1b04      	subs	r4, r0, r4
    3e66:	003a      	movs	r2, r7
    3e68:	2020      	movs	r0, #32
    3e6a:	3401      	adds	r4, #1
    3e6c:	40e2      	lsrs	r2, r4
    3e6e:	1b04      	subs	r4, r0, r4
    3e70:	40a7      	lsls	r7, r4
    3e72:	003b      	movs	r3, r7
    3e74:	1e5f      	subs	r7, r3, #1
    3e76:	41bb      	sbcs	r3, r7
    3e78:	2400      	movs	r4, #0
    3e7a:	4313      	orrs	r3, r2
    3e7c:	075a      	lsls	r2, r3, #29
    3e7e:	d004      	beq.n	3e8a <__aeabi_fsub+0x9a>
    3e80:	220f      	movs	r2, #15
    3e82:	401a      	ands	r2, r3
    3e84:	2a04      	cmp	r2, #4
    3e86:	d000      	beq.n	3e8a <__aeabi_fsub+0x9a>
    3e88:	3304      	adds	r3, #4
    3e8a:	015a      	lsls	r2, r3, #5
    3e8c:	d527      	bpl.n	3ede <__aeabi_fsub+0xee>
    3e8e:	3401      	adds	r4, #1
    3e90:	2cff      	cmp	r4, #255	; 0xff
    3e92:	d100      	bne.n	3e96 <__aeabi_fsub+0xa6>
    3e94:	e079      	b.n	3f8a <__aeabi_fsub+0x19a>
    3e96:	2201      	movs	r2, #1
    3e98:	019b      	lsls	r3, r3, #6
    3e9a:	0a5b      	lsrs	r3, r3, #9
    3e9c:	b2e4      	uxtb	r4, r4
    3e9e:	402a      	ands	r2, r5
    3ea0:	025b      	lsls	r3, r3, #9
    3ea2:	05e4      	lsls	r4, r4, #23
    3ea4:	0a58      	lsrs	r0, r3, #9
    3ea6:	07d2      	lsls	r2, r2, #31
    3ea8:	4320      	orrs	r0, r4
    3eaa:	4310      	orrs	r0, r2
    3eac:	bc1c      	pop	{r2, r3, r4}
    3eae:	4690      	mov	r8, r2
    3eb0:	4699      	mov	r9, r3
    3eb2:	46a2      	mov	sl, r4
    3eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3eb6:	2cff      	cmp	r4, #255	; 0xff
    3eb8:	d0e0      	beq.n	3e7c <__aeabi_fsub+0x8c>
    3eba:	2180      	movs	r1, #128	; 0x80
    3ebc:	04c9      	lsls	r1, r1, #19
    3ebe:	430e      	orrs	r6, r1
    3ec0:	2a1b      	cmp	r2, #27
    3ec2:	dc7b      	bgt.n	3fbc <__aeabi_fsub+0x1cc>
    3ec4:	0031      	movs	r1, r6
    3ec6:	2020      	movs	r0, #32
    3ec8:	40d1      	lsrs	r1, r2
    3eca:	1a82      	subs	r2, r0, r2
    3ecc:	4096      	lsls	r6, r2
    3ece:	1e72      	subs	r2, r6, #1
    3ed0:	4196      	sbcs	r6, r2
    3ed2:	430e      	orrs	r6, r1
    3ed4:	1b9b      	subs	r3, r3, r6
    3ed6:	015a      	lsls	r2, r3, #5
    3ed8:	d4ba      	bmi.n	3e50 <__aeabi_fsub+0x60>
    3eda:	075a      	lsls	r2, r3, #29
    3edc:	d1d0      	bne.n	3e80 <__aeabi_fsub+0x90>
    3ede:	2201      	movs	r2, #1
    3ee0:	08df      	lsrs	r7, r3, #3
    3ee2:	402a      	ands	r2, r5
    3ee4:	2cff      	cmp	r4, #255	; 0xff
    3ee6:	d133      	bne.n	3f50 <__aeabi_fsub+0x160>
    3ee8:	2f00      	cmp	r7, #0
    3eea:	d100      	bne.n	3eee <__aeabi_fsub+0xfe>
    3eec:	e0a8      	b.n	4040 <__aeabi_fsub+0x250>
    3eee:	2380      	movs	r3, #128	; 0x80
    3ef0:	03db      	lsls	r3, r3, #15
    3ef2:	433b      	orrs	r3, r7
    3ef4:	025b      	lsls	r3, r3, #9
    3ef6:	0a5b      	lsrs	r3, r3, #9
    3ef8:	24ff      	movs	r4, #255	; 0xff
    3efa:	e7d1      	b.n	3ea0 <__aeabi_fsub+0xb0>
    3efc:	1a21      	subs	r1, r4, r0
    3efe:	2900      	cmp	r1, #0
    3f00:	dd4c      	ble.n	3f9c <__aeabi_fsub+0x1ac>
    3f02:	2800      	cmp	r0, #0
    3f04:	d02a      	beq.n	3f5c <__aeabi_fsub+0x16c>
    3f06:	2cff      	cmp	r4, #255	; 0xff
    3f08:	d0b8      	beq.n	3e7c <__aeabi_fsub+0x8c>
    3f0a:	2080      	movs	r0, #128	; 0x80
    3f0c:	04c0      	lsls	r0, r0, #19
    3f0e:	4306      	orrs	r6, r0
    3f10:	291b      	cmp	r1, #27
    3f12:	dd00      	ble.n	3f16 <__aeabi_fsub+0x126>
    3f14:	e0af      	b.n	4076 <__aeabi_fsub+0x286>
    3f16:	0030      	movs	r0, r6
    3f18:	2720      	movs	r7, #32
    3f1a:	40c8      	lsrs	r0, r1
    3f1c:	1a79      	subs	r1, r7, r1
    3f1e:	408e      	lsls	r6, r1
    3f20:	1e71      	subs	r1, r6, #1
    3f22:	418e      	sbcs	r6, r1
    3f24:	4306      	orrs	r6, r0
    3f26:	199b      	adds	r3, r3, r6
    3f28:	0159      	lsls	r1, r3, #5
    3f2a:	d5d6      	bpl.n	3eda <__aeabi_fsub+0xea>
    3f2c:	3401      	adds	r4, #1
    3f2e:	2cff      	cmp	r4, #255	; 0xff
    3f30:	d100      	bne.n	3f34 <__aeabi_fsub+0x144>
    3f32:	e085      	b.n	4040 <__aeabi_fsub+0x250>
    3f34:	2201      	movs	r2, #1
    3f36:	497a      	ldr	r1, [pc, #488]	; (4120 <__aeabi_fsub+0x330>)
    3f38:	401a      	ands	r2, r3
    3f3a:	085b      	lsrs	r3, r3, #1
    3f3c:	400b      	ands	r3, r1
    3f3e:	4313      	orrs	r3, r2
    3f40:	e79c      	b.n	3e7c <__aeabi_fsub+0x8c>
    3f42:	2e00      	cmp	r6, #0
    3f44:	d000      	beq.n	3f48 <__aeabi_fsub+0x158>
    3f46:	e770      	b.n	3e2a <__aeabi_fsub+0x3a>
    3f48:	e76b      	b.n	3e22 <__aeabi_fsub+0x32>
    3f4a:	1e3b      	subs	r3, r7, #0
    3f4c:	d1c5      	bne.n	3eda <__aeabi_fsub+0xea>
    3f4e:	2200      	movs	r2, #0
    3f50:	027b      	lsls	r3, r7, #9
    3f52:	0a5b      	lsrs	r3, r3, #9
    3f54:	b2e4      	uxtb	r4, r4
    3f56:	e7a3      	b.n	3ea0 <__aeabi_fsub+0xb0>
    3f58:	0014      	movs	r4, r2
    3f5a:	e78f      	b.n	3e7c <__aeabi_fsub+0x8c>
    3f5c:	2e00      	cmp	r6, #0
    3f5e:	d04d      	beq.n	3ffc <__aeabi_fsub+0x20c>
    3f60:	1e48      	subs	r0, r1, #1
    3f62:	2800      	cmp	r0, #0
    3f64:	d157      	bne.n	4016 <__aeabi_fsub+0x226>
    3f66:	199b      	adds	r3, r3, r6
    3f68:	2401      	movs	r4, #1
    3f6a:	015a      	lsls	r2, r3, #5
    3f6c:	d5b5      	bpl.n	3eda <__aeabi_fsub+0xea>
    3f6e:	2402      	movs	r4, #2
    3f70:	e7e0      	b.n	3f34 <__aeabi_fsub+0x144>
    3f72:	2a00      	cmp	r2, #0
    3f74:	d125      	bne.n	3fc2 <__aeabi_fsub+0x1d2>
    3f76:	1c62      	adds	r2, r4, #1
    3f78:	b2d2      	uxtb	r2, r2
    3f7a:	2a01      	cmp	r2, #1
    3f7c:	dd72      	ble.n	4064 <__aeabi_fsub+0x274>
    3f7e:	1b9f      	subs	r7, r3, r6
    3f80:	017a      	lsls	r2, r7, #5
    3f82:	d535      	bpl.n	3ff0 <__aeabi_fsub+0x200>
    3f84:	1af7      	subs	r7, r6, r3
    3f86:	000d      	movs	r5, r1
    3f88:	e764      	b.n	3e54 <__aeabi_fsub+0x64>
    3f8a:	2201      	movs	r2, #1
    3f8c:	2300      	movs	r3, #0
    3f8e:	402a      	ands	r2, r5
    3f90:	e786      	b.n	3ea0 <__aeabi_fsub+0xb0>
    3f92:	003b      	movs	r3, r7
    3f94:	4a63      	ldr	r2, [pc, #396]	; (4124 <__aeabi_fsub+0x334>)
    3f96:	1a24      	subs	r4, r4, r0
    3f98:	4013      	ands	r3, r2
    3f9a:	e76f      	b.n	3e7c <__aeabi_fsub+0x8c>
    3f9c:	2900      	cmp	r1, #0
    3f9e:	d16c      	bne.n	407a <__aeabi_fsub+0x28a>
    3fa0:	1c61      	adds	r1, r4, #1
    3fa2:	b2c8      	uxtb	r0, r1
    3fa4:	2801      	cmp	r0, #1
    3fa6:	dd4e      	ble.n	4046 <__aeabi_fsub+0x256>
    3fa8:	29ff      	cmp	r1, #255	; 0xff
    3faa:	d049      	beq.n	4040 <__aeabi_fsub+0x250>
    3fac:	199b      	adds	r3, r3, r6
    3fae:	085b      	lsrs	r3, r3, #1
    3fb0:	000c      	movs	r4, r1
    3fb2:	e763      	b.n	3e7c <__aeabi_fsub+0x8c>
    3fb4:	2aff      	cmp	r2, #255	; 0xff
    3fb6:	d041      	beq.n	403c <__aeabi_fsub+0x24c>
    3fb8:	000a      	movs	r2, r1
    3fba:	e781      	b.n	3ec0 <__aeabi_fsub+0xd0>
    3fbc:	2601      	movs	r6, #1
    3fbe:	1b9b      	subs	r3, r3, r6
    3fc0:	e789      	b.n	3ed6 <__aeabi_fsub+0xe6>
    3fc2:	2c00      	cmp	r4, #0
    3fc4:	d01c      	beq.n	4000 <__aeabi_fsub+0x210>
    3fc6:	28ff      	cmp	r0, #255	; 0xff
    3fc8:	d021      	beq.n	400e <__aeabi_fsub+0x21e>
    3fca:	2480      	movs	r4, #128	; 0x80
    3fcc:	04e4      	lsls	r4, r4, #19
    3fce:	4252      	negs	r2, r2
    3fd0:	4323      	orrs	r3, r4
    3fd2:	2a1b      	cmp	r2, #27
    3fd4:	dd00      	ble.n	3fd8 <__aeabi_fsub+0x1e8>
    3fd6:	e096      	b.n	4106 <__aeabi_fsub+0x316>
    3fd8:	001c      	movs	r4, r3
    3fda:	2520      	movs	r5, #32
    3fdc:	40d4      	lsrs	r4, r2
    3fde:	1aaa      	subs	r2, r5, r2
    3fe0:	4093      	lsls	r3, r2
    3fe2:	1e5a      	subs	r2, r3, #1
    3fe4:	4193      	sbcs	r3, r2
    3fe6:	4323      	orrs	r3, r4
    3fe8:	1af3      	subs	r3, r6, r3
    3fea:	0004      	movs	r4, r0
    3fec:	000d      	movs	r5, r1
    3fee:	e72d      	b.n	3e4c <__aeabi_fsub+0x5c>
    3ff0:	2f00      	cmp	r7, #0
    3ff2:	d000      	beq.n	3ff6 <__aeabi_fsub+0x206>
    3ff4:	e72e      	b.n	3e54 <__aeabi_fsub+0x64>
    3ff6:	2200      	movs	r2, #0
    3ff8:	2400      	movs	r4, #0
    3ffa:	e7a9      	b.n	3f50 <__aeabi_fsub+0x160>
    3ffc:	000c      	movs	r4, r1
    3ffe:	e73d      	b.n	3e7c <__aeabi_fsub+0x8c>
    4000:	2b00      	cmp	r3, #0
    4002:	d058      	beq.n	40b6 <__aeabi_fsub+0x2c6>
    4004:	43d2      	mvns	r2, r2
    4006:	2a00      	cmp	r2, #0
    4008:	d0ee      	beq.n	3fe8 <__aeabi_fsub+0x1f8>
    400a:	28ff      	cmp	r0, #255	; 0xff
    400c:	d1e1      	bne.n	3fd2 <__aeabi_fsub+0x1e2>
    400e:	0033      	movs	r3, r6
    4010:	24ff      	movs	r4, #255	; 0xff
    4012:	000d      	movs	r5, r1
    4014:	e732      	b.n	3e7c <__aeabi_fsub+0x8c>
    4016:	29ff      	cmp	r1, #255	; 0xff
    4018:	d010      	beq.n	403c <__aeabi_fsub+0x24c>
    401a:	0001      	movs	r1, r0
    401c:	e778      	b.n	3f10 <__aeabi_fsub+0x120>
    401e:	2b00      	cmp	r3, #0
    4020:	d06e      	beq.n	4100 <__aeabi_fsub+0x310>
    4022:	24ff      	movs	r4, #255	; 0xff
    4024:	2e00      	cmp	r6, #0
    4026:	d100      	bne.n	402a <__aeabi_fsub+0x23a>
    4028:	e728      	b.n	3e7c <__aeabi_fsub+0x8c>
    402a:	2280      	movs	r2, #128	; 0x80
    402c:	4651      	mov	r1, sl
    402e:	03d2      	lsls	r2, r2, #15
    4030:	4211      	tst	r1, r2
    4032:	d003      	beq.n	403c <__aeabi_fsub+0x24c>
    4034:	4661      	mov	r1, ip
    4036:	4211      	tst	r1, r2
    4038:	d100      	bne.n	403c <__aeabi_fsub+0x24c>
    403a:	0033      	movs	r3, r6
    403c:	24ff      	movs	r4, #255	; 0xff
    403e:	e71d      	b.n	3e7c <__aeabi_fsub+0x8c>
    4040:	24ff      	movs	r4, #255	; 0xff
    4042:	2300      	movs	r3, #0
    4044:	e72c      	b.n	3ea0 <__aeabi_fsub+0xb0>
    4046:	2c00      	cmp	r4, #0
    4048:	d1e9      	bne.n	401e <__aeabi_fsub+0x22e>
    404a:	2b00      	cmp	r3, #0
    404c:	d063      	beq.n	4116 <__aeabi_fsub+0x326>
    404e:	2e00      	cmp	r6, #0
    4050:	d100      	bne.n	4054 <__aeabi_fsub+0x264>
    4052:	e713      	b.n	3e7c <__aeabi_fsub+0x8c>
    4054:	199b      	adds	r3, r3, r6
    4056:	015a      	lsls	r2, r3, #5
    4058:	d400      	bmi.n	405c <__aeabi_fsub+0x26c>
    405a:	e73e      	b.n	3eda <__aeabi_fsub+0xea>
    405c:	4a31      	ldr	r2, [pc, #196]	; (4124 <__aeabi_fsub+0x334>)
    405e:	000c      	movs	r4, r1
    4060:	4013      	ands	r3, r2
    4062:	e70b      	b.n	3e7c <__aeabi_fsub+0x8c>
    4064:	2c00      	cmp	r4, #0
    4066:	d11e      	bne.n	40a6 <__aeabi_fsub+0x2b6>
    4068:	2b00      	cmp	r3, #0
    406a:	d12f      	bne.n	40cc <__aeabi_fsub+0x2dc>
    406c:	2e00      	cmp	r6, #0
    406e:	d04f      	beq.n	4110 <__aeabi_fsub+0x320>
    4070:	0033      	movs	r3, r6
    4072:	000d      	movs	r5, r1
    4074:	e702      	b.n	3e7c <__aeabi_fsub+0x8c>
    4076:	2601      	movs	r6, #1
    4078:	e755      	b.n	3f26 <__aeabi_fsub+0x136>
    407a:	2c00      	cmp	r4, #0
    407c:	d11f      	bne.n	40be <__aeabi_fsub+0x2ce>
    407e:	2b00      	cmp	r3, #0
    4080:	d043      	beq.n	410a <__aeabi_fsub+0x31a>
    4082:	43c9      	mvns	r1, r1
    4084:	2900      	cmp	r1, #0
    4086:	d00b      	beq.n	40a0 <__aeabi_fsub+0x2b0>
    4088:	28ff      	cmp	r0, #255	; 0xff
    408a:	d039      	beq.n	4100 <__aeabi_fsub+0x310>
    408c:	291b      	cmp	r1, #27
    408e:	dc44      	bgt.n	411a <__aeabi_fsub+0x32a>
    4090:	001c      	movs	r4, r3
    4092:	2720      	movs	r7, #32
    4094:	40cc      	lsrs	r4, r1
    4096:	1a79      	subs	r1, r7, r1
    4098:	408b      	lsls	r3, r1
    409a:	1e59      	subs	r1, r3, #1
    409c:	418b      	sbcs	r3, r1
    409e:	4323      	orrs	r3, r4
    40a0:	199b      	adds	r3, r3, r6
    40a2:	0004      	movs	r4, r0
    40a4:	e740      	b.n	3f28 <__aeabi_fsub+0x138>
    40a6:	2b00      	cmp	r3, #0
    40a8:	d11a      	bne.n	40e0 <__aeabi_fsub+0x2f0>
    40aa:	2e00      	cmp	r6, #0
    40ac:	d124      	bne.n	40f8 <__aeabi_fsub+0x308>
    40ae:	2780      	movs	r7, #128	; 0x80
    40b0:	2200      	movs	r2, #0
    40b2:	03ff      	lsls	r7, r7, #15
    40b4:	e71b      	b.n	3eee <__aeabi_fsub+0xfe>
    40b6:	0033      	movs	r3, r6
    40b8:	0004      	movs	r4, r0
    40ba:	000d      	movs	r5, r1
    40bc:	e6de      	b.n	3e7c <__aeabi_fsub+0x8c>
    40be:	28ff      	cmp	r0, #255	; 0xff
    40c0:	d01e      	beq.n	4100 <__aeabi_fsub+0x310>
    40c2:	2480      	movs	r4, #128	; 0x80
    40c4:	04e4      	lsls	r4, r4, #19
    40c6:	4249      	negs	r1, r1
    40c8:	4323      	orrs	r3, r4
    40ca:	e7df      	b.n	408c <__aeabi_fsub+0x29c>
    40cc:	2e00      	cmp	r6, #0
    40ce:	d100      	bne.n	40d2 <__aeabi_fsub+0x2e2>
    40d0:	e6d4      	b.n	3e7c <__aeabi_fsub+0x8c>
    40d2:	1b9f      	subs	r7, r3, r6
    40d4:	017a      	lsls	r2, r7, #5
    40d6:	d400      	bmi.n	40da <__aeabi_fsub+0x2ea>
    40d8:	e737      	b.n	3f4a <__aeabi_fsub+0x15a>
    40da:	1af3      	subs	r3, r6, r3
    40dc:	000d      	movs	r5, r1
    40de:	e6cd      	b.n	3e7c <__aeabi_fsub+0x8c>
    40e0:	24ff      	movs	r4, #255	; 0xff
    40e2:	2e00      	cmp	r6, #0
    40e4:	d100      	bne.n	40e8 <__aeabi_fsub+0x2f8>
    40e6:	e6c9      	b.n	3e7c <__aeabi_fsub+0x8c>
    40e8:	2280      	movs	r2, #128	; 0x80
    40ea:	4650      	mov	r0, sl
    40ec:	03d2      	lsls	r2, r2, #15
    40ee:	4210      	tst	r0, r2
    40f0:	d0a4      	beq.n	403c <__aeabi_fsub+0x24c>
    40f2:	4660      	mov	r0, ip
    40f4:	4210      	tst	r0, r2
    40f6:	d1a1      	bne.n	403c <__aeabi_fsub+0x24c>
    40f8:	0033      	movs	r3, r6
    40fa:	000d      	movs	r5, r1
    40fc:	24ff      	movs	r4, #255	; 0xff
    40fe:	e6bd      	b.n	3e7c <__aeabi_fsub+0x8c>
    4100:	0033      	movs	r3, r6
    4102:	24ff      	movs	r4, #255	; 0xff
    4104:	e6ba      	b.n	3e7c <__aeabi_fsub+0x8c>
    4106:	2301      	movs	r3, #1
    4108:	e76e      	b.n	3fe8 <__aeabi_fsub+0x1f8>
    410a:	0033      	movs	r3, r6
    410c:	0004      	movs	r4, r0
    410e:	e6b5      	b.n	3e7c <__aeabi_fsub+0x8c>
    4110:	2700      	movs	r7, #0
    4112:	2200      	movs	r2, #0
    4114:	e71c      	b.n	3f50 <__aeabi_fsub+0x160>
    4116:	0033      	movs	r3, r6
    4118:	e6b0      	b.n	3e7c <__aeabi_fsub+0x8c>
    411a:	2301      	movs	r3, #1
    411c:	e7c0      	b.n	40a0 <__aeabi_fsub+0x2b0>
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	7dffffff 	.word	0x7dffffff
    4124:	fbffffff 	.word	0xfbffffff

00004128 <__aeabi_f2iz>:
    4128:	0241      	lsls	r1, r0, #9
    412a:	0043      	lsls	r3, r0, #1
    412c:	0fc2      	lsrs	r2, r0, #31
    412e:	0a49      	lsrs	r1, r1, #9
    4130:	0e1b      	lsrs	r3, r3, #24
    4132:	2000      	movs	r0, #0
    4134:	2b7e      	cmp	r3, #126	; 0x7e
    4136:	dd0d      	ble.n	4154 <__aeabi_f2iz+0x2c>
    4138:	2b9d      	cmp	r3, #157	; 0x9d
    413a:	dc0c      	bgt.n	4156 <__aeabi_f2iz+0x2e>
    413c:	2080      	movs	r0, #128	; 0x80
    413e:	0400      	lsls	r0, r0, #16
    4140:	4301      	orrs	r1, r0
    4142:	2b95      	cmp	r3, #149	; 0x95
    4144:	dc0a      	bgt.n	415c <__aeabi_f2iz+0x34>
    4146:	2096      	movs	r0, #150	; 0x96
    4148:	1ac3      	subs	r3, r0, r3
    414a:	40d9      	lsrs	r1, r3
    414c:	4248      	negs	r0, r1
    414e:	2a00      	cmp	r2, #0
    4150:	d100      	bne.n	4154 <__aeabi_f2iz+0x2c>
    4152:	0008      	movs	r0, r1
    4154:	4770      	bx	lr
    4156:	4b03      	ldr	r3, [pc, #12]	; (4164 <__aeabi_f2iz+0x3c>)
    4158:	18d0      	adds	r0, r2, r3
    415a:	e7fb      	b.n	4154 <__aeabi_f2iz+0x2c>
    415c:	3b96      	subs	r3, #150	; 0x96
    415e:	4099      	lsls	r1, r3
    4160:	e7f4      	b.n	414c <__aeabi_f2iz+0x24>
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	7fffffff 	.word	0x7fffffff

00004168 <__aeabi_ui2f>:
    4168:	b510      	push	{r4, lr}
    416a:	1e04      	subs	r4, r0, #0
    416c:	d027      	beq.n	41be <__aeabi_ui2f+0x56>
    416e:	f001 f9fd 	bl	556c <__clzsi2>
    4172:	239e      	movs	r3, #158	; 0x9e
    4174:	1a1b      	subs	r3, r3, r0
    4176:	2b96      	cmp	r3, #150	; 0x96
    4178:	dc0a      	bgt.n	4190 <__aeabi_ui2f+0x28>
    417a:	2296      	movs	r2, #150	; 0x96
    417c:	1ad2      	subs	r2, r2, r3
    417e:	4094      	lsls	r4, r2
    4180:	0264      	lsls	r4, r4, #9
    4182:	0a64      	lsrs	r4, r4, #9
    4184:	b2db      	uxtb	r3, r3
    4186:	0264      	lsls	r4, r4, #9
    4188:	05db      	lsls	r3, r3, #23
    418a:	0a60      	lsrs	r0, r4, #9
    418c:	4318      	orrs	r0, r3
    418e:	bd10      	pop	{r4, pc}
    4190:	2b99      	cmp	r3, #153	; 0x99
    4192:	dc17      	bgt.n	41c4 <__aeabi_ui2f+0x5c>
    4194:	2299      	movs	r2, #153	; 0x99
    4196:	1ad2      	subs	r2, r2, r3
    4198:	2a00      	cmp	r2, #0
    419a:	dd27      	ble.n	41ec <__aeabi_ui2f+0x84>
    419c:	4094      	lsls	r4, r2
    419e:	0022      	movs	r2, r4
    41a0:	4c13      	ldr	r4, [pc, #76]	; (41f0 <__aeabi_ui2f+0x88>)
    41a2:	4014      	ands	r4, r2
    41a4:	0751      	lsls	r1, r2, #29
    41a6:	d004      	beq.n	41b2 <__aeabi_ui2f+0x4a>
    41a8:	210f      	movs	r1, #15
    41aa:	400a      	ands	r2, r1
    41ac:	2a04      	cmp	r2, #4
    41ae:	d000      	beq.n	41b2 <__aeabi_ui2f+0x4a>
    41b0:	3404      	adds	r4, #4
    41b2:	0162      	lsls	r2, r4, #5
    41b4:	d412      	bmi.n	41dc <__aeabi_ui2f+0x74>
    41b6:	01a4      	lsls	r4, r4, #6
    41b8:	0a64      	lsrs	r4, r4, #9
    41ba:	b2db      	uxtb	r3, r3
    41bc:	e7e3      	b.n	4186 <__aeabi_ui2f+0x1e>
    41be:	2300      	movs	r3, #0
    41c0:	2400      	movs	r4, #0
    41c2:	e7e0      	b.n	4186 <__aeabi_ui2f+0x1e>
    41c4:	22b9      	movs	r2, #185	; 0xb9
    41c6:	0021      	movs	r1, r4
    41c8:	1ad2      	subs	r2, r2, r3
    41ca:	4091      	lsls	r1, r2
    41cc:	000a      	movs	r2, r1
    41ce:	1e51      	subs	r1, r2, #1
    41d0:	418a      	sbcs	r2, r1
    41d2:	2105      	movs	r1, #5
    41d4:	1a09      	subs	r1, r1, r0
    41d6:	40cc      	lsrs	r4, r1
    41d8:	4314      	orrs	r4, r2
    41da:	e7db      	b.n	4194 <__aeabi_ui2f+0x2c>
    41dc:	4b04      	ldr	r3, [pc, #16]	; (41f0 <__aeabi_ui2f+0x88>)
    41de:	401c      	ands	r4, r3
    41e0:	239f      	movs	r3, #159	; 0x9f
    41e2:	01a4      	lsls	r4, r4, #6
    41e4:	1a1b      	subs	r3, r3, r0
    41e6:	0a64      	lsrs	r4, r4, #9
    41e8:	b2db      	uxtb	r3, r3
    41ea:	e7cc      	b.n	4186 <__aeabi_ui2f+0x1e>
    41ec:	0022      	movs	r2, r4
    41ee:	e7d7      	b.n	41a0 <__aeabi_ui2f+0x38>
    41f0:	fbffffff 	.word	0xfbffffff

000041f4 <__aeabi_dadd>:
    41f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41f6:	4645      	mov	r5, r8
    41f8:	46de      	mov	lr, fp
    41fa:	4657      	mov	r7, sl
    41fc:	464e      	mov	r6, r9
    41fe:	030c      	lsls	r4, r1, #12
    4200:	b5e0      	push	{r5, r6, r7, lr}
    4202:	004e      	lsls	r6, r1, #1
    4204:	0fc9      	lsrs	r1, r1, #31
    4206:	4688      	mov	r8, r1
    4208:	000d      	movs	r5, r1
    420a:	0a61      	lsrs	r1, r4, #9
    420c:	0f44      	lsrs	r4, r0, #29
    420e:	430c      	orrs	r4, r1
    4210:	00c7      	lsls	r7, r0, #3
    4212:	0319      	lsls	r1, r3, #12
    4214:	0058      	lsls	r0, r3, #1
    4216:	0fdb      	lsrs	r3, r3, #31
    4218:	469b      	mov	fp, r3
    421a:	0a4b      	lsrs	r3, r1, #9
    421c:	0f51      	lsrs	r1, r2, #29
    421e:	430b      	orrs	r3, r1
    4220:	0d76      	lsrs	r6, r6, #21
    4222:	0d40      	lsrs	r0, r0, #21
    4224:	0019      	movs	r1, r3
    4226:	00d2      	lsls	r2, r2, #3
    4228:	45d8      	cmp	r8, fp
    422a:	d100      	bne.n	422e <__aeabi_dadd+0x3a>
    422c:	e0ae      	b.n	438c <__aeabi_dadd+0x198>
    422e:	1a35      	subs	r5, r6, r0
    4230:	2d00      	cmp	r5, #0
    4232:	dc00      	bgt.n	4236 <__aeabi_dadd+0x42>
    4234:	e0f6      	b.n	4424 <__aeabi_dadd+0x230>
    4236:	2800      	cmp	r0, #0
    4238:	d10f      	bne.n	425a <__aeabi_dadd+0x66>
    423a:	4313      	orrs	r3, r2
    423c:	d100      	bne.n	4240 <__aeabi_dadd+0x4c>
    423e:	e0db      	b.n	43f8 <__aeabi_dadd+0x204>
    4240:	1e6b      	subs	r3, r5, #1
    4242:	2b00      	cmp	r3, #0
    4244:	d000      	beq.n	4248 <__aeabi_dadd+0x54>
    4246:	e137      	b.n	44b8 <__aeabi_dadd+0x2c4>
    4248:	1aba      	subs	r2, r7, r2
    424a:	4297      	cmp	r7, r2
    424c:	41bf      	sbcs	r7, r7
    424e:	1a64      	subs	r4, r4, r1
    4250:	427f      	negs	r7, r7
    4252:	1be4      	subs	r4, r4, r7
    4254:	2601      	movs	r6, #1
    4256:	0017      	movs	r7, r2
    4258:	e024      	b.n	42a4 <__aeabi_dadd+0xb0>
    425a:	4bc6      	ldr	r3, [pc, #792]	; (4574 <__aeabi_dadd+0x380>)
    425c:	429e      	cmp	r6, r3
    425e:	d04d      	beq.n	42fc <__aeabi_dadd+0x108>
    4260:	2380      	movs	r3, #128	; 0x80
    4262:	041b      	lsls	r3, r3, #16
    4264:	4319      	orrs	r1, r3
    4266:	2d38      	cmp	r5, #56	; 0x38
    4268:	dd00      	ble.n	426c <__aeabi_dadd+0x78>
    426a:	e107      	b.n	447c <__aeabi_dadd+0x288>
    426c:	2d1f      	cmp	r5, #31
    426e:	dd00      	ble.n	4272 <__aeabi_dadd+0x7e>
    4270:	e138      	b.n	44e4 <__aeabi_dadd+0x2f0>
    4272:	2020      	movs	r0, #32
    4274:	1b43      	subs	r3, r0, r5
    4276:	469a      	mov	sl, r3
    4278:	000b      	movs	r3, r1
    427a:	4650      	mov	r0, sl
    427c:	4083      	lsls	r3, r0
    427e:	4699      	mov	r9, r3
    4280:	0013      	movs	r3, r2
    4282:	4648      	mov	r0, r9
    4284:	40eb      	lsrs	r3, r5
    4286:	4318      	orrs	r0, r3
    4288:	0003      	movs	r3, r0
    428a:	4650      	mov	r0, sl
    428c:	4082      	lsls	r2, r0
    428e:	1e50      	subs	r0, r2, #1
    4290:	4182      	sbcs	r2, r0
    4292:	40e9      	lsrs	r1, r5
    4294:	431a      	orrs	r2, r3
    4296:	1aba      	subs	r2, r7, r2
    4298:	1a61      	subs	r1, r4, r1
    429a:	4297      	cmp	r7, r2
    429c:	41a4      	sbcs	r4, r4
    429e:	0017      	movs	r7, r2
    42a0:	4264      	negs	r4, r4
    42a2:	1b0c      	subs	r4, r1, r4
    42a4:	0223      	lsls	r3, r4, #8
    42a6:	d562      	bpl.n	436e <__aeabi_dadd+0x17a>
    42a8:	0264      	lsls	r4, r4, #9
    42aa:	0a65      	lsrs	r5, r4, #9
    42ac:	2d00      	cmp	r5, #0
    42ae:	d100      	bne.n	42b2 <__aeabi_dadd+0xbe>
    42b0:	e0df      	b.n	4472 <__aeabi_dadd+0x27e>
    42b2:	0028      	movs	r0, r5
    42b4:	f001 f95a 	bl	556c <__clzsi2>
    42b8:	0003      	movs	r3, r0
    42ba:	3b08      	subs	r3, #8
    42bc:	2b1f      	cmp	r3, #31
    42be:	dd00      	ble.n	42c2 <__aeabi_dadd+0xce>
    42c0:	e0d2      	b.n	4468 <__aeabi_dadd+0x274>
    42c2:	2220      	movs	r2, #32
    42c4:	003c      	movs	r4, r7
    42c6:	1ad2      	subs	r2, r2, r3
    42c8:	409d      	lsls	r5, r3
    42ca:	40d4      	lsrs	r4, r2
    42cc:	409f      	lsls	r7, r3
    42ce:	4325      	orrs	r5, r4
    42d0:	429e      	cmp	r6, r3
    42d2:	dd00      	ble.n	42d6 <__aeabi_dadd+0xe2>
    42d4:	e0c4      	b.n	4460 <__aeabi_dadd+0x26c>
    42d6:	1b9e      	subs	r6, r3, r6
    42d8:	1c73      	adds	r3, r6, #1
    42da:	2b1f      	cmp	r3, #31
    42dc:	dd00      	ble.n	42e0 <__aeabi_dadd+0xec>
    42de:	e0f1      	b.n	44c4 <__aeabi_dadd+0x2d0>
    42e0:	2220      	movs	r2, #32
    42e2:	0038      	movs	r0, r7
    42e4:	0029      	movs	r1, r5
    42e6:	1ad2      	subs	r2, r2, r3
    42e8:	40d8      	lsrs	r0, r3
    42ea:	4091      	lsls	r1, r2
    42ec:	4097      	lsls	r7, r2
    42ee:	002c      	movs	r4, r5
    42f0:	4301      	orrs	r1, r0
    42f2:	1e78      	subs	r0, r7, #1
    42f4:	4187      	sbcs	r7, r0
    42f6:	40dc      	lsrs	r4, r3
    42f8:	2600      	movs	r6, #0
    42fa:	430f      	orrs	r7, r1
    42fc:	077b      	lsls	r3, r7, #29
    42fe:	d009      	beq.n	4314 <__aeabi_dadd+0x120>
    4300:	230f      	movs	r3, #15
    4302:	403b      	ands	r3, r7
    4304:	2b04      	cmp	r3, #4
    4306:	d005      	beq.n	4314 <__aeabi_dadd+0x120>
    4308:	1d3b      	adds	r3, r7, #4
    430a:	42bb      	cmp	r3, r7
    430c:	41bf      	sbcs	r7, r7
    430e:	427f      	negs	r7, r7
    4310:	19e4      	adds	r4, r4, r7
    4312:	001f      	movs	r7, r3
    4314:	0223      	lsls	r3, r4, #8
    4316:	d52c      	bpl.n	4372 <__aeabi_dadd+0x17e>
    4318:	4b96      	ldr	r3, [pc, #600]	; (4574 <__aeabi_dadd+0x380>)
    431a:	3601      	adds	r6, #1
    431c:	429e      	cmp	r6, r3
    431e:	d100      	bne.n	4322 <__aeabi_dadd+0x12e>
    4320:	e09a      	b.n	4458 <__aeabi_dadd+0x264>
    4322:	4645      	mov	r5, r8
    4324:	4b94      	ldr	r3, [pc, #592]	; (4578 <__aeabi_dadd+0x384>)
    4326:	08ff      	lsrs	r7, r7, #3
    4328:	401c      	ands	r4, r3
    432a:	0760      	lsls	r0, r4, #29
    432c:	0576      	lsls	r6, r6, #21
    432e:	0264      	lsls	r4, r4, #9
    4330:	4307      	orrs	r7, r0
    4332:	0b24      	lsrs	r4, r4, #12
    4334:	0d76      	lsrs	r6, r6, #21
    4336:	2100      	movs	r1, #0
    4338:	0324      	lsls	r4, r4, #12
    433a:	0b23      	lsrs	r3, r4, #12
    433c:	0d0c      	lsrs	r4, r1, #20
    433e:	4a8f      	ldr	r2, [pc, #572]	; (457c <__aeabi_dadd+0x388>)
    4340:	0524      	lsls	r4, r4, #20
    4342:	431c      	orrs	r4, r3
    4344:	4014      	ands	r4, r2
    4346:	0533      	lsls	r3, r6, #20
    4348:	4323      	orrs	r3, r4
    434a:	005b      	lsls	r3, r3, #1
    434c:	07ed      	lsls	r5, r5, #31
    434e:	085b      	lsrs	r3, r3, #1
    4350:	432b      	orrs	r3, r5
    4352:	0038      	movs	r0, r7
    4354:	0019      	movs	r1, r3
    4356:	bc3c      	pop	{r2, r3, r4, r5}
    4358:	4690      	mov	r8, r2
    435a:	4699      	mov	r9, r3
    435c:	46a2      	mov	sl, r4
    435e:	46ab      	mov	fp, r5
    4360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4362:	4664      	mov	r4, ip
    4364:	4304      	orrs	r4, r0
    4366:	d100      	bne.n	436a <__aeabi_dadd+0x176>
    4368:	e211      	b.n	478e <__aeabi_dadd+0x59a>
    436a:	0004      	movs	r4, r0
    436c:	4667      	mov	r7, ip
    436e:	077b      	lsls	r3, r7, #29
    4370:	d1c6      	bne.n	4300 <__aeabi_dadd+0x10c>
    4372:	4645      	mov	r5, r8
    4374:	0760      	lsls	r0, r4, #29
    4376:	08ff      	lsrs	r7, r7, #3
    4378:	4307      	orrs	r7, r0
    437a:	08e4      	lsrs	r4, r4, #3
    437c:	4b7d      	ldr	r3, [pc, #500]	; (4574 <__aeabi_dadd+0x380>)
    437e:	429e      	cmp	r6, r3
    4380:	d030      	beq.n	43e4 <__aeabi_dadd+0x1f0>
    4382:	0324      	lsls	r4, r4, #12
    4384:	0576      	lsls	r6, r6, #21
    4386:	0b24      	lsrs	r4, r4, #12
    4388:	0d76      	lsrs	r6, r6, #21
    438a:	e7d4      	b.n	4336 <__aeabi_dadd+0x142>
    438c:	1a33      	subs	r3, r6, r0
    438e:	469a      	mov	sl, r3
    4390:	2b00      	cmp	r3, #0
    4392:	dd78      	ble.n	4486 <__aeabi_dadd+0x292>
    4394:	2800      	cmp	r0, #0
    4396:	d031      	beq.n	43fc <__aeabi_dadd+0x208>
    4398:	4876      	ldr	r0, [pc, #472]	; (4574 <__aeabi_dadd+0x380>)
    439a:	4286      	cmp	r6, r0
    439c:	d0ae      	beq.n	42fc <__aeabi_dadd+0x108>
    439e:	2080      	movs	r0, #128	; 0x80
    43a0:	0400      	lsls	r0, r0, #16
    43a2:	4301      	orrs	r1, r0
    43a4:	4653      	mov	r3, sl
    43a6:	2b38      	cmp	r3, #56	; 0x38
    43a8:	dc00      	bgt.n	43ac <__aeabi_dadd+0x1b8>
    43aa:	e0e9      	b.n	4580 <__aeabi_dadd+0x38c>
    43ac:	430a      	orrs	r2, r1
    43ae:	1e51      	subs	r1, r2, #1
    43b0:	418a      	sbcs	r2, r1
    43b2:	2100      	movs	r1, #0
    43b4:	19d2      	adds	r2, r2, r7
    43b6:	42ba      	cmp	r2, r7
    43b8:	41bf      	sbcs	r7, r7
    43ba:	1909      	adds	r1, r1, r4
    43bc:	427c      	negs	r4, r7
    43be:	0017      	movs	r7, r2
    43c0:	190c      	adds	r4, r1, r4
    43c2:	0223      	lsls	r3, r4, #8
    43c4:	d5d3      	bpl.n	436e <__aeabi_dadd+0x17a>
    43c6:	4b6b      	ldr	r3, [pc, #428]	; (4574 <__aeabi_dadd+0x380>)
    43c8:	3601      	adds	r6, #1
    43ca:	429e      	cmp	r6, r3
    43cc:	d100      	bne.n	43d0 <__aeabi_dadd+0x1dc>
    43ce:	e13a      	b.n	4646 <__aeabi_dadd+0x452>
    43d0:	2001      	movs	r0, #1
    43d2:	4b69      	ldr	r3, [pc, #420]	; (4578 <__aeabi_dadd+0x384>)
    43d4:	401c      	ands	r4, r3
    43d6:	087b      	lsrs	r3, r7, #1
    43d8:	4007      	ands	r7, r0
    43da:	431f      	orrs	r7, r3
    43dc:	07e0      	lsls	r0, r4, #31
    43de:	4307      	orrs	r7, r0
    43e0:	0864      	lsrs	r4, r4, #1
    43e2:	e78b      	b.n	42fc <__aeabi_dadd+0x108>
    43e4:	0023      	movs	r3, r4
    43e6:	433b      	orrs	r3, r7
    43e8:	d100      	bne.n	43ec <__aeabi_dadd+0x1f8>
    43ea:	e1cb      	b.n	4784 <__aeabi_dadd+0x590>
    43ec:	2280      	movs	r2, #128	; 0x80
    43ee:	0312      	lsls	r2, r2, #12
    43f0:	4314      	orrs	r4, r2
    43f2:	0324      	lsls	r4, r4, #12
    43f4:	0b24      	lsrs	r4, r4, #12
    43f6:	e79e      	b.n	4336 <__aeabi_dadd+0x142>
    43f8:	002e      	movs	r6, r5
    43fa:	e77f      	b.n	42fc <__aeabi_dadd+0x108>
    43fc:	0008      	movs	r0, r1
    43fe:	4310      	orrs	r0, r2
    4400:	d100      	bne.n	4404 <__aeabi_dadd+0x210>
    4402:	e0b4      	b.n	456e <__aeabi_dadd+0x37a>
    4404:	1e58      	subs	r0, r3, #1
    4406:	2800      	cmp	r0, #0
    4408:	d000      	beq.n	440c <__aeabi_dadd+0x218>
    440a:	e0de      	b.n	45ca <__aeabi_dadd+0x3d6>
    440c:	18ba      	adds	r2, r7, r2
    440e:	42ba      	cmp	r2, r7
    4410:	419b      	sbcs	r3, r3
    4412:	1864      	adds	r4, r4, r1
    4414:	425b      	negs	r3, r3
    4416:	18e4      	adds	r4, r4, r3
    4418:	0017      	movs	r7, r2
    441a:	2601      	movs	r6, #1
    441c:	0223      	lsls	r3, r4, #8
    441e:	d5a6      	bpl.n	436e <__aeabi_dadd+0x17a>
    4420:	2602      	movs	r6, #2
    4422:	e7d5      	b.n	43d0 <__aeabi_dadd+0x1dc>
    4424:	2d00      	cmp	r5, #0
    4426:	d16e      	bne.n	4506 <__aeabi_dadd+0x312>
    4428:	1c70      	adds	r0, r6, #1
    442a:	0540      	lsls	r0, r0, #21
    442c:	0d40      	lsrs	r0, r0, #21
    442e:	2801      	cmp	r0, #1
    4430:	dc00      	bgt.n	4434 <__aeabi_dadd+0x240>
    4432:	e0f9      	b.n	4628 <__aeabi_dadd+0x434>
    4434:	1ab8      	subs	r0, r7, r2
    4436:	4684      	mov	ip, r0
    4438:	4287      	cmp	r7, r0
    443a:	4180      	sbcs	r0, r0
    443c:	1ae5      	subs	r5, r4, r3
    443e:	4240      	negs	r0, r0
    4440:	1a2d      	subs	r5, r5, r0
    4442:	0228      	lsls	r0, r5, #8
    4444:	d400      	bmi.n	4448 <__aeabi_dadd+0x254>
    4446:	e089      	b.n	455c <__aeabi_dadd+0x368>
    4448:	1bd7      	subs	r7, r2, r7
    444a:	42ba      	cmp	r2, r7
    444c:	4192      	sbcs	r2, r2
    444e:	1b1c      	subs	r4, r3, r4
    4450:	4252      	negs	r2, r2
    4452:	1aa5      	subs	r5, r4, r2
    4454:	46d8      	mov	r8, fp
    4456:	e729      	b.n	42ac <__aeabi_dadd+0xb8>
    4458:	4645      	mov	r5, r8
    445a:	2400      	movs	r4, #0
    445c:	2700      	movs	r7, #0
    445e:	e76a      	b.n	4336 <__aeabi_dadd+0x142>
    4460:	4c45      	ldr	r4, [pc, #276]	; (4578 <__aeabi_dadd+0x384>)
    4462:	1af6      	subs	r6, r6, r3
    4464:	402c      	ands	r4, r5
    4466:	e749      	b.n	42fc <__aeabi_dadd+0x108>
    4468:	003d      	movs	r5, r7
    446a:	3828      	subs	r0, #40	; 0x28
    446c:	4085      	lsls	r5, r0
    446e:	2700      	movs	r7, #0
    4470:	e72e      	b.n	42d0 <__aeabi_dadd+0xdc>
    4472:	0038      	movs	r0, r7
    4474:	f001 f87a 	bl	556c <__clzsi2>
    4478:	3020      	adds	r0, #32
    447a:	e71d      	b.n	42b8 <__aeabi_dadd+0xc4>
    447c:	430a      	orrs	r2, r1
    447e:	1e51      	subs	r1, r2, #1
    4480:	418a      	sbcs	r2, r1
    4482:	2100      	movs	r1, #0
    4484:	e707      	b.n	4296 <__aeabi_dadd+0xa2>
    4486:	2b00      	cmp	r3, #0
    4488:	d000      	beq.n	448c <__aeabi_dadd+0x298>
    448a:	e0f3      	b.n	4674 <__aeabi_dadd+0x480>
    448c:	1c70      	adds	r0, r6, #1
    448e:	0543      	lsls	r3, r0, #21
    4490:	0d5b      	lsrs	r3, r3, #21
    4492:	2b01      	cmp	r3, #1
    4494:	dc00      	bgt.n	4498 <__aeabi_dadd+0x2a4>
    4496:	e0ad      	b.n	45f4 <__aeabi_dadd+0x400>
    4498:	4b36      	ldr	r3, [pc, #216]	; (4574 <__aeabi_dadd+0x380>)
    449a:	4298      	cmp	r0, r3
    449c:	d100      	bne.n	44a0 <__aeabi_dadd+0x2ac>
    449e:	e0d1      	b.n	4644 <__aeabi_dadd+0x450>
    44a0:	18ba      	adds	r2, r7, r2
    44a2:	42ba      	cmp	r2, r7
    44a4:	41bf      	sbcs	r7, r7
    44a6:	1864      	adds	r4, r4, r1
    44a8:	427f      	negs	r7, r7
    44aa:	19e4      	adds	r4, r4, r7
    44ac:	07e7      	lsls	r7, r4, #31
    44ae:	0852      	lsrs	r2, r2, #1
    44b0:	4317      	orrs	r7, r2
    44b2:	0864      	lsrs	r4, r4, #1
    44b4:	0006      	movs	r6, r0
    44b6:	e721      	b.n	42fc <__aeabi_dadd+0x108>
    44b8:	482e      	ldr	r0, [pc, #184]	; (4574 <__aeabi_dadd+0x380>)
    44ba:	4285      	cmp	r5, r0
    44bc:	d100      	bne.n	44c0 <__aeabi_dadd+0x2cc>
    44be:	e093      	b.n	45e8 <__aeabi_dadd+0x3f4>
    44c0:	001d      	movs	r5, r3
    44c2:	e6d0      	b.n	4266 <__aeabi_dadd+0x72>
    44c4:	0029      	movs	r1, r5
    44c6:	3e1f      	subs	r6, #31
    44c8:	40f1      	lsrs	r1, r6
    44ca:	2b20      	cmp	r3, #32
    44cc:	d100      	bne.n	44d0 <__aeabi_dadd+0x2dc>
    44ce:	e08d      	b.n	45ec <__aeabi_dadd+0x3f8>
    44d0:	2240      	movs	r2, #64	; 0x40
    44d2:	1ad3      	subs	r3, r2, r3
    44d4:	409d      	lsls	r5, r3
    44d6:	432f      	orrs	r7, r5
    44d8:	1e7d      	subs	r5, r7, #1
    44da:	41af      	sbcs	r7, r5
    44dc:	2400      	movs	r4, #0
    44de:	430f      	orrs	r7, r1
    44e0:	2600      	movs	r6, #0
    44e2:	e744      	b.n	436e <__aeabi_dadd+0x17a>
    44e4:	002b      	movs	r3, r5
    44e6:	0008      	movs	r0, r1
    44e8:	3b20      	subs	r3, #32
    44ea:	40d8      	lsrs	r0, r3
    44ec:	0003      	movs	r3, r0
    44ee:	2d20      	cmp	r5, #32
    44f0:	d100      	bne.n	44f4 <__aeabi_dadd+0x300>
    44f2:	e07d      	b.n	45f0 <__aeabi_dadd+0x3fc>
    44f4:	2040      	movs	r0, #64	; 0x40
    44f6:	1b45      	subs	r5, r0, r5
    44f8:	40a9      	lsls	r1, r5
    44fa:	430a      	orrs	r2, r1
    44fc:	1e51      	subs	r1, r2, #1
    44fe:	418a      	sbcs	r2, r1
    4500:	2100      	movs	r1, #0
    4502:	431a      	orrs	r2, r3
    4504:	e6c7      	b.n	4296 <__aeabi_dadd+0xa2>
    4506:	2e00      	cmp	r6, #0
    4508:	d050      	beq.n	45ac <__aeabi_dadd+0x3b8>
    450a:	4e1a      	ldr	r6, [pc, #104]	; (4574 <__aeabi_dadd+0x380>)
    450c:	42b0      	cmp	r0, r6
    450e:	d057      	beq.n	45c0 <__aeabi_dadd+0x3cc>
    4510:	2680      	movs	r6, #128	; 0x80
    4512:	426b      	negs	r3, r5
    4514:	4699      	mov	r9, r3
    4516:	0436      	lsls	r6, r6, #16
    4518:	4334      	orrs	r4, r6
    451a:	464b      	mov	r3, r9
    451c:	2b38      	cmp	r3, #56	; 0x38
    451e:	dd00      	ble.n	4522 <__aeabi_dadd+0x32e>
    4520:	e0d6      	b.n	46d0 <__aeabi_dadd+0x4dc>
    4522:	2b1f      	cmp	r3, #31
    4524:	dd00      	ble.n	4528 <__aeabi_dadd+0x334>
    4526:	e135      	b.n	4794 <__aeabi_dadd+0x5a0>
    4528:	2620      	movs	r6, #32
    452a:	1af5      	subs	r5, r6, r3
    452c:	0026      	movs	r6, r4
    452e:	40ae      	lsls	r6, r5
    4530:	46b2      	mov	sl, r6
    4532:	003e      	movs	r6, r7
    4534:	40de      	lsrs	r6, r3
    4536:	46ac      	mov	ip, r5
    4538:	0035      	movs	r5, r6
    453a:	4656      	mov	r6, sl
    453c:	432e      	orrs	r6, r5
    453e:	4665      	mov	r5, ip
    4540:	40af      	lsls	r7, r5
    4542:	1e7d      	subs	r5, r7, #1
    4544:	41af      	sbcs	r7, r5
    4546:	40dc      	lsrs	r4, r3
    4548:	4337      	orrs	r7, r6
    454a:	1bd7      	subs	r7, r2, r7
    454c:	42ba      	cmp	r2, r7
    454e:	4192      	sbcs	r2, r2
    4550:	1b0c      	subs	r4, r1, r4
    4552:	4252      	negs	r2, r2
    4554:	1aa4      	subs	r4, r4, r2
    4556:	0006      	movs	r6, r0
    4558:	46d8      	mov	r8, fp
    455a:	e6a3      	b.n	42a4 <__aeabi_dadd+0xb0>
    455c:	4664      	mov	r4, ip
    455e:	4667      	mov	r7, ip
    4560:	432c      	orrs	r4, r5
    4562:	d000      	beq.n	4566 <__aeabi_dadd+0x372>
    4564:	e6a2      	b.n	42ac <__aeabi_dadd+0xb8>
    4566:	2500      	movs	r5, #0
    4568:	2600      	movs	r6, #0
    456a:	2700      	movs	r7, #0
    456c:	e706      	b.n	437c <__aeabi_dadd+0x188>
    456e:	001e      	movs	r6, r3
    4570:	e6c4      	b.n	42fc <__aeabi_dadd+0x108>
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	000007ff 	.word	0x000007ff
    4578:	ff7fffff 	.word	0xff7fffff
    457c:	800fffff 	.word	0x800fffff
    4580:	2b1f      	cmp	r3, #31
    4582:	dc63      	bgt.n	464c <__aeabi_dadd+0x458>
    4584:	2020      	movs	r0, #32
    4586:	1ac3      	subs	r3, r0, r3
    4588:	0008      	movs	r0, r1
    458a:	4098      	lsls	r0, r3
    458c:	469c      	mov	ip, r3
    458e:	4683      	mov	fp, r0
    4590:	4653      	mov	r3, sl
    4592:	0010      	movs	r0, r2
    4594:	40d8      	lsrs	r0, r3
    4596:	0003      	movs	r3, r0
    4598:	4658      	mov	r0, fp
    459a:	4318      	orrs	r0, r3
    459c:	4663      	mov	r3, ip
    459e:	409a      	lsls	r2, r3
    45a0:	1e53      	subs	r3, r2, #1
    45a2:	419a      	sbcs	r2, r3
    45a4:	4653      	mov	r3, sl
    45a6:	4302      	orrs	r2, r0
    45a8:	40d9      	lsrs	r1, r3
    45aa:	e703      	b.n	43b4 <__aeabi_dadd+0x1c0>
    45ac:	0026      	movs	r6, r4
    45ae:	433e      	orrs	r6, r7
    45b0:	d006      	beq.n	45c0 <__aeabi_dadd+0x3cc>
    45b2:	43eb      	mvns	r3, r5
    45b4:	4699      	mov	r9, r3
    45b6:	2b00      	cmp	r3, #0
    45b8:	d0c7      	beq.n	454a <__aeabi_dadd+0x356>
    45ba:	4e94      	ldr	r6, [pc, #592]	; (480c <__aeabi_dadd+0x618>)
    45bc:	42b0      	cmp	r0, r6
    45be:	d1ac      	bne.n	451a <__aeabi_dadd+0x326>
    45c0:	000c      	movs	r4, r1
    45c2:	0017      	movs	r7, r2
    45c4:	0006      	movs	r6, r0
    45c6:	46d8      	mov	r8, fp
    45c8:	e698      	b.n	42fc <__aeabi_dadd+0x108>
    45ca:	4b90      	ldr	r3, [pc, #576]	; (480c <__aeabi_dadd+0x618>)
    45cc:	459a      	cmp	sl, r3
    45ce:	d00b      	beq.n	45e8 <__aeabi_dadd+0x3f4>
    45d0:	4682      	mov	sl, r0
    45d2:	e6e7      	b.n	43a4 <__aeabi_dadd+0x1b0>
    45d4:	2800      	cmp	r0, #0
    45d6:	d000      	beq.n	45da <__aeabi_dadd+0x3e6>
    45d8:	e09e      	b.n	4718 <__aeabi_dadd+0x524>
    45da:	0018      	movs	r0, r3
    45dc:	4310      	orrs	r0, r2
    45de:	d100      	bne.n	45e2 <__aeabi_dadd+0x3ee>
    45e0:	e0e9      	b.n	47b6 <__aeabi_dadd+0x5c2>
    45e2:	001c      	movs	r4, r3
    45e4:	0017      	movs	r7, r2
    45e6:	46d8      	mov	r8, fp
    45e8:	4e88      	ldr	r6, [pc, #544]	; (480c <__aeabi_dadd+0x618>)
    45ea:	e687      	b.n	42fc <__aeabi_dadd+0x108>
    45ec:	2500      	movs	r5, #0
    45ee:	e772      	b.n	44d6 <__aeabi_dadd+0x2e2>
    45f0:	2100      	movs	r1, #0
    45f2:	e782      	b.n	44fa <__aeabi_dadd+0x306>
    45f4:	0023      	movs	r3, r4
    45f6:	433b      	orrs	r3, r7
    45f8:	2e00      	cmp	r6, #0
    45fa:	d000      	beq.n	45fe <__aeabi_dadd+0x40a>
    45fc:	e0ab      	b.n	4756 <__aeabi_dadd+0x562>
    45fe:	2b00      	cmp	r3, #0
    4600:	d100      	bne.n	4604 <__aeabi_dadd+0x410>
    4602:	e0e7      	b.n	47d4 <__aeabi_dadd+0x5e0>
    4604:	000b      	movs	r3, r1
    4606:	4313      	orrs	r3, r2
    4608:	d100      	bne.n	460c <__aeabi_dadd+0x418>
    460a:	e677      	b.n	42fc <__aeabi_dadd+0x108>
    460c:	18ba      	adds	r2, r7, r2
    460e:	42ba      	cmp	r2, r7
    4610:	41bf      	sbcs	r7, r7
    4612:	1864      	adds	r4, r4, r1
    4614:	427f      	negs	r7, r7
    4616:	19e4      	adds	r4, r4, r7
    4618:	0223      	lsls	r3, r4, #8
    461a:	d400      	bmi.n	461e <__aeabi_dadd+0x42a>
    461c:	e0f2      	b.n	4804 <__aeabi_dadd+0x610>
    461e:	4b7c      	ldr	r3, [pc, #496]	; (4810 <__aeabi_dadd+0x61c>)
    4620:	0017      	movs	r7, r2
    4622:	401c      	ands	r4, r3
    4624:	0006      	movs	r6, r0
    4626:	e669      	b.n	42fc <__aeabi_dadd+0x108>
    4628:	0020      	movs	r0, r4
    462a:	4338      	orrs	r0, r7
    462c:	2e00      	cmp	r6, #0
    462e:	d1d1      	bne.n	45d4 <__aeabi_dadd+0x3e0>
    4630:	2800      	cmp	r0, #0
    4632:	d15b      	bne.n	46ec <__aeabi_dadd+0x4f8>
    4634:	001c      	movs	r4, r3
    4636:	4314      	orrs	r4, r2
    4638:	d100      	bne.n	463c <__aeabi_dadd+0x448>
    463a:	e0a8      	b.n	478e <__aeabi_dadd+0x59a>
    463c:	001c      	movs	r4, r3
    463e:	0017      	movs	r7, r2
    4640:	46d8      	mov	r8, fp
    4642:	e65b      	b.n	42fc <__aeabi_dadd+0x108>
    4644:	0006      	movs	r6, r0
    4646:	2400      	movs	r4, #0
    4648:	2700      	movs	r7, #0
    464a:	e697      	b.n	437c <__aeabi_dadd+0x188>
    464c:	4650      	mov	r0, sl
    464e:	000b      	movs	r3, r1
    4650:	3820      	subs	r0, #32
    4652:	40c3      	lsrs	r3, r0
    4654:	4699      	mov	r9, r3
    4656:	4653      	mov	r3, sl
    4658:	2b20      	cmp	r3, #32
    465a:	d100      	bne.n	465e <__aeabi_dadd+0x46a>
    465c:	e095      	b.n	478a <__aeabi_dadd+0x596>
    465e:	2340      	movs	r3, #64	; 0x40
    4660:	4650      	mov	r0, sl
    4662:	1a1b      	subs	r3, r3, r0
    4664:	4099      	lsls	r1, r3
    4666:	430a      	orrs	r2, r1
    4668:	1e51      	subs	r1, r2, #1
    466a:	418a      	sbcs	r2, r1
    466c:	464b      	mov	r3, r9
    466e:	2100      	movs	r1, #0
    4670:	431a      	orrs	r2, r3
    4672:	e69f      	b.n	43b4 <__aeabi_dadd+0x1c0>
    4674:	2e00      	cmp	r6, #0
    4676:	d130      	bne.n	46da <__aeabi_dadd+0x4e6>
    4678:	0026      	movs	r6, r4
    467a:	433e      	orrs	r6, r7
    467c:	d067      	beq.n	474e <__aeabi_dadd+0x55a>
    467e:	43db      	mvns	r3, r3
    4680:	469a      	mov	sl, r3
    4682:	2b00      	cmp	r3, #0
    4684:	d01c      	beq.n	46c0 <__aeabi_dadd+0x4cc>
    4686:	4e61      	ldr	r6, [pc, #388]	; (480c <__aeabi_dadd+0x618>)
    4688:	42b0      	cmp	r0, r6
    468a:	d060      	beq.n	474e <__aeabi_dadd+0x55a>
    468c:	4653      	mov	r3, sl
    468e:	2b38      	cmp	r3, #56	; 0x38
    4690:	dd00      	ble.n	4694 <__aeabi_dadd+0x4a0>
    4692:	e096      	b.n	47c2 <__aeabi_dadd+0x5ce>
    4694:	2b1f      	cmp	r3, #31
    4696:	dd00      	ble.n	469a <__aeabi_dadd+0x4a6>
    4698:	e09f      	b.n	47da <__aeabi_dadd+0x5e6>
    469a:	2620      	movs	r6, #32
    469c:	1af3      	subs	r3, r6, r3
    469e:	0026      	movs	r6, r4
    46a0:	409e      	lsls	r6, r3
    46a2:	469c      	mov	ip, r3
    46a4:	46b3      	mov	fp, r6
    46a6:	4653      	mov	r3, sl
    46a8:	003e      	movs	r6, r7
    46aa:	40de      	lsrs	r6, r3
    46ac:	0033      	movs	r3, r6
    46ae:	465e      	mov	r6, fp
    46b0:	431e      	orrs	r6, r3
    46b2:	4663      	mov	r3, ip
    46b4:	409f      	lsls	r7, r3
    46b6:	1e7b      	subs	r3, r7, #1
    46b8:	419f      	sbcs	r7, r3
    46ba:	4653      	mov	r3, sl
    46bc:	40dc      	lsrs	r4, r3
    46be:	4337      	orrs	r7, r6
    46c0:	18bf      	adds	r7, r7, r2
    46c2:	4297      	cmp	r7, r2
    46c4:	4192      	sbcs	r2, r2
    46c6:	1864      	adds	r4, r4, r1
    46c8:	4252      	negs	r2, r2
    46ca:	18a4      	adds	r4, r4, r2
    46cc:	0006      	movs	r6, r0
    46ce:	e678      	b.n	43c2 <__aeabi_dadd+0x1ce>
    46d0:	4327      	orrs	r7, r4
    46d2:	1e7c      	subs	r4, r7, #1
    46d4:	41a7      	sbcs	r7, r4
    46d6:	2400      	movs	r4, #0
    46d8:	e737      	b.n	454a <__aeabi_dadd+0x356>
    46da:	4e4c      	ldr	r6, [pc, #304]	; (480c <__aeabi_dadd+0x618>)
    46dc:	42b0      	cmp	r0, r6
    46de:	d036      	beq.n	474e <__aeabi_dadd+0x55a>
    46e0:	2680      	movs	r6, #128	; 0x80
    46e2:	425b      	negs	r3, r3
    46e4:	0436      	lsls	r6, r6, #16
    46e6:	469a      	mov	sl, r3
    46e8:	4334      	orrs	r4, r6
    46ea:	e7cf      	b.n	468c <__aeabi_dadd+0x498>
    46ec:	0018      	movs	r0, r3
    46ee:	4310      	orrs	r0, r2
    46f0:	d100      	bne.n	46f4 <__aeabi_dadd+0x500>
    46f2:	e603      	b.n	42fc <__aeabi_dadd+0x108>
    46f4:	1ab8      	subs	r0, r7, r2
    46f6:	4684      	mov	ip, r0
    46f8:	4567      	cmp	r7, ip
    46fa:	41ad      	sbcs	r5, r5
    46fc:	1ae0      	subs	r0, r4, r3
    46fe:	426d      	negs	r5, r5
    4700:	1b40      	subs	r0, r0, r5
    4702:	0205      	lsls	r5, r0, #8
    4704:	d400      	bmi.n	4708 <__aeabi_dadd+0x514>
    4706:	e62c      	b.n	4362 <__aeabi_dadd+0x16e>
    4708:	1bd7      	subs	r7, r2, r7
    470a:	42ba      	cmp	r2, r7
    470c:	4192      	sbcs	r2, r2
    470e:	1b1c      	subs	r4, r3, r4
    4710:	4252      	negs	r2, r2
    4712:	1aa4      	subs	r4, r4, r2
    4714:	46d8      	mov	r8, fp
    4716:	e5f1      	b.n	42fc <__aeabi_dadd+0x108>
    4718:	0018      	movs	r0, r3
    471a:	4310      	orrs	r0, r2
    471c:	d100      	bne.n	4720 <__aeabi_dadd+0x52c>
    471e:	e763      	b.n	45e8 <__aeabi_dadd+0x3f4>
    4720:	08f8      	lsrs	r0, r7, #3
    4722:	0767      	lsls	r7, r4, #29
    4724:	4307      	orrs	r7, r0
    4726:	2080      	movs	r0, #128	; 0x80
    4728:	08e4      	lsrs	r4, r4, #3
    472a:	0300      	lsls	r0, r0, #12
    472c:	4204      	tst	r4, r0
    472e:	d008      	beq.n	4742 <__aeabi_dadd+0x54e>
    4730:	08dd      	lsrs	r5, r3, #3
    4732:	4205      	tst	r5, r0
    4734:	d105      	bne.n	4742 <__aeabi_dadd+0x54e>
    4736:	08d2      	lsrs	r2, r2, #3
    4738:	0759      	lsls	r1, r3, #29
    473a:	4311      	orrs	r1, r2
    473c:	000f      	movs	r7, r1
    473e:	002c      	movs	r4, r5
    4740:	46d8      	mov	r8, fp
    4742:	0f7b      	lsrs	r3, r7, #29
    4744:	00e4      	lsls	r4, r4, #3
    4746:	431c      	orrs	r4, r3
    4748:	00ff      	lsls	r7, r7, #3
    474a:	4e30      	ldr	r6, [pc, #192]	; (480c <__aeabi_dadd+0x618>)
    474c:	e5d6      	b.n	42fc <__aeabi_dadd+0x108>
    474e:	000c      	movs	r4, r1
    4750:	0017      	movs	r7, r2
    4752:	0006      	movs	r6, r0
    4754:	e5d2      	b.n	42fc <__aeabi_dadd+0x108>
    4756:	2b00      	cmp	r3, #0
    4758:	d038      	beq.n	47cc <__aeabi_dadd+0x5d8>
    475a:	000b      	movs	r3, r1
    475c:	4313      	orrs	r3, r2
    475e:	d100      	bne.n	4762 <__aeabi_dadd+0x56e>
    4760:	e742      	b.n	45e8 <__aeabi_dadd+0x3f4>
    4762:	08f8      	lsrs	r0, r7, #3
    4764:	0767      	lsls	r7, r4, #29
    4766:	4307      	orrs	r7, r0
    4768:	2080      	movs	r0, #128	; 0x80
    476a:	08e4      	lsrs	r4, r4, #3
    476c:	0300      	lsls	r0, r0, #12
    476e:	4204      	tst	r4, r0
    4770:	d0e7      	beq.n	4742 <__aeabi_dadd+0x54e>
    4772:	08cb      	lsrs	r3, r1, #3
    4774:	4203      	tst	r3, r0
    4776:	d1e4      	bne.n	4742 <__aeabi_dadd+0x54e>
    4778:	08d2      	lsrs	r2, r2, #3
    477a:	0749      	lsls	r1, r1, #29
    477c:	4311      	orrs	r1, r2
    477e:	000f      	movs	r7, r1
    4780:	001c      	movs	r4, r3
    4782:	e7de      	b.n	4742 <__aeabi_dadd+0x54e>
    4784:	2700      	movs	r7, #0
    4786:	2400      	movs	r4, #0
    4788:	e5d5      	b.n	4336 <__aeabi_dadd+0x142>
    478a:	2100      	movs	r1, #0
    478c:	e76b      	b.n	4666 <__aeabi_dadd+0x472>
    478e:	2500      	movs	r5, #0
    4790:	2700      	movs	r7, #0
    4792:	e5f3      	b.n	437c <__aeabi_dadd+0x188>
    4794:	464e      	mov	r6, r9
    4796:	0025      	movs	r5, r4
    4798:	3e20      	subs	r6, #32
    479a:	40f5      	lsrs	r5, r6
    479c:	464b      	mov	r3, r9
    479e:	002e      	movs	r6, r5
    47a0:	2b20      	cmp	r3, #32
    47a2:	d02d      	beq.n	4800 <__aeabi_dadd+0x60c>
    47a4:	2540      	movs	r5, #64	; 0x40
    47a6:	1aed      	subs	r5, r5, r3
    47a8:	40ac      	lsls	r4, r5
    47aa:	4327      	orrs	r7, r4
    47ac:	1e7c      	subs	r4, r7, #1
    47ae:	41a7      	sbcs	r7, r4
    47b0:	2400      	movs	r4, #0
    47b2:	4337      	orrs	r7, r6
    47b4:	e6c9      	b.n	454a <__aeabi_dadd+0x356>
    47b6:	2480      	movs	r4, #128	; 0x80
    47b8:	2500      	movs	r5, #0
    47ba:	0324      	lsls	r4, r4, #12
    47bc:	4e13      	ldr	r6, [pc, #76]	; (480c <__aeabi_dadd+0x618>)
    47be:	2700      	movs	r7, #0
    47c0:	e5dc      	b.n	437c <__aeabi_dadd+0x188>
    47c2:	4327      	orrs	r7, r4
    47c4:	1e7c      	subs	r4, r7, #1
    47c6:	41a7      	sbcs	r7, r4
    47c8:	2400      	movs	r4, #0
    47ca:	e779      	b.n	46c0 <__aeabi_dadd+0x4cc>
    47cc:	000c      	movs	r4, r1
    47ce:	0017      	movs	r7, r2
    47d0:	4e0e      	ldr	r6, [pc, #56]	; (480c <__aeabi_dadd+0x618>)
    47d2:	e593      	b.n	42fc <__aeabi_dadd+0x108>
    47d4:	000c      	movs	r4, r1
    47d6:	0017      	movs	r7, r2
    47d8:	e590      	b.n	42fc <__aeabi_dadd+0x108>
    47da:	4656      	mov	r6, sl
    47dc:	0023      	movs	r3, r4
    47de:	3e20      	subs	r6, #32
    47e0:	40f3      	lsrs	r3, r6
    47e2:	4699      	mov	r9, r3
    47e4:	4653      	mov	r3, sl
    47e6:	2b20      	cmp	r3, #32
    47e8:	d00e      	beq.n	4808 <__aeabi_dadd+0x614>
    47ea:	2340      	movs	r3, #64	; 0x40
    47ec:	4656      	mov	r6, sl
    47ee:	1b9b      	subs	r3, r3, r6
    47f0:	409c      	lsls	r4, r3
    47f2:	4327      	orrs	r7, r4
    47f4:	1e7c      	subs	r4, r7, #1
    47f6:	41a7      	sbcs	r7, r4
    47f8:	464b      	mov	r3, r9
    47fa:	2400      	movs	r4, #0
    47fc:	431f      	orrs	r7, r3
    47fe:	e75f      	b.n	46c0 <__aeabi_dadd+0x4cc>
    4800:	2400      	movs	r4, #0
    4802:	e7d2      	b.n	47aa <__aeabi_dadd+0x5b6>
    4804:	0017      	movs	r7, r2
    4806:	e5b2      	b.n	436e <__aeabi_dadd+0x17a>
    4808:	2400      	movs	r4, #0
    480a:	e7f2      	b.n	47f2 <__aeabi_dadd+0x5fe>
    480c:	000007ff 	.word	0x000007ff
    4810:	ff7fffff 	.word	0xff7fffff

00004814 <__aeabi_dmul>:
    4814:	b5f0      	push	{r4, r5, r6, r7, lr}
    4816:	4657      	mov	r7, sl
    4818:	4645      	mov	r5, r8
    481a:	46de      	mov	lr, fp
    481c:	464e      	mov	r6, r9
    481e:	b5e0      	push	{r5, r6, r7, lr}
    4820:	030c      	lsls	r4, r1, #12
    4822:	4698      	mov	r8, r3
    4824:	004e      	lsls	r6, r1, #1
    4826:	0b23      	lsrs	r3, r4, #12
    4828:	b087      	sub	sp, #28
    482a:	0007      	movs	r7, r0
    482c:	4692      	mov	sl, r2
    482e:	469b      	mov	fp, r3
    4830:	0d76      	lsrs	r6, r6, #21
    4832:	0fcd      	lsrs	r5, r1, #31
    4834:	2e00      	cmp	r6, #0
    4836:	d06b      	beq.n	4910 <__aeabi_dmul+0xfc>
    4838:	4b6d      	ldr	r3, [pc, #436]	; (49f0 <__aeabi_dmul+0x1dc>)
    483a:	429e      	cmp	r6, r3
    483c:	d035      	beq.n	48aa <__aeabi_dmul+0x96>
    483e:	2480      	movs	r4, #128	; 0x80
    4840:	465b      	mov	r3, fp
    4842:	0f42      	lsrs	r2, r0, #29
    4844:	0424      	lsls	r4, r4, #16
    4846:	00db      	lsls	r3, r3, #3
    4848:	4314      	orrs	r4, r2
    484a:	431c      	orrs	r4, r3
    484c:	00c3      	lsls	r3, r0, #3
    484e:	4699      	mov	r9, r3
    4850:	4b68      	ldr	r3, [pc, #416]	; (49f4 <__aeabi_dmul+0x1e0>)
    4852:	46a3      	mov	fp, r4
    4854:	469c      	mov	ip, r3
    4856:	2300      	movs	r3, #0
    4858:	2700      	movs	r7, #0
    485a:	4466      	add	r6, ip
    485c:	9302      	str	r3, [sp, #8]
    485e:	4643      	mov	r3, r8
    4860:	031c      	lsls	r4, r3, #12
    4862:	005a      	lsls	r2, r3, #1
    4864:	0fdb      	lsrs	r3, r3, #31
    4866:	4650      	mov	r0, sl
    4868:	0b24      	lsrs	r4, r4, #12
    486a:	0d52      	lsrs	r2, r2, #21
    486c:	4698      	mov	r8, r3
    486e:	d100      	bne.n	4872 <__aeabi_dmul+0x5e>
    4870:	e076      	b.n	4960 <__aeabi_dmul+0x14c>
    4872:	4b5f      	ldr	r3, [pc, #380]	; (49f0 <__aeabi_dmul+0x1dc>)
    4874:	429a      	cmp	r2, r3
    4876:	d06d      	beq.n	4954 <__aeabi_dmul+0x140>
    4878:	2380      	movs	r3, #128	; 0x80
    487a:	0f41      	lsrs	r1, r0, #29
    487c:	041b      	lsls	r3, r3, #16
    487e:	430b      	orrs	r3, r1
    4880:	495c      	ldr	r1, [pc, #368]	; (49f4 <__aeabi_dmul+0x1e0>)
    4882:	00e4      	lsls	r4, r4, #3
    4884:	468c      	mov	ip, r1
    4886:	431c      	orrs	r4, r3
    4888:	00c3      	lsls	r3, r0, #3
    488a:	2000      	movs	r0, #0
    488c:	4462      	add	r2, ip
    488e:	4641      	mov	r1, r8
    4890:	18b6      	adds	r6, r6, r2
    4892:	4069      	eors	r1, r5
    4894:	1c72      	adds	r2, r6, #1
    4896:	9101      	str	r1, [sp, #4]
    4898:	4694      	mov	ip, r2
    489a:	4307      	orrs	r7, r0
    489c:	2f0f      	cmp	r7, #15
    489e:	d900      	bls.n	48a2 <__aeabi_dmul+0x8e>
    48a0:	e0b0      	b.n	4a04 <__aeabi_dmul+0x1f0>
    48a2:	4a55      	ldr	r2, [pc, #340]	; (49f8 <__aeabi_dmul+0x1e4>)
    48a4:	00bf      	lsls	r7, r7, #2
    48a6:	59d2      	ldr	r2, [r2, r7]
    48a8:	4697      	mov	pc, r2
    48aa:	465b      	mov	r3, fp
    48ac:	4303      	orrs	r3, r0
    48ae:	4699      	mov	r9, r3
    48b0:	d000      	beq.n	48b4 <__aeabi_dmul+0xa0>
    48b2:	e087      	b.n	49c4 <__aeabi_dmul+0x1b0>
    48b4:	2300      	movs	r3, #0
    48b6:	469b      	mov	fp, r3
    48b8:	3302      	adds	r3, #2
    48ba:	2708      	movs	r7, #8
    48bc:	9302      	str	r3, [sp, #8]
    48be:	e7ce      	b.n	485e <__aeabi_dmul+0x4a>
    48c0:	4642      	mov	r2, r8
    48c2:	9201      	str	r2, [sp, #4]
    48c4:	2802      	cmp	r0, #2
    48c6:	d067      	beq.n	4998 <__aeabi_dmul+0x184>
    48c8:	2803      	cmp	r0, #3
    48ca:	d100      	bne.n	48ce <__aeabi_dmul+0xba>
    48cc:	e20e      	b.n	4cec <__aeabi_dmul+0x4d8>
    48ce:	2801      	cmp	r0, #1
    48d0:	d000      	beq.n	48d4 <__aeabi_dmul+0xc0>
    48d2:	e162      	b.n	4b9a <__aeabi_dmul+0x386>
    48d4:	2300      	movs	r3, #0
    48d6:	2400      	movs	r4, #0
    48d8:	2200      	movs	r2, #0
    48da:	4699      	mov	r9, r3
    48dc:	9901      	ldr	r1, [sp, #4]
    48de:	4001      	ands	r1, r0
    48e0:	b2cd      	uxtb	r5, r1
    48e2:	2100      	movs	r1, #0
    48e4:	0312      	lsls	r2, r2, #12
    48e6:	0d0b      	lsrs	r3, r1, #20
    48e8:	0b12      	lsrs	r2, r2, #12
    48ea:	051b      	lsls	r3, r3, #20
    48ec:	4313      	orrs	r3, r2
    48ee:	4a43      	ldr	r2, [pc, #268]	; (49fc <__aeabi_dmul+0x1e8>)
    48f0:	0524      	lsls	r4, r4, #20
    48f2:	4013      	ands	r3, r2
    48f4:	431c      	orrs	r4, r3
    48f6:	0064      	lsls	r4, r4, #1
    48f8:	07ed      	lsls	r5, r5, #31
    48fa:	0864      	lsrs	r4, r4, #1
    48fc:	432c      	orrs	r4, r5
    48fe:	4648      	mov	r0, r9
    4900:	0021      	movs	r1, r4
    4902:	b007      	add	sp, #28
    4904:	bc3c      	pop	{r2, r3, r4, r5}
    4906:	4690      	mov	r8, r2
    4908:	4699      	mov	r9, r3
    490a:	46a2      	mov	sl, r4
    490c:	46ab      	mov	fp, r5
    490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4910:	4303      	orrs	r3, r0
    4912:	4699      	mov	r9, r3
    4914:	d04f      	beq.n	49b6 <__aeabi_dmul+0x1a2>
    4916:	465b      	mov	r3, fp
    4918:	2b00      	cmp	r3, #0
    491a:	d100      	bne.n	491e <__aeabi_dmul+0x10a>
    491c:	e189      	b.n	4c32 <__aeabi_dmul+0x41e>
    491e:	4658      	mov	r0, fp
    4920:	f000 fe24 	bl	556c <__clzsi2>
    4924:	0003      	movs	r3, r0
    4926:	3b0b      	subs	r3, #11
    4928:	2b1c      	cmp	r3, #28
    492a:	dd00      	ble.n	492e <__aeabi_dmul+0x11a>
    492c:	e17a      	b.n	4c24 <__aeabi_dmul+0x410>
    492e:	221d      	movs	r2, #29
    4930:	1ad3      	subs	r3, r2, r3
    4932:	003a      	movs	r2, r7
    4934:	0001      	movs	r1, r0
    4936:	465c      	mov	r4, fp
    4938:	40da      	lsrs	r2, r3
    493a:	3908      	subs	r1, #8
    493c:	408c      	lsls	r4, r1
    493e:	0013      	movs	r3, r2
    4940:	408f      	lsls	r7, r1
    4942:	4323      	orrs	r3, r4
    4944:	469b      	mov	fp, r3
    4946:	46b9      	mov	r9, r7
    4948:	2300      	movs	r3, #0
    494a:	4e2d      	ldr	r6, [pc, #180]	; (4a00 <__aeabi_dmul+0x1ec>)
    494c:	2700      	movs	r7, #0
    494e:	1a36      	subs	r6, r6, r0
    4950:	9302      	str	r3, [sp, #8]
    4952:	e784      	b.n	485e <__aeabi_dmul+0x4a>
    4954:	4653      	mov	r3, sl
    4956:	4323      	orrs	r3, r4
    4958:	d12a      	bne.n	49b0 <__aeabi_dmul+0x19c>
    495a:	2400      	movs	r4, #0
    495c:	2002      	movs	r0, #2
    495e:	e796      	b.n	488e <__aeabi_dmul+0x7a>
    4960:	4653      	mov	r3, sl
    4962:	4323      	orrs	r3, r4
    4964:	d020      	beq.n	49a8 <__aeabi_dmul+0x194>
    4966:	2c00      	cmp	r4, #0
    4968:	d100      	bne.n	496c <__aeabi_dmul+0x158>
    496a:	e157      	b.n	4c1c <__aeabi_dmul+0x408>
    496c:	0020      	movs	r0, r4
    496e:	f000 fdfd 	bl	556c <__clzsi2>
    4972:	0003      	movs	r3, r0
    4974:	3b0b      	subs	r3, #11
    4976:	2b1c      	cmp	r3, #28
    4978:	dd00      	ble.n	497c <__aeabi_dmul+0x168>
    497a:	e149      	b.n	4c10 <__aeabi_dmul+0x3fc>
    497c:	211d      	movs	r1, #29
    497e:	1acb      	subs	r3, r1, r3
    4980:	4651      	mov	r1, sl
    4982:	0002      	movs	r2, r0
    4984:	40d9      	lsrs	r1, r3
    4986:	4653      	mov	r3, sl
    4988:	3a08      	subs	r2, #8
    498a:	4094      	lsls	r4, r2
    498c:	4093      	lsls	r3, r2
    498e:	430c      	orrs	r4, r1
    4990:	4a1b      	ldr	r2, [pc, #108]	; (4a00 <__aeabi_dmul+0x1ec>)
    4992:	1a12      	subs	r2, r2, r0
    4994:	2000      	movs	r0, #0
    4996:	e77a      	b.n	488e <__aeabi_dmul+0x7a>
    4998:	2501      	movs	r5, #1
    499a:	9b01      	ldr	r3, [sp, #4]
    499c:	4c14      	ldr	r4, [pc, #80]	; (49f0 <__aeabi_dmul+0x1dc>)
    499e:	401d      	ands	r5, r3
    49a0:	2300      	movs	r3, #0
    49a2:	2200      	movs	r2, #0
    49a4:	4699      	mov	r9, r3
    49a6:	e79c      	b.n	48e2 <__aeabi_dmul+0xce>
    49a8:	2400      	movs	r4, #0
    49aa:	2200      	movs	r2, #0
    49ac:	2001      	movs	r0, #1
    49ae:	e76e      	b.n	488e <__aeabi_dmul+0x7a>
    49b0:	4653      	mov	r3, sl
    49b2:	2003      	movs	r0, #3
    49b4:	e76b      	b.n	488e <__aeabi_dmul+0x7a>
    49b6:	2300      	movs	r3, #0
    49b8:	469b      	mov	fp, r3
    49ba:	3301      	adds	r3, #1
    49bc:	2704      	movs	r7, #4
    49be:	2600      	movs	r6, #0
    49c0:	9302      	str	r3, [sp, #8]
    49c2:	e74c      	b.n	485e <__aeabi_dmul+0x4a>
    49c4:	2303      	movs	r3, #3
    49c6:	4681      	mov	r9, r0
    49c8:	270c      	movs	r7, #12
    49ca:	9302      	str	r3, [sp, #8]
    49cc:	e747      	b.n	485e <__aeabi_dmul+0x4a>
    49ce:	2280      	movs	r2, #128	; 0x80
    49d0:	2300      	movs	r3, #0
    49d2:	2500      	movs	r5, #0
    49d4:	0312      	lsls	r2, r2, #12
    49d6:	4699      	mov	r9, r3
    49d8:	4c05      	ldr	r4, [pc, #20]	; (49f0 <__aeabi_dmul+0x1dc>)
    49da:	e782      	b.n	48e2 <__aeabi_dmul+0xce>
    49dc:	465c      	mov	r4, fp
    49de:	464b      	mov	r3, r9
    49e0:	9802      	ldr	r0, [sp, #8]
    49e2:	e76f      	b.n	48c4 <__aeabi_dmul+0xb0>
    49e4:	465c      	mov	r4, fp
    49e6:	464b      	mov	r3, r9
    49e8:	9501      	str	r5, [sp, #4]
    49ea:	9802      	ldr	r0, [sp, #8]
    49ec:	e76a      	b.n	48c4 <__aeabi_dmul+0xb0>
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	000007ff 	.word	0x000007ff
    49f4:	fffffc01 	.word	0xfffffc01
    49f8:	00005bd4 	.word	0x00005bd4
    49fc:	800fffff 	.word	0x800fffff
    4a00:	fffffc0d 	.word	0xfffffc0d
    4a04:	464a      	mov	r2, r9
    4a06:	4649      	mov	r1, r9
    4a08:	0c17      	lsrs	r7, r2, #16
    4a0a:	0c1a      	lsrs	r2, r3, #16
    4a0c:	041b      	lsls	r3, r3, #16
    4a0e:	0c1b      	lsrs	r3, r3, #16
    4a10:	0408      	lsls	r0, r1, #16
    4a12:	0019      	movs	r1, r3
    4a14:	0c00      	lsrs	r0, r0, #16
    4a16:	4341      	muls	r1, r0
    4a18:	0015      	movs	r5, r2
    4a1a:	4688      	mov	r8, r1
    4a1c:	0019      	movs	r1, r3
    4a1e:	437d      	muls	r5, r7
    4a20:	4379      	muls	r1, r7
    4a22:	9503      	str	r5, [sp, #12]
    4a24:	4689      	mov	r9, r1
    4a26:	0029      	movs	r1, r5
    4a28:	0015      	movs	r5, r2
    4a2a:	4345      	muls	r5, r0
    4a2c:	444d      	add	r5, r9
    4a2e:	9502      	str	r5, [sp, #8]
    4a30:	4645      	mov	r5, r8
    4a32:	0c2d      	lsrs	r5, r5, #16
    4a34:	46aa      	mov	sl, r5
    4a36:	9d02      	ldr	r5, [sp, #8]
    4a38:	4455      	add	r5, sl
    4a3a:	45a9      	cmp	r9, r5
    4a3c:	d906      	bls.n	4a4c <__aeabi_dmul+0x238>
    4a3e:	468a      	mov	sl, r1
    4a40:	2180      	movs	r1, #128	; 0x80
    4a42:	0249      	lsls	r1, r1, #9
    4a44:	4689      	mov	r9, r1
    4a46:	44ca      	add	sl, r9
    4a48:	4651      	mov	r1, sl
    4a4a:	9103      	str	r1, [sp, #12]
    4a4c:	0c29      	lsrs	r1, r5, #16
    4a4e:	9104      	str	r1, [sp, #16]
    4a50:	4641      	mov	r1, r8
    4a52:	0409      	lsls	r1, r1, #16
    4a54:	042d      	lsls	r5, r5, #16
    4a56:	0c09      	lsrs	r1, r1, #16
    4a58:	4688      	mov	r8, r1
    4a5a:	0029      	movs	r1, r5
    4a5c:	0c25      	lsrs	r5, r4, #16
    4a5e:	0424      	lsls	r4, r4, #16
    4a60:	4441      	add	r1, r8
    4a62:	0c24      	lsrs	r4, r4, #16
    4a64:	9105      	str	r1, [sp, #20]
    4a66:	0021      	movs	r1, r4
    4a68:	4341      	muls	r1, r0
    4a6a:	4688      	mov	r8, r1
    4a6c:	0021      	movs	r1, r4
    4a6e:	4379      	muls	r1, r7
    4a70:	468a      	mov	sl, r1
    4a72:	4368      	muls	r0, r5
    4a74:	4641      	mov	r1, r8
    4a76:	4450      	add	r0, sl
    4a78:	4681      	mov	r9, r0
    4a7a:	0c08      	lsrs	r0, r1, #16
    4a7c:	4448      	add	r0, r9
    4a7e:	436f      	muls	r7, r5
    4a80:	4582      	cmp	sl, r0
    4a82:	d903      	bls.n	4a8c <__aeabi_dmul+0x278>
    4a84:	2180      	movs	r1, #128	; 0x80
    4a86:	0249      	lsls	r1, r1, #9
    4a88:	4689      	mov	r9, r1
    4a8a:	444f      	add	r7, r9
    4a8c:	0c01      	lsrs	r1, r0, #16
    4a8e:	4689      	mov	r9, r1
    4a90:	0039      	movs	r1, r7
    4a92:	4449      	add	r1, r9
    4a94:	9102      	str	r1, [sp, #8]
    4a96:	4641      	mov	r1, r8
    4a98:	040f      	lsls	r7, r1, #16
    4a9a:	9904      	ldr	r1, [sp, #16]
    4a9c:	0c3f      	lsrs	r7, r7, #16
    4a9e:	4688      	mov	r8, r1
    4aa0:	0400      	lsls	r0, r0, #16
    4aa2:	19c0      	adds	r0, r0, r7
    4aa4:	4480      	add	r8, r0
    4aa6:	4641      	mov	r1, r8
    4aa8:	9104      	str	r1, [sp, #16]
    4aaa:	4659      	mov	r1, fp
    4aac:	0c0f      	lsrs	r7, r1, #16
    4aae:	0409      	lsls	r1, r1, #16
    4ab0:	0c09      	lsrs	r1, r1, #16
    4ab2:	4688      	mov	r8, r1
    4ab4:	4359      	muls	r1, r3
    4ab6:	468a      	mov	sl, r1
    4ab8:	0039      	movs	r1, r7
    4aba:	4351      	muls	r1, r2
    4abc:	4689      	mov	r9, r1
    4abe:	4641      	mov	r1, r8
    4ac0:	434a      	muls	r2, r1
    4ac2:	4651      	mov	r1, sl
    4ac4:	0c09      	lsrs	r1, r1, #16
    4ac6:	468b      	mov	fp, r1
    4ac8:	437b      	muls	r3, r7
    4aca:	18d2      	adds	r2, r2, r3
    4acc:	445a      	add	r2, fp
    4ace:	4293      	cmp	r3, r2
    4ad0:	d903      	bls.n	4ada <__aeabi_dmul+0x2c6>
    4ad2:	2380      	movs	r3, #128	; 0x80
    4ad4:	025b      	lsls	r3, r3, #9
    4ad6:	469b      	mov	fp, r3
    4ad8:	44d9      	add	r9, fp
    4ada:	4651      	mov	r1, sl
    4adc:	0409      	lsls	r1, r1, #16
    4ade:	0c09      	lsrs	r1, r1, #16
    4ae0:	468a      	mov	sl, r1
    4ae2:	4641      	mov	r1, r8
    4ae4:	4361      	muls	r1, r4
    4ae6:	437c      	muls	r4, r7
    4ae8:	0c13      	lsrs	r3, r2, #16
    4aea:	0412      	lsls	r2, r2, #16
    4aec:	444b      	add	r3, r9
    4aee:	4452      	add	r2, sl
    4af0:	46a1      	mov	r9, r4
    4af2:	468a      	mov	sl, r1
    4af4:	003c      	movs	r4, r7
    4af6:	4641      	mov	r1, r8
    4af8:	436c      	muls	r4, r5
    4afa:	434d      	muls	r5, r1
    4afc:	4651      	mov	r1, sl
    4afe:	444d      	add	r5, r9
    4b00:	0c0f      	lsrs	r7, r1, #16
    4b02:	197d      	adds	r5, r7, r5
    4b04:	45a9      	cmp	r9, r5
    4b06:	d903      	bls.n	4b10 <__aeabi_dmul+0x2fc>
    4b08:	2180      	movs	r1, #128	; 0x80
    4b0a:	0249      	lsls	r1, r1, #9
    4b0c:	4688      	mov	r8, r1
    4b0e:	4444      	add	r4, r8
    4b10:	9f04      	ldr	r7, [sp, #16]
    4b12:	9903      	ldr	r1, [sp, #12]
    4b14:	46b8      	mov	r8, r7
    4b16:	4441      	add	r1, r8
    4b18:	468b      	mov	fp, r1
    4b1a:	4583      	cmp	fp, r0
    4b1c:	4180      	sbcs	r0, r0
    4b1e:	4241      	negs	r1, r0
    4b20:	4688      	mov	r8, r1
    4b22:	4651      	mov	r1, sl
    4b24:	0408      	lsls	r0, r1, #16
    4b26:	042f      	lsls	r7, r5, #16
    4b28:	0c00      	lsrs	r0, r0, #16
    4b2a:	183f      	adds	r7, r7, r0
    4b2c:	4658      	mov	r0, fp
    4b2e:	9902      	ldr	r1, [sp, #8]
    4b30:	1810      	adds	r0, r2, r0
    4b32:	4689      	mov	r9, r1
    4b34:	4290      	cmp	r0, r2
    4b36:	4192      	sbcs	r2, r2
    4b38:	444f      	add	r7, r9
    4b3a:	46ba      	mov	sl, r7
    4b3c:	4252      	negs	r2, r2
    4b3e:	4699      	mov	r9, r3
    4b40:	4693      	mov	fp, r2
    4b42:	44c2      	add	sl, r8
    4b44:	44d1      	add	r9, sl
    4b46:	44cb      	add	fp, r9
    4b48:	428f      	cmp	r7, r1
    4b4a:	41bf      	sbcs	r7, r7
    4b4c:	45c2      	cmp	sl, r8
    4b4e:	4189      	sbcs	r1, r1
    4b50:	4599      	cmp	r9, r3
    4b52:	419b      	sbcs	r3, r3
    4b54:	4593      	cmp	fp, r2
    4b56:	4192      	sbcs	r2, r2
    4b58:	427f      	negs	r7, r7
    4b5a:	4249      	negs	r1, r1
    4b5c:	0c2d      	lsrs	r5, r5, #16
    4b5e:	4252      	negs	r2, r2
    4b60:	430f      	orrs	r7, r1
    4b62:	425b      	negs	r3, r3
    4b64:	4313      	orrs	r3, r2
    4b66:	197f      	adds	r7, r7, r5
    4b68:	18ff      	adds	r7, r7, r3
    4b6a:	465b      	mov	r3, fp
    4b6c:	193c      	adds	r4, r7, r4
    4b6e:	0ddb      	lsrs	r3, r3, #23
    4b70:	9a05      	ldr	r2, [sp, #20]
    4b72:	0264      	lsls	r4, r4, #9
    4b74:	431c      	orrs	r4, r3
    4b76:	0243      	lsls	r3, r0, #9
    4b78:	4313      	orrs	r3, r2
    4b7a:	1e5d      	subs	r5, r3, #1
    4b7c:	41ab      	sbcs	r3, r5
    4b7e:	465a      	mov	r2, fp
    4b80:	0dc0      	lsrs	r0, r0, #23
    4b82:	4303      	orrs	r3, r0
    4b84:	0252      	lsls	r2, r2, #9
    4b86:	4313      	orrs	r3, r2
    4b88:	01e2      	lsls	r2, r4, #7
    4b8a:	d556      	bpl.n	4c3a <__aeabi_dmul+0x426>
    4b8c:	2001      	movs	r0, #1
    4b8e:	085a      	lsrs	r2, r3, #1
    4b90:	4003      	ands	r3, r0
    4b92:	4313      	orrs	r3, r2
    4b94:	07e2      	lsls	r2, r4, #31
    4b96:	4313      	orrs	r3, r2
    4b98:	0864      	lsrs	r4, r4, #1
    4b9a:	485a      	ldr	r0, [pc, #360]	; (4d04 <__aeabi_dmul+0x4f0>)
    4b9c:	4460      	add	r0, ip
    4b9e:	2800      	cmp	r0, #0
    4ba0:	dd4d      	ble.n	4c3e <__aeabi_dmul+0x42a>
    4ba2:	075a      	lsls	r2, r3, #29
    4ba4:	d009      	beq.n	4bba <__aeabi_dmul+0x3a6>
    4ba6:	220f      	movs	r2, #15
    4ba8:	401a      	ands	r2, r3
    4baa:	2a04      	cmp	r2, #4
    4bac:	d005      	beq.n	4bba <__aeabi_dmul+0x3a6>
    4bae:	1d1a      	adds	r2, r3, #4
    4bb0:	429a      	cmp	r2, r3
    4bb2:	419b      	sbcs	r3, r3
    4bb4:	425b      	negs	r3, r3
    4bb6:	18e4      	adds	r4, r4, r3
    4bb8:	0013      	movs	r3, r2
    4bba:	01e2      	lsls	r2, r4, #7
    4bbc:	d504      	bpl.n	4bc8 <__aeabi_dmul+0x3b4>
    4bbe:	2080      	movs	r0, #128	; 0x80
    4bc0:	4a51      	ldr	r2, [pc, #324]	; (4d08 <__aeabi_dmul+0x4f4>)
    4bc2:	00c0      	lsls	r0, r0, #3
    4bc4:	4014      	ands	r4, r2
    4bc6:	4460      	add	r0, ip
    4bc8:	4a50      	ldr	r2, [pc, #320]	; (4d0c <__aeabi_dmul+0x4f8>)
    4bca:	4290      	cmp	r0, r2
    4bcc:	dd00      	ble.n	4bd0 <__aeabi_dmul+0x3bc>
    4bce:	e6e3      	b.n	4998 <__aeabi_dmul+0x184>
    4bd0:	2501      	movs	r5, #1
    4bd2:	08db      	lsrs	r3, r3, #3
    4bd4:	0762      	lsls	r2, r4, #29
    4bd6:	431a      	orrs	r2, r3
    4bd8:	0264      	lsls	r4, r4, #9
    4bda:	9b01      	ldr	r3, [sp, #4]
    4bdc:	4691      	mov	r9, r2
    4bde:	0b22      	lsrs	r2, r4, #12
    4be0:	0544      	lsls	r4, r0, #21
    4be2:	0d64      	lsrs	r4, r4, #21
    4be4:	401d      	ands	r5, r3
    4be6:	e67c      	b.n	48e2 <__aeabi_dmul+0xce>
    4be8:	2280      	movs	r2, #128	; 0x80
    4bea:	4659      	mov	r1, fp
    4bec:	0312      	lsls	r2, r2, #12
    4bee:	4211      	tst	r1, r2
    4bf0:	d008      	beq.n	4c04 <__aeabi_dmul+0x3f0>
    4bf2:	4214      	tst	r4, r2
    4bf4:	d106      	bne.n	4c04 <__aeabi_dmul+0x3f0>
    4bf6:	4322      	orrs	r2, r4
    4bf8:	0312      	lsls	r2, r2, #12
    4bfa:	0b12      	lsrs	r2, r2, #12
    4bfc:	4645      	mov	r5, r8
    4bfe:	4699      	mov	r9, r3
    4c00:	4c43      	ldr	r4, [pc, #268]	; (4d10 <__aeabi_dmul+0x4fc>)
    4c02:	e66e      	b.n	48e2 <__aeabi_dmul+0xce>
    4c04:	465b      	mov	r3, fp
    4c06:	431a      	orrs	r2, r3
    4c08:	0312      	lsls	r2, r2, #12
    4c0a:	0b12      	lsrs	r2, r2, #12
    4c0c:	4c40      	ldr	r4, [pc, #256]	; (4d10 <__aeabi_dmul+0x4fc>)
    4c0e:	e668      	b.n	48e2 <__aeabi_dmul+0xce>
    4c10:	0003      	movs	r3, r0
    4c12:	4654      	mov	r4, sl
    4c14:	3b28      	subs	r3, #40	; 0x28
    4c16:	409c      	lsls	r4, r3
    4c18:	2300      	movs	r3, #0
    4c1a:	e6b9      	b.n	4990 <__aeabi_dmul+0x17c>
    4c1c:	f000 fca6 	bl	556c <__clzsi2>
    4c20:	3020      	adds	r0, #32
    4c22:	e6a6      	b.n	4972 <__aeabi_dmul+0x15e>
    4c24:	0003      	movs	r3, r0
    4c26:	3b28      	subs	r3, #40	; 0x28
    4c28:	409f      	lsls	r7, r3
    4c2a:	2300      	movs	r3, #0
    4c2c:	46bb      	mov	fp, r7
    4c2e:	4699      	mov	r9, r3
    4c30:	e68a      	b.n	4948 <__aeabi_dmul+0x134>
    4c32:	f000 fc9b 	bl	556c <__clzsi2>
    4c36:	3020      	adds	r0, #32
    4c38:	e674      	b.n	4924 <__aeabi_dmul+0x110>
    4c3a:	46b4      	mov	ip, r6
    4c3c:	e7ad      	b.n	4b9a <__aeabi_dmul+0x386>
    4c3e:	2501      	movs	r5, #1
    4c40:	1a2a      	subs	r2, r5, r0
    4c42:	2a38      	cmp	r2, #56	; 0x38
    4c44:	dd06      	ble.n	4c54 <__aeabi_dmul+0x440>
    4c46:	9b01      	ldr	r3, [sp, #4]
    4c48:	2400      	movs	r4, #0
    4c4a:	401d      	ands	r5, r3
    4c4c:	2300      	movs	r3, #0
    4c4e:	2200      	movs	r2, #0
    4c50:	4699      	mov	r9, r3
    4c52:	e646      	b.n	48e2 <__aeabi_dmul+0xce>
    4c54:	2a1f      	cmp	r2, #31
    4c56:	dc21      	bgt.n	4c9c <__aeabi_dmul+0x488>
    4c58:	2520      	movs	r5, #32
    4c5a:	0020      	movs	r0, r4
    4c5c:	1aad      	subs	r5, r5, r2
    4c5e:	001e      	movs	r6, r3
    4c60:	40ab      	lsls	r3, r5
    4c62:	40a8      	lsls	r0, r5
    4c64:	40d6      	lsrs	r6, r2
    4c66:	1e5d      	subs	r5, r3, #1
    4c68:	41ab      	sbcs	r3, r5
    4c6a:	4330      	orrs	r0, r6
    4c6c:	4318      	orrs	r0, r3
    4c6e:	40d4      	lsrs	r4, r2
    4c70:	0743      	lsls	r3, r0, #29
    4c72:	d009      	beq.n	4c88 <__aeabi_dmul+0x474>
    4c74:	230f      	movs	r3, #15
    4c76:	4003      	ands	r3, r0
    4c78:	2b04      	cmp	r3, #4
    4c7a:	d005      	beq.n	4c88 <__aeabi_dmul+0x474>
    4c7c:	0003      	movs	r3, r0
    4c7e:	1d18      	adds	r0, r3, #4
    4c80:	4298      	cmp	r0, r3
    4c82:	419b      	sbcs	r3, r3
    4c84:	425b      	negs	r3, r3
    4c86:	18e4      	adds	r4, r4, r3
    4c88:	0223      	lsls	r3, r4, #8
    4c8a:	d521      	bpl.n	4cd0 <__aeabi_dmul+0x4bc>
    4c8c:	2501      	movs	r5, #1
    4c8e:	9b01      	ldr	r3, [sp, #4]
    4c90:	2401      	movs	r4, #1
    4c92:	401d      	ands	r5, r3
    4c94:	2300      	movs	r3, #0
    4c96:	2200      	movs	r2, #0
    4c98:	4699      	mov	r9, r3
    4c9a:	e622      	b.n	48e2 <__aeabi_dmul+0xce>
    4c9c:	251f      	movs	r5, #31
    4c9e:	0021      	movs	r1, r4
    4ca0:	426d      	negs	r5, r5
    4ca2:	1a28      	subs	r0, r5, r0
    4ca4:	40c1      	lsrs	r1, r0
    4ca6:	0008      	movs	r0, r1
    4ca8:	2a20      	cmp	r2, #32
    4caa:	d01d      	beq.n	4ce8 <__aeabi_dmul+0x4d4>
    4cac:	355f      	adds	r5, #95	; 0x5f
    4cae:	1aaa      	subs	r2, r5, r2
    4cb0:	4094      	lsls	r4, r2
    4cb2:	4323      	orrs	r3, r4
    4cb4:	1e5c      	subs	r4, r3, #1
    4cb6:	41a3      	sbcs	r3, r4
    4cb8:	2507      	movs	r5, #7
    4cba:	4303      	orrs	r3, r0
    4cbc:	401d      	ands	r5, r3
    4cbe:	2200      	movs	r2, #0
    4cc0:	2d00      	cmp	r5, #0
    4cc2:	d009      	beq.n	4cd8 <__aeabi_dmul+0x4c4>
    4cc4:	220f      	movs	r2, #15
    4cc6:	2400      	movs	r4, #0
    4cc8:	401a      	ands	r2, r3
    4cca:	0018      	movs	r0, r3
    4ccc:	2a04      	cmp	r2, #4
    4cce:	d1d6      	bne.n	4c7e <__aeabi_dmul+0x46a>
    4cd0:	0003      	movs	r3, r0
    4cd2:	0765      	lsls	r5, r4, #29
    4cd4:	0264      	lsls	r4, r4, #9
    4cd6:	0b22      	lsrs	r2, r4, #12
    4cd8:	08db      	lsrs	r3, r3, #3
    4cda:	432b      	orrs	r3, r5
    4cdc:	2501      	movs	r5, #1
    4cde:	4699      	mov	r9, r3
    4ce0:	9b01      	ldr	r3, [sp, #4]
    4ce2:	2400      	movs	r4, #0
    4ce4:	401d      	ands	r5, r3
    4ce6:	e5fc      	b.n	48e2 <__aeabi_dmul+0xce>
    4ce8:	2400      	movs	r4, #0
    4cea:	e7e2      	b.n	4cb2 <__aeabi_dmul+0x49e>
    4cec:	2280      	movs	r2, #128	; 0x80
    4cee:	2501      	movs	r5, #1
    4cf0:	0312      	lsls	r2, r2, #12
    4cf2:	4322      	orrs	r2, r4
    4cf4:	9901      	ldr	r1, [sp, #4]
    4cf6:	0312      	lsls	r2, r2, #12
    4cf8:	0b12      	lsrs	r2, r2, #12
    4cfa:	400d      	ands	r5, r1
    4cfc:	4699      	mov	r9, r3
    4cfe:	4c04      	ldr	r4, [pc, #16]	; (4d10 <__aeabi_dmul+0x4fc>)
    4d00:	e5ef      	b.n	48e2 <__aeabi_dmul+0xce>
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	000003ff 	.word	0x000003ff
    4d08:	feffffff 	.word	0xfeffffff
    4d0c:	000007fe 	.word	0x000007fe
    4d10:	000007ff 	.word	0x000007ff

00004d14 <__aeabi_dsub>:
    4d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d16:	4646      	mov	r6, r8
    4d18:	46d6      	mov	lr, sl
    4d1a:	464f      	mov	r7, r9
    4d1c:	030c      	lsls	r4, r1, #12
    4d1e:	b5c0      	push	{r6, r7, lr}
    4d20:	0fcd      	lsrs	r5, r1, #31
    4d22:	004e      	lsls	r6, r1, #1
    4d24:	0a61      	lsrs	r1, r4, #9
    4d26:	0f44      	lsrs	r4, r0, #29
    4d28:	430c      	orrs	r4, r1
    4d2a:	00c1      	lsls	r1, r0, #3
    4d2c:	0058      	lsls	r0, r3, #1
    4d2e:	0d40      	lsrs	r0, r0, #21
    4d30:	4684      	mov	ip, r0
    4d32:	468a      	mov	sl, r1
    4d34:	000f      	movs	r7, r1
    4d36:	0319      	lsls	r1, r3, #12
    4d38:	0f50      	lsrs	r0, r2, #29
    4d3a:	0a49      	lsrs	r1, r1, #9
    4d3c:	4301      	orrs	r1, r0
    4d3e:	48c6      	ldr	r0, [pc, #792]	; (5058 <__aeabi_dsub+0x344>)
    4d40:	0d76      	lsrs	r6, r6, #21
    4d42:	46a8      	mov	r8, r5
    4d44:	0fdb      	lsrs	r3, r3, #31
    4d46:	00d2      	lsls	r2, r2, #3
    4d48:	4584      	cmp	ip, r0
    4d4a:	d100      	bne.n	4d4e <__aeabi_dsub+0x3a>
    4d4c:	e0d8      	b.n	4f00 <__aeabi_dsub+0x1ec>
    4d4e:	2001      	movs	r0, #1
    4d50:	4043      	eors	r3, r0
    4d52:	42ab      	cmp	r3, r5
    4d54:	d100      	bne.n	4d58 <__aeabi_dsub+0x44>
    4d56:	e0a6      	b.n	4ea6 <__aeabi_dsub+0x192>
    4d58:	4660      	mov	r0, ip
    4d5a:	1a35      	subs	r5, r6, r0
    4d5c:	2d00      	cmp	r5, #0
    4d5e:	dc00      	bgt.n	4d62 <__aeabi_dsub+0x4e>
    4d60:	e105      	b.n	4f6e <__aeabi_dsub+0x25a>
    4d62:	2800      	cmp	r0, #0
    4d64:	d110      	bne.n	4d88 <__aeabi_dsub+0x74>
    4d66:	000b      	movs	r3, r1
    4d68:	4313      	orrs	r3, r2
    4d6a:	d100      	bne.n	4d6e <__aeabi_dsub+0x5a>
    4d6c:	e0d7      	b.n	4f1e <__aeabi_dsub+0x20a>
    4d6e:	1e6b      	subs	r3, r5, #1
    4d70:	2b00      	cmp	r3, #0
    4d72:	d000      	beq.n	4d76 <__aeabi_dsub+0x62>
    4d74:	e14b      	b.n	500e <__aeabi_dsub+0x2fa>
    4d76:	4653      	mov	r3, sl
    4d78:	1a9f      	subs	r7, r3, r2
    4d7a:	45ba      	cmp	sl, r7
    4d7c:	4180      	sbcs	r0, r0
    4d7e:	1a64      	subs	r4, r4, r1
    4d80:	4240      	negs	r0, r0
    4d82:	1a24      	subs	r4, r4, r0
    4d84:	2601      	movs	r6, #1
    4d86:	e01e      	b.n	4dc6 <__aeabi_dsub+0xb2>
    4d88:	4bb3      	ldr	r3, [pc, #716]	; (5058 <__aeabi_dsub+0x344>)
    4d8a:	429e      	cmp	r6, r3
    4d8c:	d048      	beq.n	4e20 <__aeabi_dsub+0x10c>
    4d8e:	2380      	movs	r3, #128	; 0x80
    4d90:	041b      	lsls	r3, r3, #16
    4d92:	4319      	orrs	r1, r3
    4d94:	2d38      	cmp	r5, #56	; 0x38
    4d96:	dd00      	ble.n	4d9a <__aeabi_dsub+0x86>
    4d98:	e119      	b.n	4fce <__aeabi_dsub+0x2ba>
    4d9a:	2d1f      	cmp	r5, #31
    4d9c:	dd00      	ble.n	4da0 <__aeabi_dsub+0x8c>
    4d9e:	e14c      	b.n	503a <__aeabi_dsub+0x326>
    4da0:	2320      	movs	r3, #32
    4da2:	000f      	movs	r7, r1
    4da4:	1b5b      	subs	r3, r3, r5
    4da6:	0010      	movs	r0, r2
    4da8:	409a      	lsls	r2, r3
    4daa:	409f      	lsls	r7, r3
    4dac:	40e8      	lsrs	r0, r5
    4dae:	1e53      	subs	r3, r2, #1
    4db0:	419a      	sbcs	r2, r3
    4db2:	40e9      	lsrs	r1, r5
    4db4:	4307      	orrs	r7, r0
    4db6:	4317      	orrs	r7, r2
    4db8:	4653      	mov	r3, sl
    4dba:	1bdf      	subs	r7, r3, r7
    4dbc:	1a61      	subs	r1, r4, r1
    4dbe:	45ba      	cmp	sl, r7
    4dc0:	41a4      	sbcs	r4, r4
    4dc2:	4264      	negs	r4, r4
    4dc4:	1b0c      	subs	r4, r1, r4
    4dc6:	0223      	lsls	r3, r4, #8
    4dc8:	d400      	bmi.n	4dcc <__aeabi_dsub+0xb8>
    4dca:	e0c5      	b.n	4f58 <__aeabi_dsub+0x244>
    4dcc:	0264      	lsls	r4, r4, #9
    4dce:	0a65      	lsrs	r5, r4, #9
    4dd0:	2d00      	cmp	r5, #0
    4dd2:	d100      	bne.n	4dd6 <__aeabi_dsub+0xc2>
    4dd4:	e0f6      	b.n	4fc4 <__aeabi_dsub+0x2b0>
    4dd6:	0028      	movs	r0, r5
    4dd8:	f000 fbc8 	bl	556c <__clzsi2>
    4ddc:	0003      	movs	r3, r0
    4dde:	3b08      	subs	r3, #8
    4de0:	2b1f      	cmp	r3, #31
    4de2:	dd00      	ble.n	4de6 <__aeabi_dsub+0xd2>
    4de4:	e0e9      	b.n	4fba <__aeabi_dsub+0x2a6>
    4de6:	2220      	movs	r2, #32
    4de8:	003c      	movs	r4, r7
    4dea:	1ad2      	subs	r2, r2, r3
    4dec:	409d      	lsls	r5, r3
    4dee:	40d4      	lsrs	r4, r2
    4df0:	409f      	lsls	r7, r3
    4df2:	4325      	orrs	r5, r4
    4df4:	429e      	cmp	r6, r3
    4df6:	dd00      	ble.n	4dfa <__aeabi_dsub+0xe6>
    4df8:	e0db      	b.n	4fb2 <__aeabi_dsub+0x29e>
    4dfa:	1b9e      	subs	r6, r3, r6
    4dfc:	1c73      	adds	r3, r6, #1
    4dfe:	2b1f      	cmp	r3, #31
    4e00:	dd00      	ble.n	4e04 <__aeabi_dsub+0xf0>
    4e02:	e10a      	b.n	501a <__aeabi_dsub+0x306>
    4e04:	2220      	movs	r2, #32
    4e06:	0038      	movs	r0, r7
    4e08:	1ad2      	subs	r2, r2, r3
    4e0a:	0029      	movs	r1, r5
    4e0c:	4097      	lsls	r7, r2
    4e0e:	002c      	movs	r4, r5
    4e10:	4091      	lsls	r1, r2
    4e12:	40d8      	lsrs	r0, r3
    4e14:	1e7a      	subs	r2, r7, #1
    4e16:	4197      	sbcs	r7, r2
    4e18:	40dc      	lsrs	r4, r3
    4e1a:	2600      	movs	r6, #0
    4e1c:	4301      	orrs	r1, r0
    4e1e:	430f      	orrs	r7, r1
    4e20:	077b      	lsls	r3, r7, #29
    4e22:	d009      	beq.n	4e38 <__aeabi_dsub+0x124>
    4e24:	230f      	movs	r3, #15
    4e26:	403b      	ands	r3, r7
    4e28:	2b04      	cmp	r3, #4
    4e2a:	d005      	beq.n	4e38 <__aeabi_dsub+0x124>
    4e2c:	1d3b      	adds	r3, r7, #4
    4e2e:	42bb      	cmp	r3, r7
    4e30:	41bf      	sbcs	r7, r7
    4e32:	427f      	negs	r7, r7
    4e34:	19e4      	adds	r4, r4, r7
    4e36:	001f      	movs	r7, r3
    4e38:	0223      	lsls	r3, r4, #8
    4e3a:	d525      	bpl.n	4e88 <__aeabi_dsub+0x174>
    4e3c:	4b86      	ldr	r3, [pc, #536]	; (5058 <__aeabi_dsub+0x344>)
    4e3e:	3601      	adds	r6, #1
    4e40:	429e      	cmp	r6, r3
    4e42:	d100      	bne.n	4e46 <__aeabi_dsub+0x132>
    4e44:	e0af      	b.n	4fa6 <__aeabi_dsub+0x292>
    4e46:	4b85      	ldr	r3, [pc, #532]	; (505c <__aeabi_dsub+0x348>)
    4e48:	2501      	movs	r5, #1
    4e4a:	401c      	ands	r4, r3
    4e4c:	4643      	mov	r3, r8
    4e4e:	0762      	lsls	r2, r4, #29
    4e50:	08ff      	lsrs	r7, r7, #3
    4e52:	0264      	lsls	r4, r4, #9
    4e54:	0576      	lsls	r6, r6, #21
    4e56:	4317      	orrs	r7, r2
    4e58:	0b24      	lsrs	r4, r4, #12
    4e5a:	0d76      	lsrs	r6, r6, #21
    4e5c:	401d      	ands	r5, r3
    4e5e:	2100      	movs	r1, #0
    4e60:	0324      	lsls	r4, r4, #12
    4e62:	0b23      	lsrs	r3, r4, #12
    4e64:	0d0c      	lsrs	r4, r1, #20
    4e66:	4a7e      	ldr	r2, [pc, #504]	; (5060 <__aeabi_dsub+0x34c>)
    4e68:	0524      	lsls	r4, r4, #20
    4e6a:	431c      	orrs	r4, r3
    4e6c:	4014      	ands	r4, r2
    4e6e:	0533      	lsls	r3, r6, #20
    4e70:	4323      	orrs	r3, r4
    4e72:	005b      	lsls	r3, r3, #1
    4e74:	07ed      	lsls	r5, r5, #31
    4e76:	085b      	lsrs	r3, r3, #1
    4e78:	432b      	orrs	r3, r5
    4e7a:	0038      	movs	r0, r7
    4e7c:	0019      	movs	r1, r3
    4e7e:	bc1c      	pop	{r2, r3, r4}
    4e80:	4690      	mov	r8, r2
    4e82:	4699      	mov	r9, r3
    4e84:	46a2      	mov	sl, r4
    4e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e88:	2501      	movs	r5, #1
    4e8a:	4643      	mov	r3, r8
    4e8c:	0762      	lsls	r2, r4, #29
    4e8e:	08ff      	lsrs	r7, r7, #3
    4e90:	4317      	orrs	r7, r2
    4e92:	08e4      	lsrs	r4, r4, #3
    4e94:	401d      	ands	r5, r3
    4e96:	4b70      	ldr	r3, [pc, #448]	; (5058 <__aeabi_dsub+0x344>)
    4e98:	429e      	cmp	r6, r3
    4e9a:	d036      	beq.n	4f0a <__aeabi_dsub+0x1f6>
    4e9c:	0324      	lsls	r4, r4, #12
    4e9e:	0576      	lsls	r6, r6, #21
    4ea0:	0b24      	lsrs	r4, r4, #12
    4ea2:	0d76      	lsrs	r6, r6, #21
    4ea4:	e7db      	b.n	4e5e <__aeabi_dsub+0x14a>
    4ea6:	4663      	mov	r3, ip
    4ea8:	1af3      	subs	r3, r6, r3
    4eaa:	2b00      	cmp	r3, #0
    4eac:	dc00      	bgt.n	4eb0 <__aeabi_dsub+0x19c>
    4eae:	e094      	b.n	4fda <__aeabi_dsub+0x2c6>
    4eb0:	4660      	mov	r0, ip
    4eb2:	2800      	cmp	r0, #0
    4eb4:	d035      	beq.n	4f22 <__aeabi_dsub+0x20e>
    4eb6:	4868      	ldr	r0, [pc, #416]	; (5058 <__aeabi_dsub+0x344>)
    4eb8:	4286      	cmp	r6, r0
    4eba:	d0b1      	beq.n	4e20 <__aeabi_dsub+0x10c>
    4ebc:	2780      	movs	r7, #128	; 0x80
    4ebe:	043f      	lsls	r7, r7, #16
    4ec0:	4339      	orrs	r1, r7
    4ec2:	2b38      	cmp	r3, #56	; 0x38
    4ec4:	dc00      	bgt.n	4ec8 <__aeabi_dsub+0x1b4>
    4ec6:	e0fd      	b.n	50c4 <__aeabi_dsub+0x3b0>
    4ec8:	430a      	orrs	r2, r1
    4eca:	0017      	movs	r7, r2
    4ecc:	2100      	movs	r1, #0
    4ece:	1e7a      	subs	r2, r7, #1
    4ed0:	4197      	sbcs	r7, r2
    4ed2:	4457      	add	r7, sl
    4ed4:	4557      	cmp	r7, sl
    4ed6:	4180      	sbcs	r0, r0
    4ed8:	1909      	adds	r1, r1, r4
    4eda:	4244      	negs	r4, r0
    4edc:	190c      	adds	r4, r1, r4
    4ede:	0223      	lsls	r3, r4, #8
    4ee0:	d53a      	bpl.n	4f58 <__aeabi_dsub+0x244>
    4ee2:	4b5d      	ldr	r3, [pc, #372]	; (5058 <__aeabi_dsub+0x344>)
    4ee4:	3601      	adds	r6, #1
    4ee6:	429e      	cmp	r6, r3
    4ee8:	d100      	bne.n	4eec <__aeabi_dsub+0x1d8>
    4eea:	e14b      	b.n	5184 <__aeabi_dsub+0x470>
    4eec:	2201      	movs	r2, #1
    4eee:	4b5b      	ldr	r3, [pc, #364]	; (505c <__aeabi_dsub+0x348>)
    4ef0:	401c      	ands	r4, r3
    4ef2:	087b      	lsrs	r3, r7, #1
    4ef4:	4017      	ands	r7, r2
    4ef6:	431f      	orrs	r7, r3
    4ef8:	07e2      	lsls	r2, r4, #31
    4efa:	4317      	orrs	r7, r2
    4efc:	0864      	lsrs	r4, r4, #1
    4efe:	e78f      	b.n	4e20 <__aeabi_dsub+0x10c>
    4f00:	0008      	movs	r0, r1
    4f02:	4310      	orrs	r0, r2
    4f04:	d000      	beq.n	4f08 <__aeabi_dsub+0x1f4>
    4f06:	e724      	b.n	4d52 <__aeabi_dsub+0x3e>
    4f08:	e721      	b.n	4d4e <__aeabi_dsub+0x3a>
    4f0a:	0023      	movs	r3, r4
    4f0c:	433b      	orrs	r3, r7
    4f0e:	d100      	bne.n	4f12 <__aeabi_dsub+0x1fe>
    4f10:	e1b9      	b.n	5286 <__aeabi_dsub+0x572>
    4f12:	2280      	movs	r2, #128	; 0x80
    4f14:	0312      	lsls	r2, r2, #12
    4f16:	4314      	orrs	r4, r2
    4f18:	0324      	lsls	r4, r4, #12
    4f1a:	0b24      	lsrs	r4, r4, #12
    4f1c:	e79f      	b.n	4e5e <__aeabi_dsub+0x14a>
    4f1e:	002e      	movs	r6, r5
    4f20:	e77e      	b.n	4e20 <__aeabi_dsub+0x10c>
    4f22:	0008      	movs	r0, r1
    4f24:	4310      	orrs	r0, r2
    4f26:	d100      	bne.n	4f2a <__aeabi_dsub+0x216>
    4f28:	e0ca      	b.n	50c0 <__aeabi_dsub+0x3ac>
    4f2a:	1e58      	subs	r0, r3, #1
    4f2c:	4684      	mov	ip, r0
    4f2e:	2800      	cmp	r0, #0
    4f30:	d000      	beq.n	4f34 <__aeabi_dsub+0x220>
    4f32:	e0e7      	b.n	5104 <__aeabi_dsub+0x3f0>
    4f34:	4452      	add	r2, sl
    4f36:	4552      	cmp	r2, sl
    4f38:	4180      	sbcs	r0, r0
    4f3a:	1864      	adds	r4, r4, r1
    4f3c:	4240      	negs	r0, r0
    4f3e:	1824      	adds	r4, r4, r0
    4f40:	0017      	movs	r7, r2
    4f42:	2601      	movs	r6, #1
    4f44:	0223      	lsls	r3, r4, #8
    4f46:	d507      	bpl.n	4f58 <__aeabi_dsub+0x244>
    4f48:	2602      	movs	r6, #2
    4f4a:	e7cf      	b.n	4eec <__aeabi_dsub+0x1d8>
    4f4c:	4664      	mov	r4, ip
    4f4e:	432c      	orrs	r4, r5
    4f50:	d100      	bne.n	4f54 <__aeabi_dsub+0x240>
    4f52:	e1b3      	b.n	52bc <__aeabi_dsub+0x5a8>
    4f54:	002c      	movs	r4, r5
    4f56:	4667      	mov	r7, ip
    4f58:	077b      	lsls	r3, r7, #29
    4f5a:	d000      	beq.n	4f5e <__aeabi_dsub+0x24a>
    4f5c:	e762      	b.n	4e24 <__aeabi_dsub+0x110>
    4f5e:	0763      	lsls	r3, r4, #29
    4f60:	08ff      	lsrs	r7, r7, #3
    4f62:	431f      	orrs	r7, r3
    4f64:	2501      	movs	r5, #1
    4f66:	4643      	mov	r3, r8
    4f68:	08e4      	lsrs	r4, r4, #3
    4f6a:	401d      	ands	r5, r3
    4f6c:	e793      	b.n	4e96 <__aeabi_dsub+0x182>
    4f6e:	2d00      	cmp	r5, #0
    4f70:	d178      	bne.n	5064 <__aeabi_dsub+0x350>
    4f72:	1c75      	adds	r5, r6, #1
    4f74:	056d      	lsls	r5, r5, #21
    4f76:	0d6d      	lsrs	r5, r5, #21
    4f78:	2d01      	cmp	r5, #1
    4f7a:	dc00      	bgt.n	4f7e <__aeabi_dsub+0x26a>
    4f7c:	e0f2      	b.n	5164 <__aeabi_dsub+0x450>
    4f7e:	4650      	mov	r0, sl
    4f80:	1a80      	subs	r0, r0, r2
    4f82:	4582      	cmp	sl, r0
    4f84:	41bf      	sbcs	r7, r7
    4f86:	1a65      	subs	r5, r4, r1
    4f88:	427f      	negs	r7, r7
    4f8a:	1bed      	subs	r5, r5, r7
    4f8c:	4684      	mov	ip, r0
    4f8e:	0228      	lsls	r0, r5, #8
    4f90:	d400      	bmi.n	4f94 <__aeabi_dsub+0x280>
    4f92:	e08c      	b.n	50ae <__aeabi_dsub+0x39a>
    4f94:	4650      	mov	r0, sl
    4f96:	1a17      	subs	r7, r2, r0
    4f98:	42ba      	cmp	r2, r7
    4f9a:	4192      	sbcs	r2, r2
    4f9c:	1b0c      	subs	r4, r1, r4
    4f9e:	4255      	negs	r5, r2
    4fa0:	1b65      	subs	r5, r4, r5
    4fa2:	4698      	mov	r8, r3
    4fa4:	e714      	b.n	4dd0 <__aeabi_dsub+0xbc>
    4fa6:	2501      	movs	r5, #1
    4fa8:	4643      	mov	r3, r8
    4faa:	2400      	movs	r4, #0
    4fac:	401d      	ands	r5, r3
    4fae:	2700      	movs	r7, #0
    4fb0:	e755      	b.n	4e5e <__aeabi_dsub+0x14a>
    4fb2:	4c2a      	ldr	r4, [pc, #168]	; (505c <__aeabi_dsub+0x348>)
    4fb4:	1af6      	subs	r6, r6, r3
    4fb6:	402c      	ands	r4, r5
    4fb8:	e732      	b.n	4e20 <__aeabi_dsub+0x10c>
    4fba:	003d      	movs	r5, r7
    4fbc:	3828      	subs	r0, #40	; 0x28
    4fbe:	4085      	lsls	r5, r0
    4fc0:	2700      	movs	r7, #0
    4fc2:	e717      	b.n	4df4 <__aeabi_dsub+0xe0>
    4fc4:	0038      	movs	r0, r7
    4fc6:	f000 fad1 	bl	556c <__clzsi2>
    4fca:	3020      	adds	r0, #32
    4fcc:	e706      	b.n	4ddc <__aeabi_dsub+0xc8>
    4fce:	430a      	orrs	r2, r1
    4fd0:	0017      	movs	r7, r2
    4fd2:	2100      	movs	r1, #0
    4fd4:	1e7a      	subs	r2, r7, #1
    4fd6:	4197      	sbcs	r7, r2
    4fd8:	e6ee      	b.n	4db8 <__aeabi_dsub+0xa4>
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d000      	beq.n	4fe0 <__aeabi_dsub+0x2cc>
    4fde:	e0e5      	b.n	51ac <__aeabi_dsub+0x498>
    4fe0:	1c73      	adds	r3, r6, #1
    4fe2:	469c      	mov	ip, r3
    4fe4:	055b      	lsls	r3, r3, #21
    4fe6:	0d5b      	lsrs	r3, r3, #21
    4fe8:	2b01      	cmp	r3, #1
    4fea:	dc00      	bgt.n	4fee <__aeabi_dsub+0x2da>
    4fec:	e09f      	b.n	512e <__aeabi_dsub+0x41a>
    4fee:	4b1a      	ldr	r3, [pc, #104]	; (5058 <__aeabi_dsub+0x344>)
    4ff0:	459c      	cmp	ip, r3
    4ff2:	d100      	bne.n	4ff6 <__aeabi_dsub+0x2e2>
    4ff4:	e0c5      	b.n	5182 <__aeabi_dsub+0x46e>
    4ff6:	4452      	add	r2, sl
    4ff8:	4552      	cmp	r2, sl
    4ffa:	4180      	sbcs	r0, r0
    4ffc:	1864      	adds	r4, r4, r1
    4ffe:	4240      	negs	r0, r0
    5000:	1824      	adds	r4, r4, r0
    5002:	07e7      	lsls	r7, r4, #31
    5004:	0852      	lsrs	r2, r2, #1
    5006:	4317      	orrs	r7, r2
    5008:	0864      	lsrs	r4, r4, #1
    500a:	4666      	mov	r6, ip
    500c:	e708      	b.n	4e20 <__aeabi_dsub+0x10c>
    500e:	4812      	ldr	r0, [pc, #72]	; (5058 <__aeabi_dsub+0x344>)
    5010:	4285      	cmp	r5, r0
    5012:	d100      	bne.n	5016 <__aeabi_dsub+0x302>
    5014:	e085      	b.n	5122 <__aeabi_dsub+0x40e>
    5016:	001d      	movs	r5, r3
    5018:	e6bc      	b.n	4d94 <__aeabi_dsub+0x80>
    501a:	0029      	movs	r1, r5
    501c:	3e1f      	subs	r6, #31
    501e:	40f1      	lsrs	r1, r6
    5020:	2b20      	cmp	r3, #32
    5022:	d100      	bne.n	5026 <__aeabi_dsub+0x312>
    5024:	e07f      	b.n	5126 <__aeabi_dsub+0x412>
    5026:	2240      	movs	r2, #64	; 0x40
    5028:	1ad3      	subs	r3, r2, r3
    502a:	409d      	lsls	r5, r3
    502c:	432f      	orrs	r7, r5
    502e:	1e7d      	subs	r5, r7, #1
    5030:	41af      	sbcs	r7, r5
    5032:	2400      	movs	r4, #0
    5034:	430f      	orrs	r7, r1
    5036:	2600      	movs	r6, #0
    5038:	e78e      	b.n	4f58 <__aeabi_dsub+0x244>
    503a:	002b      	movs	r3, r5
    503c:	000f      	movs	r7, r1
    503e:	3b20      	subs	r3, #32
    5040:	40df      	lsrs	r7, r3
    5042:	2d20      	cmp	r5, #32
    5044:	d071      	beq.n	512a <__aeabi_dsub+0x416>
    5046:	2340      	movs	r3, #64	; 0x40
    5048:	1b5d      	subs	r5, r3, r5
    504a:	40a9      	lsls	r1, r5
    504c:	430a      	orrs	r2, r1
    504e:	1e51      	subs	r1, r2, #1
    5050:	418a      	sbcs	r2, r1
    5052:	2100      	movs	r1, #0
    5054:	4317      	orrs	r7, r2
    5056:	e6af      	b.n	4db8 <__aeabi_dsub+0xa4>
    5058:	000007ff 	.word	0x000007ff
    505c:	ff7fffff 	.word	0xff7fffff
    5060:	800fffff 	.word	0x800fffff
    5064:	2e00      	cmp	r6, #0
    5066:	d03e      	beq.n	50e6 <__aeabi_dsub+0x3d2>
    5068:	4eb3      	ldr	r6, [pc, #716]	; (5338 <__aeabi_dsub+0x624>)
    506a:	45b4      	cmp	ip, r6
    506c:	d045      	beq.n	50fa <__aeabi_dsub+0x3e6>
    506e:	2680      	movs	r6, #128	; 0x80
    5070:	0436      	lsls	r6, r6, #16
    5072:	426d      	negs	r5, r5
    5074:	4334      	orrs	r4, r6
    5076:	2d38      	cmp	r5, #56	; 0x38
    5078:	dd00      	ble.n	507c <__aeabi_dsub+0x368>
    507a:	e0a8      	b.n	51ce <__aeabi_dsub+0x4ba>
    507c:	2d1f      	cmp	r5, #31
    507e:	dd00      	ble.n	5082 <__aeabi_dsub+0x36e>
    5080:	e11f      	b.n	52c2 <__aeabi_dsub+0x5ae>
    5082:	2620      	movs	r6, #32
    5084:	0027      	movs	r7, r4
    5086:	4650      	mov	r0, sl
    5088:	1b76      	subs	r6, r6, r5
    508a:	40b7      	lsls	r7, r6
    508c:	40e8      	lsrs	r0, r5
    508e:	4307      	orrs	r7, r0
    5090:	4650      	mov	r0, sl
    5092:	40b0      	lsls	r0, r6
    5094:	1e46      	subs	r6, r0, #1
    5096:	41b0      	sbcs	r0, r6
    5098:	40ec      	lsrs	r4, r5
    509a:	4338      	orrs	r0, r7
    509c:	1a17      	subs	r7, r2, r0
    509e:	42ba      	cmp	r2, r7
    50a0:	4192      	sbcs	r2, r2
    50a2:	1b0c      	subs	r4, r1, r4
    50a4:	4252      	negs	r2, r2
    50a6:	1aa4      	subs	r4, r4, r2
    50a8:	4666      	mov	r6, ip
    50aa:	4698      	mov	r8, r3
    50ac:	e68b      	b.n	4dc6 <__aeabi_dsub+0xb2>
    50ae:	4664      	mov	r4, ip
    50b0:	4667      	mov	r7, ip
    50b2:	432c      	orrs	r4, r5
    50b4:	d000      	beq.n	50b8 <__aeabi_dsub+0x3a4>
    50b6:	e68b      	b.n	4dd0 <__aeabi_dsub+0xbc>
    50b8:	2500      	movs	r5, #0
    50ba:	2600      	movs	r6, #0
    50bc:	2700      	movs	r7, #0
    50be:	e6ea      	b.n	4e96 <__aeabi_dsub+0x182>
    50c0:	001e      	movs	r6, r3
    50c2:	e6ad      	b.n	4e20 <__aeabi_dsub+0x10c>
    50c4:	2b1f      	cmp	r3, #31
    50c6:	dc60      	bgt.n	518a <__aeabi_dsub+0x476>
    50c8:	2720      	movs	r7, #32
    50ca:	1af8      	subs	r0, r7, r3
    50cc:	000f      	movs	r7, r1
    50ce:	4684      	mov	ip, r0
    50d0:	4087      	lsls	r7, r0
    50d2:	0010      	movs	r0, r2
    50d4:	40d8      	lsrs	r0, r3
    50d6:	4307      	orrs	r7, r0
    50d8:	4660      	mov	r0, ip
    50da:	4082      	lsls	r2, r0
    50dc:	1e50      	subs	r0, r2, #1
    50de:	4182      	sbcs	r2, r0
    50e0:	40d9      	lsrs	r1, r3
    50e2:	4317      	orrs	r7, r2
    50e4:	e6f5      	b.n	4ed2 <__aeabi_dsub+0x1be>
    50e6:	0026      	movs	r6, r4
    50e8:	4650      	mov	r0, sl
    50ea:	4306      	orrs	r6, r0
    50ec:	d005      	beq.n	50fa <__aeabi_dsub+0x3e6>
    50ee:	43ed      	mvns	r5, r5
    50f0:	2d00      	cmp	r5, #0
    50f2:	d0d3      	beq.n	509c <__aeabi_dsub+0x388>
    50f4:	4e90      	ldr	r6, [pc, #576]	; (5338 <__aeabi_dsub+0x624>)
    50f6:	45b4      	cmp	ip, r6
    50f8:	d1bd      	bne.n	5076 <__aeabi_dsub+0x362>
    50fa:	000c      	movs	r4, r1
    50fc:	0017      	movs	r7, r2
    50fe:	4666      	mov	r6, ip
    5100:	4698      	mov	r8, r3
    5102:	e68d      	b.n	4e20 <__aeabi_dsub+0x10c>
    5104:	488c      	ldr	r0, [pc, #560]	; (5338 <__aeabi_dsub+0x624>)
    5106:	4283      	cmp	r3, r0
    5108:	d00b      	beq.n	5122 <__aeabi_dsub+0x40e>
    510a:	4663      	mov	r3, ip
    510c:	e6d9      	b.n	4ec2 <__aeabi_dsub+0x1ae>
    510e:	2d00      	cmp	r5, #0
    5110:	d000      	beq.n	5114 <__aeabi_dsub+0x400>
    5112:	e096      	b.n	5242 <__aeabi_dsub+0x52e>
    5114:	0008      	movs	r0, r1
    5116:	4310      	orrs	r0, r2
    5118:	d100      	bne.n	511c <__aeabi_dsub+0x408>
    511a:	e0e2      	b.n	52e2 <__aeabi_dsub+0x5ce>
    511c:	000c      	movs	r4, r1
    511e:	0017      	movs	r7, r2
    5120:	4698      	mov	r8, r3
    5122:	4e85      	ldr	r6, [pc, #532]	; (5338 <__aeabi_dsub+0x624>)
    5124:	e67c      	b.n	4e20 <__aeabi_dsub+0x10c>
    5126:	2500      	movs	r5, #0
    5128:	e780      	b.n	502c <__aeabi_dsub+0x318>
    512a:	2100      	movs	r1, #0
    512c:	e78e      	b.n	504c <__aeabi_dsub+0x338>
    512e:	0023      	movs	r3, r4
    5130:	4650      	mov	r0, sl
    5132:	4303      	orrs	r3, r0
    5134:	2e00      	cmp	r6, #0
    5136:	d000      	beq.n	513a <__aeabi_dsub+0x426>
    5138:	e0a8      	b.n	528c <__aeabi_dsub+0x578>
    513a:	2b00      	cmp	r3, #0
    513c:	d100      	bne.n	5140 <__aeabi_dsub+0x42c>
    513e:	e0de      	b.n	52fe <__aeabi_dsub+0x5ea>
    5140:	000b      	movs	r3, r1
    5142:	4313      	orrs	r3, r2
    5144:	d100      	bne.n	5148 <__aeabi_dsub+0x434>
    5146:	e66b      	b.n	4e20 <__aeabi_dsub+0x10c>
    5148:	4452      	add	r2, sl
    514a:	4552      	cmp	r2, sl
    514c:	4180      	sbcs	r0, r0
    514e:	1864      	adds	r4, r4, r1
    5150:	4240      	negs	r0, r0
    5152:	1824      	adds	r4, r4, r0
    5154:	0017      	movs	r7, r2
    5156:	0223      	lsls	r3, r4, #8
    5158:	d400      	bmi.n	515c <__aeabi_dsub+0x448>
    515a:	e6fd      	b.n	4f58 <__aeabi_dsub+0x244>
    515c:	4b77      	ldr	r3, [pc, #476]	; (533c <__aeabi_dsub+0x628>)
    515e:	4666      	mov	r6, ip
    5160:	401c      	ands	r4, r3
    5162:	e65d      	b.n	4e20 <__aeabi_dsub+0x10c>
    5164:	0025      	movs	r5, r4
    5166:	4650      	mov	r0, sl
    5168:	4305      	orrs	r5, r0
    516a:	2e00      	cmp	r6, #0
    516c:	d1cf      	bne.n	510e <__aeabi_dsub+0x3fa>
    516e:	2d00      	cmp	r5, #0
    5170:	d14f      	bne.n	5212 <__aeabi_dsub+0x4fe>
    5172:	000c      	movs	r4, r1
    5174:	4314      	orrs	r4, r2
    5176:	d100      	bne.n	517a <__aeabi_dsub+0x466>
    5178:	e0a0      	b.n	52bc <__aeabi_dsub+0x5a8>
    517a:	000c      	movs	r4, r1
    517c:	0017      	movs	r7, r2
    517e:	4698      	mov	r8, r3
    5180:	e64e      	b.n	4e20 <__aeabi_dsub+0x10c>
    5182:	4666      	mov	r6, ip
    5184:	2400      	movs	r4, #0
    5186:	2700      	movs	r7, #0
    5188:	e685      	b.n	4e96 <__aeabi_dsub+0x182>
    518a:	001f      	movs	r7, r3
    518c:	0008      	movs	r0, r1
    518e:	3f20      	subs	r7, #32
    5190:	40f8      	lsrs	r0, r7
    5192:	0007      	movs	r7, r0
    5194:	2b20      	cmp	r3, #32
    5196:	d100      	bne.n	519a <__aeabi_dsub+0x486>
    5198:	e08e      	b.n	52b8 <__aeabi_dsub+0x5a4>
    519a:	2040      	movs	r0, #64	; 0x40
    519c:	1ac3      	subs	r3, r0, r3
    519e:	4099      	lsls	r1, r3
    51a0:	430a      	orrs	r2, r1
    51a2:	1e51      	subs	r1, r2, #1
    51a4:	418a      	sbcs	r2, r1
    51a6:	2100      	movs	r1, #0
    51a8:	4317      	orrs	r7, r2
    51aa:	e692      	b.n	4ed2 <__aeabi_dsub+0x1be>
    51ac:	2e00      	cmp	r6, #0
    51ae:	d114      	bne.n	51da <__aeabi_dsub+0x4c6>
    51b0:	0026      	movs	r6, r4
    51b2:	4650      	mov	r0, sl
    51b4:	4306      	orrs	r6, r0
    51b6:	d062      	beq.n	527e <__aeabi_dsub+0x56a>
    51b8:	43db      	mvns	r3, r3
    51ba:	2b00      	cmp	r3, #0
    51bc:	d15c      	bne.n	5278 <__aeabi_dsub+0x564>
    51be:	1887      	adds	r7, r0, r2
    51c0:	4297      	cmp	r7, r2
    51c2:	4192      	sbcs	r2, r2
    51c4:	1864      	adds	r4, r4, r1
    51c6:	4252      	negs	r2, r2
    51c8:	18a4      	adds	r4, r4, r2
    51ca:	4666      	mov	r6, ip
    51cc:	e687      	b.n	4ede <__aeabi_dsub+0x1ca>
    51ce:	4650      	mov	r0, sl
    51d0:	4320      	orrs	r0, r4
    51d2:	1e44      	subs	r4, r0, #1
    51d4:	41a0      	sbcs	r0, r4
    51d6:	2400      	movs	r4, #0
    51d8:	e760      	b.n	509c <__aeabi_dsub+0x388>
    51da:	4e57      	ldr	r6, [pc, #348]	; (5338 <__aeabi_dsub+0x624>)
    51dc:	45b4      	cmp	ip, r6
    51de:	d04e      	beq.n	527e <__aeabi_dsub+0x56a>
    51e0:	2680      	movs	r6, #128	; 0x80
    51e2:	0436      	lsls	r6, r6, #16
    51e4:	425b      	negs	r3, r3
    51e6:	4334      	orrs	r4, r6
    51e8:	2b38      	cmp	r3, #56	; 0x38
    51ea:	dd00      	ble.n	51ee <__aeabi_dsub+0x4da>
    51ec:	e07f      	b.n	52ee <__aeabi_dsub+0x5da>
    51ee:	2b1f      	cmp	r3, #31
    51f0:	dd00      	ble.n	51f4 <__aeabi_dsub+0x4e0>
    51f2:	e08b      	b.n	530c <__aeabi_dsub+0x5f8>
    51f4:	2620      	movs	r6, #32
    51f6:	0027      	movs	r7, r4
    51f8:	4650      	mov	r0, sl
    51fa:	1af6      	subs	r6, r6, r3
    51fc:	40b7      	lsls	r7, r6
    51fe:	40d8      	lsrs	r0, r3
    5200:	4307      	orrs	r7, r0
    5202:	4650      	mov	r0, sl
    5204:	40b0      	lsls	r0, r6
    5206:	1e46      	subs	r6, r0, #1
    5208:	41b0      	sbcs	r0, r6
    520a:	4307      	orrs	r7, r0
    520c:	40dc      	lsrs	r4, r3
    520e:	18bf      	adds	r7, r7, r2
    5210:	e7d6      	b.n	51c0 <__aeabi_dsub+0x4ac>
    5212:	000d      	movs	r5, r1
    5214:	4315      	orrs	r5, r2
    5216:	d100      	bne.n	521a <__aeabi_dsub+0x506>
    5218:	e602      	b.n	4e20 <__aeabi_dsub+0x10c>
    521a:	4650      	mov	r0, sl
    521c:	1a80      	subs	r0, r0, r2
    521e:	4582      	cmp	sl, r0
    5220:	41bf      	sbcs	r7, r7
    5222:	1a65      	subs	r5, r4, r1
    5224:	427f      	negs	r7, r7
    5226:	1bed      	subs	r5, r5, r7
    5228:	4684      	mov	ip, r0
    522a:	0228      	lsls	r0, r5, #8
    522c:	d400      	bmi.n	5230 <__aeabi_dsub+0x51c>
    522e:	e68d      	b.n	4f4c <__aeabi_dsub+0x238>
    5230:	4650      	mov	r0, sl
    5232:	1a17      	subs	r7, r2, r0
    5234:	42ba      	cmp	r2, r7
    5236:	4192      	sbcs	r2, r2
    5238:	1b0c      	subs	r4, r1, r4
    523a:	4252      	negs	r2, r2
    523c:	1aa4      	subs	r4, r4, r2
    523e:	4698      	mov	r8, r3
    5240:	e5ee      	b.n	4e20 <__aeabi_dsub+0x10c>
    5242:	000d      	movs	r5, r1
    5244:	4315      	orrs	r5, r2
    5246:	d100      	bne.n	524a <__aeabi_dsub+0x536>
    5248:	e76b      	b.n	5122 <__aeabi_dsub+0x40e>
    524a:	4650      	mov	r0, sl
    524c:	0767      	lsls	r7, r4, #29
    524e:	08c0      	lsrs	r0, r0, #3
    5250:	4307      	orrs	r7, r0
    5252:	2080      	movs	r0, #128	; 0x80
    5254:	08e4      	lsrs	r4, r4, #3
    5256:	0300      	lsls	r0, r0, #12
    5258:	4204      	tst	r4, r0
    525a:	d007      	beq.n	526c <__aeabi_dsub+0x558>
    525c:	08cd      	lsrs	r5, r1, #3
    525e:	4205      	tst	r5, r0
    5260:	d104      	bne.n	526c <__aeabi_dsub+0x558>
    5262:	002c      	movs	r4, r5
    5264:	4698      	mov	r8, r3
    5266:	08d7      	lsrs	r7, r2, #3
    5268:	0749      	lsls	r1, r1, #29
    526a:	430f      	orrs	r7, r1
    526c:	0f7b      	lsrs	r3, r7, #29
    526e:	00e4      	lsls	r4, r4, #3
    5270:	431c      	orrs	r4, r3
    5272:	00ff      	lsls	r7, r7, #3
    5274:	4e30      	ldr	r6, [pc, #192]	; (5338 <__aeabi_dsub+0x624>)
    5276:	e5d3      	b.n	4e20 <__aeabi_dsub+0x10c>
    5278:	4e2f      	ldr	r6, [pc, #188]	; (5338 <__aeabi_dsub+0x624>)
    527a:	45b4      	cmp	ip, r6
    527c:	d1b4      	bne.n	51e8 <__aeabi_dsub+0x4d4>
    527e:	000c      	movs	r4, r1
    5280:	0017      	movs	r7, r2
    5282:	4666      	mov	r6, ip
    5284:	e5cc      	b.n	4e20 <__aeabi_dsub+0x10c>
    5286:	2700      	movs	r7, #0
    5288:	2400      	movs	r4, #0
    528a:	e5e8      	b.n	4e5e <__aeabi_dsub+0x14a>
    528c:	2b00      	cmp	r3, #0
    528e:	d039      	beq.n	5304 <__aeabi_dsub+0x5f0>
    5290:	000b      	movs	r3, r1
    5292:	4313      	orrs	r3, r2
    5294:	d100      	bne.n	5298 <__aeabi_dsub+0x584>
    5296:	e744      	b.n	5122 <__aeabi_dsub+0x40e>
    5298:	08c0      	lsrs	r0, r0, #3
    529a:	0767      	lsls	r7, r4, #29
    529c:	4307      	orrs	r7, r0
    529e:	2080      	movs	r0, #128	; 0x80
    52a0:	08e4      	lsrs	r4, r4, #3
    52a2:	0300      	lsls	r0, r0, #12
    52a4:	4204      	tst	r4, r0
    52a6:	d0e1      	beq.n	526c <__aeabi_dsub+0x558>
    52a8:	08cb      	lsrs	r3, r1, #3
    52aa:	4203      	tst	r3, r0
    52ac:	d1de      	bne.n	526c <__aeabi_dsub+0x558>
    52ae:	08d7      	lsrs	r7, r2, #3
    52b0:	0749      	lsls	r1, r1, #29
    52b2:	430f      	orrs	r7, r1
    52b4:	001c      	movs	r4, r3
    52b6:	e7d9      	b.n	526c <__aeabi_dsub+0x558>
    52b8:	2100      	movs	r1, #0
    52ba:	e771      	b.n	51a0 <__aeabi_dsub+0x48c>
    52bc:	2500      	movs	r5, #0
    52be:	2700      	movs	r7, #0
    52c0:	e5e9      	b.n	4e96 <__aeabi_dsub+0x182>
    52c2:	002e      	movs	r6, r5
    52c4:	0027      	movs	r7, r4
    52c6:	3e20      	subs	r6, #32
    52c8:	40f7      	lsrs	r7, r6
    52ca:	2d20      	cmp	r5, #32
    52cc:	d02f      	beq.n	532e <__aeabi_dsub+0x61a>
    52ce:	2640      	movs	r6, #64	; 0x40
    52d0:	1b75      	subs	r5, r6, r5
    52d2:	40ac      	lsls	r4, r5
    52d4:	4650      	mov	r0, sl
    52d6:	4320      	orrs	r0, r4
    52d8:	1e44      	subs	r4, r0, #1
    52da:	41a0      	sbcs	r0, r4
    52dc:	2400      	movs	r4, #0
    52de:	4338      	orrs	r0, r7
    52e0:	e6dc      	b.n	509c <__aeabi_dsub+0x388>
    52e2:	2480      	movs	r4, #128	; 0x80
    52e4:	2500      	movs	r5, #0
    52e6:	0324      	lsls	r4, r4, #12
    52e8:	4e13      	ldr	r6, [pc, #76]	; (5338 <__aeabi_dsub+0x624>)
    52ea:	2700      	movs	r7, #0
    52ec:	e5d3      	b.n	4e96 <__aeabi_dsub+0x182>
    52ee:	4650      	mov	r0, sl
    52f0:	4320      	orrs	r0, r4
    52f2:	0007      	movs	r7, r0
    52f4:	1e78      	subs	r0, r7, #1
    52f6:	4187      	sbcs	r7, r0
    52f8:	2400      	movs	r4, #0
    52fa:	18bf      	adds	r7, r7, r2
    52fc:	e760      	b.n	51c0 <__aeabi_dsub+0x4ac>
    52fe:	000c      	movs	r4, r1
    5300:	0017      	movs	r7, r2
    5302:	e58d      	b.n	4e20 <__aeabi_dsub+0x10c>
    5304:	000c      	movs	r4, r1
    5306:	0017      	movs	r7, r2
    5308:	4e0b      	ldr	r6, [pc, #44]	; (5338 <__aeabi_dsub+0x624>)
    530a:	e589      	b.n	4e20 <__aeabi_dsub+0x10c>
    530c:	001e      	movs	r6, r3
    530e:	0027      	movs	r7, r4
    5310:	3e20      	subs	r6, #32
    5312:	40f7      	lsrs	r7, r6
    5314:	2b20      	cmp	r3, #32
    5316:	d00c      	beq.n	5332 <__aeabi_dsub+0x61e>
    5318:	2640      	movs	r6, #64	; 0x40
    531a:	1af3      	subs	r3, r6, r3
    531c:	409c      	lsls	r4, r3
    531e:	4650      	mov	r0, sl
    5320:	4320      	orrs	r0, r4
    5322:	1e44      	subs	r4, r0, #1
    5324:	41a0      	sbcs	r0, r4
    5326:	4307      	orrs	r7, r0
    5328:	2400      	movs	r4, #0
    532a:	18bf      	adds	r7, r7, r2
    532c:	e748      	b.n	51c0 <__aeabi_dsub+0x4ac>
    532e:	2400      	movs	r4, #0
    5330:	e7d0      	b.n	52d4 <__aeabi_dsub+0x5c0>
    5332:	2400      	movs	r4, #0
    5334:	e7f3      	b.n	531e <__aeabi_dsub+0x60a>
    5336:	46c0      	nop			; (mov r8, r8)
    5338:	000007ff 	.word	0x000007ff
    533c:	ff7fffff 	.word	0xff7fffff

00005340 <__aeabi_f2d>:
    5340:	0041      	lsls	r1, r0, #1
    5342:	0e09      	lsrs	r1, r1, #24
    5344:	1c4b      	adds	r3, r1, #1
    5346:	b570      	push	{r4, r5, r6, lr}
    5348:	b2db      	uxtb	r3, r3
    534a:	0246      	lsls	r6, r0, #9
    534c:	0a75      	lsrs	r5, r6, #9
    534e:	0fc4      	lsrs	r4, r0, #31
    5350:	2b01      	cmp	r3, #1
    5352:	dd14      	ble.n	537e <__aeabi_f2d+0x3e>
    5354:	23e0      	movs	r3, #224	; 0xe0
    5356:	009b      	lsls	r3, r3, #2
    5358:	076d      	lsls	r5, r5, #29
    535a:	0b36      	lsrs	r6, r6, #12
    535c:	18cb      	adds	r3, r1, r3
    535e:	2100      	movs	r1, #0
    5360:	0d0a      	lsrs	r2, r1, #20
    5362:	0028      	movs	r0, r5
    5364:	0512      	lsls	r2, r2, #20
    5366:	4d1c      	ldr	r5, [pc, #112]	; (53d8 <__aeabi_f2d+0x98>)
    5368:	4332      	orrs	r2, r6
    536a:	055b      	lsls	r3, r3, #21
    536c:	402a      	ands	r2, r5
    536e:	085b      	lsrs	r3, r3, #1
    5370:	4313      	orrs	r3, r2
    5372:	005b      	lsls	r3, r3, #1
    5374:	07e4      	lsls	r4, r4, #31
    5376:	085b      	lsrs	r3, r3, #1
    5378:	4323      	orrs	r3, r4
    537a:	0019      	movs	r1, r3
    537c:	bd70      	pop	{r4, r5, r6, pc}
    537e:	2900      	cmp	r1, #0
    5380:	d114      	bne.n	53ac <__aeabi_f2d+0x6c>
    5382:	2d00      	cmp	r5, #0
    5384:	d01e      	beq.n	53c4 <__aeabi_f2d+0x84>
    5386:	0028      	movs	r0, r5
    5388:	f000 f8f0 	bl	556c <__clzsi2>
    538c:	280a      	cmp	r0, #10
    538e:	dc1c      	bgt.n	53ca <__aeabi_f2d+0x8a>
    5390:	230b      	movs	r3, #11
    5392:	002a      	movs	r2, r5
    5394:	1a1b      	subs	r3, r3, r0
    5396:	40da      	lsrs	r2, r3
    5398:	0003      	movs	r3, r0
    539a:	3315      	adds	r3, #21
    539c:	409d      	lsls	r5, r3
    539e:	4b0f      	ldr	r3, [pc, #60]	; (53dc <__aeabi_f2d+0x9c>)
    53a0:	0312      	lsls	r2, r2, #12
    53a2:	1a1b      	subs	r3, r3, r0
    53a4:	055b      	lsls	r3, r3, #21
    53a6:	0b16      	lsrs	r6, r2, #12
    53a8:	0d5b      	lsrs	r3, r3, #21
    53aa:	e7d8      	b.n	535e <__aeabi_f2d+0x1e>
    53ac:	2d00      	cmp	r5, #0
    53ae:	d006      	beq.n	53be <__aeabi_f2d+0x7e>
    53b0:	0b32      	lsrs	r2, r6, #12
    53b2:	2680      	movs	r6, #128	; 0x80
    53b4:	0336      	lsls	r6, r6, #12
    53b6:	076d      	lsls	r5, r5, #29
    53b8:	4316      	orrs	r6, r2
    53ba:	4b09      	ldr	r3, [pc, #36]	; (53e0 <__aeabi_f2d+0xa0>)
    53bc:	e7cf      	b.n	535e <__aeabi_f2d+0x1e>
    53be:	4b08      	ldr	r3, [pc, #32]	; (53e0 <__aeabi_f2d+0xa0>)
    53c0:	2600      	movs	r6, #0
    53c2:	e7cc      	b.n	535e <__aeabi_f2d+0x1e>
    53c4:	2300      	movs	r3, #0
    53c6:	2600      	movs	r6, #0
    53c8:	e7c9      	b.n	535e <__aeabi_f2d+0x1e>
    53ca:	0003      	movs	r3, r0
    53cc:	002a      	movs	r2, r5
    53ce:	3b0b      	subs	r3, #11
    53d0:	409a      	lsls	r2, r3
    53d2:	2500      	movs	r5, #0
    53d4:	e7e3      	b.n	539e <__aeabi_f2d+0x5e>
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	800fffff 	.word	0x800fffff
    53dc:	00000389 	.word	0x00000389
    53e0:	000007ff 	.word	0x000007ff

000053e4 <__aeabi_d2f>:
    53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e6:	004c      	lsls	r4, r1, #1
    53e8:	0d64      	lsrs	r4, r4, #21
    53ea:	030b      	lsls	r3, r1, #12
    53ec:	1c62      	adds	r2, r4, #1
    53ee:	0f45      	lsrs	r5, r0, #29
    53f0:	0a5b      	lsrs	r3, r3, #9
    53f2:	0552      	lsls	r2, r2, #21
    53f4:	432b      	orrs	r3, r5
    53f6:	0fc9      	lsrs	r1, r1, #31
    53f8:	00c5      	lsls	r5, r0, #3
    53fa:	0d52      	lsrs	r2, r2, #21
    53fc:	2a01      	cmp	r2, #1
    53fe:	dd28      	ble.n	5452 <__aeabi_d2f+0x6e>
    5400:	4a3a      	ldr	r2, [pc, #232]	; (54ec <__aeabi_d2f+0x108>)
    5402:	18a6      	adds	r6, r4, r2
    5404:	2efe      	cmp	r6, #254	; 0xfe
    5406:	dc1b      	bgt.n	5440 <__aeabi_d2f+0x5c>
    5408:	2e00      	cmp	r6, #0
    540a:	dd3e      	ble.n	548a <__aeabi_d2f+0xa6>
    540c:	0180      	lsls	r0, r0, #6
    540e:	0002      	movs	r2, r0
    5410:	1e50      	subs	r0, r2, #1
    5412:	4182      	sbcs	r2, r0
    5414:	0f6d      	lsrs	r5, r5, #29
    5416:	432a      	orrs	r2, r5
    5418:	00db      	lsls	r3, r3, #3
    541a:	4313      	orrs	r3, r2
    541c:	075a      	lsls	r2, r3, #29
    541e:	d004      	beq.n	542a <__aeabi_d2f+0x46>
    5420:	220f      	movs	r2, #15
    5422:	401a      	ands	r2, r3
    5424:	2a04      	cmp	r2, #4
    5426:	d000      	beq.n	542a <__aeabi_d2f+0x46>
    5428:	3304      	adds	r3, #4
    542a:	2280      	movs	r2, #128	; 0x80
    542c:	04d2      	lsls	r2, r2, #19
    542e:	401a      	ands	r2, r3
    5430:	d05a      	beq.n	54e8 <__aeabi_d2f+0x104>
    5432:	3601      	adds	r6, #1
    5434:	2eff      	cmp	r6, #255	; 0xff
    5436:	d003      	beq.n	5440 <__aeabi_d2f+0x5c>
    5438:	019b      	lsls	r3, r3, #6
    543a:	0a5b      	lsrs	r3, r3, #9
    543c:	b2f4      	uxtb	r4, r6
    543e:	e001      	b.n	5444 <__aeabi_d2f+0x60>
    5440:	24ff      	movs	r4, #255	; 0xff
    5442:	2300      	movs	r3, #0
    5444:	0258      	lsls	r0, r3, #9
    5446:	05e4      	lsls	r4, r4, #23
    5448:	0a40      	lsrs	r0, r0, #9
    544a:	07c9      	lsls	r1, r1, #31
    544c:	4320      	orrs	r0, r4
    544e:	4308      	orrs	r0, r1
    5450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5452:	2c00      	cmp	r4, #0
    5454:	d007      	beq.n	5466 <__aeabi_d2f+0x82>
    5456:	431d      	orrs	r5, r3
    5458:	d0f2      	beq.n	5440 <__aeabi_d2f+0x5c>
    545a:	2080      	movs	r0, #128	; 0x80
    545c:	00db      	lsls	r3, r3, #3
    545e:	0480      	lsls	r0, r0, #18
    5460:	4303      	orrs	r3, r0
    5462:	26ff      	movs	r6, #255	; 0xff
    5464:	e7da      	b.n	541c <__aeabi_d2f+0x38>
    5466:	432b      	orrs	r3, r5
    5468:	d003      	beq.n	5472 <__aeabi_d2f+0x8e>
    546a:	2305      	movs	r3, #5
    546c:	08db      	lsrs	r3, r3, #3
    546e:	2cff      	cmp	r4, #255	; 0xff
    5470:	d003      	beq.n	547a <__aeabi_d2f+0x96>
    5472:	025b      	lsls	r3, r3, #9
    5474:	0a5b      	lsrs	r3, r3, #9
    5476:	b2e4      	uxtb	r4, r4
    5478:	e7e4      	b.n	5444 <__aeabi_d2f+0x60>
    547a:	2b00      	cmp	r3, #0
    547c:	d032      	beq.n	54e4 <__aeabi_d2f+0x100>
    547e:	2080      	movs	r0, #128	; 0x80
    5480:	03c0      	lsls	r0, r0, #15
    5482:	4303      	orrs	r3, r0
    5484:	025b      	lsls	r3, r3, #9
    5486:	0a5b      	lsrs	r3, r3, #9
    5488:	e7dc      	b.n	5444 <__aeabi_d2f+0x60>
    548a:	0032      	movs	r2, r6
    548c:	3217      	adds	r2, #23
    548e:	db14      	blt.n	54ba <__aeabi_d2f+0xd6>
    5490:	2280      	movs	r2, #128	; 0x80
    5492:	271e      	movs	r7, #30
    5494:	0412      	lsls	r2, r2, #16
    5496:	4313      	orrs	r3, r2
    5498:	1bbf      	subs	r7, r7, r6
    549a:	2f1f      	cmp	r7, #31
    549c:	dc0f      	bgt.n	54be <__aeabi_d2f+0xda>
    549e:	4a14      	ldr	r2, [pc, #80]	; (54f0 <__aeabi_d2f+0x10c>)
    54a0:	4694      	mov	ip, r2
    54a2:	4464      	add	r4, ip
    54a4:	002a      	movs	r2, r5
    54a6:	40a5      	lsls	r5, r4
    54a8:	002e      	movs	r6, r5
    54aa:	40a3      	lsls	r3, r4
    54ac:	1e75      	subs	r5, r6, #1
    54ae:	41ae      	sbcs	r6, r5
    54b0:	40fa      	lsrs	r2, r7
    54b2:	4333      	orrs	r3, r6
    54b4:	4313      	orrs	r3, r2
    54b6:	2600      	movs	r6, #0
    54b8:	e7b0      	b.n	541c <__aeabi_d2f+0x38>
    54ba:	2400      	movs	r4, #0
    54bc:	e7d5      	b.n	546a <__aeabi_d2f+0x86>
    54be:	2202      	movs	r2, #2
    54c0:	4252      	negs	r2, r2
    54c2:	1b96      	subs	r6, r2, r6
    54c4:	001a      	movs	r2, r3
    54c6:	40f2      	lsrs	r2, r6
    54c8:	2f20      	cmp	r7, #32
    54ca:	d009      	beq.n	54e0 <__aeabi_d2f+0xfc>
    54cc:	4809      	ldr	r0, [pc, #36]	; (54f4 <__aeabi_d2f+0x110>)
    54ce:	4684      	mov	ip, r0
    54d0:	4464      	add	r4, ip
    54d2:	40a3      	lsls	r3, r4
    54d4:	432b      	orrs	r3, r5
    54d6:	1e5d      	subs	r5, r3, #1
    54d8:	41ab      	sbcs	r3, r5
    54da:	2600      	movs	r6, #0
    54dc:	4313      	orrs	r3, r2
    54de:	e79d      	b.n	541c <__aeabi_d2f+0x38>
    54e0:	2300      	movs	r3, #0
    54e2:	e7f7      	b.n	54d4 <__aeabi_d2f+0xf0>
    54e4:	2300      	movs	r3, #0
    54e6:	e7ad      	b.n	5444 <__aeabi_d2f+0x60>
    54e8:	0034      	movs	r4, r6
    54ea:	e7bf      	b.n	546c <__aeabi_d2f+0x88>
    54ec:	fffffc80 	.word	0xfffffc80
    54f0:	fffffc82 	.word	0xfffffc82
    54f4:	fffffca2 	.word	0xfffffca2

000054f8 <__aeabi_cfrcmple>:
    54f8:	4684      	mov	ip, r0
    54fa:	1c08      	adds	r0, r1, #0
    54fc:	4661      	mov	r1, ip
    54fe:	e7ff      	b.n	5500 <__aeabi_cfcmpeq>

00005500 <__aeabi_cfcmpeq>:
    5500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5502:	f000 f9b3 	bl	586c <__lesf2>
    5506:	2800      	cmp	r0, #0
    5508:	d401      	bmi.n	550e <__aeabi_cfcmpeq+0xe>
    550a:	2100      	movs	r1, #0
    550c:	42c8      	cmn	r0, r1
    550e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005510 <__aeabi_fcmpeq>:
    5510:	b510      	push	{r4, lr}
    5512:	f000 f945 	bl	57a0 <__eqsf2>
    5516:	4240      	negs	r0, r0
    5518:	3001      	adds	r0, #1
    551a:	bd10      	pop	{r4, pc}

0000551c <__aeabi_fcmplt>:
    551c:	b510      	push	{r4, lr}
    551e:	f000 f9a5 	bl	586c <__lesf2>
    5522:	2800      	cmp	r0, #0
    5524:	db01      	blt.n	552a <__aeabi_fcmplt+0xe>
    5526:	2000      	movs	r0, #0
    5528:	bd10      	pop	{r4, pc}
    552a:	2001      	movs	r0, #1
    552c:	bd10      	pop	{r4, pc}
    552e:	46c0      	nop			; (mov r8, r8)

00005530 <__aeabi_fcmple>:
    5530:	b510      	push	{r4, lr}
    5532:	f000 f99b 	bl	586c <__lesf2>
    5536:	2800      	cmp	r0, #0
    5538:	dd01      	ble.n	553e <__aeabi_fcmple+0xe>
    553a:	2000      	movs	r0, #0
    553c:	bd10      	pop	{r4, pc}
    553e:	2001      	movs	r0, #1
    5540:	bd10      	pop	{r4, pc}
    5542:	46c0      	nop			; (mov r8, r8)

00005544 <__aeabi_fcmpgt>:
    5544:	b510      	push	{r4, lr}
    5546:	f000 f951 	bl	57ec <__gesf2>
    554a:	2800      	cmp	r0, #0
    554c:	dc01      	bgt.n	5552 <__aeabi_fcmpgt+0xe>
    554e:	2000      	movs	r0, #0
    5550:	bd10      	pop	{r4, pc}
    5552:	2001      	movs	r0, #1
    5554:	bd10      	pop	{r4, pc}
    5556:	46c0      	nop			; (mov r8, r8)

00005558 <__aeabi_fcmpge>:
    5558:	b510      	push	{r4, lr}
    555a:	f000 f947 	bl	57ec <__gesf2>
    555e:	2800      	cmp	r0, #0
    5560:	da01      	bge.n	5566 <__aeabi_fcmpge+0xe>
    5562:	2000      	movs	r0, #0
    5564:	bd10      	pop	{r4, pc}
    5566:	2001      	movs	r0, #1
    5568:	bd10      	pop	{r4, pc}
    556a:	46c0      	nop			; (mov r8, r8)

0000556c <__clzsi2>:
    556c:	211c      	movs	r1, #28
    556e:	2301      	movs	r3, #1
    5570:	041b      	lsls	r3, r3, #16
    5572:	4298      	cmp	r0, r3
    5574:	d301      	bcc.n	557a <__clzsi2+0xe>
    5576:	0c00      	lsrs	r0, r0, #16
    5578:	3910      	subs	r1, #16
    557a:	0a1b      	lsrs	r3, r3, #8
    557c:	4298      	cmp	r0, r3
    557e:	d301      	bcc.n	5584 <__clzsi2+0x18>
    5580:	0a00      	lsrs	r0, r0, #8
    5582:	3908      	subs	r1, #8
    5584:	091b      	lsrs	r3, r3, #4
    5586:	4298      	cmp	r0, r3
    5588:	d301      	bcc.n	558e <__clzsi2+0x22>
    558a:	0900      	lsrs	r0, r0, #4
    558c:	3904      	subs	r1, #4
    558e:	a202      	add	r2, pc, #8	; (adr r2, 5598 <__clzsi2+0x2c>)
    5590:	5c10      	ldrb	r0, [r2, r0]
    5592:	1840      	adds	r0, r0, r1
    5594:	4770      	bx	lr
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	02020304 	.word	0x02020304
    559c:	01010101 	.word	0x01010101
	...

000055a8 <__ctzsi2>:
    55a8:	4241      	negs	r1, r0
    55aa:	4008      	ands	r0, r1
    55ac:	211c      	movs	r1, #28
    55ae:	2301      	movs	r3, #1
    55b0:	041b      	lsls	r3, r3, #16
    55b2:	4298      	cmp	r0, r3
    55b4:	d301      	bcc.n	55ba <__ctzsi2+0x12>
    55b6:	0c00      	lsrs	r0, r0, #16
    55b8:	3910      	subs	r1, #16
    55ba:	0a1b      	lsrs	r3, r3, #8
    55bc:	4298      	cmp	r0, r3
    55be:	d301      	bcc.n	55c4 <__ctzsi2+0x1c>
    55c0:	0a00      	lsrs	r0, r0, #8
    55c2:	3908      	subs	r1, #8
    55c4:	091b      	lsrs	r3, r3, #4
    55c6:	4298      	cmp	r0, r3
    55c8:	d301      	bcc.n	55ce <__ctzsi2+0x26>
    55ca:	0900      	lsrs	r0, r0, #4
    55cc:	3904      	subs	r1, #4
    55ce:	a202      	add	r2, pc, #8	; (adr r2, 55d8 <__ctzsi2+0x30>)
    55d0:	5c10      	ldrb	r0, [r2, r0]
    55d2:	1a40      	subs	r0, r0, r1
    55d4:	4770      	bx	lr
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	1d1d1c1b 	.word	0x1d1d1c1b
    55dc:	1e1e1e1e 	.word	0x1e1e1e1e
    55e0:	1f1f1f1f 	.word	0x1f1f1f1f
    55e4:	1f1f1f1f 	.word	0x1f1f1f1f

000055e8 <__divdi3>:
    55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ea:	464e      	mov	r6, r9
    55ec:	4657      	mov	r7, sl
    55ee:	46de      	mov	lr, fp
    55f0:	4645      	mov	r5, r8
    55f2:	b5e0      	push	{r5, r6, r7, lr}
    55f4:	0006      	movs	r6, r0
    55f6:	2000      	movs	r0, #0
    55f8:	000f      	movs	r7, r1
    55fa:	b083      	sub	sp, #12
    55fc:	0019      	movs	r1, r3
    55fe:	4681      	mov	r9, r0
    5600:	2f00      	cmp	r7, #0
    5602:	da00      	bge.n	5606 <__divdi3+0x1e>
    5604:	e08c      	b.n	5720 <__divdi3+0x138>
    5606:	2900      	cmp	r1, #0
    5608:	da00      	bge.n	560c <__divdi3+0x24>
    560a:	e080      	b.n	570e <__divdi3+0x126>
    560c:	0034      	movs	r4, r6
    560e:	003d      	movs	r5, r7
    5610:	4692      	mov	sl, r2
    5612:	4698      	mov	r8, r3
    5614:	42bb      	cmp	r3, r7
    5616:	d869      	bhi.n	56ec <__divdi3+0x104>
    5618:	d066      	beq.n	56e8 <__divdi3+0x100>
    561a:	4641      	mov	r1, r8
    561c:	4650      	mov	r0, sl
    561e:	f000 f967 	bl	58f0 <__clzdi2>
    5622:	4683      	mov	fp, r0
    5624:	0039      	movs	r1, r7
    5626:	0030      	movs	r0, r6
    5628:	f000 f962 	bl	58f0 <__clzdi2>
    562c:	465b      	mov	r3, fp
    562e:	1a1b      	subs	r3, r3, r0
    5630:	469c      	mov	ip, r3
    5632:	3b20      	subs	r3, #32
    5634:	469b      	mov	fp, r3
    5636:	d500      	bpl.n	563a <__divdi3+0x52>
    5638:	e087      	b.n	574a <__divdi3+0x162>
    563a:	4651      	mov	r1, sl
    563c:	4658      	mov	r0, fp
    563e:	4081      	lsls	r1, r0
    5640:	000b      	movs	r3, r1
    5642:	4651      	mov	r1, sl
    5644:	4660      	mov	r0, ip
    5646:	4081      	lsls	r1, r0
    5648:	000a      	movs	r2, r1
    564a:	42bb      	cmp	r3, r7
    564c:	d900      	bls.n	5650 <__divdi3+0x68>
    564e:	e072      	b.n	5736 <__divdi3+0x14e>
    5650:	d06e      	beq.n	5730 <__divdi3+0x148>
    5652:	0034      	movs	r4, r6
    5654:	003d      	movs	r5, r7
    5656:	4659      	mov	r1, fp
    5658:	1aa4      	subs	r4, r4, r2
    565a:	419d      	sbcs	r5, r3
    565c:	2900      	cmp	r1, #0
    565e:	da00      	bge.n	5662 <__divdi3+0x7a>
    5660:	e08a      	b.n	5778 <__divdi3+0x190>
    5662:	2100      	movs	r1, #0
    5664:	2000      	movs	r0, #0
    5666:	2601      	movs	r6, #1
    5668:	9000      	str	r0, [sp, #0]
    566a:	9101      	str	r1, [sp, #4]
    566c:	4659      	mov	r1, fp
    566e:	408e      	lsls	r6, r1
    5670:	9601      	str	r6, [sp, #4]
    5672:	4661      	mov	r1, ip
    5674:	2601      	movs	r6, #1
    5676:	408e      	lsls	r6, r1
    5678:	4661      	mov	r1, ip
    567a:	9600      	str	r6, [sp, #0]
    567c:	2900      	cmp	r1, #0
    567e:	d061      	beq.n	5744 <__divdi3+0x15c>
    5680:	07d9      	lsls	r1, r3, #31
    5682:	0856      	lsrs	r6, r2, #1
    5684:	430e      	orrs	r6, r1
    5686:	085f      	lsrs	r7, r3, #1
    5688:	4661      	mov	r1, ip
    568a:	2201      	movs	r2, #1
    568c:	2300      	movs	r3, #0
    568e:	e00c      	b.n	56aa <__divdi3+0xc2>
    5690:	42af      	cmp	r7, r5
    5692:	d101      	bne.n	5698 <__divdi3+0xb0>
    5694:	42a6      	cmp	r6, r4
    5696:	d80a      	bhi.n	56ae <__divdi3+0xc6>
    5698:	1ba4      	subs	r4, r4, r6
    569a:	41bd      	sbcs	r5, r7
    569c:	1924      	adds	r4, r4, r4
    569e:	416d      	adcs	r5, r5
    56a0:	3901      	subs	r1, #1
    56a2:	18a4      	adds	r4, r4, r2
    56a4:	415d      	adcs	r5, r3
    56a6:	2900      	cmp	r1, #0
    56a8:	d006      	beq.n	56b8 <__divdi3+0xd0>
    56aa:	42af      	cmp	r7, r5
    56ac:	d9f0      	bls.n	5690 <__divdi3+0xa8>
    56ae:	3901      	subs	r1, #1
    56b0:	1924      	adds	r4, r4, r4
    56b2:	416d      	adcs	r5, r5
    56b4:	2900      	cmp	r1, #0
    56b6:	d1f8      	bne.n	56aa <__divdi3+0xc2>
    56b8:	465b      	mov	r3, fp
    56ba:	9800      	ldr	r0, [sp, #0]
    56bc:	9901      	ldr	r1, [sp, #4]
    56be:	1900      	adds	r0, r0, r4
    56c0:	4169      	adcs	r1, r5
    56c2:	2b00      	cmp	r3, #0
    56c4:	db4d      	blt.n	5762 <__divdi3+0x17a>
    56c6:	002e      	movs	r6, r5
    56c8:	40de      	lsrs	r6, r3
    56ca:	4663      	mov	r3, ip
    56cc:	002c      	movs	r4, r5
    56ce:	40dc      	lsrs	r4, r3
    56d0:	465b      	mov	r3, fp
    56d2:	2b00      	cmp	r3, #0
    56d4:	db5b      	blt.n	578e <__divdi3+0x1a6>
    56d6:	0034      	movs	r4, r6
    56d8:	409c      	lsls	r4, r3
    56da:	0023      	movs	r3, r4
    56dc:	4664      	mov	r4, ip
    56de:	40a6      	lsls	r6, r4
    56e0:	0032      	movs	r2, r6
    56e2:	1a80      	subs	r0, r0, r2
    56e4:	4199      	sbcs	r1, r3
    56e6:	e003      	b.n	56f0 <__divdi3+0x108>
    56e8:	42b2      	cmp	r2, r6
    56ea:	d996      	bls.n	561a <__divdi3+0x32>
    56ec:	2000      	movs	r0, #0
    56ee:	2100      	movs	r1, #0
    56f0:	464b      	mov	r3, r9
    56f2:	2b00      	cmp	r3, #0
    56f4:	d004      	beq.n	5700 <__divdi3+0x118>
    56f6:	0003      	movs	r3, r0
    56f8:	000c      	movs	r4, r1
    56fa:	2100      	movs	r1, #0
    56fc:	4258      	negs	r0, r3
    56fe:	41a1      	sbcs	r1, r4
    5700:	b003      	add	sp, #12
    5702:	bc3c      	pop	{r2, r3, r4, r5}
    5704:	4690      	mov	r8, r2
    5706:	4699      	mov	r9, r3
    5708:	46a2      	mov	sl, r4
    570a:	46ab      	mov	fp, r5
    570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    570e:	4649      	mov	r1, r9
    5710:	43c9      	mvns	r1, r1
    5712:	0010      	movs	r0, r2
    5714:	4689      	mov	r9, r1
    5716:	0019      	movs	r1, r3
    5718:	2300      	movs	r3, #0
    571a:	4242      	negs	r2, r0
    571c:	418b      	sbcs	r3, r1
    571e:	e775      	b.n	560c <__divdi3+0x24>
    5720:	0034      	movs	r4, r6
    5722:	003d      	movs	r5, r7
    5724:	3801      	subs	r0, #1
    5726:	2700      	movs	r7, #0
    5728:	4266      	negs	r6, r4
    572a:	41af      	sbcs	r7, r5
    572c:	4681      	mov	r9, r0
    572e:	e76a      	b.n	5606 <__divdi3+0x1e>
    5730:	42b1      	cmp	r1, r6
    5732:	d800      	bhi.n	5736 <__divdi3+0x14e>
    5734:	e78d      	b.n	5652 <__divdi3+0x6a>
    5736:	2100      	movs	r1, #0
    5738:	2000      	movs	r0, #0
    573a:	9000      	str	r0, [sp, #0]
    573c:	9101      	str	r1, [sp, #4]
    573e:	4661      	mov	r1, ip
    5740:	2900      	cmp	r1, #0
    5742:	d19d      	bne.n	5680 <__divdi3+0x98>
    5744:	9800      	ldr	r0, [sp, #0]
    5746:	9901      	ldr	r1, [sp, #4]
    5748:	e7d2      	b.n	56f0 <__divdi3+0x108>
    574a:	4662      	mov	r2, ip
    574c:	4640      	mov	r0, r8
    574e:	2320      	movs	r3, #32
    5750:	4651      	mov	r1, sl
    5752:	4090      	lsls	r0, r2
    5754:	1a9b      	subs	r3, r3, r2
    5756:	40d9      	lsrs	r1, r3
    5758:	0003      	movs	r3, r0
    575a:	9100      	str	r1, [sp, #0]
    575c:	9900      	ldr	r1, [sp, #0]
    575e:	430b      	orrs	r3, r1
    5760:	e76f      	b.n	5642 <__divdi3+0x5a>
    5762:	4662      	mov	r2, ip
    5764:	2320      	movs	r3, #32
    5766:	1a9b      	subs	r3, r3, r2
    5768:	002a      	movs	r2, r5
    576a:	409a      	lsls	r2, r3
    576c:	0026      	movs	r6, r4
    576e:	0013      	movs	r3, r2
    5770:	4662      	mov	r2, ip
    5772:	40d6      	lsrs	r6, r2
    5774:	431e      	orrs	r6, r3
    5776:	e7a8      	b.n	56ca <__divdi3+0xe2>
    5778:	4661      	mov	r1, ip
    577a:	2620      	movs	r6, #32
    577c:	2701      	movs	r7, #1
    577e:	1a76      	subs	r6, r6, r1
    5780:	2000      	movs	r0, #0
    5782:	2100      	movs	r1, #0
    5784:	40f7      	lsrs	r7, r6
    5786:	9000      	str	r0, [sp, #0]
    5788:	9101      	str	r1, [sp, #4]
    578a:	9701      	str	r7, [sp, #4]
    578c:	e771      	b.n	5672 <__divdi3+0x8a>
    578e:	4662      	mov	r2, ip
    5790:	2320      	movs	r3, #32
    5792:	0035      	movs	r5, r6
    5794:	4094      	lsls	r4, r2
    5796:	1a9b      	subs	r3, r3, r2
    5798:	40dd      	lsrs	r5, r3
    579a:	0023      	movs	r3, r4
    579c:	432b      	orrs	r3, r5
    579e:	e79d      	b.n	56dc <__divdi3+0xf4>

000057a0 <__eqsf2>:
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	0042      	lsls	r2, r0, #1
    57a4:	0245      	lsls	r5, r0, #9
    57a6:	024e      	lsls	r6, r1, #9
    57a8:	004c      	lsls	r4, r1, #1
    57aa:	0fc3      	lsrs	r3, r0, #31
    57ac:	0a6d      	lsrs	r5, r5, #9
    57ae:	0e12      	lsrs	r2, r2, #24
    57b0:	0a76      	lsrs	r6, r6, #9
    57b2:	0e24      	lsrs	r4, r4, #24
    57b4:	0fc9      	lsrs	r1, r1, #31
    57b6:	2001      	movs	r0, #1
    57b8:	2aff      	cmp	r2, #255	; 0xff
    57ba:	d006      	beq.n	57ca <__eqsf2+0x2a>
    57bc:	2cff      	cmp	r4, #255	; 0xff
    57be:	d003      	beq.n	57c8 <__eqsf2+0x28>
    57c0:	42a2      	cmp	r2, r4
    57c2:	d101      	bne.n	57c8 <__eqsf2+0x28>
    57c4:	42b5      	cmp	r5, r6
    57c6:	d006      	beq.n	57d6 <__eqsf2+0x36>
    57c8:	bd70      	pop	{r4, r5, r6, pc}
    57ca:	2d00      	cmp	r5, #0
    57cc:	d1fc      	bne.n	57c8 <__eqsf2+0x28>
    57ce:	2cff      	cmp	r4, #255	; 0xff
    57d0:	d1fa      	bne.n	57c8 <__eqsf2+0x28>
    57d2:	2e00      	cmp	r6, #0
    57d4:	d1f8      	bne.n	57c8 <__eqsf2+0x28>
    57d6:	428b      	cmp	r3, r1
    57d8:	d006      	beq.n	57e8 <__eqsf2+0x48>
    57da:	2001      	movs	r0, #1
    57dc:	2a00      	cmp	r2, #0
    57de:	d1f3      	bne.n	57c8 <__eqsf2+0x28>
    57e0:	0028      	movs	r0, r5
    57e2:	1e45      	subs	r5, r0, #1
    57e4:	41a8      	sbcs	r0, r5
    57e6:	e7ef      	b.n	57c8 <__eqsf2+0x28>
    57e8:	2000      	movs	r0, #0
    57ea:	e7ed      	b.n	57c8 <__eqsf2+0x28>

000057ec <__gesf2>:
    57ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ee:	0042      	lsls	r2, r0, #1
    57f0:	0245      	lsls	r5, r0, #9
    57f2:	024c      	lsls	r4, r1, #9
    57f4:	0fc3      	lsrs	r3, r0, #31
    57f6:	0048      	lsls	r0, r1, #1
    57f8:	0a6d      	lsrs	r5, r5, #9
    57fa:	0e12      	lsrs	r2, r2, #24
    57fc:	0a64      	lsrs	r4, r4, #9
    57fe:	0e00      	lsrs	r0, r0, #24
    5800:	0fc9      	lsrs	r1, r1, #31
    5802:	2aff      	cmp	r2, #255	; 0xff
    5804:	d01e      	beq.n	5844 <__gesf2+0x58>
    5806:	28ff      	cmp	r0, #255	; 0xff
    5808:	d021      	beq.n	584e <__gesf2+0x62>
    580a:	2a00      	cmp	r2, #0
    580c:	d10a      	bne.n	5824 <__gesf2+0x38>
    580e:	426e      	negs	r6, r5
    5810:	416e      	adcs	r6, r5
    5812:	b2f6      	uxtb	r6, r6
    5814:	2800      	cmp	r0, #0
    5816:	d10f      	bne.n	5838 <__gesf2+0x4c>
    5818:	2c00      	cmp	r4, #0
    581a:	d10d      	bne.n	5838 <__gesf2+0x4c>
    581c:	2000      	movs	r0, #0
    581e:	2d00      	cmp	r5, #0
    5820:	d009      	beq.n	5836 <__gesf2+0x4a>
    5822:	e005      	b.n	5830 <__gesf2+0x44>
    5824:	2800      	cmp	r0, #0
    5826:	d101      	bne.n	582c <__gesf2+0x40>
    5828:	2c00      	cmp	r4, #0
    582a:	d001      	beq.n	5830 <__gesf2+0x44>
    582c:	428b      	cmp	r3, r1
    582e:	d011      	beq.n	5854 <__gesf2+0x68>
    5830:	2101      	movs	r1, #1
    5832:	4258      	negs	r0, r3
    5834:	4308      	orrs	r0, r1
    5836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5838:	2e00      	cmp	r6, #0
    583a:	d0f7      	beq.n	582c <__gesf2+0x40>
    583c:	2001      	movs	r0, #1
    583e:	3901      	subs	r1, #1
    5840:	4308      	orrs	r0, r1
    5842:	e7f8      	b.n	5836 <__gesf2+0x4a>
    5844:	2d00      	cmp	r5, #0
    5846:	d0de      	beq.n	5806 <__gesf2+0x1a>
    5848:	2002      	movs	r0, #2
    584a:	4240      	negs	r0, r0
    584c:	e7f3      	b.n	5836 <__gesf2+0x4a>
    584e:	2c00      	cmp	r4, #0
    5850:	d0db      	beq.n	580a <__gesf2+0x1e>
    5852:	e7f9      	b.n	5848 <__gesf2+0x5c>
    5854:	4282      	cmp	r2, r0
    5856:	dceb      	bgt.n	5830 <__gesf2+0x44>
    5858:	db04      	blt.n	5864 <__gesf2+0x78>
    585a:	42a5      	cmp	r5, r4
    585c:	d8e8      	bhi.n	5830 <__gesf2+0x44>
    585e:	2000      	movs	r0, #0
    5860:	42a5      	cmp	r5, r4
    5862:	d2e8      	bcs.n	5836 <__gesf2+0x4a>
    5864:	2101      	movs	r1, #1
    5866:	1e58      	subs	r0, r3, #1
    5868:	4308      	orrs	r0, r1
    586a:	e7e4      	b.n	5836 <__gesf2+0x4a>

0000586c <__lesf2>:
    586c:	b5f0      	push	{r4, r5, r6, r7, lr}
    586e:	0042      	lsls	r2, r0, #1
    5870:	024d      	lsls	r5, r1, #9
    5872:	004c      	lsls	r4, r1, #1
    5874:	0246      	lsls	r6, r0, #9
    5876:	0a76      	lsrs	r6, r6, #9
    5878:	0e12      	lsrs	r2, r2, #24
    587a:	0fc3      	lsrs	r3, r0, #31
    587c:	0a6d      	lsrs	r5, r5, #9
    587e:	0e24      	lsrs	r4, r4, #24
    5880:	0fc9      	lsrs	r1, r1, #31
    5882:	2aff      	cmp	r2, #255	; 0xff
    5884:	d016      	beq.n	58b4 <__lesf2+0x48>
    5886:	2cff      	cmp	r4, #255	; 0xff
    5888:	d018      	beq.n	58bc <__lesf2+0x50>
    588a:	2a00      	cmp	r2, #0
    588c:	d10a      	bne.n	58a4 <__lesf2+0x38>
    588e:	4270      	negs	r0, r6
    5890:	4170      	adcs	r0, r6
    5892:	b2c0      	uxtb	r0, r0
    5894:	2c00      	cmp	r4, #0
    5896:	d015      	beq.n	58c4 <__lesf2+0x58>
    5898:	2800      	cmp	r0, #0
    589a:	d005      	beq.n	58a8 <__lesf2+0x3c>
    589c:	2001      	movs	r0, #1
    589e:	3901      	subs	r1, #1
    58a0:	4308      	orrs	r0, r1
    58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58a4:	2c00      	cmp	r4, #0
    58a6:	d013      	beq.n	58d0 <__lesf2+0x64>
    58a8:	4299      	cmp	r1, r3
    58aa:	d014      	beq.n	58d6 <__lesf2+0x6a>
    58ac:	2001      	movs	r0, #1
    58ae:	425b      	negs	r3, r3
    58b0:	4318      	orrs	r0, r3
    58b2:	e7f6      	b.n	58a2 <__lesf2+0x36>
    58b4:	2002      	movs	r0, #2
    58b6:	2e00      	cmp	r6, #0
    58b8:	d1f3      	bne.n	58a2 <__lesf2+0x36>
    58ba:	e7e4      	b.n	5886 <__lesf2+0x1a>
    58bc:	2002      	movs	r0, #2
    58be:	2d00      	cmp	r5, #0
    58c0:	d1ef      	bne.n	58a2 <__lesf2+0x36>
    58c2:	e7e2      	b.n	588a <__lesf2+0x1e>
    58c4:	2d00      	cmp	r5, #0
    58c6:	d1e7      	bne.n	5898 <__lesf2+0x2c>
    58c8:	2000      	movs	r0, #0
    58ca:	2e00      	cmp	r6, #0
    58cc:	d0e9      	beq.n	58a2 <__lesf2+0x36>
    58ce:	e7ed      	b.n	58ac <__lesf2+0x40>
    58d0:	2d00      	cmp	r5, #0
    58d2:	d1e9      	bne.n	58a8 <__lesf2+0x3c>
    58d4:	e7ea      	b.n	58ac <__lesf2+0x40>
    58d6:	42a2      	cmp	r2, r4
    58d8:	dc06      	bgt.n	58e8 <__lesf2+0x7c>
    58da:	dbdf      	blt.n	589c <__lesf2+0x30>
    58dc:	42ae      	cmp	r6, r5
    58de:	d803      	bhi.n	58e8 <__lesf2+0x7c>
    58e0:	2000      	movs	r0, #0
    58e2:	42ae      	cmp	r6, r5
    58e4:	d3da      	bcc.n	589c <__lesf2+0x30>
    58e6:	e7dc      	b.n	58a2 <__lesf2+0x36>
    58e8:	2001      	movs	r0, #1
    58ea:	4249      	negs	r1, r1
    58ec:	4308      	orrs	r0, r1
    58ee:	e7d8      	b.n	58a2 <__lesf2+0x36>

000058f0 <__clzdi2>:
    58f0:	b510      	push	{r4, lr}
    58f2:	2900      	cmp	r1, #0
    58f4:	d103      	bne.n	58fe <__clzdi2+0xe>
    58f6:	f7ff fe39 	bl	556c <__clzsi2>
    58fa:	3020      	adds	r0, #32
    58fc:	e002      	b.n	5904 <__clzdi2+0x14>
    58fe:	1c08      	adds	r0, r1, #0
    5900:	f7ff fe34 	bl	556c <__clzsi2>
    5904:	bd10      	pop	{r4, pc}
    5906:	46c0      	nop			; (mov r8, r8)

00005908 <__libc_init_array>:
    5908:	b570      	push	{r4, r5, r6, lr}
    590a:	2600      	movs	r6, #0
    590c:	4d0c      	ldr	r5, [pc, #48]	; (5940 <__libc_init_array+0x38>)
    590e:	4c0d      	ldr	r4, [pc, #52]	; (5944 <__libc_init_array+0x3c>)
    5910:	1b64      	subs	r4, r4, r5
    5912:	10a4      	asrs	r4, r4, #2
    5914:	42a6      	cmp	r6, r4
    5916:	d109      	bne.n	592c <__libc_init_array+0x24>
    5918:	2600      	movs	r6, #0
    591a:	f000 f97b 	bl	5c14 <_init>
    591e:	4d0a      	ldr	r5, [pc, #40]	; (5948 <__libc_init_array+0x40>)
    5920:	4c0a      	ldr	r4, [pc, #40]	; (594c <__libc_init_array+0x44>)
    5922:	1b64      	subs	r4, r4, r5
    5924:	10a4      	asrs	r4, r4, #2
    5926:	42a6      	cmp	r6, r4
    5928:	d105      	bne.n	5936 <__libc_init_array+0x2e>
    592a:	bd70      	pop	{r4, r5, r6, pc}
    592c:	00b3      	lsls	r3, r6, #2
    592e:	58eb      	ldr	r3, [r5, r3]
    5930:	4798      	blx	r3
    5932:	3601      	adds	r6, #1
    5934:	e7ee      	b.n	5914 <__libc_init_array+0xc>
    5936:	00b3      	lsls	r3, r6, #2
    5938:	58eb      	ldr	r3, [r5, r3]
    593a:	4798      	blx	r3
    593c:	3601      	adds	r6, #1
    593e:	e7f2      	b.n	5926 <__libc_init_array+0x1e>
    5940:	00005c20 	.word	0x00005c20
    5944:	00005c20 	.word	0x00005c20
    5948:	00005c20 	.word	0x00005c20
    594c:	00005c24 	.word	0x00005c24
    5950:	612f2e2e 	.word	0x612f2e2e
    5954:	682f6364 	.word	0x682f6364
    5958:	615f6c61 	.word	0x615f6c61
    595c:	615f6364 	.word	0x615f6364
    5960:	636e7973 	.word	0x636e7973
    5964:	0000632e 	.word	0x0000632e

00005968 <_adcs>:
    5968:	00020200 03000000 00000000 00000001     ................
    5978:	00000001 00000000 00000000 612f2e2e     ............../a
    5988:	682f6364 615f6c70 632e6364 00000000     dc/hpl_adc.c....

00005998 <DIP_SWITCH_THRESHOLDS>:
    5998:	00190000 0080004e 00c900a7 011100ef     ....N...........
    59a8:	01520133 0185016c 01aa0198 01d101be     3.R.l...........

000059b8 <DISPLAY_VALUES_OUTER>:
    59b8:	30247940 78021219 06081000 0e064f46     @y$0...x....FO..
    59c8:	617f0942 4949470f 0c400c40 4f417e12     B..a.GII@.@..~AO
    59d8:	767f7f49 3f773f7f                       I..v.?w?

000059e0 <DISPLAY_VALUES_INNER>:
    59e0:	7e7e7f7f 7f7e7e7e 677e7e7e 7f7f3d7f     ..~~~~~.~~~g.=..
    59f0:	7f5b7e7e 6d757f67 6e6f7e7f 377f5b7e     ~~[.g.um.~on~[.7
    5a00:	3755252f 007f7e7f                       /%U7.~..

00005a08 <DISPLAY_SEGMENTS>:
    5a08:	000c0003 00c00030 0c000300 c0003000     ....0........0..
    5a18:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    5a28:	73615f63 2e636e79 00000063 682f2e2e     c_async.c...../h
    5a38:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    5a48:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    5a58:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    5a68:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    5a78:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    5a88:	00632e72                                r.c.

00005a8c <_cfgs>:
    5a8c:	42004400 00000018 00000762 00001762     .D.B....b...b...
    5a9c:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    5aac:	63615f6c 0000632e 682f2e2e 642f6c70     l_ac.c..../hpl/d
    5abc:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00005acc <_map>:
    5acc:	00000006 00000026 00000007 00000027     ....&.......'...
    5adc:	0000000c 0000002c 0000000d 0000002d     ....,.......-...
    5aec:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5afc:	632e6369 00000000                       ic.c....

00005b04 <user_mux_confs>:
    5b04:	00010000 00030002 00050004 00070006     ................
    5b14:	00090008 000b000a 000d010c 000f000e     ................
    5b24:	00110010 00130012 00150014 01170016     ................
    5b34:	00190018 001b001a 001d001c 0000001e     ................

00005b44 <channel_confs>:
    5b44:	022c0000 00000001 00000002 00000003     ..,.............
    5b54:	00000004 00000005 00000006 00000007     ................
    5b64:	00000008 00000009 0000000a 0000000b     ................
    5b74:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    5b84:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    5b94:	00003cdc 00003c2c 00003c2c 00003c2a     .<..,<..,<..*<..
    5ba4:	00003cce 00003cce 00003cc4 00003c2a     .<...<...<..*<..
    5bb4:	00003cce 00003cc4 00003cce 00003c2a     .<...<...<..*<..
    5bc4:	00003cd4 00003cd4 00003cd4 00003d64     .<...<...<..d=..
    5bd4:	00004a04 000048c4 000048c4 000048c0     .J...H...H...H..
    5be4:	000049dc 000049dc 000049ce 000048c0     .I...I...I...H..
    5bf4:	000049dc 000049ce 000049dc 000048c0     .I...I...I...H..
    5c04:	000049e4 000049e4 000049e4 00004be8     .I...I...I...K..

00005c14 <_init>:
    5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c16:	46c0      	nop			; (mov r8, r8)
    5c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c1a:	bc08      	pop	{r3}
    5c1c:	469e      	mov	lr, r3
    5c1e:	4770      	bx	lr

00005c20 <__init_array_start>:
    5c20:	000000dd 	.word	0x000000dd

00005c24 <_fini>:
    5c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c26:	46c0      	nop			; (mov r8, r8)
    5c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c2a:	bc08      	pop	{r3}
    5c2c:	469e      	mov	lr, r3
    5c2e:	4770      	bx	lr

00005c30 <__fini_array_start>:
    5c30:	000000b5 	.word	0x000000b5
