
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00002b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  20000014  00002b90  00020014  2**2
                  ALLOC
  3 .stack        00000404  2000014c  00002cc8  00020014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a2d8  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000475d  00000000  00000000  0005a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00012d5b  00000000  00000000  0005eaca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f40  00000000  00000000  00071825  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001000  00000000  00000000  00072765  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d490  00000000  00000000  00073765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016558  00000000  00000000  00090bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093e41  00000000  00000000  000a714d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000268c  00000000  00000000  0013af90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 05 00 20 81 01 00 00 7d 01 00 00 7d 01 00 00     P.. ....}...}...
	...
      2c:	7d 01 00 00 00 00 00 00 00 00 00 00 7d 01 00 00     }...........}...
      3c:	dd 24 00 00 7d 01 00 00 7d 01 00 00 7d 01 00 00     .$..}...}...}...
      4c:	7d 01 00 00 75 1b 00 00 7d 01 00 00 7d 01 00 00     }...u...}...}...
      5c:	7d 01 00 00 7d 01 00 00 7d 01 00 00 7d 01 00 00     }...}...}...}...
      6c:	7d 01 00 00 7d 01 00 00 7d 01 00 00 f1 1f 00 00     }...}...}.......
      7c:	7d 01 00 00 f1 22 00 00 7d 01 00 00 7d 01 00 00     }...."..}...}...
      8c:	7d 01 00 00 7d 01 00 00 7d 01 00 00 7d 01 00 00     }...}...}...}...
      9c:	61 19 00 00 b9 16 00 00 7d 01 00 00 7d 01 00 00     a.......}...}...
      ac:	7d 01 00 00 00 00 00 00                             }.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000014 	.word	0x20000014
      d4:	00000000 	.word	0x00000000
      d8:	00002b7c 	.word	0x00002b7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000018 	.word	0x20000018
     108:	00002b7c 	.word	0x00002b7c
     10c:	00002b7c 	.word	0x00002b7c
     110:	00000000 	.word	0x00000000

00000114 <_ac_async_set_positive_input>:
 *  Author: Christian
 */ 

#include <ac_util.h>

void _ac_async_set_positive_input(struct _ac_async_device *const device, uint8_t comp, hri_ac_compctrl_reg_t muxpos) {
     114:	b570      	push	{r4, r5, r6, lr}
	hri_ac_clear_COMPCTRL_ENABLE_bit(device->hw, comp);
     116:	68c4      	ldr	r4, [r0, #12]
}

static inline void hri_ac_clear_COMPCTRL_ENABLE_bit(const void *const hw, uint8_t index)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg &= ~AC_COMPCTRL_ENABLE;
     118:	1d0b      	adds	r3, r1, #4
     11a:	009b      	lsls	r3, r3, #2
     11c:	591d      	ldr	r5, [r3, r4]
     11e:	2601      	movs	r6, #1
     120:	43b5      	bics	r5, r6
     122:	511d      	str	r5, [r3, r4]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     124:	7a63      	ldrb	r3, [r4, #9]
     126:	09db      	lsrs	r3, r3, #7
     128:	d1fc      	bne.n	124 <_ac_async_set_positive_input+0x10>
	hri_ac_write_COMPCTRL_MUXPOS_bf(device->hw, comp, muxpos);
     12a:	68c0      	ldr	r0, [r0, #12]

static inline void hri_ac_write_COMPCTRL_MUXPOS_bf(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	uint32_t tmp;
	AC_CRITICAL_SECTION_ENTER();
	tmp = ((Ac *)hw)->COMPCTRL[index].reg;
     12c:	3104      	adds	r1, #4
     12e:	0089      	lsls	r1, r1, #2
     130:	580b      	ldr	r3, [r1, r0]
	tmp &= ~AC_COMPCTRL_MUXPOS_Msk;
     132:	4c06      	ldr	r4, [pc, #24]	; (14c <_ac_async_set_positive_input+0x38>)
     134:	4023      	ands	r3, r4
	tmp |= AC_COMPCTRL_MUXPOS(data);
     136:	0312      	lsls	r2, r2, #12
     138:	24c0      	movs	r4, #192	; 0xc0
     13a:	01a4      	lsls	r4, r4, #6
     13c:	4022      	ands	r2, r4
     13e:	431a      	orrs	r2, r3
	((Ac *)hw)->COMPCTRL[index].reg = tmp;
     140:	500a      	str	r2, [r1, r0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     142:	7a43      	ldrb	r3, [r0, #9]
     144:	09db      	lsrs	r3, r3, #7
     146:	d1fc      	bne.n	142 <_ac_async_set_positive_input+0x2e>
}
     148:	bd70      	pop	{r4, r5, r6, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	ffffcfff 	.word	0xffffcfff

00000150 <ac_async_set_positive_input>:

void ac_async_set_positive_input(struct ac_async_descriptor *const descr, uint8_t comp, hri_ac_compctrl_reg_t muxpos) {
     150:	b510      	push	{r4, lr}
	_ac_async_set_positive_input(&descr->device, comp, muxpos);
     152:	4b01      	ldr	r3, [pc, #4]	; (158 <ac_async_set_positive_input+0x8>)
     154:	4798      	blx	r3
}
     156:	bd10      	pop	{r4, pc}
     158:	00000115 	.word	0x00000115

0000015c <adc_data_read>:
static inline uint16_t adc_read_buffer(struct ringbuffer* buf) {
	return *((uint16_t*) (buf->buf + ((buf->write_index + buf->size - 1) & buf->size)));
}

uint16_t adc_data_read(const struct adc_async_descriptor *const descr) {
	return adc_read_buffer(&(descr->descr_ch->convert));
     15c:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return *((uint16_t*) (buf->buf + ((buf->write_index + buf->size - 1) & buf->size)));
     15e:	6851      	ldr	r1, [r2, #4]
     160:	6913      	ldr	r3, [r2, #16]
     162:	6892      	ldr	r2, [r2, #8]
     164:	189b      	adds	r3, r3, r2
     166:	3b01      	subs	r3, #1
     168:	4013      	ands	r3, r2
     16a:	5ac8      	ldrh	r0, [r1, r3]
}
     16c:	4770      	bx	lr
	...

00000170 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     170:	b510      	push	{r4, lr}
	system_init();
     172:	4b01      	ldr	r3, [pc, #4]	; (178 <atmel_start_init+0x8>)
     174:	4798      	blx	r3
}
     176:	bd10      	pop	{r4, pc}
     178:	0000085d 	.word	0x0000085d

0000017c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     17c:	e7fe      	b.n	17c <Dummy_Handler>
	...

00000180 <Reset_Handler>:
{
     180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     182:	4a23      	ldr	r2, [pc, #140]	; (210 <Reset_Handler+0x90>)
     184:	4b23      	ldr	r3, [pc, #140]	; (214 <Reset_Handler+0x94>)
     186:	429a      	cmp	r2, r3
     188:	d009      	beq.n	19e <Reset_Handler+0x1e>
     18a:	4b22      	ldr	r3, [pc, #136]	; (214 <Reset_Handler+0x94>)
     18c:	4a20      	ldr	r2, [pc, #128]	; (210 <Reset_Handler+0x90>)
     18e:	e003      	b.n	198 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     190:	6811      	ldr	r1, [r2, #0]
     192:	6019      	str	r1, [r3, #0]
     194:	3304      	adds	r3, #4
     196:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     198:	491f      	ldr	r1, [pc, #124]	; (218 <Reset_Handler+0x98>)
     19a:	428b      	cmp	r3, r1
     19c:	d3f8      	bcc.n	190 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     19e:	4b1f      	ldr	r3, [pc, #124]	; (21c <Reset_Handler+0x9c>)
     1a0:	e002      	b.n	1a8 <Reset_Handler+0x28>
                *pDest++ = 0;
     1a2:	2200      	movs	r2, #0
     1a4:	601a      	str	r2, [r3, #0]
     1a6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     1a8:	4a1d      	ldr	r2, [pc, #116]	; (220 <Reset_Handler+0xa0>)
     1aa:	4293      	cmp	r3, r2
     1ac:	d3f9      	bcc.n	1a2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     1ae:	4a1d      	ldr	r2, [pc, #116]	; (224 <Reset_Handler+0xa4>)
     1b0:	21ff      	movs	r1, #255	; 0xff
     1b2:	4b1d      	ldr	r3, [pc, #116]	; (228 <Reset_Handler+0xa8>)
     1b4:	438b      	bics	r3, r1
     1b6:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     1b8:	39fd      	subs	r1, #253	; 0xfd
     1ba:	2390      	movs	r3, #144	; 0x90
     1bc:	005b      	lsls	r3, r3, #1
     1be:	4a1b      	ldr	r2, [pc, #108]	; (22c <Reset_Handler+0xac>)
     1c0:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     1c2:	4a1b      	ldr	r2, [pc, #108]	; (230 <Reset_Handler+0xb0>)
     1c4:	78d3      	ldrb	r3, [r2, #3]
     1c6:	2503      	movs	r5, #3
     1c8:	43ab      	bics	r3, r5
     1ca:	2402      	movs	r4, #2
     1cc:	4323      	orrs	r3, r4
     1ce:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     1d0:	78d3      	ldrb	r3, [r2, #3]
     1d2:	270c      	movs	r7, #12
     1d4:	43bb      	bics	r3, r7
     1d6:	2608      	movs	r6, #8
     1d8:	4333      	orrs	r3, r6
     1da:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1dc:	4b15      	ldr	r3, [pc, #84]	; (234 <Reset_Handler+0xb4>)
     1de:	7b98      	ldrb	r0, [r3, #14]
     1e0:	2230      	movs	r2, #48	; 0x30
     1e2:	4390      	bics	r0, r2
     1e4:	2220      	movs	r2, #32
     1e6:	4310      	orrs	r0, r2
     1e8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ea:	7b99      	ldrb	r1, [r3, #14]
     1ec:	43b9      	bics	r1, r7
     1ee:	4331      	orrs	r1, r6
     1f0:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1f2:	7b9a      	ldrb	r2, [r3, #14]
     1f4:	43aa      	bics	r2, r5
     1f6:	4322      	orrs	r2, r4
     1f8:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1fa:	4a0f      	ldr	r2, [pc, #60]	; (238 <Reset_Handler+0xb8>)
     1fc:	6851      	ldr	r1, [r2, #4]
     1fe:	2380      	movs	r3, #128	; 0x80
     200:	430b      	orrs	r3, r1
     202:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     204:	4b0d      	ldr	r3, [pc, #52]	; (23c <Reset_Handler+0xbc>)
     206:	4798      	blx	r3
        main();
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <Reset_Handler+0xc0>)
     20a:	4798      	blx	r3
     20c:	e7fe      	b.n	20c <Reset_Handler+0x8c>
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00002b7c 	.word	0x00002b7c
     214:	20000000 	.word	0x20000000
     218:	20000014 	.word	0x20000014
     21c:	20000014 	.word	0x20000014
     220:	2000014c 	.word	0x2000014c
     224:	e000ed00 	.word	0xe000ed00
     228:	00000000 	.word	0x00000000
     22c:	41007000 	.word	0x41007000
     230:	41005000 	.word	0x41005000
     234:	41004800 	.word	0x41004800
     238:	41004000 	.word	0x41004000
     23c:	000028dd 	.word	0x000028dd
     240:	00002589 	.word	0x00002589

00000244 <dip_switch_read_group>:
volatile uint16_t dip_switch_dac_data = 1 << (DIP_SWITCH_BITS_PER_CHANNEL - 1);
volatile uint8_t dip_switch_block = 0;
volatile uint16_t dip_switch_data = 0;


uint8_t dip_switch_read_group(uint16_t data) {
     244:	b5f0      	push	{r4, r5, r6, r7, lr}
     246:	0006      	movs	r6, r0
	uint8_t result = 0;
	uint8_t pos = 0;
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     248:	2103      	movs	r1, #3
	uint8_t pos = 0;
     24a:	2200      	movs	r2, #0
	uint8_t result = 0;
     24c:	2000      	movs	r0, #0
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     24e:	e000      	b.n	252 <dip_switch_read_group+0xe>
     250:	3901      	subs	r1, #1
     252:	2900      	cmp	r1, #0
     254:	db13      	blt.n	27e <dip_switch_read_group+0x3a>
		pos |= 1 << i;
     256:	2301      	movs	r3, #1
     258:	408b      	lsls	r3, r1
     25a:	b25b      	sxtb	r3, r3
     25c:	431a      	orrs	r2, r3
     25e:	b255      	sxtb	r5, r2
     260:	b2ea      	uxtb	r2, r5
		if (data < DIP_SWITCH_THRESHOLDS[pos]) {
     262:	0057      	lsls	r7, r2, #1
     264:	4c06      	ldr	r4, [pc, #24]	; (280 <dip_switch_read_group+0x3c>)
     266:	5b3c      	ldrh	r4, [r7, r4]
     268:	42b4      	cmp	r4, r6
     26a:	d9f1      	bls.n	250 <dip_switch_read_group+0xc>
			result |= 1 << (DIP_SWITCH_BITS - i - 1);
     26c:	2203      	movs	r2, #3
     26e:	1a52      	subs	r2, r2, r1
     270:	2401      	movs	r4, #1
     272:	4094      	lsls	r4, r2
     274:	4320      	orrs	r0, r4
     276:	b2c0      	uxtb	r0, r0
			pos ^= 1 << i;
     278:	406b      	eors	r3, r5
     27a:	b2da      	uxtb	r2, r3
     27c:	e7e8      	b.n	250 <dip_switch_read_group+0xc>
		}
	}
	
	return result;
}
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	00002924 	.word	0x00002924

00000284 <dip_switch_data_read>:

void dip_switch_data_read(const uint16_t data) {
     284:	b510      	push	{r4, lr}
	uint8_t nibble = dip_switch_read_group(data);
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <dip_switch_data_read+0x58>)
     288:	4798      	blx	r3
	if (!dip_switch_block) {
     28a:	4b15      	ldr	r3, [pc, #84]	; (2e0 <dip_switch_data_read+0x5c>)
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	2b00      	cmp	r3, #0
     290:	d102      	bne.n	298 <dip_switch_data_read+0x14>
		dip_switch_data = 0;
     292:	2200      	movs	r2, #0
     294:	4b12      	ldr	r3, [pc, #72]	; (2e0 <dip_switch_data_read+0x5c>)
     296:	805a      	strh	r2, [r3, #2]
	}
	dip_switch_data |= nibble << ((DIP_SWITCH_BLOCKS - dip_switch_block - 1) * DIP_SWITCH_BITS);
     298:	4c11      	ldr	r4, [pc, #68]	; (2e0 <dip_switch_data_read+0x5c>)
     29a:	7822      	ldrb	r2, [r4, #0]
     29c:	2302      	movs	r3, #2
     29e:	1a9b      	subs	r3, r3, r2
     2a0:	009b      	lsls	r3, r3, #2
     2a2:	4098      	lsls	r0, r3
     2a4:	0003      	movs	r3, r0
     2a6:	8860      	ldrh	r0, [r4, #2]
     2a8:	4318      	orrs	r0, r3
     2aa:	b280      	uxth	r0, r0
     2ac:	8060      	strh	r0, [r4, #2]
	dip_switch_block = (dip_switch_block + 1) % DIP_SWITCH_BLOCKS;
     2ae:	7820      	ldrb	r0, [r4, #0]
     2b0:	3001      	adds	r0, #1
     2b2:	2103      	movs	r1, #3
     2b4:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <dip_switch_data_read+0x60>)
     2b6:	4798      	blx	r3
     2b8:	b2c9      	uxtb	r1, r1
     2ba:	7021      	strb	r1, [r4, #0]

	ac_async_set_positive_input(&AC_0, 0, DIP_SWITCH_BLOCK_TO_AC_MUXPOS_PIN(dip_switch_block));
     2bc:	7822      	ldrb	r2, [r4, #0]
     2be:	b2d2      	uxtb	r2, r2
     2c0:	2100      	movs	r1, #0
     2c2:	4809      	ldr	r0, [pc, #36]	; (2e8 <dip_switch_data_read+0x64>)
     2c4:	4b09      	ldr	r3, [pc, #36]	; (2ec <dip_switch_data_read+0x68>)
     2c6:	4798      	blx	r3
	
	if (!dip_switch_block) {
     2c8:	7823      	ldrb	r3, [r4, #0]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d000      	beq.n	2d0 <dip_switch_data_read+0x4c>
		dip_switch_data_ready(dip_switch_data);
	}
}
     2ce:	bd10      	pop	{r4, pc}
		dip_switch_data_ready(dip_switch_data);
     2d0:	4b03      	ldr	r3, [pc, #12]	; (2e0 <dip_switch_data_read+0x5c>)
     2d2:	8858      	ldrh	r0, [r3, #2]
     2d4:	b280      	uxth	r0, r0
     2d6:	4b06      	ldr	r3, [pc, #24]	; (2f0 <dip_switch_data_read+0x6c>)
     2d8:	4798      	blx	r3
}
     2da:	e7f8      	b.n	2ce <dip_switch_data_read+0x4a>
     2dc:	00000245 	.word	0x00000245
     2e0:	20000030 	.word	0x20000030
     2e4:	0000287d 	.word	0x0000287d
     2e8:	20000098 	.word	0x20000098
     2ec:	00000151 	.word	0x00000151
     2f0:	000024cd 	.word	0x000024cd

000002f4 <dip_switch_comparison_ready>:

void dip_switch_comparison_ready(const struct ac_async_descriptor *const descr, const uint8_t comp, const uint8_t result) {
     2f4:	b510      	push	{r4, lr}
     2f6:	b082      	sub	sp, #8
	dip_switch_dac_data ^= ((uint16_t) (!result)) << dip_switch_bit_pos;
     2f8:	4253      	negs	r3, r2
     2fa:	415a      	adcs	r2, r3
     2fc:	4917      	ldr	r1, [pc, #92]	; (35c <dip_switch_comparison_ready+0x68>)
     2fe:	780b      	ldrb	r3, [r1, #0]
     300:	b2db      	uxtb	r3, r3
     302:	409a      	lsls	r2, r3
     304:	0013      	movs	r3, r2
     306:	884a      	ldrh	r2, [r1, #2]
     308:	405a      	eors	r2, r3
     30a:	b292      	uxth	r2, r2
     30c:	804a      	strh	r2, [r1, #2]
	
	
	if (dip_switch_bit_pos) {
     30e:	780b      	ldrb	r3, [r1, #0]
     310:	2b00      	cmp	r3, #0
     312:	d018      	beq.n	346 <dip_switch_comparison_ready+0x52>
		dip_switch_bit_pos--;
     314:	780b      	ldrb	r3, [r1, #0]
     316:	3b01      	subs	r3, #1
     318:	b2db      	uxtb	r3, r3
     31a:	700b      	strb	r3, [r1, #0]
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
		dip_switch_data_read(dip_switch_dac_data);
		dip_switch_dac_data = 0;
	}

	dip_switch_dac_data |= 1 << dip_switch_bit_pos;
     31c:	4a0f      	ldr	r2, [pc, #60]	; (35c <dip_switch_comparison_ready+0x68>)
     31e:	7811      	ldrb	r1, [r2, #0]
     320:	b2c9      	uxtb	r1, r1
     322:	2301      	movs	r3, #1
     324:	408b      	lsls	r3, r1
     326:	0019      	movs	r1, r3
     328:	8853      	ldrh	r3, [r2, #2]
     32a:	430b      	orrs	r3, r1
     32c:	b29b      	uxth	r3, r3
     32e:	8053      	strh	r3, [r2, #2]
	uint16_t dac_data = dip_switch_dac_data;
     330:	8853      	ldrh	r3, [r2, #2]
     332:	466a      	mov	r2, sp
     334:	3206      	adds	r2, #6
     336:	8013      	strh	r3, [r2, #0]
	dac_sync_write(&DAC_0, 0, &dac_data, 1);
     338:	2301      	movs	r3, #1
     33a:	2100      	movs	r1, #0
     33c:	4808      	ldr	r0, [pc, #32]	; (360 <dip_switch_comparison_ready+0x6c>)
     33e:	4c09      	ldr	r4, [pc, #36]	; (364 <dip_switch_comparison_ready+0x70>)
     340:	47a0      	blx	r4
}
     342:	b002      	add	sp, #8
     344:	bd10      	pop	{r4, pc}
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
     346:	4c05      	ldr	r4, [pc, #20]	; (35c <dip_switch_comparison_ready+0x68>)
     348:	2309      	movs	r3, #9
     34a:	7023      	strb	r3, [r4, #0]
		dip_switch_data_read(dip_switch_dac_data);
     34c:	8860      	ldrh	r0, [r4, #2]
     34e:	b280      	uxth	r0, r0
     350:	4b05      	ldr	r3, [pc, #20]	; (368 <dip_switch_comparison_ready+0x74>)
     352:	4798      	blx	r3
		dip_switch_dac_data = 0;
     354:	2300      	movs	r3, #0
     356:	8063      	strh	r3, [r4, #2]
     358:	e7e0      	b.n	31c <dip_switch_comparison_ready+0x28>
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	20000000 	.word	0x20000000
     360:	200000d8 	.word	0x200000d8
     364:	00000f29 	.word	0x00000f29
     368:	00000285 	.word	0x00000285

0000036c <dip_switch_init>:

void dip_switch_init() {
     36c:	b510      	push	{r4, lr}
     36e:	b082      	sub	sp, #8
	dac_sync_enable_channel(&DAC_0, 0);
     370:	4c0c      	ldr	r4, [pc, #48]	; (3a4 <dip_switch_init+0x38>)
     372:	2100      	movs	r1, #0
     374:	0020      	movs	r0, r4
     376:	4b0c      	ldr	r3, [pc, #48]	; (3a8 <dip_switch_init+0x3c>)
     378:	4798      	blx	r3
	uint16_t dac_data = dip_switch_dac_data;
     37a:	4b0c      	ldr	r3, [pc, #48]	; (3ac <dip_switch_init+0x40>)
     37c:	885b      	ldrh	r3, [r3, #2]
     37e:	466a      	mov	r2, sp
     380:	3206      	adds	r2, #6
     382:	8013      	strh	r3, [r2, #0]
	dac_sync_write(&DAC_0, 0, &dac_data, 1);
     384:	2301      	movs	r3, #1
     386:	2100      	movs	r1, #0
     388:	0020      	movs	r0, r4
     38a:	4c09      	ldr	r4, [pc, #36]	; (3b0 <dip_switch_init+0x44>)
     38c:	47a0      	blx	r4
	ac_async_register_callback(&AC_0, AC_COMPARISON_READY_CB, dip_switch_comparison_ready);
     38e:	4c09      	ldr	r4, [pc, #36]	; (3b4 <dip_switch_init+0x48>)
     390:	4a09      	ldr	r2, [pc, #36]	; (3b8 <dip_switch_init+0x4c>)
     392:	2100      	movs	r1, #0
     394:	0020      	movs	r0, r4
     396:	4b09      	ldr	r3, [pc, #36]	; (3bc <dip_switch_init+0x50>)
     398:	4798      	blx	r3
	ac_async_enable(&AC_0);
     39a:	0020      	movs	r0, r4
     39c:	4b08      	ldr	r3, [pc, #32]	; (3c0 <dip_switch_init+0x54>)
     39e:	4798      	blx	r3
}
     3a0:	b002      	add	sp, #8
     3a2:	bd10      	pop	{r4, pc}
     3a4:	200000d8 	.word	0x200000d8
     3a8:	00000ef1 	.word	0x00000ef1
     3ac:	20000000 	.word	0x20000000
     3b0:	00000f29 	.word	0x00000f29
     3b4:	20000098 	.word	0x20000098
     3b8:	000002f5 	.word	0x000002f5
     3bc:	00000b15 	.word	0x00000b15
     3c0:	00000aed 	.word	0x00000aed

000003c4 <dip_switch_read>:

void dip_switch_read() {
     3c4:	b510      	push	{r4, lr}
	ac_async_start_comparison(&AC_0, 0);
     3c6:	2100      	movs	r1, #0
     3c8:	4801      	ldr	r0, [pc, #4]	; (3d0 <dip_switch_read+0xc>)
     3ca:	4b02      	ldr	r3, [pc, #8]	; (3d4 <dip_switch_read+0x10>)
     3cc:	4798      	blx	r3
}
     3ce:	bd10      	pop	{r4, pc}
     3d0:	20000098 	.word	0x20000098
     3d4:	00000b45 	.word	0x00000b45

000003d8 <dmx_error>:
unsigned short currentChannel = 0;
volatile uint8_t dmx[DMX_CHANNELS];
unsigned short dmxStartAddress = 1;

void dmx_error(const struct usart_async_descriptor *const descr) {
	currentChannel = 0;
     3d8:	2200      	movs	r2, #0
     3da:	4b01      	ldr	r3, [pc, #4]	; (3e0 <dmx_error+0x8>)
     3dc:	801a      	strh	r2, [r3, #0]
}
     3de:	4770      	bx	lr
     3e0:	20000034 	.word	0x20000034

000003e4 <dmx_received>:

void dmx_received() {
	gpio_set_pin_level(LED1, dmx[0] < 127);
     3e4:	4b08      	ldr	r3, [pc, #32]	; (408 <STACK_SIZE+0x8>)
     3e6:	781b      	ldrb	r3, [r3, #0]
     3e8:	b2db      	uxtb	r3, r3
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     3ea:	2b7e      	cmp	r3, #126	; 0x7e
     3ec:	d905      	bls.n	3fa <dmx_received+0x16>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3ee:	2280      	movs	r2, #128	; 0x80
     3f0:	0512      	lsls	r2, r2, #20
     3f2:	23c0      	movs	r3, #192	; 0xc0
     3f4:	05db      	lsls	r3, r3, #23
     3f6:	615a      	str	r2, [r3, #20]
	//gpio_set_pin_level(LED2, dmx[1] < 127);
}
     3f8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3fa:	2280      	movs	r2, #128	; 0x80
     3fc:	0512      	lsls	r2, r2, #20
     3fe:	23c0      	movs	r3, #192	; 0xc0
     400:	05db      	lsls	r3, r3, #23
     402:	619a      	str	r2, [r3, #24]
     404:	e7f8      	b.n	3f8 <dmx_received+0x14>
     406:	46c0      	nop			; (mov r8, r8)
     408:	20000090 	.word	0x20000090

0000040c <dmx_rx>:

void dmx_rx(const struct usart_async_descriptor *const descr) {
     40c:	b570      	push	{r4, r5, r6, lr}
	if (currentChannel >= dmxStartAddress) {
     40e:	4b0f      	ldr	r3, [pc, #60]	; (44c <dmx_rx+0x40>)
     410:	881a      	ldrh	r2, [r3, #0]
     412:	4b0f      	ldr	r3, [pc, #60]	; (450 <dmx_rx+0x44>)
     414:	881b      	ldrh	r3, [r3, #0]
     416:	429a      	cmp	r2, r3
     418:	d30c      	bcc.n	434 <dmx_rx+0x28>
		if (currentChannel < dmxStartAddress + DMX_CHANNELS) {
     41a:	0019      	movs	r1, r3
     41c:	3108      	adds	r1, #8
     41e:	428a      	cmp	r2, r1
     420:	da08      	bge.n	434 <dmx_rx+0x28>
			dmx[currentChannel - dmxStartAddress] = descr->rx.buf[(descr->rx.write_index + descr->rx.size) & descr->rx.size];
     422:	1ad4      	subs	r4, r2, r3
     424:	6b45      	ldr	r5, [r0, #52]	; 0x34
     426:	6c01      	ldr	r1, [r0, #64]	; 0x40
     428:	6b80      	ldr	r0, [r0, #56]	; 0x38
     42a:	1809      	adds	r1, r1, r0
     42c:	4001      	ands	r1, r0
     42e:	5c68      	ldrb	r0, [r5, r1]
     430:	4908      	ldr	r1, [pc, #32]	; (454 <dmx_rx+0x48>)
     432:	5508      	strb	r0, [r1, r4]
		}
	}
	if (currentChannel == dmxStartAddress) {
		//gpio_set_pin_level(LED2, false);
	}
	if (currentChannel == dmxStartAddress + DMX_CHANNELS - 1) {
     434:	3307      	adds	r3, #7
     436:	429a      	cmp	r2, r3
     438:	d004      	beq.n	444 <dmx_rx+0x38>
		//gpio_set_pin_level(LED2, true);
		dmx_received();
	}
	currentChannel++;
     43a:	4a04      	ldr	r2, [pc, #16]	; (44c <dmx_rx+0x40>)
     43c:	8813      	ldrh	r3, [r2, #0]
     43e:	3301      	adds	r3, #1
     440:	8013      	strh	r3, [r2, #0]
}
     442:	bd70      	pop	{r4, r5, r6, pc}
		dmx_received();
     444:	4b04      	ldr	r3, [pc, #16]	; (458 <dmx_rx+0x4c>)
     446:	4798      	blx	r3
     448:	e7f7      	b.n	43a <dmx_rx+0x2e>
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	20000034 	.word	0x20000034
     450:	20000004 	.word	0x20000004
     454:	20000090 	.word	0x20000090
     458:	000003e5 	.word	0x000003e5

0000045c <dmx_set_address>:

void dmx_set_address(unsigned short address) {
	dmxStartAddress = address;
     45c:	4b01      	ldr	r3, [pc, #4]	; (464 <dmx_set_address+0x8>)
     45e:	8018      	strh	r0, [r3, #0]
}
     460:	4770      	bx	lr
     462:	46c0      	nop			; (mov r8, r8)
     464:	20000004 	.word	0x20000004

00000468 <dmx_init>:

void dmx_init(struct usart_async_descriptor *const uart) {
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	0004      	movs	r4, r0
	usart_async_register_callback(uart, USART_ASYNC_ERROR_CB, dmx_error);
     46c:	4a05      	ldr	r2, [pc, #20]	; (484 <dmx_init+0x1c>)
     46e:	2102      	movs	r1, #2
     470:	4d05      	ldr	r5, [pc, #20]	; (488 <dmx_init+0x20>)
     472:	47a8      	blx	r5
	usart_async_register_callback(uart, USART_ASYNC_RXC_CB, dmx_rx);
     474:	4a05      	ldr	r2, [pc, #20]	; (48c <dmx_init+0x24>)
     476:	2100      	movs	r1, #0
     478:	0020      	movs	r0, r4
     47a:	47a8      	blx	r5
	usart_async_enable(uart);
     47c:	0020      	movs	r0, r4
     47e:	4b04      	ldr	r3, [pc, #16]	; (490 <dmx_init+0x28>)
     480:	4798      	blx	r3
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	000003d9 	.word	0x000003d9
     488:	00001365 	.word	0x00001365
     48c:	0000040d 	.word	0x0000040d
     490:	00001339 	.word	0x00001339

00000494 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	b085      	sub	sp, #20
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     498:	4a24      	ldr	r2, [pc, #144]	; (52c <ADC_0_init+0x98>)
     49a:	6a11      	ldr	r1, [r2, #32]
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	025b      	lsls	r3, r3, #9
     4a0:	430b      	orrs	r3, r1
     4a2:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     4a4:	4a22      	ldr	r2, [pc, #136]	; (530 <ADC_0_init+0x9c>)
     4a6:	4b23      	ldr	r3, [pc, #140]	; (534 <ADC_0_init+0xa0>)
     4a8:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     4aa:	4d23      	ldr	r5, [pc, #140]	; (538 <ADC_0_init+0xa4>)
     4ac:	4e23      	ldr	r6, [pc, #140]	; (53c <ADC_0_init+0xa8>)
     4ae:	2300      	movs	r3, #0
     4b0:	9302      	str	r3, [sp, #8]
     4b2:	4b23      	ldr	r3, [pc, #140]	; (540 <ADC_0_init+0xac>)
     4b4:	9301      	str	r3, [sp, #4]
     4b6:	2401      	movs	r4, #1
     4b8:	9400      	str	r4, [sp, #0]
     4ba:	2300      	movs	r3, #0
     4bc:	002a      	movs	r2, r5
     4be:	4921      	ldr	r1, [pc, #132]	; (544 <ADC_0_init+0xb0>)
     4c0:	0030      	movs	r0, r6
     4c2:	4f21      	ldr	r7, [pc, #132]	; (548 <ADC_0_init+0xb4>)
     4c4:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     4c6:	1d2a      	adds	r2, r5, #4
     4c8:	2310      	movs	r3, #16
     4ca:	2100      	movs	r1, #0
     4cc:	0030      	movs	r0, r6
     4ce:	4d1f      	ldr	r5, [pc, #124]	; (54c <ADC_0_init+0xb8>)
     4d0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4d2:	26c0      	movs	r6, #192	; 0xc0
     4d4:	05f6      	lsls	r6, r6, #23
     4d6:	2304      	movs	r3, #4
     4d8:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4da:	4b1d      	ldr	r3, [pc, #116]	; (550 <ADC_0_init+0xbc>)
     4dc:	4a1d      	ldr	r2, [pc, #116]	; (554 <ADC_0_init+0xc0>)
     4de:	629a      	str	r2, [r3, #40]	; 0x28
     4e0:	22c0      	movs	r2, #192	; 0xc0
     4e2:	0612      	lsls	r2, r2, #24
     4e4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e6:	2042      	movs	r0, #66	; 0x42
     4e8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ea:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ec:	2501      	movs	r5, #1
     4ee:	4329      	orrs	r1, r5
     4f0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f4:	3811      	subs	r0, #17
     4f6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f8:	270f      	movs	r7, #15
     4fa:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     4fc:	4329      	orrs	r1, r5
     4fe:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     500:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     502:	2108      	movs	r1, #8
     504:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     506:	4914      	ldr	r1, [pc, #80]	; (558 <ADC_0_init+0xc4>)
     508:	6299      	str	r1, [r3, #40]	; 0x28
     50a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50c:	2143      	movs	r1, #67	; 0x43
     50e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     510:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     512:	432a      	orrs	r2, r5
     514:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     516:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     518:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     51a:	3934      	subs	r1, #52	; 0x34
     51c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     51e:	2110      	movs	r1, #16
     520:	430a      	orrs	r2, r1
     522:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     524:	541a      	strb	r2, [r3, r0]

	// Disable digital pin circuitry
	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
}
     526:	b005      	add	sp, #20
     528:	bdf0      	pop	{r4, r5, r6, r7, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	40000400 	.word	0x40000400
     530:	0000401e 	.word	0x0000401e
     534:	40000c00 	.word	0x40000c00
     538:	20000038 	.word	0x20000038
     53c:	200000ac 	.word	0x200000ac
     540:	200000e4 	.word	0x200000e4
     544:	42004000 	.word	0x42004000
     548:	00000be9 	.word	0x00000be9
     54c:	00000c9d 	.word	0x00000c9d
     550:	41004400 	.word	0x41004400
     554:	40000004 	.word	0x40000004
     558:	40000008 	.word	0x40000008

0000055c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     55e:	46ce      	mov	lr, r9
     560:	4647      	mov	r7, r8
     562:	b580      	push	{r7, lr}
     564:	4a2f      	ldr	r2, [pc, #188]	; (624 <EXTERNAL_IRQ_0_init+0xc8>)
     566:	4b30      	ldr	r3, [pc, #192]	; (628 <EXTERNAL_IRQ_0_init+0xcc>)
     568:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     56a:	22c0      	movs	r2, #192	; 0xc0
     56c:	05d2      	lsls	r2, r2, #23
     56e:	2080      	movs	r0, #128	; 0x80
     570:	0240      	lsls	r0, r0, #9
     572:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     574:	4b2d      	ldr	r3, [pc, #180]	; (62c <EXTERNAL_IRQ_0_init+0xd0>)
     576:	4e2e      	ldr	r6, [pc, #184]	; (630 <EXTERNAL_IRQ_0_init+0xd4>)
     578:	629e      	str	r6, [r3, #40]	; 0x28
     57a:	492e      	ldr	r1, [pc, #184]	; (634 <EXTERNAL_IRQ_0_init+0xd8>)
     57c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     57e:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     580:	2750      	movs	r7, #80	; 0x50
     582:	5dd9      	ldrb	r1, [r3, r7]
     584:	2504      	movs	r5, #4
     586:	4329      	orrs	r1, r5
     588:	b2c9      	uxtb	r1, r1
     58a:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     58c:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     590:	2401      	movs	r4, #1
     592:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     594:	2001      	movs	r0, #1
     596:	4681      	mov	r9, r0
     598:	4648      	mov	r0, r9
     59a:	4301      	orrs	r1, r0
     59c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59e:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a0:	3f18      	subs	r7, #24
     5a2:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a4:	200f      	movs	r0, #15
     5a6:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a8:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5aa:	2180      	movs	r1, #128	; 0x80
     5ac:	0289      	lsls	r1, r1, #10
     5ae:	4688      	mov	r8, r1
     5b0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b2:	629e      	str	r6, [r3, #40]	; 0x28
     5b4:	4920      	ldr	r1, [pc, #128]	; (638 <EXTERNAL_IRQ_0_init+0xdc>)
     5b6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5b8:	4641      	mov	r1, r8
     5ba:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5bc:	2151      	movs	r1, #81	; 0x51
     5be:	468c      	mov	ip, r1
     5c0:	5c59      	ldrb	r1, [r3, r1]
     5c2:	4329      	orrs	r1, r5
     5c4:	b2c9      	uxtb	r1, r1
     5c6:	4660      	mov	r0, ip
     5c8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5ca:	4641      	mov	r1, r8
     5cc:	6191      	str	r1, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d0:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d2:	4648      	mov	r0, r9
     5d4:	4301      	orrs	r1, r0
     5d6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d8:	4660      	mov	r0, ip
     5da:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5dc:	5dd9      	ldrb	r1, [r3, r7]
     5de:	468c      	mov	ip, r1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e0:	210f      	movs	r1, #15
     5e2:	4660      	mov	r0, ip
     5e4:	4008      	ands	r0, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e6:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5e8:	2080      	movs	r0, #128	; 0x80
     5ea:	0380      	lsls	r0, r0, #14
     5ec:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ee:	629e      	str	r6, [r3, #40]	; 0x28
     5f0:	4e12      	ldr	r6, [pc, #72]	; (63c <EXTERNAL_IRQ_0_init+0xe0>)
     5f2:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5f4:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     5f6:	2655      	movs	r6, #85	; 0x55
     5f8:	5d9f      	ldrb	r7, [r3, r6]
     5fa:	433d      	orrs	r5, r7
     5fc:	b2ed      	uxtb	r5, r5
     5fe:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     600:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     604:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     606:	4648      	mov	r0, r9
     608:	4302      	orrs	r2, r0
     60a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60c:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     60e:	203a      	movs	r0, #58	; 0x3a
     610:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     612:	4011      	ands	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     614:	5419      	strb	r1, [r3, r0]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BTN3, PINMUX_PA21A_EIC_EXTINT5);

	ext_irq_init();
     616:	4b0a      	ldr	r3, [pc, #40]	; (640 <EXTERNAL_IRQ_0_init+0xe4>)
     618:	4798      	blx	r3
}
     61a:	bc0c      	pop	{r2, r3}
     61c:	4690      	mov	r8, r2
     61e:	4699      	mov	r9, r3
     620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	00004005 	.word	0x00004005
     628:	40000c00 	.word	0x40000c00
     62c:	41004400 	.word	0x41004400
     630:	40020000 	.word	0x40020000
     634:	c0020001 	.word	0xc0020001
     638:	c0020002 	.word	0xc0020002
     63c:	c0020020 	.word	0xc0020020
     640:	00001015 	.word	0x00001015

00000644 <USART_0_CLOCK_init>:
     644:	4a04      	ldr	r2, [pc, #16]	; (658 <USART_0_CLOCK_init+0x14>)
     646:	6a13      	ldr	r3, [r2, #32]
     648:	2180      	movs	r1, #128	; 0x80
     64a:	430b      	orrs	r3, r1
     64c:	6213      	str	r3, [r2, #32]
     64e:	4a03      	ldr	r2, [pc, #12]	; (65c <USART_0_CLOCK_init+0x18>)
     650:	4b03      	ldr	r3, [pc, #12]	; (660 <USART_0_CLOCK_init+0x1c>)
     652:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     654:	4770      	bx	lr
     656:	46c0      	nop			; (mov r8, r8)
     658:	40000400 	.word	0x40000400
     65c:	00004019 	.word	0x00004019
     660:	40000c00 	.word	0x40000c00

00000664 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     664:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     666:	4b0f      	ldr	r3, [pc, #60]	; (6a4 <USART_0_PORT_init+0x40>)
     668:	2256      	movs	r2, #86	; 0x56
     66a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     66c:	2501      	movs	r5, #1
     66e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     670:	2401      	movs	r4, #1
     672:	4321      	orrs	r1, r4
     674:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     678:	203b      	movs	r0, #59	; 0x3b
     67a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     67c:	3a47      	subs	r2, #71	; 0x47
     67e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     680:	2203      	movs	r2, #3
     682:	4311      	orrs	r1, r2
     684:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     686:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     688:	2157      	movs	r1, #87	; 0x57
     68a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	4322      	orrs	r2, r4
     690:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     694:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     696:	3948      	subs	r1, #72	; 0x48
     698:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     69a:	2130      	movs	r1, #48	; 0x30
     69c:	430a      	orrs	r2, r1
     69e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a0:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(DMX_TX, PINMUX_PA22D_SERCOM5_PAD0);

	gpio_set_pin_function(DMX_RX, PINMUX_PA23D_SERCOM5_PAD1);
}
     6a2:	bd30      	pop	{r4, r5, pc}
     6a4:	41004400 	.word	0x41004400

000006a8 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     6a8:	b510      	push	{r4, lr}
     6aa:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <USART_0_init+0x24>)
     6ae:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     6b0:	2300      	movs	r3, #0
     6b2:	9300      	str	r3, [sp, #0]
     6b4:	3310      	adds	r3, #16
     6b6:	4a06      	ldr	r2, [pc, #24]	; (6d0 <USART_0_init+0x28>)
     6b8:	3214      	adds	r2, #20
     6ba:	4906      	ldr	r1, [pc, #24]	; (6d4 <USART_0_init+0x2c>)
     6bc:	4806      	ldr	r0, [pc, #24]	; (6d8 <USART_0_init+0x30>)
     6be:	4c07      	ldr	r4, [pc, #28]	; (6dc <USART_0_init+0x34>)
     6c0:	47a0      	blx	r4
	USART_0_PORT_init();
     6c2:	4b07      	ldr	r3, [pc, #28]	; (6e0 <USART_0_init+0x38>)
     6c4:	4798      	blx	r3
}
     6c6:	b002      	add	sp, #8
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	00000645 	.word	0x00000645
     6d0:	20000038 	.word	0x20000038
     6d4:	42001c00 	.word	0x42001c00
     6d8:	200000fc 	.word	0x200000fc
     6dc:	0000129d 	.word	0x0000129d
     6e0:	00000665 	.word	0x00000665

000006e4 <AC_0_PORT_init>:

void AC_0_PORT_init(void)
{
     6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e6:	46c6      	mov	lr, r8
     6e8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ea:	27c0      	movs	r7, #192	; 0xc0
     6ec:	05ff      	lsls	r7, r7, #23
     6ee:	2310      	movs	r3, #16
     6f0:	607b      	str	r3, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6f2:	4b20      	ldr	r3, [pc, #128]	; (774 <AC_0_PORT_init+0x90>)
     6f4:	4a20      	ldr	r2, [pc, #128]	; (778 <AC_0_PORT_init+0x94>)
     6f6:	629a      	str	r2, [r3, #40]	; 0x28
     6f8:	26c0      	movs	r6, #192	; 0xc0
     6fa:	0636      	lsls	r6, r6, #24
     6fc:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6fe:	2144      	movs	r1, #68	; 0x44
     700:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     702:	2501      	movs	r5, #1
     704:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     706:	2001      	movs	r0, #1
     708:	4302      	orrs	r2, r0
     70a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     70c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     70e:	2232      	movs	r2, #50	; 0x32
     710:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     712:	240f      	movs	r4, #15
     714:	46a0      	mov	r8, r4
     716:	43a1      	bics	r1, r4
	tmp |= PORT_PMUX_PMUXE(data);
     718:	4301      	orrs	r1, r0
     71a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     71c:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     71e:	2120      	movs	r1, #32
     720:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     722:	4916      	ldr	r1, [pc, #88]	; (77c <AC_0_PORT_init+0x98>)
     724:	6299      	str	r1, [r3, #40]	; 0x28
     726:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     728:	2145      	movs	r1, #69	; 0x45
     72a:	468c      	mov	ip, r1
     72c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     72e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     730:	4301      	orrs	r1, r0
     732:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     734:	4664      	mov	r4, ip
     736:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     738:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     73a:	3c36      	subs	r4, #54	; 0x36
     73c:	4021      	ands	r1, r4
	tmp |= PORT_PMUX_PMUXO(data);
     73e:	2410      	movs	r4, #16
     740:	46a4      	mov	ip, r4
     742:	4664      	mov	r4, ip
     744:	4321      	orrs	r1, r4
     746:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     748:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     74a:	320e      	adds	r2, #14
     74c:	607a      	str	r2, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74e:	4a0c      	ldr	r2, [pc, #48]	; (780 <AC_0_PORT_init+0x9c>)
     750:	629a      	str	r2, [r3, #40]	; 0x28
     752:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     754:	2246      	movs	r2, #70	; 0x46
     756:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     758:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     75a:	4301      	orrs	r1, r0
     75c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	2133      	movs	r1, #51	; 0x33
     762:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	4644      	mov	r4, r8
     766:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     768:	4302      	orrs	r2, r0
     76a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(CONFIG3, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(CONFIG3, PINMUX_PA06B_AC_AIN2);
}
     76e:	bc04      	pop	{r2}
     770:	4690      	mov	r8, r2
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
     774:	41004400 	.word	0x41004400
     778:	40000010 	.word	0x40000010
     77c:	40000020 	.word	0x40000020
     780:	40000040 	.word	0x40000040

00000784 <AC_0_CLOCK_init>:
     784:	4a05      	ldr	r2, [pc, #20]	; (79c <AC_0_CLOCK_init+0x18>)
     786:	6a11      	ldr	r1, [r2, #32]
     788:	2380      	movs	r3, #128	; 0x80
     78a:	029b      	lsls	r3, r3, #10
     78c:	430b      	orrs	r3, r1
     78e:	6213      	str	r3, [r2, #32]
     790:	4b03      	ldr	r3, [pc, #12]	; (7a0 <AC_0_CLOCK_init+0x1c>)
     792:	4a04      	ldr	r2, [pc, #16]	; (7a4 <AC_0_CLOCK_init+0x20>)
     794:	805a      	strh	r2, [r3, #2]
     796:	4a04      	ldr	r2, [pc, #16]	; (7a8 <AC_0_CLOCK_init+0x24>)
     798:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBC, AC);
	_gclk_enable_channel(AC_GCLK_ID_DIG, CONF_GCLK_DIG_AC_SRC);
	_gclk_enable_channel(AC_GCLK_ID_ANA, CONF_GCLK_ANA_AC_SRC);
}
     79a:	4770      	bx	lr
     79c:	40000400 	.word	0x40000400
     7a0:	40000c00 	.word	0x40000c00
     7a4:	0000401f 	.word	0x0000401f
     7a8:	00004020 	.word	0x00004020

000007ac <AC_0_init>:

void AC_0_init(void)
{
     7ac:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     7ae:	4b04      	ldr	r3, [pc, #16]	; (7c0 <AC_0_init+0x14>)
     7b0:	4798      	blx	r3
	ac_async_init(&AC_0, AC);
     7b2:	4904      	ldr	r1, [pc, #16]	; (7c4 <AC_0_init+0x18>)
     7b4:	4804      	ldr	r0, [pc, #16]	; (7c8 <AC_0_init+0x1c>)
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <AC_0_init+0x20>)
     7b8:	4798      	blx	r3
	AC_0_PORT_init();
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <AC_0_init+0x24>)
     7bc:	4798      	blx	r3
}
     7be:	bd10      	pop	{r4, pc}
     7c0:	00000785 	.word	0x00000785
     7c4:	42004400 	.word	0x42004400
     7c8:	20000098 	.word	0x20000098
     7cc:	00000aa9 	.word	0x00000aa9
     7d0:	000006e5 	.word	0x000006e5

000007d4 <DAC_0_CLOCK_init>:
     7d4:	4a04      	ldr	r2, [pc, #16]	; (7e8 <DAC_0_CLOCK_init+0x14>)
     7d6:	6a11      	ldr	r1, [r2, #32]
     7d8:	2380      	movs	r3, #128	; 0x80
     7da:	02db      	lsls	r3, r3, #11
     7dc:	430b      	orrs	r3, r1
     7de:	6213      	str	r3, [r2, #32]
     7e0:	4a02      	ldr	r2, [pc, #8]	; (7ec <DAC_0_CLOCK_init+0x18>)
     7e2:	4b03      	ldr	r3, [pc, #12]	; (7f0 <DAC_0_CLOCK_init+0x1c>)
     7e4:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     7e6:	4770      	bx	lr
     7e8:	40000400 	.word	0x40000400
     7ec:	00004021 	.word	0x00004021
     7f0:	40000c00 	.word	0x40000c00

000007f4 <DAC_0_init>:

void DAC_0_init(void)
{
     7f4:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     7f6:	4b03      	ldr	r3, [pc, #12]	; (804 <DAC_0_init+0x10>)
     7f8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     7fa:	4903      	ldr	r1, [pc, #12]	; (808 <DAC_0_init+0x14>)
     7fc:	4803      	ldr	r0, [pc, #12]	; (80c <DAC_0_init+0x18>)
     7fe:	4b04      	ldr	r3, [pc, #16]	; (810 <DAC_0_init+0x1c>)
     800:	4798      	blx	r3
	DAC_0_PORT_init();
}
     802:	bd10      	pop	{r4, pc}
     804:	000007d5 	.word	0x000007d5
     808:	42004800 	.word	0x42004800
     80c:	200000d8 	.word	0x200000d8
     810:	00000ea1 	.word	0x00000ea1

00000814 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     814:	b510      	push	{r4, lr}
     816:	4a05      	ldr	r2, [pc, #20]	; (82c <EVENT_SYSTEM_0_init+0x18>)
     818:	4b05      	ldr	r3, [pc, #20]	; (830 <EVENT_SYSTEM_0_init+0x1c>)
     81a:	805a      	strh	r2, [r3, #2]
     81c:	4a05      	ldr	r2, [pc, #20]	; (834 <EVENT_SYSTEM_0_init+0x20>)
     81e:	6a13      	ldr	r3, [r2, #32]
     820:	2102      	movs	r1, #2
     822:	430b      	orrs	r3, r1
     824:	6213      	str	r3, [r2, #32]
	_gclk_enable_channel(EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC);

	_pm_enable_bus_clock(PM_BUS_APBC, EVSYS);

	event_system_init();
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <EVENT_SYSTEM_0_init+0x24>)
     828:	4798      	blx	r3
}
     82a:	bd10      	pop	{r4, pc}
     82c:	00004007 	.word	0x00004007
     830:	40000c00 	.word	0x40000c00
     834:	40000400 	.word	0x40000400
     838:	00000fc5 	.word	0x00000fc5

0000083c <TIMER_0_CLOCK_init>:
     83c:	4a04      	ldr	r2, [pc, #16]	; (850 <TIMER_0_CLOCK_init+0x14>)
     83e:	6a11      	ldr	r1, [r2, #32]
     840:	2380      	movs	r3, #128	; 0x80
     842:	009b      	lsls	r3, r3, #2
     844:	430b      	orrs	r3, r1
     846:	6213      	str	r3, [r2, #32]
     848:	4a02      	ldr	r2, [pc, #8]	; (854 <TIMER_0_CLOCK_init+0x18>)
     84a:	4b03      	ldr	r3, [pc, #12]	; (858 <TIMER_0_CLOCK_init+0x1c>)
     84c:	805a      	strh	r2, [r3, #2]

void TIMER_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC1);
	_gclk_enable_channel(TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC);
}
     84e:	4770      	bx	lr
     850:	40000400 	.word	0x40000400
     854:	0000401a 	.word	0x0000401a
     858:	40000c00 	.word	0x40000c00

0000085c <system_init>:

void system_init(void)
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85e:	46de      	mov	lr, fp
     860:	4657      	mov	r7, sl
     862:	464e      	mov	r6, r9
     864:	4645      	mov	r5, r8
     866:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     868:	4b77      	ldr	r3, [pc, #476]	; (a48 <system_init+0x1ec>)
     86a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     86c:	22c0      	movs	r2, #192	; 0xc0
     86e:	05d2      	lsls	r2, r2, #23
     870:	2380      	movs	r3, #128	; 0x80
     872:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     874:	4b75      	ldr	r3, [pc, #468]	; (a4c <system_init+0x1f0>)
     876:	4976      	ldr	r1, [pc, #472]	; (a50 <system_init+0x1f4>)
     878:	6299      	str	r1, [r3, #40]	; 0x28
     87a:	4d76      	ldr	r5, [pc, #472]	; (a54 <system_init+0x1f8>)
     87c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     87e:	2047      	movs	r0, #71	; 0x47
     880:	5c19      	ldrb	r1, [r3, r0]
     882:	2404      	movs	r4, #4
     884:	46a4      	mov	ip, r4
     886:	43a1      	bics	r1, r4
     888:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     88c:	2101      	movs	r1, #1
     88e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     890:	541c      	strb	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     892:	2480      	movs	r4, #128	; 0x80
     894:	01e4      	lsls	r4, r4, #7
     896:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     898:	486f      	ldr	r0, [pc, #444]	; (a58 <system_init+0x1fc>)
     89a:	6298      	str	r0, [r3, #40]	; 0x28
     89c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     89e:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     8a0:	254e      	movs	r5, #78	; 0x4e
     8a2:	5d58      	ldrb	r0, [r3, r5]
     8a4:	2604      	movs	r6, #4
     8a6:	4330      	orrs	r0, r6
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ac:	6194      	str	r4, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ae:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8b0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8b2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8b4:	2080      	movs	r0, #128	; 0x80
     8b6:	0500      	lsls	r0, r0, #20
     8b8:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8ba:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8bc:	2080      	movs	r0, #128	; 0x80
     8be:	05c0      	lsls	r0, r0, #23
     8c0:	6298      	str	r0, [r3, #40]	; 0x28
     8c2:	4866      	ldr	r0, [pc, #408]	; (a5c <system_init+0x200>)
     8c4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c6:	350d      	adds	r5, #13
     8c8:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ca:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8cc:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ce:	2080      	movs	r0, #128	; 0x80
     8d0:	0540      	lsls	r0, r0, #21
     8d2:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8d4:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8d6:	2080      	movs	r0, #128	; 0x80
     8d8:	05c0      	lsls	r0, r0, #23
     8da:	6298      	str	r0, [r3, #40]	; 0x28
     8dc:	4860      	ldr	r0, [pc, #384]	; (a60 <system_init+0x204>)
     8de:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8e0:	3501      	adds	r5, #1
     8e2:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8e4:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8e8:	2098      	movs	r0, #152	; 0x98
     8ea:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8ec:	2788      	movs	r7, #136	; 0x88
     8ee:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f0:	3010      	adds	r0, #16
     8f2:	4d5c      	ldr	r5, [pc, #368]	; (a64 <system_init+0x208>)
     8f4:	501d      	str	r5, [r3, r0]
     8f6:	25c0      	movs	r5, #192	; 0xc0
     8f8:	062d      	lsls	r5, r5, #24
     8fa:	46aa      	mov	sl, r5
     8fc:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8fe:	25c0      	movs	r5, #192	; 0xc0
     900:	46a8      	mov	r8, r5
     902:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     904:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     906:	4646      	mov	r6, r8
     908:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     90a:	2594      	movs	r5, #148	; 0x94
     90c:	46a8      	mov	r8, r5
     90e:	3d92      	subs	r5, #146	; 0x92
     910:	4646      	mov	r6, r8
     912:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     914:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     916:	4d54      	ldr	r5, [pc, #336]	; (a68 <system_init+0x20c>)
     918:	501d      	str	r5, [r3, r0]
     91a:	4655      	mov	r5, sl
     91c:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	25c1      	movs	r5, #193	; 0xc1
     920:	46a9      	mov	r9, r5
     922:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     924:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     926:	464e      	mov	r6, r9
     928:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92a:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92c:	4d4f      	ldr	r5, [pc, #316]	; (a6c <system_init+0x210>)
     92e:	501d      	str	r5, [r3, r0]
     930:	4655      	mov	r5, sl
     932:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     934:	4645      	mov	r5, r8
     936:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     938:	353a      	adds	r5, #58	; 0x3a
     93a:	5d5c      	ldrb	r4, [r3, r5]
     93c:	4666      	mov	r6, ip
     93e:	43b4      	bics	r4, r6
     940:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     942:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     944:	438c      	bics	r4, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     946:	2601      	movs	r6, #1
     948:	46b1      	mov	r9, r6
     94a:	464e      	mov	r6, r9
     94c:	4334      	orrs	r4, r6
     94e:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     950:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     952:	3d17      	subs	r5, #23
     954:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     956:	260f      	movs	r6, #15
     958:	43b4      	bics	r4, r6
	tmp |= PORT_PMUX_PMUXE(data);
     95a:	2607      	movs	r6, #7
     95c:	46b3      	mov	fp, r6
     95e:	465e      	mov	r6, fp
     960:	4334      	orrs	r4, r6
     962:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     964:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     966:	2480      	movs	r4, #128	; 0x80
     968:	0224      	lsls	r4, r4, #8
     96a:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     96c:	4e40      	ldr	r6, [pc, #256]	; (a70 <system_init+0x214>)
     96e:	501e      	str	r6, [r3, r0]
     970:	4656      	mov	r6, sl
     972:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     974:	4646      	mov	r6, r8
     976:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     978:	24cf      	movs	r4, #207	; 0xcf
     97a:	46a2      	mov	sl, r4
     97c:	5d1c      	ldrb	r4, [r3, r4]
     97e:	4666      	mov	r6, ip
     980:	43b4      	bics	r4, r6
     982:	4656      	mov	r6, sl
     984:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     986:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     988:	438c      	bics	r4, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     98a:	464e      	mov	r6, r9
     98c:	4334      	orrs	r4, r6
     98e:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     990:	4656      	mov	r6, sl
     992:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     994:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     996:	3ec0      	subs	r6, #192	; 0xc0
     998:	46b3      	mov	fp, r6
     99a:	4034      	ands	r4, r6
	tmp |= PORT_PMUX_PMUXO(data);
     99c:	2670      	movs	r6, #112	; 0x70
     99e:	46b2      	mov	sl, r6
     9a0:	4656      	mov	r6, sl
     9a2:	4334      	orrs	r4, r6
     9a4:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9a8:	2480      	movs	r4, #128	; 0x80
     9aa:	02a4      	lsls	r4, r4, #10
     9ac:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ae:	2580      	movs	r5, #128	; 0x80
     9b0:	05ed      	lsls	r5, r5, #23
     9b2:	501d      	str	r5, [r3, r0]
     9b4:	4d2f      	ldr	r5, [pc, #188]	; (a74 <system_init+0x218>)
     9b6:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b8:	4645      	mov	r5, r8
     9ba:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9bc:	24d1      	movs	r4, #209	; 0xd1
     9be:	5d1d      	ldrb	r5, [r3, r4]
     9c0:	4666      	mov	r6, ip
     9c2:	43b5      	bics	r5, r6
     9c4:	551d      	strb	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c6:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     9c8:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9ca:	464e      	mov	r6, r9
     9cc:	4335      	orrs	r5, r6
     9ce:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d0:	551d      	strb	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9d2:	25b8      	movs	r5, #184	; 0xb8
     9d4:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9d6:	465e      	mov	r6, fp
     9d8:	4034      	ands	r4, r6
	tmp |= PORT_PMUX_PMUXO(data);
     9da:	4656      	mov	r6, sl
     9dc:	4334      	orrs	r4, r6
     9de:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9e0:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e2:	2480      	movs	r4, #128	; 0x80
     9e4:	05e4      	lsls	r4, r4, #23
     9e6:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e8:	501c      	str	r4, [r3, r0]
     9ea:	4c23      	ldr	r4, [pc, #140]	; (a78 <system_init+0x21c>)
     9ec:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ee:	4640      	mov	r0, r8
     9f0:	2480      	movs	r4, #128	; 0x80
     9f2:	05e4      	lsls	r4, r4, #23
     9f4:	5014      	str	r4, [r2, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9f6:	304a      	adds	r0, #74	; 0x4a
     9f8:	5c1a      	ldrb	r2, [r3, r0]
     9fa:	4664      	mov	r4, ip
     9fc:	43a2      	bics	r2, r4
     9fe:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a00:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a04:	4649      	mov	r1, r9
     a06:	430a      	orrs	r2, r1
     a08:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a0a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a0c:	21bf      	movs	r1, #191	; 0xbf
     a0e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a10:	38cf      	subs	r0, #207	; 0xcf
     a12:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     a14:	2005      	movs	r0, #5
     a16:	4302      	orrs	r2, r0
     a18:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a1a:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      GPIO_PIN_FUNCTION_F);

	ADC_0_init();
     a1c:	4b17      	ldr	r3, [pc, #92]	; (a7c <system_init+0x220>)
     a1e:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     a20:	4b17      	ldr	r3, [pc, #92]	; (a80 <system_init+0x224>)
     a22:	4798      	blx	r3

	USART_0_init();
     a24:	4b17      	ldr	r3, [pc, #92]	; (a84 <system_init+0x228>)
     a26:	4798      	blx	r3

	AC_0_init();
     a28:	4b17      	ldr	r3, [pc, #92]	; (a88 <system_init+0x22c>)
     a2a:	4798      	blx	r3

	DAC_0_init();
     a2c:	4b17      	ldr	r3, [pc, #92]	; (a8c <system_init+0x230>)
     a2e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     a30:	4b17      	ldr	r3, [pc, #92]	; (a90 <system_init+0x234>)
     a32:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     a34:	4b17      	ldr	r3, [pc, #92]	; (a94 <system_init+0x238>)
     a36:	4798      	blx	r3

	TIMER_0_init();
     a38:	4b17      	ldr	r3, [pc, #92]	; (a98 <system_init+0x23c>)
     a3a:	4798      	blx	r3
}
     a3c:	bc3c      	pop	{r2, r3, r4, r5}
     a3e:	4690      	mov	r8, r2
     a40:	4699      	mov	r9, r3
     a42:	46a2      	mov	sl, r4
     a44:	46ab      	mov	fp, r5
     a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a48:	000019ad 	.word	0x000019ad
     a4c:	41004400 	.word	0x41004400
     a50:	40020080 	.word	0x40020080
     a54:	c0020000 	.word	0xc0020000
     a58:	40024000 	.word	0x40024000
     a5c:	c0000800 	.word	0xc0000800
     a60:	c0001000 	.word	0xc0001000
     a64:	40000001 	.word	0x40000001
     a68:	40000002 	.word	0x40000002
     a6c:	40004000 	.word	0x40004000
     a70:	40008000 	.word	0x40008000
     a74:	c0000002 	.word	0xc0000002
     a78:	c0004000 	.word	0xc0004000
     a7c:	00000495 	.word	0x00000495
     a80:	0000055d 	.word	0x0000055d
     a84:	000006a9 	.word	0x000006a9
     a88:	000007ad 	.word	0x000007ad
     a8c:	000007f5 	.word	0x000007f5
     a90:	00000815 	.word	0x00000815
     a94:	0000083d 	.word	0x0000083d
     a98:	000020e9 	.word	0x000020e9

00000a9c <ac_async_comparison_ready>:
 *
 * \param[in] device The pointer to AC device structure
 * \param[in] comp Comparator number
 */
static void ac_async_comparison_ready(struct _ac_async_device *device, const uint8_t comp, const uint8_t result)
{
     a9c:	b510      	push	{r4, lr}
	struct ac_async_descriptor *const descr = CONTAINER_OF(device, struct ac_async_descriptor, device);

	if (descr->cb.comparison_ready) {
     a9e:	6903      	ldr	r3, [r0, #16]
     aa0:	2b00      	cmp	r3, #0
     aa2:	d000      	beq.n	aa6 <ac_async_comparison_ready+0xa>
		descr->cb.comparison_ready(descr, comp, result);
     aa4:	4798      	blx	r3
	}
}
     aa6:	bd10      	pop	{r4, pc}

00000aa8 <ac_async_init>:
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	0004      	movs	r4, r0
     aac:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     aae:	2800      	cmp	r0, #0
     ab0:	d011      	beq.n	ad6 <ac_async_init+0x2e>
     ab2:	2900      	cmp	r1, #0
     ab4:	d00d      	beq.n	ad2 <ac_async_init+0x2a>
     ab6:	2001      	movs	r0, #1
     ab8:	2236      	movs	r2, #54	; 0x36
     aba:	4908      	ldr	r1, [pc, #32]	; (adc <ac_async_init+0x34>)
     abc:	4b08      	ldr	r3, [pc, #32]	; (ae0 <ac_async_init+0x38>)
     abe:	4798      	blx	r3
	init_status = _ac_async_init(&descr->device, hw);
     ac0:	0029      	movs	r1, r5
     ac2:	0020      	movs	r0, r4
     ac4:	4b07      	ldr	r3, [pc, #28]	; (ae4 <ac_async_init+0x3c>)
     ac6:	4798      	blx	r3
	if (init_status) {
     ac8:	2800      	cmp	r0, #0
     aca:	d101      	bne.n	ad0 <ac_async_init+0x28>
	descr->device.cb.comparison_ready_cb = ac_async_comparison_ready;
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <ac_async_init+0x40>)
     ace:	6023      	str	r3, [r4, #0]
}
     ad0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     ad2:	2000      	movs	r0, #0
     ad4:	e7f0      	b.n	ab8 <ac_async_init+0x10>
     ad6:	2000      	movs	r0, #0
     ad8:	e7ee      	b.n	ab8 <ac_async_init+0x10>
     ada:	46c0      	nop			; (mov r8, r8)
     adc:	00002944 	.word	0x00002944
     ae0:	000013dd 	.word	0x000013dd
     ae4:	000015b9 	.word	0x000015b9
     ae8:	00000a9d 	.word	0x00000a9d

00000aec <ac_async_enable>:
{
     aec:	b510      	push	{r4, lr}
     aee:	0004      	movs	r4, r0
	ASSERT(descr);
     af0:	1e43      	subs	r3, r0, #1
     af2:	4198      	sbcs	r0, r3
     af4:	b2c0      	uxtb	r0, r0
     af6:	2252      	movs	r2, #82	; 0x52
     af8:	4903      	ldr	r1, [pc, #12]	; (b08 <ac_async_enable+0x1c>)
     afa:	4b04      	ldr	r3, [pc, #16]	; (b0c <ac_async_enable+0x20>)
     afc:	4798      	blx	r3
	_ac_async_enable(&descr->device);
     afe:	0020      	movs	r0, r4
     b00:	4b03      	ldr	r3, [pc, #12]	; (b10 <ac_async_enable+0x24>)
     b02:	4798      	blx	r3
}
     b04:	2000      	movs	r0, #0
     b06:	bd10      	pop	{r4, pc}
     b08:	00002944 	.word	0x00002944
     b0c:	000013dd 	.word	0x000013dd
     b10:	0000166d 	.word	0x0000166d

00000b14 <ac_async_register_callback>:
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
     b18:	000d      	movs	r5, r1
     b1a:	0016      	movs	r6, r2
	ASSERT(descr);
     b1c:	1e43      	subs	r3, r0, #1
     b1e:	4198      	sbcs	r0, r3
     b20:	b2c0      	uxtb	r0, r0
     b22:	226b      	movs	r2, #107	; 0x6b
     b24:	4905      	ldr	r1, [pc, #20]	; (b3c <ac_async_register_callback+0x28>)
     b26:	4b06      	ldr	r3, [pc, #24]	; (b40 <ac_async_register_callback+0x2c>)
     b28:	4798      	blx	r3
	switch (type) {
     b2a:	2d00      	cmp	r5, #0
     b2c:	d102      	bne.n	b34 <ac_async_register_callback+0x20>
		descr->cb.comparison_ready = cb;
     b2e:	6126      	str	r6, [r4, #16]
	return ERR_NONE;
     b30:	2000      	movs	r0, #0
}
     b32:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
     b34:	200d      	movs	r0, #13
     b36:	4240      	negs	r0, r0
     b38:	e7fb      	b.n	b32 <ac_async_register_callback+0x1e>
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00002944 	.word	0x00002944
     b40:	000013dd 	.word	0x000013dd

00000b44 <ac_async_start_comparison>:
{
     b44:	b570      	push	{r4, r5, r6, lr}
     b46:	0004      	movs	r4, r0
     b48:	000d      	movs	r5, r1
	ASSERT(descr);
     b4a:	1e43      	subs	r3, r0, #1
     b4c:	4198      	sbcs	r0, r3
     b4e:	b2c0      	uxtb	r0, r0
     b50:	227d      	movs	r2, #125	; 0x7d
     b52:	4904      	ldr	r1, [pc, #16]	; (b64 <ac_async_start_comparison+0x20>)
     b54:	4b04      	ldr	r3, [pc, #16]	; (b68 <ac_async_start_comparison+0x24>)
     b56:	4798      	blx	r3
	_ac_async_start_comparison(&descr->device, comp);
     b58:	0029      	movs	r1, r5
     b5a:	0020      	movs	r0, r4
     b5c:	4b03      	ldr	r3, [pc, #12]	; (b6c <ac_async_start_comparison+0x28>)
     b5e:	4798      	blx	r3
}
     b60:	2000      	movs	r0, #0
     b62:	bd70      	pop	{r4, r5, r6, pc}
     b64:	00002944 	.word	0x00002944
     b68:	000013dd 	.word	0x000013dd
     b6c:	00001681 	.word	0x00001681

00000b70 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     b70:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     b72:	6983      	ldr	r3, [r0, #24]
     b74:	2b00      	cmp	r3, #0
     b76:	d000      	beq.n	b7a <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     b78:	4798      	blx	r3
	}
}
     b7a:	bd10      	pop	{r4, pc}

00000b7c <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     b7c:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     b7e:	69c3      	ldr	r3, [r0, #28]
     b80:	2b00      	cmp	r3, #0
     b82:	d000      	beq.n	b86 <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     b84:	4798      	blx	r3
	}
}
     b86:	bd10      	pop	{r4, pc}

00000b88 <adc_async_channel_conversion_done>:
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8a:	b083      	sub	sp, #12
     b8c:	0005      	movs	r5, r0
     b8e:	000e      	movs	r6, r1
     b90:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     b92:	6a03      	ldr	r3, [r0, #32]
     b94:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     b96:	0053      	lsls	r3, r2, #1
     b98:	189b      	adds	r3, r3, r2
     b9a:	00dc      	lsls	r4, r3, #3
     b9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
     b9e:	469c      	mov	ip, r3
     ba0:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     ba2:	1d27      	adds	r7, r4, #4
     ba4:	9101      	str	r1, [sp, #4]
     ba6:	466b      	mov	r3, sp
     ba8:	7919      	ldrb	r1, [r3, #4]
     baa:	0038      	movs	r0, r7
     bac:	4b0c      	ldr	r3, [pc, #48]	; (be0 <adc_async_channel_conversion_done+0x58>)
     bae:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     bb0:	0028      	movs	r0, r5
     bb2:	4b0c      	ldr	r3, [pc, #48]	; (be4 <adc_async_channel_conversion_done+0x5c>)
     bb4:	4798      	blx	r3
     bb6:	2801      	cmp	r0, #1
     bb8:	d907      	bls.n	bca <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     bba:	9b01      	ldr	r3, [sp, #4]
     bbc:	0a19      	lsrs	r1, r3, #8
     bbe:	0038      	movs	r0, r7
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <adc_async_channel_conversion_done+0x58>)
     bc2:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     bc4:	8aa3      	ldrh	r3, [r4, #20]
     bc6:	3301      	adds	r3, #1
     bc8:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     bca:	8aa3      	ldrh	r3, [r4, #20]
     bcc:	3301      	adds	r3, #1
     bce:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     bd0:	6823      	ldr	r3, [r4, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d002      	beq.n	bdc <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     bd6:	0031      	movs	r1, r6
     bd8:	0028      	movs	r0, r5
     bda:	4798      	blx	r3
}
     bdc:	b003      	add	sp, #12
     bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be0:	0000147d 	.word	0x0000147d
     be4:	000018b7 	.word	0x000018b7

00000be8 <adc_async_init>:
{
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	46d6      	mov	lr, sl
     bec:	b500      	push	{lr}
     bee:	b082      	sub	sp, #8
     bf0:	0005      	movs	r5, r0
     bf2:	9101      	str	r1, [sp, #4]
     bf4:	0016      	movs	r6, r2
     bf6:	001c      	movs	r4, r3
     bf8:	ab08      	add	r3, sp, #32
     bfa:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     bfc:	2800      	cmp	r0, #0
     bfe:	d00c      	beq.n	c1a <adc_async_init+0x32>
     c00:	2900      	cmp	r1, #0
     c02:	d00c      	beq.n	c1e <adc_async_init+0x36>
     c04:	2a00      	cmp	r2, #0
     c06:	d00c      	beq.n	c22 <adc_async_init+0x3a>
     c08:	2f00      	cmp	r7, #0
     c0a:	d00c      	beq.n	c26 <adc_async_init+0x3e>
     c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c0e:	2b00      	cmp	r3, #0
     c10:	d001      	beq.n	c16 <adc_async_init+0x2e>
     c12:	2001      	movs	r0, #1
     c14:	e008      	b.n	c28 <adc_async_init+0x40>
     c16:	2000      	movs	r0, #0
     c18:	e006      	b.n	c28 <adc_async_init+0x40>
     c1a:	2000      	movs	r0, #0
     c1c:	e004      	b.n	c28 <adc_async_init+0x40>
     c1e:	2000      	movs	r0, #0
     c20:	e002      	b.n	c28 <adc_async_init+0x40>
     c22:	2000      	movs	r0, #0
     c24:	e000      	b.n	c28 <adc_async_init+0x40>
     c26:	2000      	movs	r0, #0
     c28:	223f      	movs	r2, #63	; 0x3f
     c2a:	4916      	ldr	r1, [pc, #88]	; (c84 <adc_async_init+0x9c>)
     c2c:	4b16      	ldr	r3, [pc, #88]	; (c88 <adc_async_init+0xa0>)
     c2e:	469a      	mov	sl, r3
     c30:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     c32:	1c62      	adds	r2, r4, #1
     c34:	0ffb      	lsrs	r3, r7, #31
     c36:	17d0      	asrs	r0, r2, #31
     c38:	42ba      	cmp	r2, r7
     c3a:	4158      	adcs	r0, r3
     c3c:	b2c0      	uxtb	r0, r0
     c3e:	2240      	movs	r2, #64	; 0x40
     c40:	4910      	ldr	r1, [pc, #64]	; (c84 <adc_async_init+0x9c>)
     c42:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     c44:	2300      	movs	r3, #0
     c46:	e003      	b.n	c50 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     c48:	22ff      	movs	r2, #255	; 0xff
     c4a:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     c4c:	3301      	adds	r3, #1
     c4e:	b2db      	uxtb	r3, r3
     c50:	42a3      	cmp	r3, r4
     c52:	d9f9      	bls.n	c48 <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     c54:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     c56:	2324      	movs	r3, #36	; 0x24
     c58:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     c5a:	3301      	adds	r3, #1
     c5c:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c60:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     c62:	9901      	ldr	r1, [sp, #4]
     c64:	0028      	movs	r0, r5
     c66:	4b09      	ldr	r3, [pc, #36]	; (c8c <adc_async_init+0xa4>)
     c68:	4798      	blx	r3
	if (init_status) {
     c6a:	2800      	cmp	r0, #0
     c6c:	d105      	bne.n	c7a <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     c6e:	4b08      	ldr	r3, [pc, #32]	; (c90 <adc_async_init+0xa8>)
     c70:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     c72:	4b08      	ldr	r3, [pc, #32]	; (c94 <adc_async_init+0xac>)
     c74:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     c76:	4b08      	ldr	r3, [pc, #32]	; (c98 <adc_async_init+0xb0>)
     c78:	606b      	str	r3, [r5, #4]
}
     c7a:	b002      	add	sp, #8
     c7c:	bc04      	pop	{r2}
     c7e:	4692      	mov	sl, r2
     c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	00002960 	.word	0x00002960
     c88:	000013dd 	.word	0x000013dd
     c8c:	00001849 	.word	0x00001849
     c90:	00000b89 	.word	0x00000b89
     c94:	00000b71 	.word	0x00000b71
     c98:	00000b7d 	.word	0x00000b7d

00000c9c <adc_async_register_channel_buffer>:
{
     c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9e:	b083      	sub	sp, #12
     ca0:	0007      	movs	r7, r0
     ca2:	000c      	movs	r4, r1
     ca4:	9200      	str	r2, [sp, #0]
     ca6:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     ca8:	2800      	cmp	r0, #0
     caa:	d019      	beq.n	ce0 <adc_async_register_channel_buffer+0x44>
     cac:	2a00      	cmp	r2, #0
     cae:	d019      	beq.n	ce4 <adc_async_register_channel_buffer+0x48>
     cb0:	2b00      	cmp	r3, #0
     cb2:	d119      	bne.n	ce8 <adc_async_register_channel_buffer+0x4c>
     cb4:	2000      	movs	r0, #0
     cb6:	4e24      	ldr	r6, [pc, #144]	; (d48 <adc_async_register_channel_buffer+0xac>)
     cb8:	2266      	movs	r2, #102	; 0x66
     cba:	0031      	movs	r1, r6
     cbc:	4d23      	ldr	r5, [pc, #140]	; (d4c <adc_async_register_channel_buffer+0xb0>)
     cbe:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     cc0:	2324      	movs	r3, #36	; 0x24
     cc2:	5cfb      	ldrb	r3, [r7, r3]
     cc4:	2000      	movs	r0, #0
     cc6:	42a3      	cmp	r3, r4
     cc8:	4140      	adcs	r0, r0
     cca:	b2c0      	uxtb	r0, r0
     ccc:	2267      	movs	r2, #103	; 0x67
     cce:	0031      	movs	r1, r6
     cd0:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     cd2:	6a39      	ldr	r1, [r7, #32]
     cd4:	5d0b      	ldrb	r3, [r1, r4]
     cd6:	2bff      	cmp	r3, #255	; 0xff
     cd8:	d12c      	bne.n	d34 <adc_async_register_channel_buffer+0x98>
     cda:	2600      	movs	r6, #0
     cdc:	2300      	movs	r3, #0
     cde:	e007      	b.n	cf0 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     ce0:	2000      	movs	r0, #0
     ce2:	e7e8      	b.n	cb6 <adc_async_register_channel_buffer+0x1a>
     ce4:	2000      	movs	r0, #0
     ce6:	e7e6      	b.n	cb6 <adc_async_register_channel_buffer+0x1a>
     ce8:	2001      	movs	r0, #1
     cea:	e7e4      	b.n	cb6 <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     cec:	3301      	adds	r3, #1
     cee:	b2db      	uxtb	r3, r3
     cf0:	2224      	movs	r2, #36	; 0x24
     cf2:	5cba      	ldrb	r2, [r7, r2]
     cf4:	4293      	cmp	r3, r2
     cf6:	d805      	bhi.n	d04 <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     cf8:	5cca      	ldrb	r2, [r1, r3]
     cfa:	2aff      	cmp	r2, #255	; 0xff
     cfc:	d0f6      	beq.n	cec <adc_async_register_channel_buffer+0x50>
			index++;
     cfe:	3601      	adds	r6, #1
     d00:	b2f6      	uxtb	r6, r6
     d02:	e7f3      	b.n	cec <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     d04:	2325      	movs	r3, #37	; 0x25
     d06:	5cfb      	ldrb	r3, [r7, r3]
     d08:	429e      	cmp	r6, r3
     d0a:	d816      	bhi.n	d3a <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     d0c:	0073      	lsls	r3, r6, #1
     d0e:	199b      	adds	r3, r3, r6
     d10:	00dd      	lsls	r5, r3, #3
     d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d14:	1958      	adds	r0, r3, r5
     d16:	3004      	adds	r0, #4
     d18:	9a01      	ldr	r2, [sp, #4]
     d1a:	9900      	ldr	r1, [sp, #0]
     d1c:	4b0c      	ldr	r3, [pc, #48]	; (d50 <adc_async_register_channel_buffer+0xb4>)
     d1e:	4798      	blx	r3
     d20:	2800      	cmp	r0, #0
     d22:	d10d      	bne.n	d40 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     d24:	6a3b      	ldr	r3, [r7, #32]
     d26:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d2a:	195b      	adds	r3, r3, r5
     d2c:	2200      	movs	r2, #0
     d2e:	829a      	strh	r2, [r3, #20]
}
     d30:	b003      	add	sp, #12
     d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     d34:	200d      	movs	r0, #13
     d36:	4240      	negs	r0, r0
     d38:	e7fa      	b.n	d30 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     d3a:	201c      	movs	r0, #28
     d3c:	4240      	negs	r0, r0
     d3e:	e7f7      	b.n	d30 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     d40:	200d      	movs	r0, #13
     d42:	4240      	negs	r0, r0
     d44:	e7f4      	b.n	d30 <adc_async_register_channel_buffer+0x94>
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00002960 	.word	0x00002960
     d4c:	000013dd 	.word	0x000013dd
     d50:	000013e5 	.word	0x000013e5

00000d54 <adc_async_enable_channel>:
{
     d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d56:	0006      	movs	r6, r0
     d58:	000c      	movs	r4, r1
	ASSERT(descr);
     d5a:	4d0b      	ldr	r5, [pc, #44]	; (d88 <adc_async_enable_channel+0x34>)
     d5c:	1e43      	subs	r3, r0, #1
     d5e:	4198      	sbcs	r0, r3
     d60:	b2c0      	uxtb	r0, r0
     d62:	2283      	movs	r2, #131	; 0x83
     d64:	0029      	movs	r1, r5
     d66:	4f09      	ldr	r7, [pc, #36]	; (d8c <adc_async_enable_channel+0x38>)
     d68:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     d6a:	2324      	movs	r3, #36	; 0x24
     d6c:	5cf3      	ldrb	r3, [r6, r3]
     d6e:	2000      	movs	r0, #0
     d70:	42a3      	cmp	r3, r4
     d72:	4140      	adcs	r0, r0
     d74:	b2c0      	uxtb	r0, r0
     d76:	2284      	movs	r2, #132	; 0x84
     d78:	0029      	movs	r1, r5
     d7a:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     d7c:	0021      	movs	r1, r4
     d7e:	0030      	movs	r0, r6
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <adc_async_enable_channel+0x3c>)
     d82:	4798      	blx	r3
}
     d84:	2000      	movs	r0, #0
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00002960 	.word	0x00002960
     d8c:	000013dd 	.word	0x000013dd
     d90:	000018a9 	.word	0x000018a9

00000d94 <adc_async_register_callback>:
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	46ce      	mov	lr, r9
     d98:	b500      	push	{lr}
     d9a:	0004      	movs	r4, r0
     d9c:	000d      	movs	r5, r1
     d9e:	0017      	movs	r7, r2
     da0:	001e      	movs	r6, r3
	ASSERT(descr);
     da2:	1e43      	subs	r3, r0, #1
     da4:	4198      	sbcs	r0, r3
     da6:	b2c0      	uxtb	r0, r0
     da8:	229c      	movs	r2, #156	; 0x9c
     daa:	4916      	ldr	r1, [pc, #88]	; (e04 <adc_async_register_callback+0x70>)
     dac:	4b16      	ldr	r3, [pc, #88]	; (e08 <adc_async_register_callback+0x74>)
     dae:	4699      	mov	r9, r3
     db0:	4798      	blx	r3
	ASSERT(descr->channel_max >= channel);
     db2:	2324      	movs	r3, #36	; 0x24
     db4:	5ce3      	ldrb	r3, [r4, r3]
     db6:	2000      	movs	r0, #0
     db8:	42ab      	cmp	r3, r5
     dba:	4140      	adcs	r0, r0
     dbc:	b2c0      	uxtb	r0, r0
     dbe:	229d      	movs	r2, #157	; 0x9d
     dc0:	4910      	ldr	r1, [pc, #64]	; (e04 <adc_async_register_callback+0x70>)
     dc2:	47c8      	blx	r9
	uint8_t index = descr->channel_map[channel];
     dc4:	6a23      	ldr	r3, [r4, #32]
     dc6:	5d5b      	ldrb	r3, [r3, r5]
	switch (type) {
     dc8:	2f01      	cmp	r7, #1
     dca:	d017      	beq.n	dfc <adc_async_register_callback+0x68>
     dcc:	2f00      	cmp	r7, #0
     dce:	d004      	beq.n	dda <adc_async_register_callback+0x46>
     dd0:	2f02      	cmp	r7, #2
     dd2:	d015      	beq.n	e00 <adc_async_register_callback+0x6c>
		return ERR_INVALID_ARG;
     dd4:	200d      	movs	r0, #13
     dd6:	4240      	negs	r0, r0
     dd8:	e00d      	b.n	df6 <adc_async_register_callback+0x62>
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     dda:	005a      	lsls	r2, r3, #1
     ddc:	18d3      	adds	r3, r2, r3
     dde:	00da      	lsls	r2, r3, #3
     de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     de2:	509e      	str	r6, [r3, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     de4:	1e73      	subs	r3, r6, #1
     de6:	419e      	sbcs	r6, r3
     de8:	b2f3      	uxtb	r3, r6
     dea:	003a      	movs	r2, r7
     dec:	0029      	movs	r1, r5
     dee:	0020      	movs	r0, r4
     df0:	4c06      	ldr	r4, [pc, #24]	; (e0c <adc_async_register_callback+0x78>)
     df2:	47a0      	blx	r4
	return ERR_NONE;
     df4:	2000      	movs	r0, #0
}
     df6:	bc04      	pop	{r2}
     df8:	4691      	mov	r9, r2
     dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		descr->adc_async_cb.monitor = cb;
     dfc:	61a6      	str	r6, [r4, #24]
		break;
     dfe:	e7f1      	b.n	de4 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     e00:	61e6      	str	r6, [r4, #28]
		break;
     e02:	e7ef      	b.n	de4 <adc_async_register_callback+0x50>
     e04:	00002960 	.word	0x00002960
     e08:	000013dd 	.word	0x000013dd
     e0c:	00001921 	.word	0x00001921

00000e10 <adc_async_start_conversion>:
{
     e10:	b510      	push	{r4, lr}
     e12:	0004      	movs	r4, r0
	ASSERT(descr);
     e14:	1e43      	subs	r3, r0, #1
     e16:	4198      	sbcs	r0, r3
     e18:	b2c0      	uxtb	r0, r0
     e1a:	22d6      	movs	r2, #214	; 0xd6
     e1c:	4903      	ldr	r1, [pc, #12]	; (e2c <adc_async_start_conversion+0x1c>)
     e1e:	4b04      	ldr	r3, [pc, #16]	; (e30 <adc_async_start_conversion+0x20>)
     e20:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     e22:	0020      	movs	r0, r4
     e24:	4b03      	ldr	r3, [pc, #12]	; (e34 <adc_async_start_conversion+0x24>)
     e26:	4798      	blx	r3
}
     e28:	2000      	movs	r0, #0
     e2a:	bd10      	pop	{r4, pc}
     e2c:	00002960 	.word	0x00002960
     e30:	000013dd 	.word	0x000013dd
     e34:	000018d3 	.word	0x000018d3

00000e38 <adc_async_set_inputs>:
{
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3a:	b083      	sub	sp, #12
     e3c:	0006      	movs	r6, r0
     e3e:	9100      	str	r1, [sp, #0]
     e40:	9201      	str	r2, [sp, #4]
     e42:	001c      	movs	r4, r3
	ASSERT(descr);
     e44:	4d0c      	ldr	r5, [pc, #48]	; (e78 <adc_async_set_inputs+0x40>)
     e46:	1e43      	subs	r3, r0, #1
     e48:	4198      	sbcs	r0, r3
     e4a:	b2c0      	uxtb	r0, r0
     e4c:	22f5      	movs	r2, #245	; 0xf5
     e4e:	0029      	movs	r1, r5
     e50:	4f0a      	ldr	r7, [pc, #40]	; (e7c <adc_async_set_inputs+0x44>)
     e52:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     e54:	2324      	movs	r3, #36	; 0x24
     e56:	5cf3      	ldrb	r3, [r6, r3]
     e58:	2000      	movs	r0, #0
     e5a:	42a3      	cmp	r3, r4
     e5c:	4140      	adcs	r0, r0
     e5e:	b2c0      	uxtb	r0, r0
     e60:	22f6      	movs	r2, #246	; 0xf6
     e62:	0029      	movs	r1, r5
     e64:	47b8      	blx	r7
	_adc_async_set_inputs(&descr->device, pos_input, neg_input, channel);
     e66:	0023      	movs	r3, r4
     e68:	9a01      	ldr	r2, [sp, #4]
     e6a:	9900      	ldr	r1, [sp, #0]
     e6c:	0030      	movs	r0, r6
     e6e:	4c04      	ldr	r4, [pc, #16]	; (e80 <adc_async_set_inputs+0x48>)
     e70:	47a0      	blx	r4
}
     e72:	2000      	movs	r0, #0
     e74:	b003      	add	sp, #12
     e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e78:	00002960 	.word	0x00002960
     e7c:	000013dd 	.word	0x000013dd
     e80:	000018e9 	.word	0x000018e9

00000e84 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e84:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     e88:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e8a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e8c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e90:	4770      	bx	lr

00000e92 <atomic_leave_critical>:
     e92:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     e96:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e98:	f383 8810 	msr	PRIMASK, r3
}
     e9c:	4770      	bx	lr
	...

00000ea0 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	0004      	movs	r4, r0
     ea4:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     ea6:	2800      	cmp	r0, #0
     ea8:	d010      	beq.n	ecc <dac_sync_init+0x2c>
     eaa:	2900      	cmp	r1, #0
     eac:	d00c      	beq.n	ec8 <dac_sync_init+0x28>
     eae:	2001      	movs	r0, #1
     eb0:	2232      	movs	r2, #50	; 0x32
     eb2:	490c      	ldr	r1, [pc, #48]	; (ee4 <dac_sync_init+0x44>)
     eb4:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <dac_sync_init+0x48>)
     eb6:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     eb8:	0029      	movs	r1, r5
     eba:	0020      	movs	r0, r4
     ebc:	4b0b      	ldr	r3, [pc, #44]	; (eec <dac_sync_init+0x4c>)
     ebe:	4798      	blx	r3
	if (rc) {
     ec0:	2800      	cmp	r0, #0
     ec2:	d10e      	bne.n	ee2 <dac_sync_init+0x42>
     ec4:	2300      	movs	r3, #0
     ec6:	e00a      	b.n	ede <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     ec8:	2000      	movs	r0, #0
     eca:	e7f1      	b.n	eb0 <dac_sync_init+0x10>
     ecc:	2000      	movs	r0, #0
     ece:	e7ef      	b.n	eb0 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     ed0:	00da      	lsls	r2, r3, #3
     ed2:	18a2      	adds	r2, r4, r2
     ed4:	2100      	movs	r1, #0
     ed6:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     ed8:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     eda:	3301      	adds	r3, #1
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d0f6      	beq.n	ed0 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	0000297c 	.word	0x0000297c
     ee8:	000013dd 	.word	0x000013dd
     eec:	00001a29 	.word	0x00001a29

00000ef0 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
     ef0:	b570      	push	{r4, r5, r6, lr}
     ef2:	0004      	movs	r4, r0
     ef4:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
     ef6:	2800      	cmp	r0, #0
     ef8:	d00c      	beq.n	f14 <dac_sync_enable_channel+0x24>
     efa:	2900      	cmp	r1, #0
     efc:	d00c      	beq.n	f18 <dac_sync_enable_channel+0x28>
     efe:	2000      	movs	r0, #0
     f00:	2252      	movs	r2, #82	; 0x52
     f02:	4906      	ldr	r1, [pc, #24]	; (f1c <dac_sync_enable_channel+0x2c>)
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <dac_sync_enable_channel+0x30>)
     f06:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
     f08:	0029      	movs	r1, r5
     f0a:	0020      	movs	r0, r4
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <dac_sync_enable_channel+0x34>)
     f0e:	4798      	blx	r3

	return ERR_NONE;
}
     f10:	2000      	movs	r0, #0
     f12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
     f14:	2000      	movs	r0, #0
     f16:	e7f3      	b.n	f00 <dac_sync_enable_channel+0x10>
     f18:	2001      	movs	r0, #1
     f1a:	e7f1      	b.n	f00 <dac_sync_enable_channel+0x10>
     f1c:	0000297c 	.word	0x0000297c
     f20:	000013dd 	.word	0x000013dd
     f24:	00001a55 	.word	0x00001a55

00000f28 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
     f28:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2a:	46ce      	mov	lr, r9
     f2c:	b500      	push	{lr}
     f2e:	b082      	sub	sp, #8
     f30:	0007      	movs	r7, r0
     f32:	000d      	movs	r5, r1
     f34:	0014      	movs	r4, r2
     f36:	4699      	mov	r9, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     f38:	2800      	cmp	r0, #0
     f3a:	d007      	beq.n	f4c <dac_sync_write+0x24>
     f3c:	2900      	cmp	r1, #0
     f3e:	d107      	bne.n	f50 <dac_sync_write+0x28>
     f40:	2a00      	cmp	r2, #0
     f42:	d018      	beq.n	f76 <dac_sync_write+0x4e>
     f44:	2b00      	cmp	r3, #0
     f46:	d118      	bne.n	f7a <dac_sync_write+0x52>
     f48:	2000      	movs	r0, #0
     f4a:	e002      	b.n	f52 <dac_sync_write+0x2a>
     f4c:	2000      	movs	r0, #0
     f4e:	e000      	b.n	f52 <dac_sync_write+0x2a>
     f50:	2000      	movs	r0, #0
     f52:	226a      	movs	r2, #106	; 0x6a
     f54:	4917      	ldr	r1, [pc, #92]	; (fb4 <dac_sync_write+0x8c>)
     f56:	4b18      	ldr	r3, [pc, #96]	; (fb8 <dac_sync_write+0x90>)
     f58:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
     f5a:	9701      	str	r7, [sp, #4]
     f5c:	0029      	movs	r1, r5
     f5e:	0038      	movs	r0, r7
     f60:	4b16      	ldr	r3, [pc, #88]	; (fbc <dac_sync_write+0x94>)
     f62:	4798      	blx	r3
     f64:	2800      	cmp	r0, #0
     f66:	d022      	beq.n	fae <dac_sync_write+0x86>
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
     f68:	002e      	movs	r6, r5
     f6a:	00eb      	lsls	r3, r5, #3
     f6c:	18fb      	adds	r3, r7, r3
     f6e:	605c      	str	r4, [r3, #4]
	descr->sel_ch[ch].length = length;
     f70:	464a      	mov	r2, r9
     f72:	609a      	str	r2, [r3, #8]

	while (descr->sel_ch[ch].length) {
     f74:	e011      	b.n	f9a <dac_sync_write+0x72>
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     f76:	2000      	movs	r0, #0
     f78:	e7eb      	b.n	f52 <dac_sync_write+0x2a>
     f7a:	2001      	movs	r0, #1
     f7c:	e7e9      	b.n	f52 <dac_sync_write+0x2a>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
     f7e:	00f4      	lsls	r4, r6, #3
     f80:	193c      	adds	r4, r7, r4
     f82:	6863      	ldr	r3, [r4, #4]
     f84:	8819      	ldrh	r1, [r3, #0]
     f86:	002a      	movs	r2, r5
     f88:	9801      	ldr	r0, [sp, #4]
     f8a:	4b0d      	ldr	r3, [pc, #52]	; (fc0 <dac_sync_write+0x98>)
     f8c:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
     f8e:	6863      	ldr	r3, [r4, #4]
     f90:	3302      	adds	r3, #2
     f92:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
     f94:	68a3      	ldr	r3, [r4, #8]
     f96:	3b01      	subs	r3, #1
     f98:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
     f9a:	00f3      	lsls	r3, r6, #3
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	689b      	ldr	r3, [r3, #8]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d1ec      	bne.n	f7e <dac_sync_write+0x56>
	}

	return ERR_NONE;
     fa4:	2000      	movs	r0, #0
}
     fa6:	b002      	add	sp, #8
     fa8:	bc04      	pop	{r2}
     faa:	4691      	mov	r9, r2
     fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_READY;
     fae:	201d      	movs	r0, #29
     fb0:	4240      	negs	r0, r0
     fb2:	e7f8      	b.n	fa6 <dac_sync_write+0x7e>
     fb4:	0000297c 	.word	0x0000297c
     fb8:	000013dd 	.word	0x000013dd
     fbc:	00001a69 	.word	0x00001a69
     fc0:	00001a7b 	.word	0x00001a7b

00000fc4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     fc4:	b510      	push	{r4, lr}
	return _event_system_init();
     fc6:	4b01      	ldr	r3, [pc, #4]	; (fcc <event_system_init+0x8>)
     fc8:	4798      	blx	r3
}
     fca:	bd10      	pop	{r4, pc}
     fcc:	00001c31 	.word	0x00001c31

00000fd0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     fd2:	2503      	movs	r5, #3
     fd4:	2400      	movs	r4, #0

	while (upper >= lower) {
     fd6:	e007      	b.n	fe8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     fd8:	4a0d      	ldr	r2, [pc, #52]	; (1010 <process_ext_irq+0x40>)
     fda:	58b3      	ldr	r3, [r6, r2]
     fdc:	2b00      	cmp	r3, #0
     fde:	d000      	beq.n	fe2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     fe0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     fe2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     fe4:	3a01      	subs	r2, #1
     fe6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     fe8:	42ac      	cmp	r4, r5
     fea:	d8fa      	bhi.n	fe2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     fec:	192b      	adds	r3, r5, r4
     fee:	105b      	asrs	r3, r3, #1
     ff0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     ff2:	2a02      	cmp	r2, #2
     ff4:	d8f5      	bhi.n	fe2 <process_ext_irq+0x12>
     ff6:	21ff      	movs	r1, #255	; 0xff
     ff8:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     ffa:	00de      	lsls	r6, r3, #3
     ffc:	4904      	ldr	r1, [pc, #16]	; (1010 <process_ext_irq+0x40>)
     ffe:	1989      	adds	r1, r1, r6
    1000:	6849      	ldr	r1, [r1, #4]
    1002:	4281      	cmp	r1, r0
    1004:	d0e8      	beq.n	fd8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    1006:	d2ed      	bcs.n	fe4 <process_ext_irq+0x14>
			lower = middle + 1;
    1008:	3201      	adds	r2, #1
    100a:	b2d4      	uxtb	r4, r2
    100c:	e7ec      	b.n	fe8 <process_ext_irq+0x18>
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	2000005c 	.word	0x2000005c

00001014 <ext_irq_init>:
{
    1014:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1016:	2300      	movs	r3, #0
    1018:	e009      	b.n	102e <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    101a:	4a08      	ldr	r2, [pc, #32]	; (103c <ext_irq_init+0x28>)
    101c:	00d9      	lsls	r1, r3, #3
    101e:	1850      	adds	r0, r2, r1
    1020:	2401      	movs	r4, #1
    1022:	4264      	negs	r4, r4
    1024:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    1026:	2000      	movs	r0, #0
    1028:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    102a:	3301      	adds	r3, #1
    102c:	b29b      	uxth	r3, r3
    102e:	2b02      	cmp	r3, #2
    1030:	d9f3      	bls.n	101a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    1032:	4803      	ldr	r0, [pc, #12]	; (1040 <ext_irq_init+0x2c>)
    1034:	4b03      	ldr	r3, [pc, #12]	; (1044 <ext_irq_init+0x30>)
    1036:	4798      	blx	r3
}
    1038:	bd10      	pop	{r4, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	2000005c 	.word	0x2000005c
    1040:	00000fd1 	.word	0x00000fd1
    1044:	00001a89 	.word	0x00001a89

00001048 <ext_irq_register>:
{
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	46d6      	mov	lr, sl
    104c:	464f      	mov	r7, r9
    104e:	4646      	mov	r6, r8
    1050:	b5c0      	push	{r6, r7, lr}
    1052:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    1054:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1056:	2b02      	cmp	r3, #2
    1058:	d80c      	bhi.n	1074 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    105a:	00dc      	lsls	r4, r3, #3
    105c:	4a32      	ldr	r2, [pc, #200]	; (1128 <ext_irq_register+0xe0>)
    105e:	1912      	adds	r2, r2, r4
    1060:	6852      	ldr	r2, [r2, #4]
    1062:	4282      	cmp	r2, r0
    1064:	d002      	beq.n	106c <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1066:	3301      	adds	r3, #1
    1068:	b2db      	uxtb	r3, r3
    106a:	e7f4      	b.n	1056 <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    106c:	4b2e      	ldr	r3, [pc, #184]	; (1128 <ext_irq_register+0xe0>)
    106e:	50e1      	str	r1, [r4, r3]
			found          = true;
    1070:	2601      	movs	r6, #1
			break;
    1072:	e000      	b.n	1076 <ext_irq_register+0x2e>
	bool    found = false;
    1074:	2600      	movs	r6, #0
	if (NULL == cb) {
    1076:	2900      	cmp	r1, #0
    1078:	d00c      	beq.n	1094 <ext_irq_register+0x4c>
	if (!found) {
    107a:	2e00      	cmp	r6, #0
    107c:	d142      	bne.n	1104 <ext_irq_register+0xbc>
    107e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1080:	2b02      	cmp	r3, #2
    1082:	d811      	bhi.n	10a8 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    1084:	00da      	lsls	r2, r3, #3
    1086:	4d28      	ldr	r5, [pc, #160]	; (1128 <ext_irq_register+0xe0>)
    1088:	5952      	ldr	r2, [r2, r5]
    108a:	2a00      	cmp	r2, #0
    108c:	d007      	beq.n	109e <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    108e:	3301      	adds	r3, #1
    1090:	b2db      	uxtb	r3, r3
    1092:	e7f5      	b.n	1080 <ext_irq_register+0x38>
		if (!found) {
    1094:	2e00      	cmp	r6, #0
    1096:	d040      	beq.n	111a <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    1098:	4b24      	ldr	r3, [pc, #144]	; (112c <ext_irq_register+0xe4>)
    109a:	4798      	blx	r3
    109c:	e037      	b.n	110e <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    109e:	00dc      	lsls	r4, r3, #3
    10a0:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    10a2:	192c      	adds	r4, r5, r4
    10a4:	6060      	str	r0, [r4, #4]
				found           = true;
    10a6:	2601      	movs	r6, #1
    10a8:	2200      	movs	r2, #0
    10aa:	e001      	b.n	10b0 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    10ac:	3201      	adds	r2, #1
    10ae:	b2d2      	uxtb	r2, r2
    10b0:	2a02      	cmp	r2, #2
    10b2:	d827      	bhi.n	1104 <ext_irq_register+0xbc>
    10b4:	2b02      	cmp	r3, #2
    10b6:	d825      	bhi.n	1104 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    10b8:	9301      	str	r3, [sp, #4]
    10ba:	491b      	ldr	r1, [pc, #108]	; (1128 <ext_irq_register+0xe0>)
    10bc:	00dc      	lsls	r4, r3, #3
    10be:	190c      	adds	r4, r1, r4
    10c0:	6867      	ldr	r7, [r4, #4]
    10c2:	00d4      	lsls	r4, r2, #3
    10c4:	1909      	adds	r1, r1, r4
    10c6:	6849      	ldr	r1, [r1, #4]
    10c8:	428f      	cmp	r7, r1
    10ca:	d2ef      	bcs.n	10ac <ext_irq_register+0x64>
    10cc:	1c4c      	adds	r4, r1, #1
    10ce:	d0ed      	beq.n	10ac <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    10d0:	a902      	add	r1, sp, #8
    10d2:	468c      	mov	ip, r1
    10d4:	4c14      	ldr	r4, [pc, #80]	; (1128 <ext_irq_register+0xe0>)
    10d6:	46a0      	mov	r8, r4
    10d8:	00d4      	lsls	r4, r2, #3
    10da:	46a1      	mov	r9, r4
    10dc:	4644      	mov	r4, r8
    10de:	444c      	add	r4, r9
    10e0:	4665      	mov	r5, ip
    10e2:	cc82      	ldmia	r4!, {r1, r7}
    10e4:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    10e6:	9901      	ldr	r1, [sp, #4]
    10e8:	00c9      	lsls	r1, r1, #3
    10ea:	468a      	mov	sl, r1
    10ec:	4649      	mov	r1, r9
    10ee:	4441      	add	r1, r8
    10f0:	4644      	mov	r4, r8
    10f2:	4454      	add	r4, sl
    10f4:	cca0      	ldmia	r4!, {r5, r7}
    10f6:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    10f8:	4645      	mov	r5, r8
    10fa:	4455      	add	r5, sl
    10fc:	4661      	mov	r1, ip
    10fe:	c990      	ldmia	r1!, {r4, r7}
    1100:	c590      	stmia	r5!, {r4, r7}
    1102:	e7d3      	b.n	10ac <ext_irq_register+0x64>
	if (!found) {
    1104:	2e00      	cmp	r6, #0
    1106:	d00b      	beq.n	1120 <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    1108:	2101      	movs	r1, #1
    110a:	4b08      	ldr	r3, [pc, #32]	; (112c <ext_irq_register+0xe4>)
    110c:	4798      	blx	r3
}
    110e:	b004      	add	sp, #16
    1110:	bc1c      	pop	{r2, r3, r4}
    1112:	4690      	mov	r8, r2
    1114:	4699      	mov	r9, r3
    1116:	46a2      	mov	sl, r4
    1118:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    111a:	200d      	movs	r0, #13
    111c:	4240      	negs	r0, r0
    111e:	e7f6      	b.n	110e <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    1120:	200d      	movs	r0, #13
    1122:	4240      	negs	r0, r0
    1124:	e7f3      	b.n	110e <ext_irq_register+0xc6>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	2000005c 	.word	0x2000005c
    112c:	00001b21 	.word	0x00001b21

00001130 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1130:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1132:	3808      	subs	r0, #8

	descr->stat = 0;
    1134:	2300      	movs	r3, #0
    1136:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1138:	6a43      	ldr	r3, [r0, #36]	; 0x24
    113a:	2b00      	cmp	r3, #0
    113c:	d000      	beq.n	1140 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    113e:	4798      	blx	r3
	}
}
    1140:	bd10      	pop	{r4, pc}

00001142 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1142:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1144:	3808      	subs	r0, #8

	descr->stat = 0;
    1146:	2300      	movs	r3, #0
    1148:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    114a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    114c:	2b00      	cmp	r3, #0
    114e:	d000      	beq.n	1152 <usart_error+0x10>
		descr->usart_cb.error(descr);
    1150:	4798      	blx	r3
	}
}
    1152:	bd10      	pop	{r4, pc}

00001154 <usart_fill_rx_buffer>:
{
    1154:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1156:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    1158:	302c      	adds	r0, #44	; 0x2c
    115a:	4b04      	ldr	r3, [pc, #16]	; (116c <usart_fill_rx_buffer+0x18>)
    115c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    115e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1160:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    1162:	2b00      	cmp	r3, #0
    1164:	d001      	beq.n	116a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1166:	0020      	movs	r0, r4
    1168:	4798      	blx	r3
}
    116a:	bd10      	pop	{r4, pc}
    116c:	0000147d 	.word	0x0000147d

00001170 <usart_async_write>:
{
    1170:	b570      	push	{r4, r5, r6, lr}
    1172:	0004      	movs	r4, r0
    1174:	000e      	movs	r6, r1
    1176:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1178:	2800      	cmp	r0, #0
    117a:	d01d      	beq.n	11b8 <usart_async_write+0x48>
    117c:	2900      	cmp	r1, #0
    117e:	d01d      	beq.n	11bc <usart_async_write+0x4c>
    1180:	2a00      	cmp	r2, #0
    1182:	d11d      	bne.n	11c0 <usart_async_write+0x50>
    1184:	2000      	movs	r0, #0
    1186:	223c      	movs	r2, #60	; 0x3c
    1188:	32ff      	adds	r2, #255	; 0xff
    118a:	4910      	ldr	r1, [pc, #64]	; (11cc <usart_async_write+0x5c>)
    118c:	4b10      	ldr	r3, [pc, #64]	; (11d0 <usart_async_write+0x60>)
    118e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1190:	2344      	movs	r3, #68	; 0x44
    1192:	5ae2      	ldrh	r2, [r4, r3]
    1194:	3308      	adds	r3, #8
    1196:	5ae3      	ldrh	r3, [r4, r3]
    1198:	429a      	cmp	r2, r3
    119a:	d113      	bne.n	11c4 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    119c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    119e:	234c      	movs	r3, #76	; 0x4c
    11a0:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    11a2:	2200      	movs	r2, #0
    11a4:	3b08      	subs	r3, #8
    11a6:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    11a8:	3b43      	subs	r3, #67	; 0x43
    11aa:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    11ac:	0020      	movs	r0, r4
    11ae:	3008      	adds	r0, #8
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <usart_async_write+0x64>)
    11b2:	4798      	blx	r3
	return (int32_t)length;
    11b4:	0028      	movs	r0, r5
}
    11b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    11b8:	2000      	movs	r0, #0
    11ba:	e7e4      	b.n	1186 <usart_async_write+0x16>
    11bc:	2000      	movs	r0, #0
    11be:	e7e2      	b.n	1186 <usart_async_write+0x16>
    11c0:	2001      	movs	r0, #1
    11c2:	e7e0      	b.n	1186 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    11c4:	201c      	movs	r0, #28
    11c6:	4240      	negs	r0, r0
    11c8:	e7f5      	b.n	11b6 <usart_async_write+0x46>
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	00002998 	.word	0x00002998
    11d0:	000013dd 	.word	0x000013dd
    11d4:	00001f67 	.word	0x00001f67

000011d8 <usart_process_byte_sent>:
{
    11d8:	b570      	push	{r4, r5, r6, lr}
    11da:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    11dc:	0002      	movs	r2, r0
    11de:	3a08      	subs	r2, #8
    11e0:	2344      	movs	r3, #68	; 0x44
    11e2:	5ad3      	ldrh	r3, [r2, r3]
    11e4:	214c      	movs	r1, #76	; 0x4c
    11e6:	5a52      	ldrh	r2, [r2, r1]
    11e8:	4293      	cmp	r3, r2
    11ea:	d00d      	beq.n	1208 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    11ec:	0002      	movs	r2, r0
    11ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
    11f0:	3a08      	subs	r2, #8
    11f2:	1c5d      	adds	r5, r3, #1
    11f4:	2044      	movs	r0, #68	; 0x44
    11f6:	5215      	strh	r5, [r2, r0]
    11f8:	5cc9      	ldrb	r1, [r1, r3]
    11fa:	0020      	movs	r0, r4
    11fc:	4b04      	ldr	r3, [pc, #16]	; (1210 <usart_process_byte_sent+0x38>)
    11fe:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1200:	0020      	movs	r0, r4
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <usart_process_byte_sent+0x3c>)
    1204:	4798      	blx	r3
}
    1206:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <usart_process_byte_sent+0x40>)
    120a:	4798      	blx	r3
}
    120c:	e7fb      	b.n	1206 <usart_process_byte_sent+0x2e>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00001f5f 	.word	0x00001f5f
    1214:	00001f67 	.word	0x00001f67
    1218:	00001f6f 	.word	0x00001f6f

0000121c <usart_async_read>:
{
    121c:	b5f0      	push	{r4, r5, r6, r7, lr}
    121e:	b085      	sub	sp, #20
    1220:	0004      	movs	r4, r0
    1222:	000d      	movs	r5, r1
    1224:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    1226:	2800      	cmp	r0, #0
    1228:	d017      	beq.n	125a <usart_async_read+0x3e>
    122a:	2900      	cmp	r1, #0
    122c:	d017      	beq.n	125e <usart_async_read+0x42>
    122e:	2a00      	cmp	r2, #0
    1230:	d117      	bne.n	1262 <usart_async_read+0x46>
    1232:	2000      	movs	r0, #0
    1234:	22ac      	movs	r2, #172	; 0xac
    1236:	0052      	lsls	r2, r2, #1
    1238:	4912      	ldr	r1, [pc, #72]	; (1284 <usart_async_read+0x68>)
    123a:	4b13      	ldr	r3, [pc, #76]	; (1288 <usart_async_read+0x6c>)
    123c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    123e:	a803      	add	r0, sp, #12
    1240:	4b12      	ldr	r3, [pc, #72]	; (128c <usart_async_read+0x70>)
    1242:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1244:	3434      	adds	r4, #52	; 0x34
    1246:	0020      	movs	r0, r4
    1248:	9401      	str	r4, [sp, #4]
    124a:	4b11      	ldr	r3, [pc, #68]	; (1290 <usart_async_read+0x74>)
    124c:	4798      	blx	r3
    124e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1250:	a803      	add	r0, sp, #12
    1252:	4b10      	ldr	r3, [pc, #64]	; (1294 <usart_async_read+0x78>)
    1254:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1256:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1258:	e00b      	b.n	1272 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    125a:	2000      	movs	r0, #0
    125c:	e7ea      	b.n	1234 <usart_async_read+0x18>
    125e:	2000      	movs	r0, #0
    1260:	e7e8      	b.n	1234 <usart_async_read+0x18>
    1262:	2001      	movs	r0, #1
    1264:	e7e6      	b.n	1234 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1266:	3401      	adds	r4, #1
    1268:	b2a4      	uxth	r4, r4
    126a:	1869      	adds	r1, r5, r1
    126c:	9801      	ldr	r0, [sp, #4]
    126e:	4b0a      	ldr	r3, [pc, #40]	; (1298 <usart_async_read+0x7c>)
    1270:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1272:	0021      	movs	r1, r4
    1274:	42a7      	cmp	r7, r4
    1276:	d901      	bls.n	127c <usart_async_read+0x60>
    1278:	42b4      	cmp	r4, r6
    127a:	d3f4      	bcc.n	1266 <usart_async_read+0x4a>
}
    127c:	0020      	movs	r0, r4
    127e:	b005      	add	sp, #20
    1280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	00002998 	.word	0x00002998
    1288:	000013dd 	.word	0x000013dd
    128c:	00000e85 	.word	0x00000e85
    1290:	000014bd 	.word	0x000014bd
    1294:	00000e93 	.word	0x00000e93
    1298:	00001431 	.word	0x00001431

0000129c <usart_async_init>:
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	0004      	movs	r4, r0
    12a0:	000d      	movs	r5, r1
    12a2:	0016      	movs	r6, r2
    12a4:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    12a6:	2800      	cmp	r0, #0
    12a8:	d026      	beq.n	12f8 <usart_async_init+0x5c>
    12aa:	2900      	cmp	r1, #0
    12ac:	d026      	beq.n	12fc <usart_async_init+0x60>
    12ae:	2a00      	cmp	r2, #0
    12b0:	d026      	beq.n	1300 <usart_async_init+0x64>
    12b2:	2b00      	cmp	r3, #0
    12b4:	d126      	bne.n	1304 <usart_async_init+0x68>
    12b6:	2000      	movs	r0, #0
    12b8:	223a      	movs	r2, #58	; 0x3a
    12ba:	4915      	ldr	r1, [pc, #84]	; (1310 <usart_async_init+0x74>)
    12bc:	4b15      	ldr	r3, [pc, #84]	; (1314 <usart_async_init+0x78>)
    12be:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    12c0:	0020      	movs	r0, r4
    12c2:	3034      	adds	r0, #52	; 0x34
    12c4:	003a      	movs	r2, r7
    12c6:	0031      	movs	r1, r6
    12c8:	4b13      	ldr	r3, [pc, #76]	; (1318 <usart_async_init+0x7c>)
    12ca:	4798      	blx	r3
    12cc:	2800      	cmp	r0, #0
    12ce:	d11b      	bne.n	1308 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    12d0:	0020      	movs	r0, r4
    12d2:	3008      	adds	r0, #8
    12d4:	0029      	movs	r1, r5
    12d6:	4b11      	ldr	r3, [pc, #68]	; (131c <usart_async_init+0x80>)
    12d8:	4798      	blx	r3
	if (init_status) {
    12da:	2800      	cmp	r0, #0
    12dc:	d10b      	bne.n	12f6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    12de:	4b10      	ldr	r3, [pc, #64]	; (1320 <usart_async_init+0x84>)
    12e0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    12e2:	4b10      	ldr	r3, [pc, #64]	; (1324 <usart_async_init+0x88>)
    12e4:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    12e6:	4b10      	ldr	r3, [pc, #64]	; (1328 <usart_async_init+0x8c>)
    12e8:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    12ea:	4b10      	ldr	r3, [pc, #64]	; (132c <usart_async_init+0x90>)
    12ec:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    12ee:	4b10      	ldr	r3, [pc, #64]	; (1330 <usart_async_init+0x94>)
    12f0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    12f2:	4b10      	ldr	r3, [pc, #64]	; (1334 <usart_async_init+0x98>)
    12f4:	6163      	str	r3, [r4, #20]
}
    12f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    12f8:	2000      	movs	r0, #0
    12fa:	e7dd      	b.n	12b8 <usart_async_init+0x1c>
    12fc:	2000      	movs	r0, #0
    12fe:	e7db      	b.n	12b8 <usart_async_init+0x1c>
    1300:	2000      	movs	r0, #0
    1302:	e7d9      	b.n	12b8 <usart_async_init+0x1c>
    1304:	2001      	movs	r0, #1
    1306:	e7d7      	b.n	12b8 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    1308:	200d      	movs	r0, #13
    130a:	4240      	negs	r0, r0
    130c:	e7f3      	b.n	12f6 <usart_async_init+0x5a>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	00002998 	.word	0x00002998
    1314:	000013dd 	.word	0x000013dd
    1318:	000013e5 	.word	0x000013e5
    131c:	00001ec1 	.word	0x00001ec1
    1320:	0000121d 	.word	0x0000121d
    1324:	00001171 	.word	0x00001171
    1328:	000011d9 	.word	0x000011d9
    132c:	00001155 	.word	0x00001155
    1330:	00001131 	.word	0x00001131
    1334:	00001143 	.word	0x00001143

00001338 <usart_async_enable>:
{
    1338:	b510      	push	{r4, lr}
    133a:	0004      	movs	r4, r0
	ASSERT(descr);
    133c:	1e43      	subs	r3, r0, #1
    133e:	4198      	sbcs	r0, r3
    1340:	b2c0      	uxtb	r0, r0
    1342:	2261      	movs	r2, #97	; 0x61
    1344:	4904      	ldr	r1, [pc, #16]	; (1358 <usart_async_enable+0x20>)
    1346:	4b05      	ldr	r3, [pc, #20]	; (135c <usart_async_enable+0x24>)
    1348:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    134a:	0020      	movs	r0, r4
    134c:	3008      	adds	r0, #8
    134e:	4b04      	ldr	r3, [pc, #16]	; (1360 <usart_async_enable+0x28>)
    1350:	4798      	blx	r3
}
    1352:	2000      	movs	r0, #0
    1354:	bd10      	pop	{r4, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00002998 	.word	0x00002998
    135c:	000013dd 	.word	0x000013dd
    1360:	00001f4d 	.word	0x00001f4d

00001364 <usart_async_register_callback>:
{
    1364:	b570      	push	{r4, r5, r6, lr}
    1366:	0005      	movs	r5, r0
    1368:	000e      	movs	r6, r1
    136a:	0014      	movs	r4, r2
	ASSERT(descr);
    136c:	1e43      	subs	r3, r0, #1
    136e:	4198      	sbcs	r0, r3
    1370:	b2c0      	uxtb	r0, r0
    1372:	2283      	movs	r2, #131	; 0x83
    1374:	4916      	ldr	r1, [pc, #88]	; (13d0 <usart_async_register_callback+0x6c>)
    1376:	4b17      	ldr	r3, [pc, #92]	; (13d4 <usart_async_register_callback+0x70>)
    1378:	4798      	blx	r3
	switch (type) {
    137a:	2e01      	cmp	r6, #1
    137c:	d011      	beq.n	13a2 <usart_async_register_callback+0x3e>
    137e:	2e00      	cmp	r6, #0
    1380:	d004      	beq.n	138c <usart_async_register_callback+0x28>
    1382:	2e02      	cmp	r6, #2
    1384:	d018      	beq.n	13b8 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
    1386:	200d      	movs	r0, #13
    1388:	4240      	negs	r0, r0
    138a:	e009      	b.n	13a0 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    138c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    138e:	1e62      	subs	r2, r4, #1
    1390:	4194      	sbcs	r4, r2
    1392:	b2e2      	uxtb	r2, r4
    1394:	0028      	movs	r0, r5
    1396:	3008      	adds	r0, #8
    1398:	2101      	movs	r1, #1
    139a:	4b0f      	ldr	r3, [pc, #60]	; (13d8 <usart_async_register_callback+0x74>)
    139c:	4798      	blx	r3
	return ERR_NONE;
    139e:	2000      	movs	r0, #0
}
    13a0:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    13a2:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    13a4:	1e62      	subs	r2, r4, #1
    13a6:	4194      	sbcs	r4, r2
    13a8:	b2e2      	uxtb	r2, r4
    13aa:	0028      	movs	r0, r5
    13ac:	3008      	adds	r0, #8
    13ae:	2102      	movs	r1, #2
    13b0:	4b09      	ldr	r3, [pc, #36]	; (13d8 <usart_async_register_callback+0x74>)
    13b2:	4798      	blx	r3
	return ERR_NONE;
    13b4:	2000      	movs	r0, #0
		break;
    13b6:	e7f3      	b.n	13a0 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
    13b8:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    13ba:	1e62      	subs	r2, r4, #1
    13bc:	4194      	sbcs	r4, r2
    13be:	b2e2      	uxtb	r2, r4
    13c0:	0028      	movs	r0, r5
    13c2:	3008      	adds	r0, #8
    13c4:	2103      	movs	r1, #3
    13c6:	4b04      	ldr	r3, [pc, #16]	; (13d8 <usart_async_register_callback+0x74>)
    13c8:	4798      	blx	r3
	return ERR_NONE;
    13ca:	2000      	movs	r0, #0
		break;
    13cc:	e7e8      	b.n	13a0 <usart_async_register_callback+0x3c>
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	00002998 	.word	0x00002998
    13d4:	000013dd 	.word	0x000013dd
    13d8:	00001f79 	.word	0x00001f79

000013dc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13dc:	2800      	cmp	r0, #0
    13de:	d100      	bne.n	13e2 <assert+0x6>
		__asm("BKPT #0");
    13e0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13e2:	4770      	bx	lr

000013e4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    13e4:	b570      	push	{r4, r5, r6, lr}
    13e6:	0004      	movs	r4, r0
    13e8:	000e      	movs	r6, r1
    13ea:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    13ec:	2800      	cmp	r0, #0
    13ee:	d012      	beq.n	1416 <ringbuffer_init+0x32>
    13f0:	2900      	cmp	r1, #0
    13f2:	d012      	beq.n	141a <ringbuffer_init+0x36>
    13f4:	2a00      	cmp	r2, #0
    13f6:	d112      	bne.n	141e <ringbuffer_init+0x3a>
    13f8:	2000      	movs	r0, #0
    13fa:	2228      	movs	r2, #40	; 0x28
    13fc:	490a      	ldr	r1, [pc, #40]	; (1428 <ringbuffer_init+0x44>)
    13fe:	4b0b      	ldr	r3, [pc, #44]	; (142c <ringbuffer_init+0x48>)
    1400:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1402:	1e6b      	subs	r3, r5, #1
    1404:	422b      	tst	r3, r5
    1406:	d10c      	bne.n	1422 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1408:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    140a:	2300      	movs	r3, #0
    140c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    140e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1410:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1412:	2000      	movs	r0, #0
}
    1414:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1416:	2000      	movs	r0, #0
    1418:	e7ef      	b.n	13fa <ringbuffer_init+0x16>
    141a:	2000      	movs	r0, #0
    141c:	e7ed      	b.n	13fa <ringbuffer_init+0x16>
    141e:	2001      	movs	r0, #1
    1420:	e7eb      	b.n	13fa <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    1422:	200d      	movs	r0, #13
    1424:	4240      	negs	r0, r0
    1426:	e7f5      	b.n	1414 <ringbuffer_init+0x30>
    1428:	000029b8 	.word	0x000029b8
    142c:	000013dd 	.word	0x000013dd

00001430 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1430:	b570      	push	{r4, r5, r6, lr}
    1432:	0004      	movs	r4, r0
    1434:	000d      	movs	r5, r1
	ASSERT(rb && data);
    1436:	2800      	cmp	r0, #0
    1438:	d016      	beq.n	1468 <ringbuffer_get+0x38>
    143a:	2900      	cmp	r1, #0
    143c:	d012      	beq.n	1464 <ringbuffer_get+0x34>
    143e:	2001      	movs	r0, #1
    1440:	2240      	movs	r2, #64	; 0x40
    1442:	490c      	ldr	r1, [pc, #48]	; (1474 <ringbuffer_get+0x44>)
    1444:	4b0c      	ldr	r3, [pc, #48]	; (1478 <ringbuffer_get+0x48>)
    1446:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1448:	68a3      	ldr	r3, [r4, #8]
    144a:	68e2      	ldr	r2, [r4, #12]
    144c:	429a      	cmp	r2, r3
    144e:	d00d      	beq.n	146c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    1450:	6862      	ldr	r2, [r4, #4]
    1452:	4013      	ands	r3, r2
    1454:	6822      	ldr	r2, [r4, #0]
    1456:	5cd3      	ldrb	r3, [r2, r3]
    1458:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    145a:	68a3      	ldr	r3, [r4, #8]
    145c:	3301      	adds	r3, #1
    145e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1460:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1462:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    1464:	2000      	movs	r0, #0
    1466:	e7eb      	b.n	1440 <ringbuffer_get+0x10>
    1468:	2000      	movs	r0, #0
    146a:	e7e9      	b.n	1440 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    146c:	200a      	movs	r0, #10
    146e:	4240      	negs	r0, r0
    1470:	e7f7      	b.n	1462 <ringbuffer_get+0x32>
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	000029b8 	.word	0x000029b8
    1478:	000013dd 	.word	0x000013dd

0000147c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    147c:	b570      	push	{r4, r5, r6, lr}
    147e:	0004      	movs	r4, r0
    1480:	000d      	movs	r5, r1
	ASSERT(rb);
    1482:	1e43      	subs	r3, r0, #1
    1484:	4198      	sbcs	r0, r3
    1486:	b2c0      	uxtb	r0, r0
    1488:	2251      	movs	r2, #81	; 0x51
    148a:	490a      	ldr	r1, [pc, #40]	; (14b4 <ringbuffer_put+0x38>)
    148c:	4b0a      	ldr	r3, [pc, #40]	; (14b8 <ringbuffer_put+0x3c>)
    148e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1490:	6863      	ldr	r3, [r4, #4]
    1492:	68e2      	ldr	r2, [r4, #12]
    1494:	4013      	ands	r3, r2
    1496:	6822      	ldr	r2, [r4, #0]
    1498:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    149a:	68e3      	ldr	r3, [r4, #12]
    149c:	68a2      	ldr	r2, [r4, #8]
    149e:	1a9a      	subs	r2, r3, r2
    14a0:	6861      	ldr	r1, [r4, #4]
    14a2:	428a      	cmp	r2, r1
    14a4:	d901      	bls.n	14aa <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    14a6:	1a59      	subs	r1, r3, r1
    14a8:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    14aa:	3301      	adds	r3, #1
    14ac:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    14ae:	2000      	movs	r0, #0
    14b0:	bd70      	pop	{r4, r5, r6, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	000029b8 	.word	0x000029b8
    14b8:	000013dd 	.word	0x000013dd

000014bc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    14bc:	b510      	push	{r4, lr}
    14be:	0004      	movs	r4, r0
	ASSERT(rb);
    14c0:	1e43      	subs	r3, r0, #1
    14c2:	4198      	sbcs	r0, r3
    14c4:	b2c0      	uxtb	r0, r0
    14c6:	2267      	movs	r2, #103	; 0x67
    14c8:	4903      	ldr	r1, [pc, #12]	; (14d8 <ringbuffer_num+0x1c>)
    14ca:	4b04      	ldr	r3, [pc, #16]	; (14dc <ringbuffer_num+0x20>)
    14cc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    14ce:	68e0      	ldr	r0, [r4, #12]
    14d0:	68a3      	ldr	r3, [r4, #8]
    14d2:	1ac0      	subs	r0, r0, r3
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	000029b8 	.word	0x000029b8
    14dc:	000013dd 	.word	0x000013dd

000014e0 <_ac_init_irq_param>:
/**
 * \brief Init irq param with the given ac hardware instance
 */
static void _ac_init_irq_param(const void *const hw, void *dev)
{
	if (hw == AC) {
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <_ac_init_irq_param+0x10>)
    14e2:	4298      	cmp	r0, r3
    14e4:	d000      	beq.n	14e8 <_ac_init_irq_param+0x8>
		_ac_dev = (struct _ac_async_device *)dev;
	}
}
    14e6:	4770      	bx	lr
		_ac_dev = (struct _ac_async_device *)dev;
    14e8:	4b02      	ldr	r3, [pc, #8]	; (14f4 <_ac_init_irq_param+0x14>)
    14ea:	6019      	str	r1, [r3, #0]
}
    14ec:	e7fb      	b.n	14e6 <_ac_init_irq_param+0x6>
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	42004400 	.word	0x42004400
    14f4:	20000074 	.word	0x20000074

000014f8 <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
    14f8:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    14fa:	2300      	movs	r3, #0
    14fc:	2b00      	cmp	r3, #0
    14fe:	d001      	beq.n	1504 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
    1500:	2000      	movs	r0, #0
}
    1502:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
    1504:	009a      	lsls	r2, r3, #2
    1506:	18d2      	adds	r2, r2, r3
    1508:	0091      	lsls	r1, r2, #2
    150a:	4a05      	ldr	r2, [pc, #20]	; (1520 <_get_ac_cfg+0x28>)
    150c:	588a      	ldr	r2, [r1, r2]
    150e:	4282      	cmp	r2, r0
    1510:	d002      	beq.n	1518 <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    1512:	3301      	adds	r3, #1
    1514:	b2db      	uxtb	r3, r3
    1516:	e7f1      	b.n	14fc <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
    1518:	4801      	ldr	r0, [pc, #4]	; (1520 <_get_ac_cfg+0x28>)
    151a:	1840      	adds	r0, r0, r1
    151c:	e7f1      	b.n	1502 <_get_ac_cfg+0xa>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	000029dc 	.word	0x000029dc

00001524 <_ac_init>:
{
    1524:	b510      	push	{r4, lr}
    1526:	0004      	movs	r4, r0
	ASSERT(hw);
    1528:	1e43      	subs	r3, r0, #1
    152a:	4198      	sbcs	r0, r3
    152c:	b2c0      	uxtb	r0, r0
    152e:	2218      	movs	r2, #24
    1530:	32ff      	adds	r2, #255	; 0xff
    1532:	491e      	ldr	r1, [pc, #120]	; (15ac <_ac_init+0x88>)
    1534:	4b1e      	ldr	r3, [pc, #120]	; (15b0 <_ac_init+0x8c>)
    1536:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    1538:	0020      	movs	r0, r4
    153a:	4b1e      	ldr	r3, [pc, #120]	; (15b4 <_ac_init+0x90>)
    153c:	4798      	blx	r3
	if (cfg == NULL) {
    153e:	2800      	cmp	r0, #0
    1540:	d031      	beq.n	15a6 <_ac_init+0x82>
    1542:	7a63      	ldrb	r3, [r4, #9]
    1544:	09db      	lsrs	r3, r3, #7
    1546:	d1fc      	bne.n	1542 <_ac_init+0x1e>
    1548:	7a63      	ldrb	r3, [r4, #9]
    154a:	09db      	lsrs	r3, r3, #7
    154c:	d1fc      	bne.n	1548 <_ac_init+0x24>
	tmp = ((Ac *)hw)->CTRLA.reg;
    154e:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
    1550:	079b      	lsls	r3, r3, #30
    1552:	d507      	bpl.n	1564 <_ac_init+0x40>
	((Ac *)hw)->CTRLA.reg = data;
    1554:	2300      	movs	r3, #0
    1556:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1558:	7a63      	ldrb	r3, [r4, #9]
    155a:	09db      	lsrs	r3, r3, #7
    155c:	d1fc      	bne.n	1558 <_ac_init+0x34>
    155e:	7a63      	ldrb	r3, [r4, #9]
    1560:	09db      	lsrs	r3, r3, #7
    1562:	d1fc      	bne.n	155e <_ac_init+0x3a>
	((Ac *)hw)->CTRLA.reg = data;
    1564:	2301      	movs	r3, #1
    1566:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1568:	7a63      	ldrb	r3, [r4, #9]
    156a:	09db      	lsrs	r3, r3, #7
    156c:	d1fc      	bne.n	1568 <_ac_init+0x44>
    156e:	7a63      	ldrb	r3, [r4, #9]
    1570:	09db      	lsrs	r3, r3, #7
    1572:	d1fc      	bne.n	156e <_ac_init+0x4a>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1574:	6883      	ldr	r3, [r0, #8]
    1576:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1578:	7a63      	ldrb	r3, [r4, #9]
    157a:	09db      	lsrs	r3, r3, #7
    157c:	d1fc      	bne.n	1578 <_ac_init+0x54>
	((Ac *)hw)->COMPCTRL[index].reg = data;
    157e:	68c3      	ldr	r3, [r0, #12]
    1580:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1582:	7a63      	ldrb	r3, [r4, #9]
    1584:	09db      	lsrs	r3, r3, #7
    1586:	d1fc      	bne.n	1582 <_ac_init+0x5e>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
    1588:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
    158a:	3320      	adds	r3, #32
    158c:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
    158e:	7c42      	ldrb	r2, [r0, #17]
    1590:	3301      	adds	r3, #1
    1592:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
    1594:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
    1596:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
    1598:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
    159a:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	09db      	lsrs	r3, r3, #7
    15a0:	d1fc      	bne.n	159c <_ac_init+0x78>
	return ERR_NONE;
    15a2:	2000      	movs	r0, #0
}
    15a4:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
    15a6:	200a      	movs	r0, #10
    15a8:	4240      	negs	r0, r0
    15aa:	e7fb      	b.n	15a4 <_ac_init+0x80>
    15ac:	000029f0 	.word	0x000029f0
    15b0:	000013dd 	.word	0x000013dd
    15b4:	000014f9 	.word	0x000014f9

000015b8 <_ac_async_init>:
{
    15b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ba:	0006      	movs	r6, r0
    15bc:	000c      	movs	r4, r1
	ASSERT(device);
    15be:	1e43      	subs	r3, r0, #1
    15c0:	4198      	sbcs	r0, r3
    15c2:	b2c0      	uxtb	r0, r0
    15c4:	2275      	movs	r2, #117	; 0x75
    15c6:	4923      	ldr	r1, [pc, #140]	; (1654 <_ac_async_init+0x9c>)
    15c8:	4b23      	ldr	r3, [pc, #140]	; (1658 <_ac_async_init+0xa0>)
    15ca:	4798      	blx	r3
	init_status = _ac_init(hw);
    15cc:	0020      	movs	r0, r4
    15ce:	4b23      	ldr	r3, [pc, #140]	; (165c <_ac_async_init+0xa4>)
    15d0:	4798      	blx	r3
    15d2:	1e05      	subs	r5, r0, #0
	if (init_status) {
    15d4:	d001      	beq.n	15da <_ac_async_init+0x22>
}
    15d6:	0028      	movs	r0, r5
    15d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	device->hw = hw;
    15da:	60f4      	str	r4, [r6, #12]
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    15dc:	0020      	movs	r0, r4
    15de:	4b20      	ldr	r3, [pc, #128]	; (1660 <_ac_async_init+0xa8>)
    15e0:	4798      	blx	r3
    15e2:	1e07      	subs	r7, r0, #0
	if (cfg == NULL) {
    15e4:	d032      	beq.n	164c <_ac_async_init+0x94>
	_ac_init_irq_param(hw, (void *)device);
    15e6:	0031      	movs	r1, r6
    15e8:	0020      	movs	r0, r4
    15ea:	4b1e      	ldr	r3, [pc, #120]	; (1664 <_ac_async_init+0xac>)
    15ec:	4798      	blx	r3
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP0;
    15ee:	2301      	movs	r3, #1
    15f0:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP1;
    15f2:	3301      	adds	r3, #1
    15f4:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_WIN0;
    15f6:	330e      	adds	r3, #14
    15f8:	7163      	strb	r3, [r4, #5]
	NVIC_DisableIRQ(cfg->irq);
    15fa:	2304      	movs	r3, #4
    15fc:	56fb      	ldrsb	r3, [r7, r3]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    15fe:	2b00      	cmp	r3, #0
    1600:	db0b      	blt.n	161a <_ac_async_init+0x62>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1602:	221f      	movs	r2, #31
    1604:	4013      	ands	r3, r2
    1606:	3a1e      	subs	r2, #30
    1608:	409a      	lsls	r2, r3
    160a:	0013      	movs	r3, r2
    160c:	2280      	movs	r2, #128	; 0x80
    160e:	4916      	ldr	r1, [pc, #88]	; (1668 <_ac_async_init+0xb0>)
    1610:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1616:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
    161a:	2304      	movs	r3, #4
    161c:	56fb      	ldrsb	r3, [r7, r3]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    161e:	2b00      	cmp	r3, #0
    1620:	db08      	blt.n	1634 <_ac_async_init+0x7c>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1622:	221f      	movs	r2, #31
    1624:	4013      	ands	r3, r2
    1626:	3a1e      	subs	r2, #30
    1628:	409a      	lsls	r2, r3
    162a:	0013      	movs	r3, r2
    162c:	22c0      	movs	r2, #192	; 0xc0
    162e:	0052      	lsls	r2, r2, #1
    1630:	490d      	ldr	r1, [pc, #52]	; (1668 <_ac_async_init+0xb0>)
    1632:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(cfg->irq);
    1634:	2304      	movs	r3, #4
    1636:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    1638:	2b00      	cmp	r3, #0
    163a:	dbcc      	blt.n	15d6 <_ac_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    163c:	221f      	movs	r2, #31
    163e:	4013      	ands	r3, r2
    1640:	3a1e      	subs	r2, #30
    1642:	409a      	lsls	r2, r3
    1644:	0013      	movs	r3, r2
    1646:	4a08      	ldr	r2, [pc, #32]	; (1668 <_ac_async_init+0xb0>)
    1648:	6013      	str	r3, [r2, #0]
    164a:	e7c4      	b.n	15d6 <_ac_async_init+0x1e>
		return ERR_NOT_FOUND;
    164c:	250a      	movs	r5, #10
    164e:	426d      	negs	r5, r5
    1650:	e7c1      	b.n	15d6 <_ac_async_init+0x1e>
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	000029f0 	.word	0x000029f0
    1658:	000013dd 	.word	0x000013dd
    165c:	00001525 	.word	0x00001525
    1660:	000014f9 	.word	0x000014f9
    1664:	000014e1 	.word	0x000014e1
    1668:	e000e100 	.word	0xe000e100

0000166c <_ac_async_enable>:
	hri_ac_set_CTRLA_ENABLE_bit(device->hw);
    166c:	68c2      	ldr	r2, [r0, #12]
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_ENABLE;
    166e:	7813      	ldrb	r3, [r2, #0]
    1670:	2102      	movs	r1, #2
    1672:	430b      	orrs	r3, r1
    1674:	b2db      	uxtb	r3, r3
    1676:	7013      	strb	r3, [r2, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1678:	7a53      	ldrb	r3, [r2, #9]
    167a:	09db      	lsrs	r3, r3, #7
    167c:	d1fc      	bne.n	1678 <_ac_async_enable+0xc>
}
    167e:	4770      	bx	lr

00001680 <_ac_async_start_comparison>:
{
    1680:	b510      	push	{r4, lr}
	_ac_start_comparison(device->hw, comp);
    1682:	68c2      	ldr	r2, [r0, #12]
	((Ac *)hw)->COMPCTRL[index].reg |= AC_COMPCTRL_ENABLE;
    1684:	1d0b      	adds	r3, r1, #4
    1686:	009b      	lsls	r3, r3, #2
    1688:	5898      	ldr	r0, [r3, r2]
    168a:	2401      	movs	r4, #1
    168c:	4320      	orrs	r0, r4
    168e:	5098      	str	r0, [r3, r2]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1690:	7a53      	ldrb	r3, [r2, #9]
    1692:	09db      	lsrs	r3, r3, #7
    1694:	d1fc      	bne.n	1690 <_ac_async_start_comparison+0x10>
    1696:	7a53      	ldrb	r3, [r2, #9]
    1698:	09db      	lsrs	r3, r3, #7
    169a:	d1fc      	bne.n	1696 <_ac_async_start_comparison+0x16>
	tmp = ((Ac *)hw)->COMPCTRL[index].reg;
    169c:	1d0b      	adds	r3, r1, #4
    169e:	009b      	lsls	r3, r3, #2
    16a0:	589b      	ldr	r3, [r3, r2]
	if (hri_ac_get_COMPCTRL_SINGLE_bit(hw, comp) == false) {
    16a2:	079b      	lsls	r3, r3, #30
    16a4:	d503      	bpl.n	16ae <_ac_async_start_comparison+0x2e>
	if (comp == 0) {
    16a6:	2900      	cmp	r1, #0
    16a8:	d002      	beq.n	16b0 <_ac_async_start_comparison+0x30>
}

static inline void hri_ac_write_CTRLB_reg(const void *const hw, hri_ac_ctrlb_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLB.reg = data;
    16aa:	2302      	movs	r3, #2
    16ac:	7053      	strb	r3, [r2, #1]
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	2301      	movs	r3, #1
    16b2:	7053      	strb	r3, [r2, #1]
    16b4:	e7fb      	b.n	16ae <_ac_async_start_comparison+0x2e>
	...

000016b8 <AC_Handler>:
{
    16b8:	b510      	push	{r4, lr}
	void *const hw    = _ac_dev->hw;
    16ba:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <AC_Handler+0x40>)
    16bc:	6818      	ldr	r0, [r3, #0]
    16be:	68c3      	ldr	r3, [r0, #12]
	if (_ac_dev->cb.comparison_ready_cb == NULL) {
    16c0:	6802      	ldr	r2, [r0, #0]
    16c2:	2a00      	cmp	r2, #0
    16c4:	d005      	beq.n	16d2 <AC_Handler+0x1a>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP0) >> AC_INTFLAG_COMP0_Pos;
    16c6:	799a      	ldrb	r2, [r3, #6]
	if (hri_ac_get_interrupt_COMP0_bit(hw)) {
    16c8:	07d2      	lsls	r2, r2, #31
    16ca:	d403      	bmi.n	16d4 <AC_Handler+0x1c>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP1) >> AC_INTFLAG_COMP1_Pos;
    16cc:	799a      	ldrb	r2, [r3, #6]
	} else if (hri_ac_get_interrupt_COMP1_bit(hw)) {
    16ce:	0792      	lsls	r2, r2, #30
    16d0:	d408      	bmi.n	16e4 <AC_Handler+0x2c>
}
    16d2:	bd10      	pop	{r4, pc}
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE0) >> AC_STATUSA_STATE0_Pos;
    16d4:	7a1a      	ldrb	r2, [r3, #8]
    16d6:	2101      	movs	r1, #1
    16d8:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP0;
    16da:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 0, state);
    16dc:	6803      	ldr	r3, [r0, #0]
    16de:	2100      	movs	r1, #0
    16e0:	4798      	blx	r3
    16e2:	e7f6      	b.n	16d2 <AC_Handler+0x1a>
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE1) >> AC_STATUSA_STATE1_Pos;
    16e4:	7a19      	ldrb	r1, [r3, #8]
    16e6:	0849      	lsrs	r1, r1, #1
    16e8:	2201      	movs	r2, #1
    16ea:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP1;
    16ec:	2102      	movs	r1, #2
    16ee:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 1, state);
    16f0:	6803      	ldr	r3, [r0, #0]
    16f2:	3901      	subs	r1, #1
    16f4:	4798      	blx	r3
    16f6:	e7ec      	b.n	16d2 <AC_Handler+0x1a>
    16f8:	20000074 	.word	0x20000074

000016fc <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
    16fc:	2000      	movs	r0, #0
    16fe:	4770      	bx	lr

00001700 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    1700:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1702:	4b0b      	ldr	r3, [pc, #44]	; (1730 <_adc_get_regs+0x30>)
    1704:	4798      	blx	r3
    1706:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1708:	2000      	movs	r0, #0
    170a:	2800      	cmp	r0, #0
    170c:	d006      	beq.n	171c <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
    170e:	227f      	movs	r2, #127	; 0x7f
    1710:	4908      	ldr	r1, [pc, #32]	; (1734 <_adc_get_regs+0x34>)
    1712:	2000      	movs	r0, #0
    1714:	4b08      	ldr	r3, [pc, #32]	; (1738 <_adc_get_regs+0x38>)
    1716:	4798      	blx	r3
	return 0;
    1718:	2000      	movs	r0, #0
}
    171a:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
    171c:	00c3      	lsls	r3, r0, #3
    171e:	1a1b      	subs	r3, r3, r0
    1720:	0099      	lsls	r1, r3, #2
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <_adc_get_regs+0x3c>)
    1724:	5ccb      	ldrb	r3, [r1, r3]
    1726:	429a      	cmp	r2, r3
    1728:	d0f7      	beq.n	171a <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    172a:	3001      	adds	r0, #1
    172c:	b2c0      	uxtb	r0, r0
    172e:	e7ec      	b.n	170a <_adc_get_regs+0xa>
    1730:	000016fd 	.word	0x000016fd
    1734:	00002a20 	.word	0x00002a20
    1738:	000013dd 	.word	0x000013dd
    173c:	00002a04 	.word	0x00002a04

00001740 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1740:	b570      	push	{r4, r5, r6, lr}
    1742:	0004      	movs	r4, r0
    1744:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
    1746:	4b3a      	ldr	r3, [pc, #232]	; (1830 <_adc_init+0xf0>)
    1748:	18c0      	adds	r0, r0, r3
    174a:	4243      	negs	r3, r0
    174c:	4158      	adcs	r0, r3
    174e:	b2c0      	uxtb	r0, r0
    1750:	2294      	movs	r2, #148	; 0x94
    1752:	4938      	ldr	r1, [pc, #224]	; (1834 <_adc_init+0xf4>)
    1754:	4b38      	ldr	r3, [pc, #224]	; (1838 <_adc_init+0xf8>)
    1756:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1758:	4b38      	ldr	r3, [pc, #224]	; (183c <_adc_init+0xfc>)
    175a:	681a      	ldr	r2, [r3, #0]
    175c:	08d2      	lsrs	r2, r2, #3
    175e:	0212      	lsls	r2, r2, #8
    1760:	23e0      	movs	r3, #224	; 0xe0
    1762:	00db      	lsls	r3, r3, #3
    1764:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    1766:	4936      	ldr	r1, [pc, #216]	; (1840 <_adc_init+0x100>)
    1768:	680b      	ldr	r3, [r1, #0]
    176a:	6849      	ldr	r1, [r1, #4]
    176c:	0149      	lsls	r1, r1, #5
    176e:	0edb      	lsrs	r3, r3, #27
    1770:	430b      	orrs	r3, r1
    1772:	21ff      	movs	r1, #255	; 0xff
    1774:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    1776:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1778:	7e63      	ldrb	r3, [r4, #25]
    177a:	09db      	lsrs	r3, r3, #7
    177c:	d1fc      	bne.n	1778 <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    177e:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1780:	079b      	lsls	r3, r3, #30
    1782:	d504      	bpl.n	178e <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1784:	2300      	movs	r3, #0
    1786:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1788:	7e63      	ldrb	r3, [r4, #25]
    178a:	09db      	lsrs	r3, r3, #7
    178c:	d1fc      	bne.n	1788 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
    178e:	2301      	movs	r3, #1
    1790:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1792:	7e63      	ldrb	r3, [r4, #25]
    1794:	09db      	lsrs	r3, r3, #7
    1796:	d1fc      	bne.n	1792 <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1798:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    179a:	00ea      	lsls	r2, r5, #3
    179c:	1b52      	subs	r2, r2, r5
    179e:	0091      	lsls	r1, r2, #2
    17a0:	4b28      	ldr	r3, [pc, #160]	; (1844 <_adc_init+0x104>)
    17a2:	185b      	adds	r3, r3, r1
    17a4:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
    17a6:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    17a8:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
    17aa:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    17ac:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
    17ae:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    17b0:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
    17b2:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    17b4:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    17b6:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    17b8:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    17ba:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    17bc:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    17be:	222a      	movs	r2, #42	; 0x2a
    17c0:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    17c2:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    17c4:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    17c6:	7e63      	ldrb	r3, [r4, #25]
    17c8:	09db      	lsrs	r3, r3, #7
    17ca:	d1fc      	bne.n	17c6 <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    17cc:	00eb      	lsls	r3, r5, #3
    17ce:	1b5b      	subs	r3, r3, r5
    17d0:	009a      	lsls	r2, r3, #2
    17d2:	4b1c      	ldr	r3, [pc, #112]	; (1844 <_adc_init+0x104>)
    17d4:	189b      	adds	r3, r3, r2
    17d6:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    17d8:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    17da:	7e63      	ldrb	r3, [r4, #25]
    17dc:	09db      	lsrs	r3, r3, #7
    17de:	d1fc      	bne.n	17da <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    17e0:	00eb      	lsls	r3, r5, #3
    17e2:	1b5b      	subs	r3, r3, r5
    17e4:	009a      	lsls	r2, r3, #2
    17e6:	4b17      	ldr	r3, [pc, #92]	; (1844 <_adc_init+0x104>)
    17e8:	189b      	adds	r3, r3, r2
    17ea:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    17ec:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    17ee:	7e63      	ldrb	r3, [r4, #25]
    17f0:	09db      	lsrs	r3, r3, #7
    17f2:	d1fc      	bne.n	17ee <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    17f4:	00eb      	lsls	r3, r5, #3
    17f6:	1b5b      	subs	r3, r3, r5
    17f8:	009a      	lsls	r2, r3, #2
    17fa:	4b12      	ldr	r3, [pc, #72]	; (1844 <_adc_init+0x104>)
    17fc:	189b      	adds	r3, r3, r2
    17fe:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    1800:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1802:	7e63      	ldrb	r3, [r4, #25]
    1804:	09db      	lsrs	r3, r3, #7
    1806:	d1fc      	bne.n	1802 <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1808:	00eb      	lsls	r3, r5, #3
    180a:	1b5b      	subs	r3, r3, r5
    180c:	009a      	lsls	r2, r3, #2
    180e:	4b0d      	ldr	r3, [pc, #52]	; (1844 <_adc_init+0x104>)
    1810:	189b      	adds	r3, r3, r2
    1812:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    1814:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1816:	7e63      	ldrb	r3, [r4, #25]
    1818:	09db      	lsrs	r3, r3, #7
    181a:	d1fc      	bne.n	1816 <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    181c:	00eb      	lsls	r3, r5, #3
    181e:	1b5d      	subs	r5, r3, r5
    1820:	00aa      	lsls	r2, r5, #2
    1822:	4b08      	ldr	r3, [pc, #32]	; (1844 <_adc_init+0x104>)
    1824:	189b      	adds	r3, r3, r2
    1826:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1828:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    182a:	2000      	movs	r0, #0
    182c:	bd70      	pop	{r4, r5, r6, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	bdffc000 	.word	0xbdffc000
    1834:	00002a20 	.word	0x00002a20
    1838:	000013dd 	.word	0x000013dd
    183c:	00806024 	.word	0x00806024
    1840:	00806020 	.word	0x00806020
    1844:	00002a04 	.word	0x00002a04

00001848 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	0005      	movs	r5, r0
    184c:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
    184e:	1e43      	subs	r3, r0, #1
    1850:	4198      	sbcs	r0, r3
    1852:	b2c0      	uxtb	r0, r0
    1854:	22d3      	movs	r2, #211	; 0xd3
    1856:	490e      	ldr	r1, [pc, #56]	; (1890 <_adc_async_init+0x48>)
    1858:	4b0e      	ldr	r3, [pc, #56]	; (1894 <_adc_async_init+0x4c>)
    185a:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    185c:	0020      	movs	r0, r4
    185e:	4b0e      	ldr	r3, [pc, #56]	; (1898 <_adc_async_init+0x50>)
    1860:	4798      	blx	r3
    1862:	0001      	movs	r1, r0
    1864:	0020      	movs	r0, r4
    1866:	4b0d      	ldr	r3, [pc, #52]	; (189c <_adc_async_init+0x54>)
    1868:	4798      	blx	r3
	if (init_status) {
    186a:	2800      	cmp	r0, #0
    186c:	d10f      	bne.n	188e <_adc_async_init+0x46>
		return init_status;
	}
	device->hw = hw;
    186e:	616c      	str	r4, [r5, #20]
	_adc_dev   = device;
    1870:	4b0b      	ldr	r3, [pc, #44]	; (18a0 <_adc_async_init+0x58>)
    1872:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1874:	4b0b      	ldr	r3, [pc, #44]	; (18a4 <_adc_async_init+0x5c>)
    1876:	2280      	movs	r2, #128	; 0x80
    1878:	0412      	lsls	r2, r2, #16
    187a:	2180      	movs	r1, #128	; 0x80
    187c:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    187e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1882:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1886:	3101      	adds	r1, #1
    1888:	31ff      	adds	r1, #255	; 0xff
    188a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    188c:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(ADC_IRQn);
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_EnableIRQ(ADC_IRQn);

	return ERR_NONE;
}
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	00002a20 	.word	0x00002a20
    1894:	000013dd 	.word	0x000013dd
    1898:	00001701 	.word	0x00001701
    189c:	00001741 	.word	0x00001741
    18a0:	20000078 	.word	0x20000078
    18a4:	e000e100 	.word	0xe000e100

000018a8 <_adc_async_enable_channel>:
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    18a8:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    18aa:	7813      	ldrb	r3, [r2, #0]
    18ac:	2102      	movs	r1, #2
    18ae:	430b      	orrs	r3, r1
    18b0:	b2db      	uxtb	r3, r3
    18b2:	7013      	strb	r3, [r2, #0]
}
    18b4:	4770      	bx	lr

000018b6 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    18b6:	6942      	ldr	r2, [r0, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    18b8:	7e53      	ldrb	r3, [r2, #25]
    18ba:	09db      	lsrs	r3, r3, #7
    18bc:	d1fc      	bne.n	18b8 <_adc_async_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
    18be:	8892      	ldrh	r2, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    18c0:	0912      	lsrs	r2, r2, #4
    18c2:	3303      	adds	r3, #3
    18c4:	4013      	ands	r3, r2
    18c6:	2b03      	cmp	r3, #3
    18c8:	d001      	beq.n	18ce <_adc_async_get_data_size+0x18>
    18ca:	2002      	movs	r0, #2
}
    18cc:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    18ce:	2001      	movs	r0, #1
    18d0:	e7fc      	b.n	18cc <_adc_async_get_data_size+0x16>

000018d2 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    18d2:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    18d4:	7b13      	ldrb	r3, [r2, #12]
    18d6:	2102      	movs	r1, #2
    18d8:	430b      	orrs	r3, r1
    18da:	b2db      	uxtb	r3, r3
    18dc:	7313      	strb	r3, [r2, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    18de:	7e53      	ldrb	r3, [r2, #25]
    18e0:	09db      	lsrs	r3, r3, #7
    18e2:	d1fc      	bne.n	18de <_adc_async_convert+0xc>
}
    18e4:	4770      	bx	lr
	...

000018e8 <_adc_async_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_async_set_inputs(struct _adc_async_device *const device, const adc_pos_input_t pos_input,
                           const adc_neg_input_t neg_input, const uint8_t channel)
{
    18e8:	b530      	push	{r4, r5, lr}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    18ea:	6944      	ldr	r4, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    18ec:	6923      	ldr	r3, [r4, #16]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    18ee:	251f      	movs	r5, #31
    18f0:	43ab      	bics	r3, r5
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    18f2:	4029      	ands	r1, r5
    18f4:	4319      	orrs	r1, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    18f6:	6121      	str	r1, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    18f8:	7e63      	ldrb	r3, [r4, #25]
    18fa:	09db      	lsrs	r3, r3, #7
    18fc:	d1fc      	bne.n	18f8 <_adc_async_set_inputs+0x10>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    18fe:	6941      	ldr	r1, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    1900:	690b      	ldr	r3, [r1, #16]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    1902:	4806      	ldr	r0, [pc, #24]	; (191c <_adc_async_set_inputs+0x34>)
    1904:	4003      	ands	r3, r0
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    1906:	0212      	lsls	r2, r2, #8
    1908:	20f8      	movs	r0, #248	; 0xf8
    190a:	0140      	lsls	r0, r0, #5
    190c:	4002      	ands	r2, r0
    190e:	431a      	orrs	r2, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1910:	610a      	str	r2, [r1, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1912:	7e4b      	ldrb	r3, [r1, #25]
    1914:	09db      	lsrs	r3, r3, #7
    1916:	d1fc      	bne.n	1912 <_adc_async_set_inputs+0x2a>
}
    1918:	bd30      	pop	{r4, r5, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	ffffe0ff 	.word	0xffffe0ff

00001920 <_adc_async_set_irq_state>:
void _adc_async_set_irq_state(struct _adc_async_device *const device, const uint8_t channel,
                              const enum _adc_async_callback_type type, const bool state)
{
	(void)channel;

	void *const hw = device->hw;
    1920:	6941      	ldr	r1, [r0, #20]

	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    1922:	2a01      	cmp	r2, #1
    1924:	d008      	beq.n	1938 <_adc_async_set_irq_state+0x18>
		hri_adc_write_INTEN_WINMON_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    1926:	2a02      	cmp	r2, #2
    1928:	d00e      	beq.n	1948 <_adc_async_set_irq_state+0x28>
		hri_adc_write_INTEN_OVERRUN_bit(hw, state);
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    192a:	2a00      	cmp	r2, #0
    192c:	d103      	bne.n	1936 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
    192e:	2b00      	cmp	r3, #0
    1930:	d012      	beq.n	1958 <_adc_async_set_irq_state+0x38>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    1932:	2301      	movs	r3, #1
    1934:	75cb      	strb	r3, [r1, #23]
		hri_adc_write_INTEN_RESRDY_bit(hw, state);
	}
}
    1936:	4770      	bx	lr
	if (value == 0x0) {
    1938:	2b00      	cmp	r3, #0
    193a:	d102      	bne.n	1942 <_adc_async_set_irq_state+0x22>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    193c:	3304      	adds	r3, #4
    193e:	758b      	strb	r3, [r1, #22]
    1940:	e7f9      	b.n	1936 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    1942:	2304      	movs	r3, #4
    1944:	75cb      	strb	r3, [r1, #23]
    1946:	e7f6      	b.n	1936 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
    1948:	2b00      	cmp	r3, #0
    194a:	d102      	bne.n	1952 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    194c:	3302      	adds	r3, #2
    194e:	758b      	strb	r3, [r1, #22]
    1950:	e7f1      	b.n	1936 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    1952:	2302      	movs	r3, #2
    1954:	75cb      	strb	r3, [r1, #23]
    1956:	e7ee      	b.n	1936 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    1958:	3301      	adds	r3, #1
    195a:	758b      	strb	r3, [r1, #22]
    195c:	e7eb      	b.n	1936 <_adc_async_set_irq_state+0x16>
	...

00001960 <ADC_Handler>:

/**
 * \internal ADC interrupt handler
 */
void ADC_Handler(void)
{
    1960:	b510      	push	{r4, lr}
	void *const hw      = _adc_dev->hw;
    1962:	4b11      	ldr	r3, [pc, #68]	; (19a8 <ADC_Handler+0x48>)
    1964:	6818      	ldr	r0, [r3, #0]
    1966:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    1968:	7e11      	ldrb	r1, [r2, #24]
	return ((Adc *)hw)->INTENSET.reg;
    196a:	7dd3      	ldrb	r3, [r2, #23]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    196c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    196e:	07d9      	lsls	r1, r3, #31
    1970:	d50a      	bpl.n	1988 <ADC_Handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1972:	2301      	movs	r3, #1
    1974:	7613      	strb	r3, [r2, #24]
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		_adc_dev->adc_async_ch_cb.convert_done(_adc_dev, 0, hri_adc_read_RESULT_reg(hw));
    1976:	6884      	ldr	r4, [r0, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1978:	7e53      	ldrb	r3, [r2, #25]
    197a:	09db      	lsrs	r3, r3, #7
    197c:	d1fc      	bne.n	1978 <ADC_Handler+0x18>
	return ((Adc *)hw)->RESULT.reg;
    197e:	8b52      	ldrh	r2, [r2, #26]
    1980:	b292      	uxth	r2, r2
    1982:	2100      	movs	r1, #0
    1984:	47a0      	blx	r4
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
	}
}
    1986:	bd10      	pop	{r4, pc}
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1988:	0799      	lsls	r1, r3, #30
    198a:	d407      	bmi.n	199c <ADC_Handler+0x3c>
	} else if (intflag & ADC_INTFLAG_WINMON) {
    198c:	075b      	lsls	r3, r3, #29
    198e:	d5fa      	bpl.n	1986 <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1990:	2304      	movs	r3, #4
    1992:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
    1994:	6803      	ldr	r3, [r0, #0]
    1996:	2100      	movs	r1, #0
    1998:	4798      	blx	r3
}
    199a:	e7f4      	b.n	1986 <ADC_Handler+0x26>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    199c:	2302      	movs	r3, #2
    199e:	7613      	strb	r3, [r2, #24]
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
    19a0:	6843      	ldr	r3, [r0, #4]
    19a2:	2100      	movs	r1, #0
    19a4:	4798      	blx	r3
    19a6:	e7ee      	b.n	1986 <ADC_Handler+0x26>
    19a8:	20000078 	.word	0x20000078

000019ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    19ac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    19ae:	4a08      	ldr	r2, [pc, #32]	; (19d0 <_init_chip+0x24>)
    19b0:	6853      	ldr	r3, [r2, #4]
    19b2:	2102      	movs	r1, #2
    19b4:	430b      	orrs	r3, r1
    19b6:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    19b8:	4b06      	ldr	r3, [pc, #24]	; (19d4 <_init_chip+0x28>)
    19ba:	4798      	blx	r3
	_sysctrl_init_sources();
    19bc:	4b06      	ldr	r3, [pc, #24]	; (19d8 <_init_chip+0x2c>)
    19be:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    19c0:	2008      	movs	r0, #8
    19c2:	4c06      	ldr	r4, [pc, #24]	; (19dc <_init_chip+0x30>)
    19c4:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    19c6:	4b06      	ldr	r3, [pc, #24]	; (19e0 <_init_chip+0x34>)
    19c8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    19ca:	20f7      	movs	r0, #247	; 0xf7
    19cc:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    19ce:	bd10      	pop	{r4, pc}
    19d0:	41004000 	.word	0x41004000
    19d4:	00001cd1 	.word	0x00001cd1
    19d8:	00002005 	.word	0x00002005
    19dc:	00001c75 	.word	0x00001c75
    19e0:	00002061 	.word	0x00002061

000019e4 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19e4:	79c3      	ldrb	r3, [r0, #7]
    19e6:	09db      	lsrs	r3, r3, #7
    19e8:	d1fc      	bne.n	19e4 <_dac_init>
    19ea:	79c3      	ldrb	r3, [r0, #7]
    19ec:	09db      	lsrs	r3, r3, #7
    19ee:	d1fc      	bne.n	19ea <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    19f0:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    19f2:	079b      	lsls	r3, r3, #30
    19f4:	d507      	bpl.n	1a06 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    19f6:	2300      	movs	r3, #0
    19f8:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19fa:	79c3      	ldrb	r3, [r0, #7]
    19fc:	09db      	lsrs	r3, r3, #7
    19fe:	d1fc      	bne.n	19fa <_dac_init+0x16>
    1a00:	79c3      	ldrb	r3, [r0, #7]
    1a02:	09db      	lsrs	r3, r3, #7
    1a04:	d1fc      	bne.n	1a00 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    1a06:	2301      	movs	r3, #1
    1a08:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a0a:	79c3      	ldrb	r3, [r0, #7]
    1a0c:	09db      	lsrs	r3, r3, #7
    1a0e:	d1fc      	bne.n	1a0a <_dac_init+0x26>
    1a10:	79c3      	ldrb	r3, [r0, #7]
    1a12:	09db      	lsrs	r3, r3, #7
    1a14:	d1fc      	bne.n	1a10 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1a16:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    1a18:	224a      	movs	r2, #74	; 0x4a
    1a1a:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1a1c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a1e:	79c3      	ldrb	r3, [r0, #7]
    1a20:	09db      	lsrs	r3, r3, #7
    1a22:	d1fc      	bne.n	1a1e <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1a24:	2000      	movs	r0, #0
    1a26:	4770      	bx	lr

00001a28 <_dac_sync_init>:
{
    1a28:	b570      	push	{r4, r5, r6, lr}
    1a2a:	0005      	movs	r5, r0
    1a2c:	000c      	movs	r4, r1
	ASSERT(device);
    1a2e:	1e43      	subs	r3, r0, #1
    1a30:	4198      	sbcs	r0, r3
    1a32:	b2c0      	uxtb	r0, r0
    1a34:	2249      	movs	r2, #73	; 0x49
    1a36:	4904      	ldr	r1, [pc, #16]	; (1a48 <_dac_sync_init+0x20>)
    1a38:	4b04      	ldr	r3, [pc, #16]	; (1a4c <_dac_sync_init+0x24>)
    1a3a:	4798      	blx	r3
	device->hw = hw;
    1a3c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1a3e:	0020      	movs	r0, r4
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <_dac_sync_init+0x28>)
    1a42:	4798      	blx	r3
}
    1a44:	bd70      	pop	{r4, r5, r6, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	00002a38 	.word	0x00002a38
    1a4c:	000013dd 	.word	0x000013dd
    1a50:	000019e5 	.word	0x000019e5

00001a54 <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    1a54:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1a56:	7813      	ldrb	r3, [r2, #0]
    1a58:	2102      	movs	r1, #2
    1a5a:	430b      	orrs	r3, r1
    1a5c:	b2db      	uxtb	r3, r3
    1a5e:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a60:	79d3      	ldrb	r3, [r2, #7]
    1a62:	09db      	lsrs	r3, r3, #7
    1a64:	d1fc      	bne.n	1a60 <_dac_sync_enable_channel+0xc>
}
    1a66:	4770      	bx	lr

00001a68 <_dac_sync_is_channel_enable>:
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    1a68:	6802      	ldr	r2, [r0, #0]
    1a6a:	79d3      	ldrb	r3, [r2, #7]
    1a6c:	09db      	lsrs	r3, r3, #7
    1a6e:	d1fc      	bne.n	1a6a <_dac_sync_is_channel_enable+0x2>
	tmp = ((Dac *)hw)->CTRLA.reg;
    1a70:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    1a72:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1a74:	2001      	movs	r0, #1
    1a76:	4018      	ands	r0, r3
}
    1a78:	4770      	bx	lr

00001a7a <_dac_sync_write_data>:
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    1a7a:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    1a7c:	8111      	strh	r1, [r2, #8]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a7e:	79d3      	ldrb	r3, [r2, #7]
    1a80:	09db      	lsrs	r3, r3, #7
    1a82:	d1fc      	bne.n	1a7e <_dac_sync_write_data+0x4>
}
    1a84:	4770      	bx	lr
	...

00001a88 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1a88:	4b21      	ldr	r3, [pc, #132]	; (1b10 <_ext_irq_init+0x88>)
    1a8a:	785b      	ldrb	r3, [r3, #1]
    1a8c:	09db      	lsrs	r3, r3, #7
    1a8e:	d1fb      	bne.n	1a88 <_ext_irq_init>
    1a90:	4b1f      	ldr	r3, [pc, #124]	; (1b10 <_ext_irq_init+0x88>)
    1a92:	785b      	ldrb	r3, [r3, #1]
    1a94:	09db      	lsrs	r3, r3, #7
    1a96:	d1fb      	bne.n	1a90 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1a98:	4b1d      	ldr	r3, [pc, #116]	; (1b10 <_ext_irq_init+0x88>)
    1a9a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1a9c:	079b      	lsls	r3, r3, #30
    1a9e:	d50a      	bpl.n	1ab6 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1aa0:	2200      	movs	r2, #0
    1aa2:	4b1b      	ldr	r3, [pc, #108]	; (1b10 <_ext_irq_init+0x88>)
    1aa4:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1aa6:	4b1a      	ldr	r3, [pc, #104]	; (1b10 <_ext_irq_init+0x88>)
    1aa8:	785b      	ldrb	r3, [r3, #1]
    1aaa:	09db      	lsrs	r3, r3, #7
    1aac:	d1fb      	bne.n	1aa6 <_ext_irq_init+0x1e>
    1aae:	4b18      	ldr	r3, [pc, #96]	; (1b10 <_ext_irq_init+0x88>)
    1ab0:	785b      	ldrb	r3, [r3, #1]
    1ab2:	09db      	lsrs	r3, r3, #7
    1ab4:	d1fb      	bne.n	1aae <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    1ab6:	2201      	movs	r2, #1
    1ab8:	4b15      	ldr	r3, [pc, #84]	; (1b10 <_ext_irq_init+0x88>)
    1aba:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1abc:	4b14      	ldr	r3, [pc, #80]	; (1b10 <_ext_irq_init+0x88>)
    1abe:	785b      	ldrb	r3, [r3, #1]
    1ac0:	09db      	lsrs	r3, r3, #7
    1ac2:	d1fb      	bne.n	1abc <_ext_irq_init+0x34>
    1ac4:	4b12      	ldr	r3, [pc, #72]	; (1b10 <_ext_irq_init+0x88>)
    1ac6:	785b      	ldrb	r3, [r3, #1]
    1ac8:	09db      	lsrs	r3, r3, #7
    1aca:	d1fb      	bne.n	1ac4 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1acc:	4b10      	ldr	r3, [pc, #64]	; (1b10 <_ext_irq_init+0x88>)
    1ace:	2200      	movs	r2, #0
    1ad0:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1ad2:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1ad4:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1ad6:	490f      	ldr	r1, [pc, #60]	; (1b14 <_ext_irq_init+0x8c>)
    1ad8:	6199      	str	r1, [r3, #24]
    1ada:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1adc:	781a      	ldrb	r2, [r3, #0]
    1ade:	2102      	movs	r1, #2
    1ae0:	430a      	orrs	r2, r1
    1ae2:	b2d2      	uxtb	r2, r2
    1ae4:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1ae6:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <_ext_irq_init+0x88>)
    1ae8:	785b      	ldrb	r3, [r3, #1]
    1aea:	09db      	lsrs	r3, r3, #7
    1aec:	d1fb      	bne.n	1ae6 <_ext_irq_init+0x5e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aee:	4b0a      	ldr	r3, [pc, #40]	; (1b18 <_ext_irq_init+0x90>)
    1af0:	2210      	movs	r2, #16
    1af2:	2180      	movs	r1, #128	; 0x80
    1af4:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	3101      	adds	r1, #1
    1b00:	31ff      	adds	r1, #255	; 0xff
    1b02:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b04:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1b06:	4b05      	ldr	r3, [pc, #20]	; (1b1c <_ext_irq_init+0x94>)
    1b08:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1b0a:	2000      	movs	r0, #0
    1b0c:	4770      	bx	lr
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	40001800 	.word	0x40001800
    1b14:	03230022 	.word	0x03230022
    1b18:	e000e100 	.word	0xe000e100
    1b1c:	2000007c 	.word	0x2000007c

00001b20 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1b20:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    1b22:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    1b24:	2b02      	cmp	r3, #2
    1b26:	d80b      	bhi.n	1b40 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    1b28:	00dc      	lsls	r4, r3, #3
    1b2a:	4a10      	ldr	r2, [pc, #64]	; (1b6c <_ext_irq_enable+0x4c>)
    1b2c:	1912      	adds	r2, r2, r4
    1b2e:	6852      	ldr	r2, [r2, #4]
    1b30:	4282      	cmp	r2, r0
    1b32:	d002      	beq.n	1b3a <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    1b34:	3301      	adds	r3, #1
    1b36:	b2db      	uxtb	r3, r3
    1b38:	e7f4      	b.n	1b24 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1b3a:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <_ext_irq_enable+0x4c>)
    1b3c:	5ce2      	ldrb	r2, [r4, r3]
			break;
    1b3e:	e000      	b.n	1b42 <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1b40:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    1b42:	2aff      	cmp	r2, #255	; 0xff
    1b44:	d00e      	beq.n	1b64 <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    1b46:	2900      	cmp	r1, #0
    1b48:	d106      	bne.n	1b58 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1b4a:	2301      	movs	r3, #1
    1b4c:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1b4e:	4a08      	ldr	r2, [pc, #32]	; (1b70 <_ext_irq_enable+0x50>)
    1b50:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b52:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    1b54:	2000      	movs	r0, #0
}
    1b56:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1b58:	2301      	movs	r3, #1
    1b5a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1b5c:	4a04      	ldr	r2, [pc, #16]	; (1b70 <_ext_irq_enable+0x50>)
    1b5e:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1b60:	2000      	movs	r0, #0
    1b62:	e7f8      	b.n	1b56 <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    1b64:	200d      	movs	r0, #13
    1b66:	4240      	negs	r0, r0
    1b68:	e7f5      	b.n	1b56 <_ext_irq_enable+0x36>
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	00002a50 	.word	0x00002a50
    1b70:	40001800 	.word	0x40001800

00001b74 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b76:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1b78:	4b27      	ldr	r3, [pc, #156]	; (1c18 <EIC_Handler+0xa4>)
    1b7a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1b7c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1b7e:	400a      	ands	r2, r1
    1b80:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1b82:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b84:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1b86:	4b25      	ldr	r3, [pc, #148]	; (1c1c <EIC_Handler+0xa8>)
    1b88:	6818      	ldr	r0, [r3, #0]
    1b8a:	1e43      	subs	r3, r0, #1
    1b8c:	4198      	sbcs	r0, r3
    1b8e:	b2c0      	uxtb	r0, r0
    1b90:	22d2      	movs	r2, #210	; 0xd2
    1b92:	4923      	ldr	r1, [pc, #140]	; (1c20 <EIC_Handler+0xac>)
    1b94:	4b23      	ldr	r3, [pc, #140]	; (1c24 <EIC_Handler+0xb0>)
    1b96:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1b98:	2501      	movs	r5, #1
    1b9a:	426d      	negs	r5, r5

	while (flags) {
    1b9c:	e031      	b.n	1c02 <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1b9e:	00db      	lsls	r3, r3, #3
    1ba0:	4a21      	ldr	r2, [pc, #132]	; (1c28 <EIC_Handler+0xb4>)
    1ba2:	18d3      	adds	r3, r2, r3
    1ba4:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1ba6:	1c6b      	adds	r3, r5, #1
    1ba8:	d003      	beq.n	1bb2 <EIC_Handler+0x3e>
				callback(pin);
    1baa:	4b1c      	ldr	r3, [pc, #112]	; (1c1c <EIC_Handler+0xa8>)
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	0028      	movs	r0, r5
    1bb0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1bb2:	2201      	movs	r2, #1
    1bb4:	40a2      	lsls	r2, r4
    1bb6:	9b01      	ldr	r3, [sp, #4]
    1bb8:	4393      	bics	r3, r2
    1bba:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1bbc:	9801      	ldr	r0, [sp, #4]
    1bbe:	4b1b      	ldr	r3, [pc, #108]	; (1c2c <EIC_Handler+0xb8>)
    1bc0:	4798      	blx	r3
    1bc2:	3801      	subs	r0, #1
    1bc4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1bc6:	1c63      	adds	r3, r4, #1
    1bc8:	d014      	beq.n	1bf4 <EIC_Handler+0x80>
    1bca:	2603      	movs	r6, #3
    1bcc:	2000      	movs	r0, #0
    1bce:	e001      	b.n	1bd4 <EIC_Handler+0x60>
					upper = middle - 1;
    1bd0:	3901      	subs	r1, #1
    1bd2:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    1bd4:	42b0      	cmp	r0, r6
    1bd6:	d8e6      	bhi.n	1ba6 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    1bd8:	1833      	adds	r3, r6, r0
    1bda:	105b      	asrs	r3, r3, #1
    1bdc:	b2d9      	uxtb	r1, r3
    1bde:	22ff      	movs	r2, #255	; 0xff
    1be0:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    1be2:	00df      	lsls	r7, r3, #3
    1be4:	4a10      	ldr	r2, [pc, #64]	; (1c28 <EIC_Handler+0xb4>)
    1be6:	5cba      	ldrb	r2, [r7, r2]
    1be8:	42a2      	cmp	r2, r4
    1bea:	d0d8      	beq.n	1b9e <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    1bec:	daf0      	bge.n	1bd0 <EIC_Handler+0x5c>
					lower = middle + 1;
    1bee:	3101      	adds	r1, #1
    1bf0:	b2c8      	uxtb	r0, r1
    1bf2:	e7ef      	b.n	1bd4 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    1bf4:	4b08      	ldr	r3, [pc, #32]	; (1c18 <EIC_Handler+0xa4>)
    1bf6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1bf8:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1bfa:	400a      	ands	r2, r1
    1bfc:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1bfe:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1c00:	611a      	str	r2, [r3, #16]
	while (flags) {
    1c02:	9b01      	ldr	r3, [sp, #4]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d005      	beq.n	1c14 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    1c08:	9801      	ldr	r0, [sp, #4]
    1c0a:	4b08      	ldr	r3, [pc, #32]	; (1c2c <EIC_Handler+0xb8>)
    1c0c:	4798      	blx	r3
    1c0e:	3801      	subs	r0, #1
    1c10:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1c12:	e7d8      	b.n	1bc6 <EIC_Handler+0x52>
	}
}
    1c14:	b003      	add	sp, #12
    1c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c18:	40001800 	.word	0x40001800
    1c1c:	2000007c 	.word	0x2000007c
    1c20:	00002a68 	.word	0x00002a68
    1c24:	000013dd 	.word	0x000013dd
    1c28:	00002a50 	.word	0x00002a50
    1c2c:	00002889 	.word	0x00002889

00001c30 <_event_system_init>:
int32_t _event_system_init(void)
{
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1c30:	2300      	movs	r3, #0
    1c32:	e006      	b.n	1c42 <_event_system_init+0x12>
		hri_evsys_write_USER_reg(EVSYS, user_mux_confs[i]);
    1c34:	0059      	lsls	r1, r3, #1
    1c36:	4a0d      	ldr	r2, [pc, #52]	; (1c6c <_event_system_init+0x3c>)
    1c38:	5a89      	ldrh	r1, [r1, r2]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER.reg = data;
    1c3a:	4a0d      	ldr	r2, [pc, #52]	; (1c70 <_event_system_init+0x40>)
    1c3c:	8111      	strh	r1, [r2, #8]
	for (i = 0; i < EVSYS_USERS; i++) {
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	2b1e      	cmp	r3, #30
    1c44:	d9f6      	bls.n	1c34 <_event_system_init+0x4>
    1c46:	2300      	movs	r3, #0
    1c48:	e007      	b.n	1c5a <_event_system_init+0x2a>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, channel_confs[i]);
    1c4a:	0099      	lsls	r1, r3, #2
    1c4c:	4a07      	ldr	r2, [pc, #28]	; (1c6c <_event_system_init+0x3c>)
    1c4e:	1852      	adds	r2, r2, r1
    1c50:	6c11      	ldr	r1, [r2, #64]	; 0x40
	((Evsys *)hw)->CHANNEL.reg = data;
    1c52:	4a07      	ldr	r2, [pc, #28]	; (1c70 <_event_system_init+0x40>)
    1c54:	6051      	str	r1, [r2, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1c56:	3301      	adds	r3, #1
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	2b0b      	cmp	r3, #11
    1c5c:	d9f5      	bls.n	1c4a <_event_system_init+0x1a>
	((Evsys *)hw)->INTENSET.reg = data;
    1c5e:	4b04      	ldr	r3, [pc, #16]	; (1c70 <_event_system_init+0x40>)
    1c60:	2200      	movs	r2, #0
    1c62:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    1c64:	3a01      	subs	r2, #1
    1c66:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    1c68:	2000      	movs	r0, #0
    1c6a:	4770      	bx	lr
    1c6c:	00002a80 	.word	0x00002a80
    1c70:	42000400 	.word	0x42000400

00001c74 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c74:	07c3      	lsls	r3, r0, #31
    1c76:	d509      	bpl.n	1c8c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1c78:	4b11      	ldr	r3, [pc, #68]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1c7a:	2280      	movs	r2, #128	; 0x80
    1c7c:	0052      	lsls	r2, r2, #1
    1c7e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c80:	4a10      	ldr	r2, [pc, #64]	; (1cc4 <_gclk_init_generators_by_fref+0x50>)
    1c82:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c84:	4b0e      	ldr	r3, [pc, #56]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1c86:	785b      	ldrb	r3, [r3, #1]
    1c88:	09db      	lsrs	r3, r3, #7
    1c8a:	d1fb      	bne.n	1c84 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1c8c:	0783      	lsls	r3, r0, #30
    1c8e:	d509      	bpl.n	1ca4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1c90:	4b0b      	ldr	r3, [pc, #44]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1c92:	2202      	movs	r2, #2
    1c94:	32ff      	adds	r2, #255	; 0xff
    1c96:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c98:	4a0b      	ldr	r2, [pc, #44]	; (1cc8 <_gclk_init_generators_by_fref+0x54>)
    1c9a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c9c:	4b08      	ldr	r3, [pc, #32]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1c9e:	785b      	ldrb	r3, [r3, #1]
    1ca0:	09db      	lsrs	r3, r3, #7
    1ca2:	d1fb      	bne.n	1c9c <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1ca4:	0703      	lsls	r3, r0, #28
    1ca6:	d509      	bpl.n	1cbc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1ca8:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1caa:	2204      	movs	r2, #4
    1cac:	32ff      	adds	r2, #255	; 0xff
    1cae:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1cb0:	4a06      	ldr	r2, [pc, #24]	; (1ccc <_gclk_init_generators_by_fref+0x58>)
    1cb2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1cb4:	4b02      	ldr	r3, [pc, #8]	; (1cc0 <_gclk_init_generators_by_fref+0x4c>)
    1cb6:	785b      	ldrb	r3, [r3, #1]
    1cb8:	09db      	lsrs	r3, r3, #7
    1cba:	d1fb      	bne.n	1cb4 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1cbc:	4770      	bx	lr
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	40000c00 	.word	0x40000c00
    1cc4:	00090700 	.word	0x00090700
    1cc8:	00090701 	.word	0x00090701
    1ccc:	00090503 	.word	0x00090503

00001cd0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1cd0:	4b06      	ldr	r3, [pc, #24]	; (1cec <_pm_init+0x1c>)
    1cd2:	7a1a      	ldrb	r2, [r3, #8]
    1cd4:	b2d2      	uxtb	r2, r2
    1cd6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1cd8:	7a5a      	ldrb	r2, [r3, #9]
    1cda:	b2d2      	uxtb	r2, r2
    1cdc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1cde:	7a9a      	ldrb	r2, [r3, #10]
    1ce0:	b2d2      	uxtb	r2, r2
    1ce2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1ce4:	7ada      	ldrb	r2, [r3, #11]
    1ce6:	b2d2      	uxtb	r2, r2
    1ce8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1cea:	4770      	bx	lr
    1cec:	40000400 	.word	0x40000400

00001cf0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1cf0:	4b02      	ldr	r3, [pc, #8]	; (1cfc <_sercom_get_hardware_index+0xc>)
    1cf2:	469c      	mov	ip, r3
    1cf4:	4460      	add	r0, ip
    1cf6:	0a80      	lsrs	r0, r0, #10
    1cf8:	b2c0      	uxtb	r0, r0
}
    1cfa:	4770      	bx	lr
    1cfc:	bdfff800 	.word	0xbdfff800

00001d00 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1d00:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1d02:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1d04:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1d06:	07db      	lsls	r3, r3, #31
    1d08:	d502      	bpl.n	1d10 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1d0a:	7da3      	ldrb	r3, [r4, #22]
    1d0c:	07db      	lsls	r3, r3, #31
    1d0e:	d40f      	bmi.n	1d30 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1d10:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1d12:	079b      	lsls	r3, r3, #30
    1d14:	d502      	bpl.n	1d1c <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1d16:	7da3      	ldrb	r3, [r4, #22]
    1d18:	079b      	lsls	r3, r3, #30
    1d1a:	d40e      	bmi.n	1d3a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1d1c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1d1e:	075b      	lsls	r3, r3, #29
    1d20:	d515      	bpl.n	1d4e <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1d22:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1d24:	2337      	movs	r3, #55	; 0x37
    1d26:	421a      	tst	r2, r3
    1d28:	d00c      	beq.n	1d44 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1d2a:	3308      	adds	r3, #8
    1d2c:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    1d2e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1d30:	2301      	movs	r3, #1
    1d32:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1d34:	6803      	ldr	r3, [r0, #0]
    1d36:	4798      	blx	r3
    1d38:	e7f9      	b.n	1d2e <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1d3a:	2302      	movs	r3, #2
    1d3c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1d3e:	6883      	ldr	r3, [r0, #8]
    1d40:	4798      	blx	r3
    1d42:	e7f4      	b.n	1d2e <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1d44:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1d46:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    1d48:	b2c9      	uxtb	r1, r1
    1d4a:	4798      	blx	r3
    1d4c:	e7ef      	b.n	1d2e <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1d4e:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1d50:	09db      	lsrs	r3, r3, #7
    1d52:	d0ec      	beq.n	1d2e <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1d54:	2380      	movs	r3, #128	; 0x80
    1d56:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1d58:	68c3      	ldr	r3, [r0, #12]
    1d5a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1d5c:	8b63      	ldrh	r3, [r4, #26]
    1d5e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1d60:	8363      	strh	r3, [r4, #26]
    1d62:	e7e4      	b.n	1d2e <_sercom_usart_interrupt_handler+0x2e>

00001d64 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    1d64:	4b03      	ldr	r3, [pc, #12]	; (1d74 <_sercom_init_irq_param+0x10>)
    1d66:	4298      	cmp	r0, r3
    1d68:	d000      	beq.n	1d6c <_sercom_init_irq_param+0x8>
		_sercom5_dev = (struct _usart_async_device *)dev;
	}
}
    1d6a:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    1d6c:	4b02      	ldr	r3, [pc, #8]	; (1d78 <_sercom_init_irq_param+0x14>)
    1d6e:	6019      	str	r1, [r3, #0]
}
    1d70:	e7fb      	b.n	1d6a <_sercom_init_irq_param+0x6>
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	42001c00 	.word	0x42001c00
    1d78:	20000080 	.word	0x20000080

00001d7c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1d7c:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1d7e:	4b02      	ldr	r3, [pc, #8]	; (1d88 <_sercom_get_irq_num+0xc>)
    1d80:	4798      	blx	r3
    1d82:	3009      	adds	r0, #9
    1d84:	b2c0      	uxtb	r0, r0
}
    1d86:	bd10      	pop	{r4, pc}
    1d88:	00001cf1 	.word	0x00001cf1

00001d8c <_get_sercom_index>:
{
    1d8c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1d8e:	4b0b      	ldr	r3, [pc, #44]	; (1dbc <_get_sercom_index+0x30>)
    1d90:	4798      	blx	r3
    1d92:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d94:	2000      	movs	r0, #0
    1d96:	2800      	cmp	r0, #0
    1d98:	d006      	beq.n	1da8 <_get_sercom_index+0x1c>
	ASSERT(false);
    1d9a:	4a09      	ldr	r2, [pc, #36]	; (1dc0 <_get_sercom_index+0x34>)
    1d9c:	4909      	ldr	r1, [pc, #36]	; (1dc4 <_get_sercom_index+0x38>)
    1d9e:	2000      	movs	r0, #0
    1da0:	4b09      	ldr	r3, [pc, #36]	; (1dc8 <_get_sercom_index+0x3c>)
    1da2:	4798      	blx	r3
	return 0;
    1da4:	2000      	movs	r0, #0
}
    1da6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1da8:	0083      	lsls	r3, r0, #2
    1daa:	181b      	adds	r3, r3, r0
    1dac:	0099      	lsls	r1, r3, #2
    1dae:	4b07      	ldr	r3, [pc, #28]	; (1dcc <_get_sercom_index+0x40>)
    1db0:	5ccb      	ldrb	r3, [r1, r3]
    1db2:	429a      	cmp	r2, r3
    1db4:	d0f7      	beq.n	1da6 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1db6:	3001      	adds	r0, #1
    1db8:	b2c0      	uxtb	r0, r0
    1dba:	e7ec      	b.n	1d96 <_get_sercom_index+0xa>
    1dbc:	00001cf1 	.word	0x00001cf1
    1dc0:	0000025e 	.word	0x0000025e
    1dc4:	00002b40 	.word	0x00002b40
    1dc8:	000013dd 	.word	0x000013dd
    1dcc:	00002af0 	.word	0x00002af0

00001dd0 <_usart_init>:
{
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1dd4:	4b38      	ldr	r3, [pc, #224]	; (1eb8 <_usart_init+0xe8>)
    1dd6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1dd8:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1dda:	07db      	lsls	r3, r3, #31
    1ddc:	d41d      	bmi.n	1e1a <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1dde:	0083      	lsls	r3, r0, #2
    1de0:	181b      	adds	r3, r3, r0
    1de2:	009a      	lsls	r2, r3, #2
    1de4:	4b35      	ldr	r3, [pc, #212]	; (1ebc <_usart_init+0xec>)
    1de6:	189b      	adds	r3, r3, r2
    1de8:	685a      	ldr	r2, [r3, #4]
    1dea:	231c      	movs	r3, #28
    1dec:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dee:	69e3      	ldr	r3, [r4, #28]
    1df0:	079b      	lsls	r3, r3, #30
    1df2:	d1fc      	bne.n	1dee <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1df4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1df6:	079b      	lsls	r3, r3, #30
    1df8:	d509      	bpl.n	1e0e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1dfa:	6823      	ldr	r3, [r4, #0]
    1dfc:	2102      	movs	r1, #2
    1dfe:	438b      	bics	r3, r1
    1e00:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e02:	69e3      	ldr	r3, [r4, #28]
    1e04:	079b      	lsls	r3, r3, #30
    1e06:	d1fc      	bne.n	1e02 <_usart_init+0x32>
    1e08:	69e3      	ldr	r3, [r4, #28]
    1e0a:	079b      	lsls	r3, r3, #30
    1e0c:	d4fc      	bmi.n	1e08 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1e0e:	2301      	movs	r3, #1
    1e10:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e12:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e14:	69e3      	ldr	r3, [r4, #28]
    1e16:	079b      	lsls	r3, r3, #30
    1e18:	d1fc      	bne.n	1e14 <_usart_init+0x44>
    1e1a:	69e3      	ldr	r3, [r4, #28]
    1e1c:	07db      	lsls	r3, r3, #31
    1e1e:	d4fc      	bmi.n	1e1a <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1e20:	0083      	lsls	r3, r0, #2
    1e22:	181b      	adds	r3, r3, r0
    1e24:	009a      	lsls	r2, r3, #2
    1e26:	4b25      	ldr	r3, [pc, #148]	; (1ebc <_usart_init+0xec>)
    1e28:	189b      	adds	r3, r3, r2
    1e2a:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e2c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e2e:	69e3      	ldr	r3, [r4, #28]
    1e30:	079b      	lsls	r3, r3, #30
    1e32:	d1fc      	bne.n	1e2e <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1e34:	0083      	lsls	r3, r0, #2
    1e36:	181b      	adds	r3, r3, r0
    1e38:	009a      	lsls	r2, r3, #2
    1e3a:	4b20      	ldr	r3, [pc, #128]	; (1ebc <_usart_init+0xec>)
    1e3c:	189b      	adds	r3, r3, r2
    1e3e:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e42:	69e3      	ldr	r3, [r4, #28]
    1e44:	075b      	lsls	r3, r3, #29
    1e46:	d1fc      	bne.n	1e42 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1e48:	0083      	lsls	r3, r0, #2
    1e4a:	181b      	adds	r3, r3, r0
    1e4c:	009a      	lsls	r2, r3, #2
    1e4e:	4b1b      	ldr	r3, [pc, #108]	; (1ebc <_usart_init+0xec>)
    1e50:	189b      	adds	r3, r3, r2
    1e52:	685b      	ldr	r3, [r3, #4]
    1e54:	049a      	lsls	r2, r3, #18
    1e56:	d40b      	bmi.n	1e70 <_usart_init+0xa0>
    1e58:	22c0      	movs	r2, #192	; 0xc0
    1e5a:	01d2      	lsls	r2, r2, #7
    1e5c:	4213      	tst	r3, r2
    1e5e:	d107      	bne.n	1e70 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1e60:	0083      	lsls	r3, r0, #2
    1e62:	181b      	adds	r3, r3, r0
    1e64:	009a      	lsls	r2, r3, #2
    1e66:	4b15      	ldr	r3, [pc, #84]	; (1ebc <_usart_init+0xec>)
    1e68:	189b      	adds	r3, r3, r2
    1e6a:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1e6c:	81a3      	strh	r3, [r4, #12]
    1e6e:	e015      	b.n	1e9c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1e70:	0083      	lsls	r3, r0, #2
    1e72:	181b      	adds	r3, r3, r0
    1e74:	009a      	lsls	r2, r3, #2
    1e76:	4911      	ldr	r1, [pc, #68]	; (1ebc <_usart_init+0xec>)
    1e78:	1889      	adds	r1, r1, r2
    1e7a:	898a      	ldrh	r2, [r1, #12]
    1e7c:	89a3      	ldrh	r3, [r4, #12]
    1e7e:	04d2      	lsls	r2, r2, #19
    1e80:	0cd2      	lsrs	r2, r2, #19
    1e82:	0b5b      	lsrs	r3, r3, #13
    1e84:	035b      	lsls	r3, r3, #13
    1e86:	4313      	orrs	r3, r2
    1e88:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1e8a:	7b8b      	ldrb	r3, [r1, #14]
    1e8c:	2207      	movs	r2, #7
    1e8e:	401a      	ands	r2, r3
    1e90:	89a3      	ldrh	r3, [r4, #12]
    1e92:	0352      	lsls	r2, r2, #13
    1e94:	04db      	lsls	r3, r3, #19
    1e96:	0cdb      	lsrs	r3, r3, #19
    1e98:	4313      	orrs	r3, r2
    1e9a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1e9c:	4a07      	ldr	r2, [pc, #28]	; (1ebc <_usart_init+0xec>)
    1e9e:	0083      	lsls	r3, r0, #2
    1ea0:	181d      	adds	r5, r3, r0
    1ea2:	00a9      	lsls	r1, r5, #2
    1ea4:	000d      	movs	r5, r1
    1ea6:	1851      	adds	r1, r2, r1
    1ea8:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1eaa:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1eac:	1952      	adds	r2, r2, r5
    1eae:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1eb0:	2330      	movs	r3, #48	; 0x30
    1eb2:	54e2      	strb	r2, [r4, r3]
}
    1eb4:	2000      	movs	r0, #0
    1eb6:	bd70      	pop	{r4, r5, r6, pc}
    1eb8:	00001d8d 	.word	0x00001d8d
    1ebc:	00002af0 	.word	0x00002af0

00001ec0 <_usart_async_init>:
{
    1ec0:	b570      	push	{r4, r5, r6, lr}
    1ec2:	0006      	movs	r6, r0
    1ec4:	000c      	movs	r4, r1
	ASSERT(device);
    1ec6:	1e43      	subs	r3, r0, #1
    1ec8:	4198      	sbcs	r0, r3
    1eca:	b2c0      	uxtb	r0, r0
    1ecc:	22c4      	movs	r2, #196	; 0xc4
    1ece:	4919      	ldr	r1, [pc, #100]	; (1f34 <_usart_async_init+0x74>)
    1ed0:	4b19      	ldr	r3, [pc, #100]	; (1f38 <_usart_async_init+0x78>)
    1ed2:	4798      	blx	r3
	init_status = _usart_init(hw);
    1ed4:	0020      	movs	r0, r4
    1ed6:	4b19      	ldr	r3, [pc, #100]	; (1f3c <_usart_async_init+0x7c>)
    1ed8:	4798      	blx	r3
    1eda:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1edc:	d001      	beq.n	1ee2 <_usart_async_init+0x22>
}
    1ede:	0028      	movs	r0, r5
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1ee2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1ee4:	0031      	movs	r1, r6
    1ee6:	0020      	movs	r0, r4
    1ee8:	4b15      	ldr	r3, [pc, #84]	; (1f40 <_usart_async_init+0x80>)
    1eea:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1eec:	0020      	movs	r0, r4
    1eee:	4b15      	ldr	r3, [pc, #84]	; (1f44 <_usart_async_init+0x84>)
    1ef0:	4798      	blx	r3
    1ef2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	db0a      	blt.n	1f0e <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef8:	211f      	movs	r1, #31
    1efa:	4001      	ands	r1, r0
    1efc:	2201      	movs	r2, #1
    1efe:	408a      	lsls	r2, r1
    1f00:	2180      	movs	r1, #128	; 0x80
    1f02:	4c11      	ldr	r4, [pc, #68]	; (1f48 <_usart_async_init+0x88>)
    1f04:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f0a:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1f0e:	2b00      	cmp	r3, #0
    1f10:	db07      	blt.n	1f22 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f12:	211f      	movs	r1, #31
    1f14:	4001      	ands	r1, r0
    1f16:	2201      	movs	r2, #1
    1f18:	408a      	lsls	r2, r1
    1f1a:	21c0      	movs	r1, #192	; 0xc0
    1f1c:	0049      	lsls	r1, r1, #1
    1f1e:	4c0a      	ldr	r4, [pc, #40]	; (1f48 <_usart_async_init+0x88>)
    1f20:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1f22:	2b00      	cmp	r3, #0
    1f24:	dbdb      	blt.n	1ede <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f26:	231f      	movs	r3, #31
    1f28:	4018      	ands	r0, r3
    1f2a:	3b1e      	subs	r3, #30
    1f2c:	4083      	lsls	r3, r0
    1f2e:	4a06      	ldr	r2, [pc, #24]	; (1f48 <_usart_async_init+0x88>)
    1f30:	6013      	str	r3, [r2, #0]
    1f32:	e7d4      	b.n	1ede <_usart_async_init+0x1e>
    1f34:	00002b40 	.word	0x00002b40
    1f38:	000013dd 	.word	0x000013dd
    1f3c:	00001dd1 	.word	0x00001dd1
    1f40:	00001d65 	.word	0x00001d65
    1f44:	00001d7d 	.word	0x00001d7d
    1f48:	e000e100 	.word	0xe000e100

00001f4c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1f4c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f4e:	6813      	ldr	r3, [r2, #0]
    1f50:	2102      	movs	r1, #2
    1f52:	430b      	orrs	r3, r1
    1f54:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f56:	69d3      	ldr	r3, [r2, #28]
    1f58:	079b      	lsls	r3, r3, #30
    1f5a:	d1fc      	bne.n	1f56 <_usart_async_enable+0xa>
}
    1f5c:	4770      	bx	lr

00001f5e <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1f5e:	6983      	ldr	r3, [r0, #24]
    1f60:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1f62:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1f64:	4770      	bx	lr

00001f66 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1f66:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1f68:	2201      	movs	r2, #1
    1f6a:	759a      	strb	r2, [r3, #22]
}
    1f6c:	4770      	bx	lr

00001f6e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1f6e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1f70:	2202      	movs	r2, #2
    1f72:	759a      	strb	r2, [r3, #22]
}
    1f74:	4770      	bx	lr
	...

00001f78 <_usart_async_set_irq_state>:
{
    1f78:	b570      	push	{r4, r5, r6, lr}
    1f7a:	0004      	movs	r4, r0
    1f7c:	000d      	movs	r5, r1
    1f7e:	0016      	movs	r6, r2
	ASSERT(device);
    1f80:	1e43      	subs	r3, r0, #1
    1f82:	4198      	sbcs	r0, r3
    1f84:	b2c0      	uxtb	r0, r0
    1f86:	4a17      	ldr	r2, [pc, #92]	; (1fe4 <_usart_async_set_irq_state+0x6c>)
    1f88:	4917      	ldr	r1, [pc, #92]	; (1fe8 <_usart_async_set_irq_state+0x70>)
    1f8a:	4b18      	ldr	r3, [pc, #96]	; (1fec <_usart_async_set_irq_state+0x74>)
    1f8c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1f8e:	2d00      	cmp	r5, #0
    1f90:	d00b      	beq.n	1faa <_usart_async_set_irq_state+0x32>
    1f92:	2d02      	cmp	r5, #2
    1f94:	d009      	beq.n	1faa <_usart_async_set_irq_state+0x32>
	} else if (USART_ASYNC_RX_DONE == type) {
    1f96:	2d01      	cmp	r5, #1
    1f98:	d018      	beq.n	1fcc <_usart_async_set_irq_state+0x54>
	} else if (USART_ASYNC_ERROR == type) {
    1f9a:	2d03      	cmp	r5, #3
    1f9c:	d10f      	bne.n	1fbe <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1f9e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1fa0:	2e00      	cmp	r6, #0
    1fa2:	d01c      	beq.n	1fde <_usart_async_set_irq_state+0x66>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1fa4:	2280      	movs	r2, #128	; 0x80
    1fa6:	759a      	strb	r2, [r3, #22]
}
    1fa8:	e009      	b.n	1fbe <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1faa:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1fac:	2e00      	cmp	r6, #0
    1fae:	d107      	bne.n	1fc0 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1fb0:	2201      	movs	r2, #1
    1fb2:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1fb4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1fb6:	2e00      	cmp	r6, #0
    1fb8:	d105      	bne.n	1fc6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1fba:	2202      	movs	r2, #2
    1fbc:	751a      	strb	r2, [r3, #20]
}
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1fc0:	2201      	movs	r2, #1
    1fc2:	759a      	strb	r2, [r3, #22]
    1fc4:	e7f6      	b.n	1fb4 <_usart_async_set_irq_state+0x3c>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1fc6:	2202      	movs	r2, #2
    1fc8:	759a      	strb	r2, [r3, #22]
    1fca:	e7f8      	b.n	1fbe <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1fcc:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1fce:	2e00      	cmp	r6, #0
    1fd0:	d102      	bne.n	1fd8 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1fd2:	2204      	movs	r2, #4
    1fd4:	751a      	strb	r2, [r3, #20]
    1fd6:	e7f2      	b.n	1fbe <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1fd8:	2204      	movs	r2, #4
    1fda:	759a      	strb	r2, [r3, #22]
    1fdc:	e7ef      	b.n	1fbe <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1fde:	2280      	movs	r2, #128	; 0x80
    1fe0:	751a      	strb	r2, [r3, #20]
    1fe2:	e7ec      	b.n	1fbe <_usart_async_set_irq_state+0x46>
    1fe4:	0000021e 	.word	0x0000021e
    1fe8:	00002b40 	.word	0x00002b40
    1fec:	000013dd 	.word	0x000013dd

00001ff0 <SERCOM5_Handler>:

	return NULL;
}

void SERCOM5_Handler(void)
{
    1ff0:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    1ff2:	4b02      	ldr	r3, [pc, #8]	; (1ffc <SERCOM5_Handler+0xc>)
    1ff4:	6818      	ldr	r0, [r3, #0]
    1ff6:	4b02      	ldr	r3, [pc, #8]	; (2000 <SERCOM5_Handler+0x10>)
    1ff8:	4798      	blx	r3
}
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	20000080 	.word	0x20000080
    2000:	00001d01 	.word	0x00001d01

00002004 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    2004:	4a14      	ldr	r2, [pc, #80]	; (2058 <_sysctrl_init_sources+0x54>)
    2006:	230e      	movs	r3, #14
    2008:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    200a:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    200c:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    200e:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2010:	0f9b      	lsrs	r3, r3, #30
    2012:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2014:	0409      	lsls	r1, r1, #16
    2016:	4811      	ldr	r0, [pc, #68]	; (205c <_sysctrl_init_sources+0x58>)
    2018:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    201a:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    201c:	2102      	movs	r1, #2
    201e:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2020:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2022:	6993      	ldr	r3, [r2, #24]
    2024:	430b      	orrs	r3, r1
    2026:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2028:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    202a:	311d      	adds	r1, #29
    202c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    202e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    2030:	4b09      	ldr	r3, [pc, #36]	; (2058 <_sysctrl_init_sources+0x54>)
    2032:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    2034:	079b      	lsls	r3, r3, #30
    2036:	d5fb      	bpl.n	2030 <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    2038:	4a07      	ldr	r2, [pc, #28]	; (2058 <_sysctrl_init_sources+0x54>)
    203a:	8a93      	ldrh	r3, [r2, #20]
    203c:	2180      	movs	r1, #128	; 0x80
    203e:	430b      	orrs	r3, r1
    2040:	b29b      	uxth	r3, r3
    2042:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2044:	4b04      	ldr	r3, [pc, #16]	; (2058 <_sysctrl_init_sources+0x54>)
    2046:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2048:	071b      	lsls	r3, r3, #28
    204a:	d5fb      	bpl.n	2044 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    204c:	4a02      	ldr	r2, [pc, #8]	; (2058 <_sysctrl_init_sources+0x54>)
    204e:	6a13      	ldr	r3, [r2, #32]
    2050:	2180      	movs	r1, #128	; 0x80
    2052:	430b      	orrs	r3, r1
    2054:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2056:	4770      	bx	lr
    2058:	40000800 	.word	0x40000800
    205c:	0fff0000 	.word	0x0fff0000

00002060 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    2060:	2286      	movs	r2, #134	; 0x86
    2062:	01d2      	lsls	r2, r2, #7
    2064:	4b1c      	ldr	r3, [pc, #112]	; (20d8 <_sysctrl_init_referenced_generators+0x78>)
    2066:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2068:	2202      	movs	r2, #2
    206a:	4b1c      	ldr	r3, [pc, #112]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    206c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    206e:	4b1b      	ldr	r3, [pc, #108]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    2070:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2072:	06db      	lsls	r3, r3, #27
    2074:	d5fb      	bpl.n	206e <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    2076:	4a1a      	ldr	r2, [pc, #104]	; (20e0 <_sysctrl_init_referenced_generators+0x80>)
    2078:	4b18      	ldr	r3, [pc, #96]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    207a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    207c:	4b19      	ldr	r3, [pc, #100]	; (20e4 <_sysctrl_init_referenced_generators+0x84>)
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	0e9b      	lsrs	r3, r3, #26
    2082:	2b3f      	cmp	r3, #63	; 0x3f
    2084:	d020      	beq.n	20c8 <_sysctrl_init_referenced_generators+0x68>
    2086:	029b      	lsls	r3, r3, #10
    2088:	2280      	movs	r2, #128	; 0x80
    208a:	0092      	lsls	r2, r2, #2
    208c:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    208e:	4a13      	ldr	r2, [pc, #76]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    2090:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2092:	2306      	movs	r3, #6
    2094:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2096:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2098:	075b      	lsls	r3, r3, #29
    209a:	d518      	bpl.n	20ce <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    209c:	4b0f      	ldr	r3, [pc, #60]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    209e:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    20a0:	23d0      	movs	r3, #208	; 0xd0
    20a2:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    20a4:	2bd0      	cmp	r3, #208	; 0xd0
    20a6:	d1f9      	bne.n	209c <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    20a8:	4a0c      	ldr	r2, [pc, #48]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    20aa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    20ac:	2180      	movs	r1, #128	; 0x80
    20ae:	430b      	orrs	r3, r1
    20b0:	b29b      	uxth	r3, r3
    20b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    20b4:	4b08      	ldr	r3, [pc, #32]	; (20d8 <_sysctrl_init_referenced_generators+0x78>)
    20b6:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    20b8:	09db      	lsrs	r3, r3, #7
    20ba:	d1fb      	bne.n	20b4 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    20bc:	4a07      	ldr	r2, [pc, #28]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    20be:	6993      	ldr	r3, [r2, #24]
    20c0:	2102      	movs	r1, #2
    20c2:	438b      	bics	r3, r1
    20c4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    20c6:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    20c8:	23fc      	movs	r3, #252	; 0xfc
    20ca:	01db      	lsls	r3, r3, #7
    20cc:	e7df      	b.n	208e <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    20ce:	4b03      	ldr	r3, [pc, #12]	; (20dc <_sysctrl_init_referenced_generators+0x7c>)
    20d0:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    20d2:	06db      	lsls	r3, r3, #27
    20d4:	d5fb      	bpl.n	20ce <_sysctrl_init_referenced_generators+0x6e>
    20d6:	e7e7      	b.n	20a8 <_sysctrl_init_referenced_generators+0x48>
    20d8:	40000c00 	.word	0x40000c00
    20dc:	40000800 	.word	0x40000800
    20e0:	040105b8 	.word	0x040105b8
    20e4:	00806024 	.word	0x00806024

000020e8 <TIMER_0_init>:
	};
}

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    20e8:	4b1f      	ldr	r3, [pc, #124]	; (2168 <TIMER_0_init+0x80>)
    20ea:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tcc_is_syncing(TCC1, TCC_SYNCBUSY_SWRST)) {
    20ec:	07db      	lsls	r3, r3, #31
    20ee:	d41b      	bmi.n	2128 <TIMER_0_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20f0:	4b1d      	ldr	r3, [pc, #116]	; (2168 <TIMER_0_init+0x80>)
    20f2:	689b      	ldr	r3, [r3, #8]
    20f4:	079b      	lsls	r3, r3, #30
    20f6:	d1fb      	bne.n	20f0 <TIMER_0_init+0x8>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
    20f8:	4b1b      	ldr	r3, [pc, #108]	; (2168 <TIMER_0_init+0x80>)
    20fa:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC1, TCC_CTRLA_ENABLE)) {
    20fc:	079b      	lsls	r3, r3, #30
    20fe:	d50c      	bpl.n	211a <TIMER_0_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2100:	4a19      	ldr	r2, [pc, #100]	; (2168 <TIMER_0_init+0x80>)
    2102:	6813      	ldr	r3, [r2, #0]
    2104:	2102      	movs	r1, #2
    2106:	438b      	bics	r3, r1
    2108:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    210a:	4b17      	ldr	r3, [pc, #92]	; (2168 <TIMER_0_init+0x80>)
    210c:	689b      	ldr	r3, [r3, #8]
    210e:	079b      	lsls	r3, r3, #30
    2110:	d1fb      	bne.n	210a <TIMER_0_init+0x22>
    2112:	4b15      	ldr	r3, [pc, #84]	; (2168 <TIMER_0_init+0x80>)
    2114:	689b      	ldr	r3, [r3, #8]
    2116:	079b      	lsls	r3, r3, #30
    2118:	d4fb      	bmi.n	2112 <TIMER_0_init+0x2a>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    211a:	2201      	movs	r2, #1
    211c:	4b12      	ldr	r3, [pc, #72]	; (2168 <TIMER_0_init+0x80>)
    211e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2120:	4b11      	ldr	r3, [pc, #68]	; (2168 <TIMER_0_init+0x80>)
    2122:	689b      	ldr	r3, [r3, #8]
    2124:	079b      	lsls	r3, r3, #30
    2126:	d1fb      	bne.n	2120 <TIMER_0_init+0x38>
    2128:	4b0f      	ldr	r3, [pc, #60]	; (2168 <TIMER_0_init+0x80>)
    212a:	689b      	ldr	r3, [r3, #8]
    212c:	07db      	lsls	r3, r3, #31
    212e:	d4fb      	bmi.n	2128 <TIMER_0_init+0x40>
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    2130:	4a0e      	ldr	r2, [pc, #56]	; (216c <TIMER_0_init+0x84>)
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <TIMER_0_init+0x80>)
    2134:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2136:	4b0c      	ldr	r3, [pc, #48]	; (2168 <TIMER_0_init+0x80>)
    2138:	689b      	ldr	r3, [r3, #8]
    213a:	061b      	lsls	r3, r3, #24
    213c:	d4fb      	bmi.n	2136 <TIMER_0_init+0x4e>
	((Tcc *)hw)->EVCTRL.reg = data;
    213e:	4b0a      	ldr	r3, [pc, #40]	; (2168 <TIMER_0_init+0x80>)
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	0452      	lsls	r2, r2, #17
    2144:	621a      	str	r2, [r3, #32]
	((Tcc *)hw)->INTENSET.reg = data;
    2146:	2280      	movs	r2, #128	; 0x80
    2148:	0292      	lsls	r2, r2, #10
    214a:	629a      	str	r2, [r3, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    214c:	4a08      	ldr	r2, [pc, #32]	; (2170 <TIMER_0_init+0x88>)
    214e:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2150:	681a      	ldr	r2, [r3, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    2152:	2102      	movs	r1, #2
    2154:	438a      	bics	r2, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2156:	430a      	orrs	r2, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    2158:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    215a:	4b03      	ldr	r3, [pc, #12]	; (2168 <TIMER_0_init+0x80>)
    215c:	689b      	ldr	r3, [r3, #8]
    215e:	079b      	lsls	r3, r3, #30
    2160:	d1fb      	bne.n	215a <TIMER_0_init+0x72>
	                            | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC1, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2162:	2000      	movs	r0, #0
    2164:	4770      	bx	lr
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	42002400 	.word	0x42002400
    216c:	0000ffff 	.word	0x0000ffff
    2170:	fffdffff 	.word	0xfffdffff

00002174 <hv_dc_supply_sense>:
static inline uint16_t hv_dc_supply_conduction_cycles(const uint16_t voltage) {
	uint32_t result = hv_dc_supply_conduction_time(voltage) + HV_DC_SUPPLY_BURST_SAFETY_MARGIN_CYCLES;	
	return hv_dc_supply_check_burst_time(result);
}

void hv_dc_supply_sense(const struct adc_async_descriptor *const descr, const uint8_t channel) {
    2174:	b510      	push	{r4, lr}
	uint16_t voltage = adc_data_read(descr);
    2176:	4b2b      	ldr	r3, [pc, #172]	; (2224 <hv_dc_supply_sense+0xb0>)
    2178:	4798      	blx	r3
    217a:	0003      	movs	r3, r0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    217c:	2402      	movs	r4, #2
    217e:	2298      	movs	r2, #152	; 0x98
    2180:	21c0      	movs	r1, #192	; 0xc0
    2182:	05c9      	lsls	r1, r1, #23
    2184:	508c      	str	r4, [r1, r2]
    2186:	4a28      	ldr	r2, [pc, #160]	; (2228 <hv_dc_supply_sense+0xb4>)
    2188:	4290      	cmp	r0, r2
    218a:	d81b      	bhi.n	21c4 <hv_dc_supply_sense+0x50>
    218c:	2180      	movs	r1, #128	; 0x80
    218e:	0549      	lsls	r1, r1, #21
    2190:	22c0      	movs	r2, #192	; 0xc0
    2192:	05d2      	lsls	r2, r2, #23
    2194:	6191      	str	r1, [r2, #24]
	if (hv_dc_supply_voltage != voltage) {
    2196:	4a25      	ldr	r2, [pc, #148]	; (222c <hv_dc_supply_sense+0xb8>)
    2198:	6811      	ldr	r1, [r2, #0]
	hv_dc_supply_voltage = voltage;
    219a:	6010      	str	r0, [r2, #0]
	gpio_set_pin_level(GPIO2, true);
	gpio_set_pin_level(LED2, voltage < HV_DC_SUPPLY_SENSE_TARGET);
	hv_dc_supply_set_voltage_reading(voltage);
	if (voltage >= HV_DC_SUPPLY_SENSE_TARGET) {
    219c:	4a22      	ldr	r2, [pc, #136]	; (2228 <hv_dc_supply_sense+0xb4>)
    219e:	4293      	cmp	r3, r2
    21a0:	d916      	bls.n	21d0 <hv_dc_supply_sense+0x5c>
		hv_dc_supply_set_period(hv_dc_supply_zero_change_period);
    21a2:	4b23      	ldr	r3, [pc, #140]	; (2230 <hv_dc_supply_sense+0xbc>)
    21a4:	681a      	ldr	r2, [r3, #0]
	hv_dc_supply_period_history = hv_dc_supply_period;
    21a6:	6859      	ldr	r1, [r3, #4]
    21a8:	6099      	str	r1, [r3, #8]
	hv_dc_supply_period = period;
    21aa:	605a      	str	r2, [r3, #4]
}

static inline void hri_tcc_write_PERB_reg(const void *const hw, hri_tcc_perb_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PERB.reg = data;
    21ac:	4b21      	ldr	r3, [pc, #132]	; (2234 <hv_dc_supply_sense+0xc0>)
    21ae:	66da      	str	r2, [r3, #108]	; 0x6c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21b0:	4b20      	ldr	r3, [pc, #128]	; (2234 <hv_dc_supply_sense+0xc0>)
    21b2:	689b      	ldr	r3, [r3, #8]
    21b4:	035b      	lsls	r3, r3, #13
    21b6:	d4fb      	bmi.n	21b0 <hv_dc_supply_sense+0x3c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21b8:	2102      	movs	r1, #2
    21ba:	2394      	movs	r3, #148	; 0x94
    21bc:	22c0      	movs	r2, #192	; 0xc0
    21be:	05d2      	lsls	r2, r2, #23
    21c0:	50d1      	str	r1, [r2, r3]
	} else {
		uint16_t conduction_cycles = hv_dc_supply_conduction_cycles(voltage) + hv_dc_supply_duty_cycle;
		hv_dc_supply_set_period(conduction_cycles);
		gpio_set_pin_level(GPIO2, false);
	}
 }
    21c2:	bd10      	pop	{r4, pc}
    21c4:	2180      	movs	r1, #128	; 0x80
    21c6:	0549      	lsls	r1, r1, #21
    21c8:	22c0      	movs	r2, #192	; 0xc0
    21ca:	05d2      	lsls	r2, r2, #23
    21cc:	6151      	str	r1, [r2, #20]
    21ce:	e7e2      	b.n	2196 <hv_dc_supply_sense+0x22>
	return (hv_dc_supply_duty_cycle * HV_DC_SUPPLY_CONDUCTION_TIME_FACTOR) / (voltage + HV_DC_SUPPLY_DIODE_VOLTAGE_VALUE);
    21d0:	4b16      	ldr	r3, [pc, #88]	; (222c <hv_dc_supply_sense+0xb8>)
    21d2:	889b      	ldrh	r3, [r3, #4]
    21d4:	22e4      	movs	r2, #228	; 0xe4
    21d6:	0092      	lsls	r2, r2, #2
    21d8:	4353      	muls	r3, r2
    21da:	0001      	movs	r1, r0
    21dc:	3108      	adds	r1, #8
    21de:	0018      	movs	r0, r3
    21e0:	4b15      	ldr	r3, [pc, #84]	; (2238 <hv_dc_supply_sense+0xc4>)
    21e2:	4798      	blx	r3
	uint32_t result = hv_dc_supply_conduction_time(voltage) + HV_DC_SUPPLY_BURST_SAFETY_MARGIN_CYCLES;	
    21e4:	30f0      	adds	r0, #240	; 0xf0
	if (cycles >= HV_DC_SUPPLY_MAX_BURST_CYCLES) {
    21e6:	4b15      	ldr	r3, [pc, #84]	; (223c <hv_dc_supply_sense+0xc8>)
    21e8:	4298      	cmp	r0, r3
    21ea:	d805      	bhi.n	21f8 <hv_dc_supply_sense+0x84>
	if (cycles < HV_DC_SUPPLY_MIN_BURST_CYCLES) {
    21ec:	4b14      	ldr	r3, [pc, #80]	; (2240 <hv_dc_supply_sense+0xcc>)
    21ee:	4298      	cmp	r0, r3
    21f0:	d803      	bhi.n	21fa <hv_dc_supply_sense+0x86>
		return HV_DC_SUPPLY_MIN_BURST_CYCLES;
    21f2:	20b4      	movs	r0, #180	; 0xb4
    21f4:	0080      	lsls	r0, r0, #2
    21f6:	e000      	b.n	21fa <hv_dc_supply_sense+0x86>
		return HV_DC_SUPPLY_MAX_BURST_CYCLES;
    21f8:	4812      	ldr	r0, [pc, #72]	; (2244 <hv_dc_supply_sense+0xd0>)
	return hv_dc_supply_check_burst_time(result);
    21fa:	b280      	uxth	r0, r0
		uint16_t conduction_cycles = hv_dc_supply_conduction_cycles(voltage) + hv_dc_supply_duty_cycle;
    21fc:	4b0b      	ldr	r3, [pc, #44]	; (222c <hv_dc_supply_sense+0xb8>)
    21fe:	889b      	ldrh	r3, [r3, #4]
    2200:	1818      	adds	r0, r3, r0
    2202:	b280      	uxth	r0, r0
	hv_dc_supply_period_history = hv_dc_supply_period;
    2204:	4b0a      	ldr	r3, [pc, #40]	; (2230 <hv_dc_supply_sense+0xbc>)
    2206:	685a      	ldr	r2, [r3, #4]
    2208:	609a      	str	r2, [r3, #8]
	hv_dc_supply_period = period;
    220a:	6058      	str	r0, [r3, #4]
	((Tcc *)hw)->PERB.reg = data;
    220c:	4b09      	ldr	r3, [pc, #36]	; (2234 <hv_dc_supply_sense+0xc0>)
    220e:	66d8      	str	r0, [r3, #108]	; 0x6c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2210:	4b08      	ldr	r3, [pc, #32]	; (2234 <hv_dc_supply_sense+0xc0>)
    2212:	689b      	ldr	r3, [r3, #8]
    2214:	035b      	lsls	r3, r3, #13
    2216:	d4fb      	bmi.n	2210 <hv_dc_supply_sense+0x9c>
    2218:	2102      	movs	r1, #2
    221a:	2394      	movs	r3, #148	; 0x94
    221c:	22c0      	movs	r2, #192	; 0xc0
    221e:	05d2      	lsls	r2, r2, #23
    2220:	50d1      	str	r1, [r2, r3]
 }
    2222:	e7ce      	b.n	21c2 <hv_dc_supply_sense+0x4e>
    2224:	0000015d 	.word	0x0000015d
    2228:	000004b9 	.word	0x000004b9
    222c:	20000084 	.word	0x20000084
    2230:	20000008 	.word	0x20000008
    2234:	42002400 	.word	0x42002400
    2238:	0000259d 	.word	0x0000259d
    223c:	0003a8f3 	.word	0x0003a8f3
    2240:	000002cf 	.word	0x000002cf
    2244:	0003a8f4 	.word	0x0003a8f4

00002248 <hv_dc_supply_enable_adc>:

void hv_dc_supply_enable_adc() {
    2248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    224a:	26c0      	movs	r6, #192	; 0xc0
    224c:	05f6      	lsls	r6, r6, #23
    224e:	2304      	movs	r3, #4
    2250:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2252:	4b1e      	ldr	r3, [pc, #120]	; (22cc <hv_dc_supply_enable_adc+0x84>)
    2254:	4a1e      	ldr	r2, [pc, #120]	; (22d0 <hv_dc_supply_enable_adc+0x88>)
    2256:	629a      	str	r2, [r3, #40]	; 0x28
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0612      	lsls	r2, r2, #24
    225c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    225e:	2042      	movs	r0, #66	; 0x42
    2260:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2262:	2501      	movs	r5, #1
    2264:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2266:	2401      	movs	r4, #1
    2268:	4321      	orrs	r1, r4
    226a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    226c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    226e:	3811      	subs	r0, #17
    2270:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2272:	270f      	movs	r7, #15
    2274:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2276:	4321      	orrs	r1, r4
    2278:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    227a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    227c:	2108      	movs	r1, #8
    227e:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2280:	4914      	ldr	r1, [pc, #80]	; (22d4 <hv_dc_supply_enable_adc+0x8c>)
    2282:	6299      	str	r1, [r3, #40]	; 0x28
    2284:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2286:	2143      	movs	r1, #67	; 0x43
    2288:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    228a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    228c:	4322      	orrs	r2, r4
    228e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2290:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2292:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2294:	3934      	subs	r1, #52	; 0x34
    2296:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2298:	2110      	movs	r1, #16
    229a:	430a      	orrs	r2, r1
    229c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    229e:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PWR_SENSE, PINMUX_PA02B_ADC_AIN0);

	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
	
	adc_async_set_inputs(&ADC_0, ADC_MUXPOS_AIN1, ADC_MUXNEG_AIN0, 0);
    22a0:	4c0d      	ldr	r4, [pc, #52]	; (22d8 <hv_dc_supply_enable_adc+0x90>)
    22a2:	2300      	movs	r3, #0
    22a4:	2200      	movs	r2, #0
    22a6:	2101      	movs	r1, #1
    22a8:	0020      	movs	r0, r4
    22aa:	4d0c      	ldr	r5, [pc, #48]	; (22dc <hv_dc_supply_enable_adc+0x94>)
    22ac:	47a8      	blx	r5
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, hv_dc_supply_sense);
    22ae:	4b0c      	ldr	r3, [pc, #48]	; (22e0 <hv_dc_supply_enable_adc+0x98>)
    22b0:	2200      	movs	r2, #0
    22b2:	2100      	movs	r1, #0
    22b4:	0020      	movs	r0, r4
    22b6:	4d0b      	ldr	r5, [pc, #44]	; (22e4 <hv_dc_supply_enable_adc+0x9c>)
    22b8:	47a8      	blx	r5
	adc_async_enable_channel(&ADC_0, 0);
    22ba:	2100      	movs	r1, #0
    22bc:	0020      	movs	r0, r4
    22be:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <hv_dc_supply_enable_adc+0xa0>)
    22c0:	4798      	blx	r3
	
	adc_async_start_conversion(&ADC_0);
    22c2:	0020      	movs	r0, r4
    22c4:	4b09      	ldr	r3, [pc, #36]	; (22ec <hv_dc_supply_enable_adc+0xa4>)
    22c6:	4798      	blx	r3
}
    22c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	41004400 	.word	0x41004400
    22d0:	40000004 	.word	0x40000004
    22d4:	40000008 	.word	0x40000008
    22d8:	200000ac 	.word	0x200000ac
    22dc:	00000e39 	.word	0x00000e39
    22e0:	00002175 	.word	0x00002175
    22e4:	00000d95 	.word	0x00000d95
    22e8:	00000d55 	.word	0x00000d55
    22ec:	00000e11 	.word	0x00000e11

000022f0 <TCC1_Handler>:
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC1;
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0292      	lsls	r2, r2, #10
    22f4:	4b13      	ldr	r3, [pc, #76]	; (2344 <TCC1_Handler+0x54>)
    22f6:	62da      	str	r2, [r3, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(HV_SW_TIMER);
	}
	*/
	//only the MC1 interrupt is enabled, so no interrupt flags need to be checked
	hri_tcc_clear_interrupt_MC1_bit(HV_SW_TIMER);
	hv_dc_supply_counter++;
    22f8:	4a13      	ldr	r2, [pc, #76]	; (2348 <TCC1_Handler+0x58>)
    22fa:	88d3      	ldrh	r3, [r2, #6]
    22fc:	3301      	adds	r3, #1
    22fe:	b29b      	uxth	r3, r3
    2300:	80d3      	strh	r3, [r2, #6]
	if (hv_dc_supply_counter >= HV_DC_SUPPYL_MAX_CYCLES) {
    2302:	88d3      	ldrh	r3, [r2, #6]
    2304:	b29b      	uxth	r3, r3
    2306:	4a11      	ldr	r2, [pc, #68]	; (234c <TCC1_Handler+0x5c>)
    2308:	4293      	cmp	r3, r2
    230a:	d913      	bls.n	2334 <TCC1_Handler+0x44>
	hv_dc_supply_duty_cycle = duty_cycle;
    230c:	2300      	movs	r3, #0
    230e:	4a0e      	ldr	r2, [pc, #56]	; (2348 <TCC1_Handler+0x58>)
    2310:	8093      	strh	r3, [r2, #4]
}

static inline void hri_tcc_write_CCB_reg(const void *const hw, uint8_t index, hri_tcc_ccb_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCB[index].reg = data;
    2312:	4a0c      	ldr	r2, [pc, #48]	; (2344 <TCC1_Handler+0x54>)
    2314:	6753      	str	r3, [r2, #116]	; 0x74
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2316:	4b0b      	ldr	r3, [pc, #44]	; (2344 <TCC1_Handler+0x54>)
    2318:	689a      	ldr	r2, [r3, #8]
    231a:	23f0      	movs	r3, #240	; 0xf0
    231c:	03db      	lsls	r3, r3, #15
    231e:	421a      	tst	r2, r3
    2320:	d1f9      	bne.n	2316 <TCC1_Handler+0x26>
	((Tcc *)hw)->CCB[index].reg = data;
    2322:	4a0b      	ldr	r2, [pc, #44]	; (2350 <TCC1_Handler+0x60>)
    2324:	4b07      	ldr	r3, [pc, #28]	; (2344 <TCC1_Handler+0x54>)
    2326:	671a      	str	r2, [r3, #112]	; 0x70
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <TCC1_Handler+0x54>)
    232a:	689a      	ldr	r2, [r3, #8]
    232c:	23f0      	movs	r3, #240	; 0xf0
    232e:	03db      	lsls	r3, r3, #15
    2330:	421a      	tst	r2, r3
    2332:	d1f9      	bne.n	2328 <TCC1_Handler+0x38>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2334:	23c0      	movs	r3, #192	; 0xc0
    2336:	05db      	lsls	r3, r3, #23
    2338:	2202      	movs	r2, #2
    233a:	2198      	movs	r1, #152	; 0x98
    233c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    233e:	3904      	subs	r1, #4
    2340:	505a      	str	r2, [r3, r1]
		//hv_dc_supply_enabled = false;
		hv_dc_supply_set_duty_cycle(0x0000); //0us
	}
	gpio_set_pin_level(GPIO2, true);
	gpio_set_pin_level(GPIO2, false);
}
    2342:	4770      	bx	lr
    2344:	42002400 	.word	0x42002400
    2348:	20000084 	.word	0x20000084
    234c:	00001387 	.word	0x00001387
    2350:	00ffffff 	.word	0x00ffffff

00002354 <hv_dc_supply_cancel>:
	hv_dc_supply_duty_cycle = duty_cycle;
    2354:	2300      	movs	r3, #0
    2356:	4a0a      	ldr	r2, [pc, #40]	; (2380 <hv_dc_supply_cancel+0x2c>)
    2358:	8093      	strh	r3, [r2, #4]
	((Tcc *)hw)->CCB[index].reg = data;
    235a:	4a0a      	ldr	r2, [pc, #40]	; (2384 <hv_dc_supply_cancel+0x30>)
    235c:	6753      	str	r3, [r2, #116]	; 0x74
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    235e:	4b09      	ldr	r3, [pc, #36]	; (2384 <hv_dc_supply_cancel+0x30>)
    2360:	689a      	ldr	r2, [r3, #8]
    2362:	23f0      	movs	r3, #240	; 0xf0
    2364:	03db      	lsls	r3, r3, #15
    2366:	421a      	tst	r2, r3
    2368:	d1f9      	bne.n	235e <hv_dc_supply_cancel+0xa>
	((Tcc *)hw)->CCB[index].reg = data;
    236a:	4a07      	ldr	r2, [pc, #28]	; (2388 <hv_dc_supply_cancel+0x34>)
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <hv_dc_supply_cancel+0x30>)
    236e:	671a      	str	r2, [r3, #112]	; 0x70
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2370:	4b04      	ldr	r3, [pc, #16]	; (2384 <hv_dc_supply_cancel+0x30>)
    2372:	689a      	ldr	r2, [r3, #8]
    2374:	23f0      	movs	r3, #240	; 0xf0
    2376:	03db      	lsls	r3, r3, #15
    2378:	421a      	tst	r2, r3
    237a:	d1f9      	bne.n	2370 <hv_dc_supply_cancel+0x1c>

void hv_dc_supply_cancel() {
	//hv_dc_supply_enabled = false;
	hv_dc_supply_set_duty_cycle(0x0000); //0us
}
    237c:	4770      	bx	lr
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	20000084 	.word	0x20000084
    2384:	42002400 	.word	0x42002400
    2388:	00ffffff 	.word	0x00ffffff

0000238c <hv_dc_supply_power_pulse>:

void hv_dc_supply_power_pulse() {
	count = 0;
    238c:	4b11      	ldr	r3, [pc, #68]	; (23d4 <hv_dc_supply_power_pulse+0x48>)
    238e:	2200      	movs	r2, #0
    2390:	609a      	str	r2, [r3, #8]
	//hv_dc_supply_enabled = true;
	hv_dc_supply_counter = 0;
    2392:	80da      	strh	r2, [r3, #6]
	hv_dc_supply_period_history = hv_dc_supply_period;
    2394:	4b10      	ldr	r3, [pc, #64]	; (23d8 <hv_dc_supply_power_pulse+0x4c>)
    2396:	685a      	ldr	r2, [r3, #4]
    2398:	609a      	str	r2, [r3, #8]
	hv_dc_supply_period = period;
    239a:	4a10      	ldr	r2, [pc, #64]	; (23dc <hv_dc_supply_power_pulse+0x50>)
    239c:	605a      	str	r2, [r3, #4]
	((Tcc *)hw)->PERB.reg = data;
    239e:	4b10      	ldr	r3, [pc, #64]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23a0:	66da      	str	r2, [r3, #108]	; 0x6c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    23a2:	4b0f      	ldr	r3, [pc, #60]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23a4:	689b      	ldr	r3, [r3, #8]
    23a6:	035b      	lsls	r3, r3, #13
    23a8:	d4fb      	bmi.n	23a2 <hv_dc_supply_power_pulse+0x16>
	hv_dc_supply_duty_cycle = duty_cycle;
    23aa:	236e      	movs	r3, #110	; 0x6e
    23ac:	4a09      	ldr	r2, [pc, #36]	; (23d4 <hv_dc_supply_power_pulse+0x48>)
    23ae:	8093      	strh	r3, [r2, #4]
	((Tcc *)hw)->CCB[index].reg = data;
    23b0:	4a0b      	ldr	r2, [pc, #44]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23b2:	6753      	str	r3, [r2, #116]	; 0x74
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    23b4:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23b6:	689a      	ldr	r2, [r3, #8]
    23b8:	23f0      	movs	r3, #240	; 0xf0
    23ba:	03db      	lsls	r3, r3, #15
    23bc:	421a      	tst	r2, r3
    23be:	d1f9      	bne.n	23b4 <hv_dc_supply_power_pulse+0x28>
	((Tcc *)hw)->CCB[index].reg = data;
    23c0:	22a9      	movs	r2, #169	; 0xa9
    23c2:	4b07      	ldr	r3, [pc, #28]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23c4:	671a      	str	r2, [r3, #112]	; 0x70
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    23c6:	4b06      	ldr	r3, [pc, #24]	; (23e0 <hv_dc_supply_power_pulse+0x54>)
    23c8:	689a      	ldr	r2, [r3, #8]
    23ca:	23f0      	movs	r3, #240	; 0xf0
    23cc:	03db      	lsls	r3, r3, #15
    23ce:	421a      	tst	r2, r3
    23d0:	d1f9      	bne.n	23c6 <hv_dc_supply_power_pulse+0x3a>
	hv_dc_supply_set_period(HV_DC_SUPPLY_MAX_BURST_CYCLES);
	hv_dc_supply_set_duty_cycle(HV_DC_SUPPLY_MIN_DUTY_CYCLE_CYCLES);
}
    23d2:	4770      	bx	lr
    23d4:	20000084 	.word	0x20000084
    23d8:	20000008 	.word	0x20000008
    23dc:	0003a8f4 	.word	0x0003a8f4
    23e0:	42002400 	.word	0x42002400

000023e4 <hv_dc_supply_init_timer>:

void hv_dc_supply_init_timer() {
    23e4:	b530      	push	{r4, r5, lr}
	((Tcc *)hw)->PER.reg = data;
    23e6:	4a27      	ldr	r2, [pc, #156]	; (2484 <hv_dc_supply_init_timer+0xa0>)
    23e8:	4b27      	ldr	r3, [pc, #156]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    23ea:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    23ec:	4b26      	ldr	r3, [pc, #152]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    23ee:	689b      	ldr	r3, [r3, #8]
    23f0:	061b      	lsls	r3, r3, #24
    23f2:	d4fb      	bmi.n	23ec <hv_dc_supply_init_timer+0x8>
	hv_dc_supply_duty_cycle = duty_cycle;
    23f4:	2300      	movs	r3, #0
    23f6:	4a25      	ldr	r2, [pc, #148]	; (248c <hv_dc_supply_init_timer+0xa8>)
    23f8:	8093      	strh	r3, [r2, #4]
	((Tcc *)hw)->CCB[index].reg = data;
    23fa:	4a23      	ldr	r2, [pc, #140]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    23fc:	6753      	str	r3, [r2, #116]	; 0x74
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    23fe:	4b22      	ldr	r3, [pc, #136]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    2400:	689a      	ldr	r2, [r3, #8]
    2402:	23f0      	movs	r3, #240	; 0xf0
    2404:	03db      	lsls	r3, r3, #15
    2406:	421a      	tst	r2, r3
    2408:	d1f9      	bne.n	23fe <hv_dc_supply_init_timer+0x1a>
	((Tcc *)hw)->CCB[index].reg = data;
    240a:	4a21      	ldr	r2, [pc, #132]	; (2490 <hv_dc_supply_init_timer+0xac>)
    240c:	4b1e      	ldr	r3, [pc, #120]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    240e:	671a      	str	r2, [r3, #112]	; 0x70
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2410:	4b1d      	ldr	r3, [pc, #116]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    2412:	689a      	ldr	r2, [r3, #8]
    2414:	23f0      	movs	r3, #240	; 0xf0
    2416:	03db      	lsls	r3, r3, #15
    2418:	421a      	tst	r2, r3
    241a:	d1f9      	bne.n	2410 <hv_dc_supply_init_timer+0x2c>
	((Tcc *)hw)->WAVE.reg = data;
    241c:	4a1d      	ldr	r2, [pc, #116]	; (2494 <hv_dc_supply_init_timer+0xb0>)
    241e:	4b1a      	ldr	r3, [pc, #104]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    2420:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2422:	4b19      	ldr	r3, [pc, #100]	; (2488 <hv_dc_supply_init_timer+0xa4>)
    2424:	689a      	ldr	r2, [r3, #8]
    2426:	4b1c      	ldr	r3, [pc, #112]	; (2498 <hv_dc_supply_init_timer+0xb4>)
    2428:	421a      	tst	r2, r3
    242a:	d1fa      	bne.n	2422 <hv_dc_supply_init_timer+0x3e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    242c:	23c0      	movs	r3, #192	; 0xc0
    242e:	05db      	lsls	r3, r3, #23
    2430:	2080      	movs	r0, #128	; 0x80
    2432:	6198      	str	r0, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2434:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2436:	4b19      	ldr	r3, [pc, #100]	; (249c <hv_dc_supply_init_timer+0xb8>)
    2438:	4a19      	ldr	r2, [pc, #100]	; (24a0 <hv_dc_supply_init_timer+0xbc>)
    243a:	629a      	str	r2, [r3, #40]	; 0x28
    243c:	22c0      	movs	r2, #192	; 0xc0
    243e:	0612      	lsls	r2, r2, #24
    2440:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2442:	2447      	movs	r4, #71	; 0x47
    2444:	5d19      	ldrb	r1, [r3, r4]
    2446:	2540      	movs	r5, #64	; 0x40
    2448:	4329      	orrs	r1, r5
    244a:	b2c9      	uxtb	r1, r1
    244c:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    244e:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2450:	2201      	movs	r2, #1
    2452:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2454:	4311      	orrs	r1, r2
    2456:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2458:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    245a:	2133      	movs	r1, #51	; 0x33
    245c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    245e:	3c38      	subs	r4, #56	; 0x38
    2460:	4022      	ands	r2, r4
	tmp |= PORT_PMUX_PMUXO(data);
    2462:	432a      	orrs	r2, r5
    2464:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2466:	545a      	strb	r2, [r3, r1]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2468:	4b0e      	ldr	r3, [pc, #56]	; (24a4 <hv_dc_supply_init_timer+0xc0>)
    246a:	2280      	movs	r2, #128	; 0x80
    246c:	0252      	lsls	r2, r2, #9
    246e:	501a      	str	r2, [r3, r0]
  __ASM volatile ("dsb 0xF":::"memory");
    2470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2474:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2478:	314e      	adds	r1, #78	; 0x4e
    247a:	31ff      	adds	r1, #255	; 0xff
    247c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    247e:	601a      	str	r2, [r3, #0]
	_tcc_init_irq_param(hw, (void *)device);
	*/
	NVIC_DisableIRQ(TCC1_IRQn);
	NVIC_ClearPendingIRQ(TCC1_IRQn);
	NVIC_EnableIRQ(TCC1_IRQn);
    2480:	bd30      	pop	{r4, r5, pc}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	0003a8f4 	.word	0x0003a8f4
    2488:	42002400 	.word	0x42002400
    248c:	20000084 	.word	0x20000084
    2490:	00ffffff 	.word	0x00ffffff
    2494:	00020002 	.word	0x00020002
    2498:	007f0fff 	.word	0x007f0fff
    249c:	41004400 	.word	0x41004400
    24a0:	40000080 	.word	0x40000080
    24a4:	e000e100 	.word	0xe000e100

000024a8 <btn1_pressed>:
#include <io_util.h>
#include <dmx.h>
#include <dip_switch.h>
#include <hv_dc_supply.h>

void btn1_pressed() {
    24a8:	b510      	push	{r4, lr}
	//gpio_set_pin_level(LED2, true);
	hv_dc_supply_cancel();
    24aa:	4b01      	ldr	r3, [pc, #4]	; (24b0 <btn1_pressed+0x8>)
    24ac:	4798      	blx	r3
}
    24ae:	bd10      	pop	{r4, pc}
    24b0:	00002355 	.word	0x00002355

000024b4 <btn3_pressed>:
	gpio_toggle_pin_level(LED1);
}*/

//bool bounced = false;

void btn3_pressed() {
    24b4:	b510      	push	{r4, lr}
	//gpio_set_pin_level(LED2, false);
	hv_dc_supply_cancel();
    24b6:	4b01      	ldr	r3, [pc, #4]	; (24bc <btn3_pressed+0x8>)
    24b8:	4798      	blx	r3
	if (!bounced) {
		gpio_toggle_pin_level(LED2);
		bounced = true;
	}
	*/
}
    24ba:	bd10      	pop	{r4, pc}
    24bc:	00002355 	.word	0x00002355

000024c0 <btn2_pressed>:
void btn2_pressed() {
    24c0:	b510      	push	{r4, lr}
	hv_dc_supply_power_pulse();
    24c2:	4b01      	ldr	r3, [pc, #4]	; (24c8 <btn2_pressed+0x8>)
    24c4:	4798      	blx	r3
}
    24c6:	bd10      	pop	{r4, pc}
    24c8:	0000238d 	.word	0x0000238d

000024cc <dip_switch_data_ready>:

void dip_switch_data_ready(uint16_t data) {
    24cc:	b510      	push	{r4, lr}
	dmx_set_address(data & DMX_ADDRESS_MASK);
    24ce:	0540      	lsls	r0, r0, #21
    24d0:	0d40      	lsrs	r0, r0, #21
    24d2:	4b01      	ldr	r3, [pc, #4]	; (24d8 <dip_switch_data_ready+0xc>)
    24d4:	4798      	blx	r3
}
    24d6:	bd10      	pop	{r4, pc}
    24d8:	0000045d 	.word	0x0000045d

000024dc <SysTick_Handler>:

void SysTick_Handler() {
    24dc:	b510      	push	{r4, lr}
	//bounced = false;
	//hv_dc_supply_disable_adc();
	//gpio_toggle_pin_level(LED1);
	dip_switch_read();
    24de:	4b01      	ldr	r3, [pc, #4]	; (24e4 <SysTick_Handler+0x8>)
    24e0:	4798      	blx	r3
}
    24e2:	bd10      	pop	{r4, pc}
    24e4:	000003c5 	.word	0x000003c5

000024e8 <init>:

void init() {
    24e8:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    24ea:	4919      	ldr	r1, [pc, #100]	; (2550 <init+0x68>)
    24ec:	235b      	movs	r3, #91	; 0x5b
    24ee:	5cca      	ldrb	r2, [r1, r3]
    24f0:	2040      	movs	r0, #64	; 0x40
    24f2:	4302      	orrs	r2, r0
    24f4:	b2d2      	uxtb	r2, r2
    24f6:	54ca      	strb	r2, [r1, r3]
    24f8:	225c      	movs	r2, #92	; 0x5c
    24fa:	5c8b      	ldrb	r3, [r1, r2]
    24fc:	4303      	orrs	r3, r0
    24fe:	b2db      	uxtb	r3, r3
    2500:	548b      	strb	r3, [r1, r2]
	gpio_set_pin_drive_strength(LED1);
	gpio_set_pin_drive_strength(LED2);
	
	ext_irq_register(BTN1, btn1_pressed);
    2502:	4914      	ldr	r1, [pc, #80]	; (2554 <init+0x6c>)
    2504:	2010      	movs	r0, #16
    2506:	4c14      	ldr	r4, [pc, #80]	; (2558 <init+0x70>)
    2508:	47a0      	blx	r4
	ext_irq_register(BTN2, btn2_pressed);
    250a:	4914      	ldr	r1, [pc, #80]	; (255c <init+0x74>)
    250c:	2011      	movs	r0, #17
    250e:	47a0      	blx	r4
	ext_irq_register(BTN3, btn3_pressed);
    2510:	4913      	ldr	r1, [pc, #76]	; (2560 <init+0x78>)
    2512:	2015      	movs	r0, #21
    2514:	47a0      	blx	r4
	
	dmx_set_address(1);
    2516:	2001      	movs	r0, #1
    2518:	4b12      	ldr	r3, [pc, #72]	; (2564 <init+0x7c>)
    251a:	4798      	blx	r3
	dmx_init(&USART_0);
    251c:	4812      	ldr	r0, [pc, #72]	; (2568 <init+0x80>)
    251e:	4b13      	ldr	r3, [pc, #76]	; (256c <init+0x84>)
    2520:	4798      	blx	r3
	
	hv_dc_supply_init_timer();
    2522:	4b13      	ldr	r3, [pc, #76]	; (2570 <init+0x88>)
    2524:	4798      	blx	r3
	hv_dc_supply_enable_adc();
    2526:	4b13      	ldr	r3, [pc, #76]	; (2574 <init+0x8c>)
    2528:	4798      	blx	r3
	
	dip_switch_init();
    252a:	4b13      	ldr	r3, [pc, #76]	; (2578 <init+0x90>)
    252c:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    252e:	4a13      	ldr	r2, [pc, #76]	; (257c <init+0x94>)
    2530:	4b13      	ldr	r3, [pc, #76]	; (2580 <init+0x98>)
    2532:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2534:	4813      	ldr	r0, [pc, #76]	; (2584 <init+0x9c>)
    2536:	6a03      	ldr	r3, [r0, #32]
    2538:	021b      	lsls	r3, r3, #8
    253a:	0a1b      	lsrs	r3, r3, #8
    253c:	21c0      	movs	r1, #192	; 0xc0
    253e:	0609      	lsls	r1, r1, #24
    2540:	430b      	orrs	r3, r1
    2542:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2544:	2300      	movs	r3, #0
    2546:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2548:	3307      	adds	r3, #7
    254a:	6013      	str	r3, [r2, #0]
	
	SysTick_Config(100000);
}
    254c:	bd10      	pop	{r4, pc}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	41004400 	.word	0x41004400
    2554:	000024a9 	.word	0x000024a9
    2558:	00001049 	.word	0x00001049
    255c:	000024c1 	.word	0x000024c1
    2560:	000024b5 	.word	0x000024b5
    2564:	0000045d 	.word	0x0000045d
    2568:	200000fc 	.word	0x200000fc
    256c:	00000469 	.word	0x00000469
    2570:	000023e5 	.word	0x000023e5
    2574:	00002249 	.word	0x00002249
    2578:	0000036d 	.word	0x0000036d
    257c:	e000e010 	.word	0xe000e010
    2580:	0001869f 	.word	0x0001869f
    2584:	e000ed00 	.word	0xe000ed00

00002588 <main>:

int main(void)
{
    2588:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    258a:	4b02      	ldr	r3, [pc, #8]	; (2594 <main+0xc>)
    258c:	4798      	blx	r3

	init();
    258e:	4b02      	ldr	r3, [pc, #8]	; (2598 <main+0x10>)
    2590:	4798      	blx	r3
    2592:	e7fe      	b.n	2592 <main+0xa>
    2594:	00000171 	.word	0x00000171
    2598:	000024e9 	.word	0x000024e9

0000259c <__udivsi3>:
    259c:	2200      	movs	r2, #0
    259e:	0843      	lsrs	r3, r0, #1
    25a0:	428b      	cmp	r3, r1
    25a2:	d374      	bcc.n	268e <__udivsi3+0xf2>
    25a4:	0903      	lsrs	r3, r0, #4
    25a6:	428b      	cmp	r3, r1
    25a8:	d35f      	bcc.n	266a <__udivsi3+0xce>
    25aa:	0a03      	lsrs	r3, r0, #8
    25ac:	428b      	cmp	r3, r1
    25ae:	d344      	bcc.n	263a <__udivsi3+0x9e>
    25b0:	0b03      	lsrs	r3, r0, #12
    25b2:	428b      	cmp	r3, r1
    25b4:	d328      	bcc.n	2608 <__udivsi3+0x6c>
    25b6:	0c03      	lsrs	r3, r0, #16
    25b8:	428b      	cmp	r3, r1
    25ba:	d30d      	bcc.n	25d8 <__udivsi3+0x3c>
    25bc:	22ff      	movs	r2, #255	; 0xff
    25be:	0209      	lsls	r1, r1, #8
    25c0:	ba12      	rev	r2, r2
    25c2:	0c03      	lsrs	r3, r0, #16
    25c4:	428b      	cmp	r3, r1
    25c6:	d302      	bcc.n	25ce <__udivsi3+0x32>
    25c8:	1212      	asrs	r2, r2, #8
    25ca:	0209      	lsls	r1, r1, #8
    25cc:	d065      	beq.n	269a <__udivsi3+0xfe>
    25ce:	0b03      	lsrs	r3, r0, #12
    25d0:	428b      	cmp	r3, r1
    25d2:	d319      	bcc.n	2608 <__udivsi3+0x6c>
    25d4:	e000      	b.n	25d8 <__udivsi3+0x3c>
    25d6:	0a09      	lsrs	r1, r1, #8
    25d8:	0bc3      	lsrs	r3, r0, #15
    25da:	428b      	cmp	r3, r1
    25dc:	d301      	bcc.n	25e2 <__udivsi3+0x46>
    25de:	03cb      	lsls	r3, r1, #15
    25e0:	1ac0      	subs	r0, r0, r3
    25e2:	4152      	adcs	r2, r2
    25e4:	0b83      	lsrs	r3, r0, #14
    25e6:	428b      	cmp	r3, r1
    25e8:	d301      	bcc.n	25ee <__udivsi3+0x52>
    25ea:	038b      	lsls	r3, r1, #14
    25ec:	1ac0      	subs	r0, r0, r3
    25ee:	4152      	adcs	r2, r2
    25f0:	0b43      	lsrs	r3, r0, #13
    25f2:	428b      	cmp	r3, r1
    25f4:	d301      	bcc.n	25fa <__udivsi3+0x5e>
    25f6:	034b      	lsls	r3, r1, #13
    25f8:	1ac0      	subs	r0, r0, r3
    25fa:	4152      	adcs	r2, r2
    25fc:	0b03      	lsrs	r3, r0, #12
    25fe:	428b      	cmp	r3, r1
    2600:	d301      	bcc.n	2606 <__udivsi3+0x6a>
    2602:	030b      	lsls	r3, r1, #12
    2604:	1ac0      	subs	r0, r0, r3
    2606:	4152      	adcs	r2, r2
    2608:	0ac3      	lsrs	r3, r0, #11
    260a:	428b      	cmp	r3, r1
    260c:	d301      	bcc.n	2612 <__udivsi3+0x76>
    260e:	02cb      	lsls	r3, r1, #11
    2610:	1ac0      	subs	r0, r0, r3
    2612:	4152      	adcs	r2, r2
    2614:	0a83      	lsrs	r3, r0, #10
    2616:	428b      	cmp	r3, r1
    2618:	d301      	bcc.n	261e <__udivsi3+0x82>
    261a:	028b      	lsls	r3, r1, #10
    261c:	1ac0      	subs	r0, r0, r3
    261e:	4152      	adcs	r2, r2
    2620:	0a43      	lsrs	r3, r0, #9
    2622:	428b      	cmp	r3, r1
    2624:	d301      	bcc.n	262a <__udivsi3+0x8e>
    2626:	024b      	lsls	r3, r1, #9
    2628:	1ac0      	subs	r0, r0, r3
    262a:	4152      	adcs	r2, r2
    262c:	0a03      	lsrs	r3, r0, #8
    262e:	428b      	cmp	r3, r1
    2630:	d301      	bcc.n	2636 <__udivsi3+0x9a>
    2632:	020b      	lsls	r3, r1, #8
    2634:	1ac0      	subs	r0, r0, r3
    2636:	4152      	adcs	r2, r2
    2638:	d2cd      	bcs.n	25d6 <__udivsi3+0x3a>
    263a:	09c3      	lsrs	r3, r0, #7
    263c:	428b      	cmp	r3, r1
    263e:	d301      	bcc.n	2644 <__udivsi3+0xa8>
    2640:	01cb      	lsls	r3, r1, #7
    2642:	1ac0      	subs	r0, r0, r3
    2644:	4152      	adcs	r2, r2
    2646:	0983      	lsrs	r3, r0, #6
    2648:	428b      	cmp	r3, r1
    264a:	d301      	bcc.n	2650 <__udivsi3+0xb4>
    264c:	018b      	lsls	r3, r1, #6
    264e:	1ac0      	subs	r0, r0, r3
    2650:	4152      	adcs	r2, r2
    2652:	0943      	lsrs	r3, r0, #5
    2654:	428b      	cmp	r3, r1
    2656:	d301      	bcc.n	265c <__udivsi3+0xc0>
    2658:	014b      	lsls	r3, r1, #5
    265a:	1ac0      	subs	r0, r0, r3
    265c:	4152      	adcs	r2, r2
    265e:	0903      	lsrs	r3, r0, #4
    2660:	428b      	cmp	r3, r1
    2662:	d301      	bcc.n	2668 <__udivsi3+0xcc>
    2664:	010b      	lsls	r3, r1, #4
    2666:	1ac0      	subs	r0, r0, r3
    2668:	4152      	adcs	r2, r2
    266a:	08c3      	lsrs	r3, r0, #3
    266c:	428b      	cmp	r3, r1
    266e:	d301      	bcc.n	2674 <__udivsi3+0xd8>
    2670:	00cb      	lsls	r3, r1, #3
    2672:	1ac0      	subs	r0, r0, r3
    2674:	4152      	adcs	r2, r2
    2676:	0883      	lsrs	r3, r0, #2
    2678:	428b      	cmp	r3, r1
    267a:	d301      	bcc.n	2680 <__udivsi3+0xe4>
    267c:	008b      	lsls	r3, r1, #2
    267e:	1ac0      	subs	r0, r0, r3
    2680:	4152      	adcs	r2, r2
    2682:	0843      	lsrs	r3, r0, #1
    2684:	428b      	cmp	r3, r1
    2686:	d301      	bcc.n	268c <__udivsi3+0xf0>
    2688:	004b      	lsls	r3, r1, #1
    268a:	1ac0      	subs	r0, r0, r3
    268c:	4152      	adcs	r2, r2
    268e:	1a41      	subs	r1, r0, r1
    2690:	d200      	bcs.n	2694 <__udivsi3+0xf8>
    2692:	4601      	mov	r1, r0
    2694:	4152      	adcs	r2, r2
    2696:	4610      	mov	r0, r2
    2698:	4770      	bx	lr
    269a:	e7ff      	b.n	269c <__udivsi3+0x100>
    269c:	b501      	push	{r0, lr}
    269e:	2000      	movs	r0, #0
    26a0:	f000 f8f0 	bl	2884 <__aeabi_idiv0>
    26a4:	bd02      	pop	{r1, pc}
    26a6:	46c0      	nop			; (mov r8, r8)

000026a8 <__aeabi_uidivmod>:
    26a8:	2900      	cmp	r1, #0
    26aa:	d0f7      	beq.n	269c <__udivsi3+0x100>
    26ac:	e776      	b.n	259c <__udivsi3>
    26ae:	4770      	bx	lr

000026b0 <__divsi3>:
    26b0:	4603      	mov	r3, r0
    26b2:	430b      	orrs	r3, r1
    26b4:	d47f      	bmi.n	27b6 <__divsi3+0x106>
    26b6:	2200      	movs	r2, #0
    26b8:	0843      	lsrs	r3, r0, #1
    26ba:	428b      	cmp	r3, r1
    26bc:	d374      	bcc.n	27a8 <__divsi3+0xf8>
    26be:	0903      	lsrs	r3, r0, #4
    26c0:	428b      	cmp	r3, r1
    26c2:	d35f      	bcc.n	2784 <__divsi3+0xd4>
    26c4:	0a03      	lsrs	r3, r0, #8
    26c6:	428b      	cmp	r3, r1
    26c8:	d344      	bcc.n	2754 <__divsi3+0xa4>
    26ca:	0b03      	lsrs	r3, r0, #12
    26cc:	428b      	cmp	r3, r1
    26ce:	d328      	bcc.n	2722 <__divsi3+0x72>
    26d0:	0c03      	lsrs	r3, r0, #16
    26d2:	428b      	cmp	r3, r1
    26d4:	d30d      	bcc.n	26f2 <__divsi3+0x42>
    26d6:	22ff      	movs	r2, #255	; 0xff
    26d8:	0209      	lsls	r1, r1, #8
    26da:	ba12      	rev	r2, r2
    26dc:	0c03      	lsrs	r3, r0, #16
    26de:	428b      	cmp	r3, r1
    26e0:	d302      	bcc.n	26e8 <__divsi3+0x38>
    26e2:	1212      	asrs	r2, r2, #8
    26e4:	0209      	lsls	r1, r1, #8
    26e6:	d065      	beq.n	27b4 <__divsi3+0x104>
    26e8:	0b03      	lsrs	r3, r0, #12
    26ea:	428b      	cmp	r3, r1
    26ec:	d319      	bcc.n	2722 <__divsi3+0x72>
    26ee:	e000      	b.n	26f2 <__divsi3+0x42>
    26f0:	0a09      	lsrs	r1, r1, #8
    26f2:	0bc3      	lsrs	r3, r0, #15
    26f4:	428b      	cmp	r3, r1
    26f6:	d301      	bcc.n	26fc <__divsi3+0x4c>
    26f8:	03cb      	lsls	r3, r1, #15
    26fa:	1ac0      	subs	r0, r0, r3
    26fc:	4152      	adcs	r2, r2
    26fe:	0b83      	lsrs	r3, r0, #14
    2700:	428b      	cmp	r3, r1
    2702:	d301      	bcc.n	2708 <__divsi3+0x58>
    2704:	038b      	lsls	r3, r1, #14
    2706:	1ac0      	subs	r0, r0, r3
    2708:	4152      	adcs	r2, r2
    270a:	0b43      	lsrs	r3, r0, #13
    270c:	428b      	cmp	r3, r1
    270e:	d301      	bcc.n	2714 <__divsi3+0x64>
    2710:	034b      	lsls	r3, r1, #13
    2712:	1ac0      	subs	r0, r0, r3
    2714:	4152      	adcs	r2, r2
    2716:	0b03      	lsrs	r3, r0, #12
    2718:	428b      	cmp	r3, r1
    271a:	d301      	bcc.n	2720 <__divsi3+0x70>
    271c:	030b      	lsls	r3, r1, #12
    271e:	1ac0      	subs	r0, r0, r3
    2720:	4152      	adcs	r2, r2
    2722:	0ac3      	lsrs	r3, r0, #11
    2724:	428b      	cmp	r3, r1
    2726:	d301      	bcc.n	272c <__divsi3+0x7c>
    2728:	02cb      	lsls	r3, r1, #11
    272a:	1ac0      	subs	r0, r0, r3
    272c:	4152      	adcs	r2, r2
    272e:	0a83      	lsrs	r3, r0, #10
    2730:	428b      	cmp	r3, r1
    2732:	d301      	bcc.n	2738 <__divsi3+0x88>
    2734:	028b      	lsls	r3, r1, #10
    2736:	1ac0      	subs	r0, r0, r3
    2738:	4152      	adcs	r2, r2
    273a:	0a43      	lsrs	r3, r0, #9
    273c:	428b      	cmp	r3, r1
    273e:	d301      	bcc.n	2744 <__divsi3+0x94>
    2740:	024b      	lsls	r3, r1, #9
    2742:	1ac0      	subs	r0, r0, r3
    2744:	4152      	adcs	r2, r2
    2746:	0a03      	lsrs	r3, r0, #8
    2748:	428b      	cmp	r3, r1
    274a:	d301      	bcc.n	2750 <__divsi3+0xa0>
    274c:	020b      	lsls	r3, r1, #8
    274e:	1ac0      	subs	r0, r0, r3
    2750:	4152      	adcs	r2, r2
    2752:	d2cd      	bcs.n	26f0 <__divsi3+0x40>
    2754:	09c3      	lsrs	r3, r0, #7
    2756:	428b      	cmp	r3, r1
    2758:	d301      	bcc.n	275e <__divsi3+0xae>
    275a:	01cb      	lsls	r3, r1, #7
    275c:	1ac0      	subs	r0, r0, r3
    275e:	4152      	adcs	r2, r2
    2760:	0983      	lsrs	r3, r0, #6
    2762:	428b      	cmp	r3, r1
    2764:	d301      	bcc.n	276a <__divsi3+0xba>
    2766:	018b      	lsls	r3, r1, #6
    2768:	1ac0      	subs	r0, r0, r3
    276a:	4152      	adcs	r2, r2
    276c:	0943      	lsrs	r3, r0, #5
    276e:	428b      	cmp	r3, r1
    2770:	d301      	bcc.n	2776 <__divsi3+0xc6>
    2772:	014b      	lsls	r3, r1, #5
    2774:	1ac0      	subs	r0, r0, r3
    2776:	4152      	adcs	r2, r2
    2778:	0903      	lsrs	r3, r0, #4
    277a:	428b      	cmp	r3, r1
    277c:	d301      	bcc.n	2782 <__divsi3+0xd2>
    277e:	010b      	lsls	r3, r1, #4
    2780:	1ac0      	subs	r0, r0, r3
    2782:	4152      	adcs	r2, r2
    2784:	08c3      	lsrs	r3, r0, #3
    2786:	428b      	cmp	r3, r1
    2788:	d301      	bcc.n	278e <__divsi3+0xde>
    278a:	00cb      	lsls	r3, r1, #3
    278c:	1ac0      	subs	r0, r0, r3
    278e:	4152      	adcs	r2, r2
    2790:	0883      	lsrs	r3, r0, #2
    2792:	428b      	cmp	r3, r1
    2794:	d301      	bcc.n	279a <__divsi3+0xea>
    2796:	008b      	lsls	r3, r1, #2
    2798:	1ac0      	subs	r0, r0, r3
    279a:	4152      	adcs	r2, r2
    279c:	0843      	lsrs	r3, r0, #1
    279e:	428b      	cmp	r3, r1
    27a0:	d301      	bcc.n	27a6 <__divsi3+0xf6>
    27a2:	004b      	lsls	r3, r1, #1
    27a4:	1ac0      	subs	r0, r0, r3
    27a6:	4152      	adcs	r2, r2
    27a8:	1a41      	subs	r1, r0, r1
    27aa:	d200      	bcs.n	27ae <__divsi3+0xfe>
    27ac:	4601      	mov	r1, r0
    27ae:	4152      	adcs	r2, r2
    27b0:	4610      	mov	r0, r2
    27b2:	4770      	bx	lr
    27b4:	e05d      	b.n	2872 <__divsi3+0x1c2>
    27b6:	0fca      	lsrs	r2, r1, #31
    27b8:	d000      	beq.n	27bc <__divsi3+0x10c>
    27ba:	4249      	negs	r1, r1
    27bc:	1003      	asrs	r3, r0, #32
    27be:	d300      	bcc.n	27c2 <__divsi3+0x112>
    27c0:	4240      	negs	r0, r0
    27c2:	4053      	eors	r3, r2
    27c4:	2200      	movs	r2, #0
    27c6:	469c      	mov	ip, r3
    27c8:	0903      	lsrs	r3, r0, #4
    27ca:	428b      	cmp	r3, r1
    27cc:	d32d      	bcc.n	282a <__divsi3+0x17a>
    27ce:	0a03      	lsrs	r3, r0, #8
    27d0:	428b      	cmp	r3, r1
    27d2:	d312      	bcc.n	27fa <__divsi3+0x14a>
    27d4:	22fc      	movs	r2, #252	; 0xfc
    27d6:	0189      	lsls	r1, r1, #6
    27d8:	ba12      	rev	r2, r2
    27da:	0a03      	lsrs	r3, r0, #8
    27dc:	428b      	cmp	r3, r1
    27de:	d30c      	bcc.n	27fa <__divsi3+0x14a>
    27e0:	0189      	lsls	r1, r1, #6
    27e2:	1192      	asrs	r2, r2, #6
    27e4:	428b      	cmp	r3, r1
    27e6:	d308      	bcc.n	27fa <__divsi3+0x14a>
    27e8:	0189      	lsls	r1, r1, #6
    27ea:	1192      	asrs	r2, r2, #6
    27ec:	428b      	cmp	r3, r1
    27ee:	d304      	bcc.n	27fa <__divsi3+0x14a>
    27f0:	0189      	lsls	r1, r1, #6
    27f2:	d03a      	beq.n	286a <__divsi3+0x1ba>
    27f4:	1192      	asrs	r2, r2, #6
    27f6:	e000      	b.n	27fa <__divsi3+0x14a>
    27f8:	0989      	lsrs	r1, r1, #6
    27fa:	09c3      	lsrs	r3, r0, #7
    27fc:	428b      	cmp	r3, r1
    27fe:	d301      	bcc.n	2804 <__divsi3+0x154>
    2800:	01cb      	lsls	r3, r1, #7
    2802:	1ac0      	subs	r0, r0, r3
    2804:	4152      	adcs	r2, r2
    2806:	0983      	lsrs	r3, r0, #6
    2808:	428b      	cmp	r3, r1
    280a:	d301      	bcc.n	2810 <__divsi3+0x160>
    280c:	018b      	lsls	r3, r1, #6
    280e:	1ac0      	subs	r0, r0, r3
    2810:	4152      	adcs	r2, r2
    2812:	0943      	lsrs	r3, r0, #5
    2814:	428b      	cmp	r3, r1
    2816:	d301      	bcc.n	281c <__divsi3+0x16c>
    2818:	014b      	lsls	r3, r1, #5
    281a:	1ac0      	subs	r0, r0, r3
    281c:	4152      	adcs	r2, r2
    281e:	0903      	lsrs	r3, r0, #4
    2820:	428b      	cmp	r3, r1
    2822:	d301      	bcc.n	2828 <__divsi3+0x178>
    2824:	010b      	lsls	r3, r1, #4
    2826:	1ac0      	subs	r0, r0, r3
    2828:	4152      	adcs	r2, r2
    282a:	08c3      	lsrs	r3, r0, #3
    282c:	428b      	cmp	r3, r1
    282e:	d301      	bcc.n	2834 <__divsi3+0x184>
    2830:	00cb      	lsls	r3, r1, #3
    2832:	1ac0      	subs	r0, r0, r3
    2834:	4152      	adcs	r2, r2
    2836:	0883      	lsrs	r3, r0, #2
    2838:	428b      	cmp	r3, r1
    283a:	d301      	bcc.n	2840 <__divsi3+0x190>
    283c:	008b      	lsls	r3, r1, #2
    283e:	1ac0      	subs	r0, r0, r3
    2840:	4152      	adcs	r2, r2
    2842:	d2d9      	bcs.n	27f8 <__divsi3+0x148>
    2844:	0843      	lsrs	r3, r0, #1
    2846:	428b      	cmp	r3, r1
    2848:	d301      	bcc.n	284e <__divsi3+0x19e>
    284a:	004b      	lsls	r3, r1, #1
    284c:	1ac0      	subs	r0, r0, r3
    284e:	4152      	adcs	r2, r2
    2850:	1a41      	subs	r1, r0, r1
    2852:	d200      	bcs.n	2856 <__divsi3+0x1a6>
    2854:	4601      	mov	r1, r0
    2856:	4663      	mov	r3, ip
    2858:	4152      	adcs	r2, r2
    285a:	105b      	asrs	r3, r3, #1
    285c:	4610      	mov	r0, r2
    285e:	d301      	bcc.n	2864 <__divsi3+0x1b4>
    2860:	4240      	negs	r0, r0
    2862:	2b00      	cmp	r3, #0
    2864:	d500      	bpl.n	2868 <__divsi3+0x1b8>
    2866:	4249      	negs	r1, r1
    2868:	4770      	bx	lr
    286a:	4663      	mov	r3, ip
    286c:	105b      	asrs	r3, r3, #1
    286e:	d300      	bcc.n	2872 <__divsi3+0x1c2>
    2870:	4240      	negs	r0, r0
    2872:	b501      	push	{r0, lr}
    2874:	2000      	movs	r0, #0
    2876:	f000 f805 	bl	2884 <__aeabi_idiv0>
    287a:	bd02      	pop	{r1, pc}

0000287c <__aeabi_idivmod>:
    287c:	2900      	cmp	r1, #0
    287e:	d0f8      	beq.n	2872 <__divsi3+0x1c2>
    2880:	e716      	b.n	26b0 <__divsi3>
    2882:	4770      	bx	lr

00002884 <__aeabi_idiv0>:
    2884:	4770      	bx	lr
    2886:	46c0      	nop			; (mov r8, r8)

00002888 <__ffssi2>:
    2888:	b510      	push	{r4, lr}
    288a:	2300      	movs	r3, #0
    288c:	2800      	cmp	r0, #0
    288e:	d002      	beq.n	2896 <__ffssi2+0xe>
    2890:	f000 f804 	bl	289c <__ctzsi2>
    2894:	1c43      	adds	r3, r0, #1
    2896:	0018      	movs	r0, r3
    2898:	bd10      	pop	{r4, pc}
    289a:	46c0      	nop			; (mov r8, r8)

0000289c <__ctzsi2>:
    289c:	4241      	negs	r1, r0
    289e:	4008      	ands	r0, r1
    28a0:	211c      	movs	r1, #28
    28a2:	2301      	movs	r3, #1
    28a4:	041b      	lsls	r3, r3, #16
    28a6:	4298      	cmp	r0, r3
    28a8:	d301      	bcc.n	28ae <__ctzsi2+0x12>
    28aa:	0c00      	lsrs	r0, r0, #16
    28ac:	3910      	subs	r1, #16
    28ae:	0a1b      	lsrs	r3, r3, #8
    28b0:	4298      	cmp	r0, r3
    28b2:	d301      	bcc.n	28b8 <__ctzsi2+0x1c>
    28b4:	0a00      	lsrs	r0, r0, #8
    28b6:	3908      	subs	r1, #8
    28b8:	091b      	lsrs	r3, r3, #4
    28ba:	4298      	cmp	r0, r3
    28bc:	d301      	bcc.n	28c2 <__ctzsi2+0x26>
    28be:	0900      	lsrs	r0, r0, #4
    28c0:	3904      	subs	r1, #4
    28c2:	a202      	add	r2, pc, #8	; (adr r2, 28cc <__ctzsi2+0x30>)
    28c4:	5c10      	ldrb	r0, [r2, r0]
    28c6:	1a40      	subs	r0, r0, r1
    28c8:	4770      	bx	lr
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	1d1d1c1b 	.word	0x1d1d1c1b
    28d0:	1e1e1e1e 	.word	0x1e1e1e1e
    28d4:	1f1f1f1f 	.word	0x1f1f1f1f
    28d8:	1f1f1f1f 	.word	0x1f1f1f1f

000028dc <__libc_init_array>:
    28dc:	b570      	push	{r4, r5, r6, lr}
    28de:	2600      	movs	r6, #0
    28e0:	4d0c      	ldr	r5, [pc, #48]	; (2914 <__libc_init_array+0x38>)
    28e2:	4c0d      	ldr	r4, [pc, #52]	; (2918 <__libc_init_array+0x3c>)
    28e4:	1b64      	subs	r4, r4, r5
    28e6:	10a4      	asrs	r4, r4, #2
    28e8:	42a6      	cmp	r6, r4
    28ea:	d109      	bne.n	2900 <__libc_init_array+0x24>
    28ec:	2600      	movs	r6, #0
    28ee:	f000 f935 	bl	2b5c <_init>
    28f2:	4d0a      	ldr	r5, [pc, #40]	; (291c <__libc_init_array+0x40>)
    28f4:	4c0a      	ldr	r4, [pc, #40]	; (2920 <__libc_init_array+0x44>)
    28f6:	1b64      	subs	r4, r4, r5
    28f8:	10a4      	asrs	r4, r4, #2
    28fa:	42a6      	cmp	r6, r4
    28fc:	d105      	bne.n	290a <__libc_init_array+0x2e>
    28fe:	bd70      	pop	{r4, r5, r6, pc}
    2900:	00b3      	lsls	r3, r6, #2
    2902:	58eb      	ldr	r3, [r5, r3]
    2904:	4798      	blx	r3
    2906:	3601      	adds	r6, #1
    2908:	e7ee      	b.n	28e8 <__libc_init_array+0xc>
    290a:	00b3      	lsls	r3, r6, #2
    290c:	58eb      	ldr	r3, [r5, r3]
    290e:	4798      	blx	r3
    2910:	3601      	adds	r6, #1
    2912:	e7f2      	b.n	28fa <__libc_init_array+0x1e>
    2914:	00002b68 	.word	0x00002b68
    2918:	00002b68 	.word	0x00002b68
    291c:	00002b68 	.word	0x00002b68
    2920:	00002b6c 	.word	0x00002b6c

00002924 <DIP_SWITCH_THRESHOLDS>:
    2924:	00190000 0080004e 00c900a7 011100ef     ....N...........
    2934:	01520133 0185016c 01aa0198 01d101be     3.R.l...........
    2944:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    2954:	73615f63 2e636e79 00000063 682f2e2e     c_async.c...../h
    2964:	732f6c61 682f6372 615f6c61 615f6364     al/src/hal_adc_a
    2974:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    2984:	682f6372 645f6c61 735f6361 2e636e79     rc/hal_dac_sync.
    2994:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    29a4:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
    29b4:	00000000 682f2e2e 752f6c61 736c6974     ....../hal/utils
    29c4:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    29d4:	65666675 00632e72                       uffer.c.

000029dc <_cfgs>:
    29dc:	42004400 00000018 00000762 00001762     .D.B....b...b...
    29ec:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    29fc:	63615f6c 0000632e                       l_ac.c..

00002a04 <_adcs>:
    2a04:	00020200 03000000 00000000 00000001     ................
    2a14:	00000001 00000000 00000000 682f2e2e     ............../h
    2a24:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    2a34:	00000000 682f2e2e 642f6c70 682f6361     ....../hpl/dac/h
    2a44:	645f6c70 632e6361 00000000              pl_dac.c....

00002a50 <_map>:
    2a50:	00000000 00000010 00000001 00000011     ................
    2a60:	00000005 00000015 682f2e2e 652f6c70     ........../hpl/e
    2a70:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00002a80 <user_mux_confs>:
    2a80:	00010000 00030002 00050004 00070006     ................
    2a90:	00090008 000b000a 000d010c 000f000e     ................
    2aa0:	00110010 00130012 00150014 01170016     ................
    2ab0:	00190018 001b001a 001d001c 0000001e     ................

00002ac0 <channel_confs>:
    2ac0:	022c0000 00000001 00000002 00000003     ..,.............
    2ad0:	00000004 00000005 00000006 00000007     ................
    2ae0:	00000008 00000009 0000000a 0000000b     ................

00002af0 <_usarts>:
    2af0:	00000005 40100004 00020040 0000eaa7     .......@@.......
    2b00:	00000000                                ....

00002b04 <_i2cms>:
	...

00002b1c <_i2css>:
	...

00002b2c <sercomspi_regs>:
	...
    2b40:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2b50:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00002b5c <_init>:
    2b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b62:	bc08      	pop	{r3}
    2b64:	469e      	mov	lr, r3
    2b66:	4770      	bx	lr

00002b68 <__init_array_start>:
    2b68:	000000dd 	.word	0x000000dd

00002b6c <_fini>:
    2b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b72:	bc08      	pop	{r3}
    2b74:	469e      	mov	lr, r3
    2b76:	4770      	bx	lr

00002b78 <__fini_array_start>:
    2b78:	000000b5 	.word	0x000000b5
