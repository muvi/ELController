/*
 * sine_wave.h
 *
 * Created: 26.08.2022 14:54:32
 *  Author: Christian
 */ 


#ifndef SINE_WAVE_H_
#define SINE_WAVE_H_

#include <hpl_pm_base.h>
#include <base_util.h>

typedef uint16_t sine_wave_frequency_t;
typedef uint8_t sine_wave_output_t;
typedef int16_t sine_wave_data_t;

//static const sine_wave_output_t sine_wave_data[] = {0x7F, 0x88, 0x90, 0x99, 0xA1, 0xA9, 0xB1, 0xB9, 0xC0, 0xC8, 0xCE, 0xD5, 0xDB, 0xE1, 0xE6, 0xEB, 0xEF, 0xF3, 0xF6, 0xF9, 0xFB, 0xFD, 0xFE, 0xFF, 0xFF, 0xFE, 0xFD, 0xFB, 0xF9, 0xF6, 0xF3, 0xEF, 0xEB, 0xE6, 0xE1, 0xDB, 0xD5, 0xCE, 0xC8, 0xC0, 0xB9, 0xB1, 0xA9, 0xA1, 0x99, 0x90, 0x88, 0x7F, 0x77, 0x6E, 0x66, 0x5E, 0x56, 0x4E, 0x46, 0x3E, 0x37, 0x30, 0x2A, 0x24, 0x1E, 0x19, 0x14, 0x10, 0x0C, 0x08, 0x06, 0x03, 0x02, 0x01, 0x00, 0x00, 0x01, 0x02, 0x03, 0x06, 0x08, 0x0C, 0x10, 0x14, 0x19, 0x1E, 0x24, 0x2A, 0x30, 0x37, 0x3E, 0x46, 0x4E, 0x56, 0x5E, 0x66, 0x6E, 0x77};
/*
static const sine_wave_data_t sine_wave_data[] = {
	0x0000,
	0x0004,
	0x0008,
	0x000D,
	0x0011,
	0x0015,
	0x0019,
	0x001E,
	0x0022,
	0x0026,
	0x002A,
	0x002E,
	0x0033,
	0x0037,
	0x003B,
	0x003F,
	0x0043,
	0x0047,
	0x004B,
	0x004F,
	0x0053,
	0x0057,
	0x005B,
	0x005F,
	0x0063,
	0x0067,
	0x006B,
	0x006F,
	0x0073,
	0x0077,
	0x007A,
	0x007E,
	0x0082,
	0x0085,
	0x0089,
	0x008C,
	0x0090,
	0x0093,
	0x0097,
	0x009A,
	0x009E,
	0x00A1,
	0x00A4,
	0x00A7,
	0x00AB,
	0x00AE,
	0x00B1,
	0x00B4,
	0x00B7,
	0x00BA,
	0x00BD,
	0x00C0,
	0x00C2,
	0x00C5,
	0x00C8,
	0x00CA,
	0x00CD,
	0x00CF,
	0x00D2,
	0x00D4,
	0x00D7,
	0x00D9,
	0x00DB,
	0x00DD,
	0x00DF,
	0x00E1,
	0x00E3,
	0x00E5,
	0x00E7,
	0x00E9,
	0x00EA,
	0x00EC,
	0x00EE,
	0x00EF,
	0x00F1,
	0x00F2,
	0x00F3,
	0x00F5,
	0x00F6,
	0x00F7,
	0x00F8,
	0x00F9,
	0x00FA,
	0x00FB,
	0x00FB,
	0x00FC,
	0x00FD,
	0x00FD,
	0x00FE,
	0x00FE,
	0x00FE,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FE,
	0x00FE,
	0x00FD,
	0x00FD,
	0x00FC,
	0x00FC,
	0x00FB,
	0x00FA,
	0x00F9,
	0x00F8,
	0x00F7,
	0x00F6,
	0x00F5,
	0x00F4,
	0x00F3,
	0x00F1,
	0x00F0,
	0x00EE,
	0x00ED,
	0x00EB,
	0x00EA,
	0x00E8,
	0x00E6,
	0x00E4,
	0x00E2,
	0x00E0,
	0x00DE,
	0x00DC,
	0x00DA,
	0x00D8,
	0x00D5,
	0x00D3,
	0x00D1,
	0x00CE,
	0x00CC,
	0x00C9,
	0x00C6,
	0x00C4,
	0x00C1,
	0x00BE,
	0x00BB,
	0x00B8,
	0x00B5,
	0x00B2,
	0x00AF,
	0x00AC,
	0x00A9,
	0x00A6,
	0x00A3,
	0x009F,
	0x009C,
	0x0099,
	0x0095,
	0x0092,
	0x008E,
	0x008B,
	0x0087,
	0x0083,
	0x0080,
	0x007C,
	0x0078,
	0x0075,
	0x0071,
	0x006D,
	0x0069,
	0x0065,
	0x0061,
	0x005D,
	0x0059,
	0x0055,
	0x0051,
	0x004D,
	0x0049,
	0x0045,
	0x0041,
	0x003D,
	0x0039,
	0x0035,
	0x0031,
	0x002C,
	0x0028,
	0x0024,
	0x0020,
	0x001C,
	0x0017,
	0x0013,
	0x000F,
	0x000B,
	0x0006,
	0x0002,
	0xFFFE,
	0xFFFA,
	0xFFF5,
	0xFFF1,
	0xFFED,
	0xFFE9,
	0xFFE4,
	0xFFE0,
	0xFFDC,
	0xFFD8,
	0xFFD4,
	0xFFCF,
	0xFFCB,
	0xFFC7,
	0xFFC3,
	0xFFBF,
	0xFFBB,
	0xFFB7,
	0xFFB3,
	0xFFAF,
	0xFFAB,
	0xFFA7,
	0xFFA3,
	0xFF9F,
	0xFF9B,
	0xFF97,
	0xFF93,
	0xFF8F,
	0xFF8B,
	0xFF88,
	0xFF84,
	0xFF80,
	0xFF7D,
	0xFF79,
	0xFF75,
	0xFF72,
	0xFF6E,
	0xFF6B,
	0xFF67,
	0xFF64,
	0xFF61,
	0xFF5D,
	0xFF5A,
	0xFF57,
	0xFF54,
	0xFF51,
	0xFF4E,
	0xFF4B,
	0xFF48,
	0xFF45,
	0xFF42,
	0xFF3F,
	0xFF3C,
	0xFF3A,
	0xFF37,
	0xFF34,
	0xFF32,
	0xFF2F,
	0xFF2D,
	0xFF2B,
	0xFF28,
	0xFF26,
	0xFF24,
	0xFF22,
	0xFF20,
	0xFF1E,
	0xFF1C,
	0xFF1A,
	0xFF18,
	0xFF16,
	0xFF15,
	0xFF13,
	0xFF12,
	0xFF10,
	0xFF0F,
	0xFF0D,
	0xFF0C,
	0xFF0B,
	0xFF0A,
	0xFF09,
	0xFF08,
	0xFF07,
	0xFF06,
	0xFF05,
	0xFF04,
	0xFF04,
	0xFF03,
	0xFF03,
	0xFF02,
	0xFF02,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF01,
	0xFF02,
	0xFF02,
	0xFF02,
	0xFF03,
	0xFF03,
	0xFF04,
	0xFF05,
	0xFF05,
	0xFF06,
	0xFF07,
	0xFF08,
	0xFF09,
	0xFF0A,
	0xFF0B,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF11,
	0xFF12,
	0xFF14,
	0xFF16,
	0xFF17,
	0xFF19,
	0xFF1B,
	0xFF1D,
	0xFF1F,
	0xFF21,
	0xFF23,
	0xFF25,
	0xFF27,
	0xFF29,
	0xFF2C,
	0xFF2E,
	0xFF31,
	0xFF33,
	0xFF36,
	0xFF38,
	0xFF3B,
	0xFF3E,
	0xFF40,
	0xFF43,
	0xFF46,
	0xFF49,
	0xFF4C,
	0xFF4F,
	0xFF52,
	0xFF55,
	0xFF59,
	0xFF5C,
	0xFF5F,
	0xFF62,
	0xFF66,
	0xFF69,
	0xFF6D,
	0xFF70,
	0xFF74,
	0xFF77,
	0xFF7B,
	0xFF7E,
	0xFF82,
	0xFF86,
	0xFF89,
	0xFF8D,
	0xFF91,
	0xFF95,
	0xFF99,
	0xFF9D,
	0xFFA1,
	0xFFA5,
	0xFFA9,
	0xFFAD,
	0xFFB1,
	0xFFB5,
	0xFFB9,
	0xFFBD,
	0xFFC1,
	0xFFC5,
	0xFFC9,
	0xFFCD,
	0xFFD2,
	0xFFD6,
	0xFFDA,
	0xFFDE,
	0xFFE2,
	0xFFE7,
	0xFFEB,
	0xFFEF,
	0xFFF3,
	0xFFF8,
	0xFFFC
};
*/
extern sine_wave_data_t sine_wave_data[387];
/*static const sine_wave_data_t sine_wave_data[] = {
	0x0080,
	0x0082,
	0x0084,
	0x0086,
	0x0088,
	0x008A,
	0x008C,
	0x008E,
	0x0090,
	0x0093,
	0x0095,
	0x0097,
	0x0099,
	0x009B,
	0x009D,
	0x009F,
	0x00A1,
	0x00A3,
	0x00A5,
	0x00A7,
	0x00A9,
	0x00AB,
	0x00AD,
	0x00AF,
	0x00B1,
	0x00B3,
	0x00B5,
	0x00B7,
	0x00B9,
	0x00BB,
	0x00BD,
	0x00BE,
	0x00C0,
	0x00C2,
	0x00C4,
	0x00C6,
	0x00C7,
	0x00C9,
	0x00CB,
	0x00CD,
	0x00CE,
	0x00D0,
	0x00D2,
	0x00D3,
	0x00D5,
	0x00D6,
	0x00D8,
	0x00D9,
	0x00DB,
	0x00DC,
	0x00DE,
	0x00DF,
	0x00E1,
	0x00E2,
	0x00E3,
	0x00E5,
	0x00E6,
	0x00E7,
	0x00E8,
	0x00EA,
	0x00EB,
	0x00EC,
	0x00ED,
	0x00EE,
	0x00EF,
	0x00F0,
	0x00F1,
	0x00F2,
	0x00F3,
	0x00F4,
	0x00F5,
	0x00F6,
	0x00F6,
	0x00F7,
	0x00F8,
	0x00F8,
	0x00F9,
	0x00FA,
	0x00FA,
	0x00FB,
	0x00FB,
	0x00FC,
	0x00FC,
	0x00FD,
	0x00FD,
	0x00FD,
	0x00FE,
	0x00FE,
	0x00FE,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FF,
	0x00FE,
	0x00FE,
	0x00FE,
	0x00FE,
	0x00FD,
	0x00FD,
	0x00FD,
	0x00FC,
	0x00FC,
	0x00FB,
	0x00FB,
	0x00FA,
	0x00F9,
	0x00F9,
	0x00F8,
	0x00F7,
	0x00F7,
	0x00F6,
	0x00F5,
	0x00F4,
	0x00F3,
	0x00F3,
	0x00F2,
	0x00F1,
	0x00F0,
	0x00EF,
	0x00EE,
	0x00EC,
	0x00EB,
	0x00EA,
	0x00E9,
	0x00E8,
	0x00E7,
	0x00E5,
	0x00E4,
	0x00E3,
	0x00E1,
	0x00E0,
	0x00DF,
	0x00DD,
	0x00DC,
	0x00DA,
	0x00D9,
	0x00D7,
	0x00D6,
	0x00D4,
	0x00D2,
	0x00D1,
	0x00CF,
	0x00CE,
	0x00CC,
	0x00CA,
	0x00C8,
	0x00C7,
	0x00C5,
	0x00C3,
	0x00C1,
	0x00BF,
	0x00BE,
	0x00BC,
	0x00BA,
	0x00B8,
	0x00B6,
	0x00B4,
	0x00B2,
	0x00B0,
	0x00AE,
	0x00AC,
	0x00AA,
	0x00A8,
	0x00A6,
	0x00A4,
	0x00A2,
	0x00A0,
	0x009E,
	0x009C,
	0x009A,
	0x0098,
	0x0096,
	0x0094,
	0x0092,
	0x008F,
	0x008D,
	0x008B,
	0x0089,
	0x0087,
	0x0085,
	0x0083,
	0x0081,
	0x007E,
	0x007C,
	0x007A,
	0x0078,
	0x0076,
	0x0074,
	0x0072,
	0x0070,
	0x006D,
	0x006B,
	0x0069,
	0x0067,
	0x0065,
	0x0063,
	0x0061,
	0x005F,
	0x005D,
	0x005B,
	0x0059,
	0x0057,
	0x0055,
	0x0053,
	0x0051,
	0x004F,
	0x004D,
	0x004B,
	0x0049,
	0x0047,
	0x0045,
	0x0043,
	0x0041,
	0x0040,
	0x003E,
	0x003C,
	0x003A,
	0x0038,
	0x0037,
	0x0035,
	0x0033,
	0x0031,
	0x0030,
	0x002E,
	0x002D,
	0x002B,
	0x0029,
	0x0028,
	0x0026,
	0x0025,
	0x0023,
	0x0022,
	0x0020,
	0x001F,
	0x001E,
	0x001C,
	0x001B,
	0x001A,
	0x0018,
	0x0017,
	0x0016,
	0x0015,
	0x0014,
	0x0013,
	0x0011,
	0x0010,
	0x000F,
	0x000E,
	0x000D,
	0x000C,
	0x000C,
	0x000B,
	0x000A,
	0x0009,
	0x0008,
	0x0008,
	0x0007,
	0x0006,
	0x0006,
	0x0005,
	0x0004,
	0x0004,
	0x0003,
	0x0003,
	0x0002,
	0x0002,
	0x0002,
	0x0001,
	0x0001,
	0x0001,
	0x0001,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0000,
	0x0001,
	0x0001,
	0x0001,
	0x0002,
	0x0002,
	0x0002,
	0x0003,
	0x0003,
	0x0004,
	0x0004,
	0x0005,
	0x0005,
	0x0006,
	0x0007,
	0x0007,
	0x0008,
	0x0009,
	0x0009,
	0x000A,
	0x000B,
	0x000C,
	0x000D,
	0x000E,
	0x000F,
	0x0010,
	0x0011,
	0x0012,
	0x0013,
	0x0014,
	0x0015,
	0x0017,
	0x0018,
	0x0019,
	0x001A,
	0x001C,
	0x001D,
	0x001E,
	0x0020,
	0x0021,
	0x0023,
	0x0024,
	0x0026,
	0x0027,
	0x0029,
	0x002A,
	0x002C,
	0x002D,
	0x002F,
	0x0031,
	0x0032,
	0x0034,
	0x0036,
	0x0038,
	0x0039,
	0x003B,
	0x003D,
	0x003F,
	0x0041,
	0x0042,
	0x0044,
	0x0046,
	0x0048,
	0x004A,
	0x004C,
	0x004E,
	0x0050,
	0x0052,
	0x0054,
	0x0056,
	0x0058,
	0x005A,
	0x005C,
	0x005E,
	0x0060,
	0x0062,
	0x0064,
	0x0066,
	0x0068,
	0x006A,
	0x006C,
	0x006F,
	0x0071,
	0x0073,
	0x0075,
	0x0077,
	0x0079,
	0x007B,
	0x007D,
	0x0080,
	0x0082,
	0x0084,
	0x0086,
	0x0088,
	0x008A,
	0x008C,
	0x008E,
	0x0090,
	0x0093
};*/

#define SINE_WAVE_MAX_VALUE 0xFF
#define SINE_WAVE_MIN_VALUE 0x00
#define SINE_WAVE_MAX_AMPLITUDE 0xFF
#define SINE_WAVE_AMPLITUDE_BITS 8
#define SINE_WAVE_PRESCALER 8
//#define SINE_WAVE_SAMPLE_COUNT (sizeof(sine_wave_data) / sizeof(sine_wave_data_t))
#define SINE_WAVE_SAMPLE_COUNT 387
#define SINE_WAVE_TICK_DURATION ((((float) SINE_WAVE_MAX_VALUE) * ((float) SINE_WAVE_PRESCALER)) / ((float) MAIN_CLOCK_SPEED))
#define SINE_WAVE_BASE_FREQUENCY (1.0 / (SINE_WAVE_SAMPLE_COUNT * SINE_WAVE_TICK_DURATION))
#define SINE_WAVE_FRACTIONAL_BITS 7

static const sine_wave_frequency_t SINE_WAVE_MAX_POSITION = (SINE_WAVE_SAMPLE_COUNT << SINE_WAVE_FRACTIONAL_BITS);
static const sine_wave_frequency_t SINE_WAVE_DECREMENT_START = 94; //first value where sine wave data is lower than the value before it (inclusive)
static const sine_wave_frequency_t SINE_WAVE_DECREMENT_END = 283; // last value where sine wave data is lower than the value before it (inclusive)

typedef struct {
	sine_wave_frequency_t position;
	sine_wave_output_t amplitude;
	sine_wave_frequency_t frequency;
	//sine_wave_output_t last_output;
	volatile sine_wave_output_t amplitude_buffer;
	volatile sine_wave_frequency_t frequency_buffer;
	volatile bool updated;
} SineWave;

typedef struct {
	sine_wave_output_t pos;
	sine_wave_output_t neg;
	//bool incrementing;
} SineWaveSample;

#define SINE_WAVE_DEFAULT_SAMPLE { \
	.pos = 0x00, \
	.neg = 0xFF, \
}

#define SINE_WAVE_FREQUENCY(real_frequency) (real_frequency * ((float) (1 << SINE_WAVE_FRACTIONAL_BITS)) / SINE_WAVE_BASE_FREQUENCY)

#define SINE_WAVE(_frequency, _amplitude) {\
	.position = 0, \
	.frequency = _frequency, \
	.amplitude = _amplitude, \
	.updated = false \
}

static inline SineWaveSample sine_wave_next(SineWave* sine) {
	if (sine->updated) {
		sine->frequency = sine->frequency_buffer;
		sine->amplitude = sine->amplitude_buffer;
		sine->updated = false;
	}
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
	SineWaveSample sample;
	sample.pos = result;
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
	
	//square wave modification
	/*
	sample.pos = sample.pos >= 0x7F ? 0xFF : 0x00;
	sample.neg = sample.neg >= 0x7F ? 0xFF : 0x00;
	*/
	
	//sample.incrementing = result > sine->last_output;
	//sine->last_output = result;
	//wrong sine wave
	/*
	if (result >= 0) {
		sample.pos = result;
		//sample.pos = result >= 0x7F ? 0xFF : 0x00;
		//sample.neg = 0;
		sample.neg = ((int16_t) sine->amplitude) - result;
	} else {
		//sample.pos = 0;
		sample.pos = ((int16_t) sine->amplitude) + result;
		//result = -result;
		//sample.neg = result >= 0x7F ? 0xFF : 0x00;
		sample.neg = -result;
	}
	*/
	return sample;
	//return result; //(sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS] * sine->amplitude) / SINE_WAVE_MAX_VALUE + (SINE_WAVE_MAX_VALUE - sine->amplitude) / 2;
}

static inline void sine_wave_update(SineWave* sine, sine_wave_frequency_t _frequency, sine_wave_output_t _amplitude) {
	//if there is a pending update, do that first
	if (!sine->updated) {
		sine->frequency_buffer = _frequency;
		sine->amplitude_buffer = _amplitude;
		sine->updated = true;
	}
}

#endif /* SINE_WAVE_H_ */