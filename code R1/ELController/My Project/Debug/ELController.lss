
ELController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005a4c  00005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000003f4  20000000  00005a54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000012c  200003f8  00005e50  000203f8  2**3
                  ALLOC
  4 .stack        00000404  20000524  00005f7c  000203f8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002041c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004bc5c  00000000  00000000  00020475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000059cf  00000000  00000000  0006c0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000117f5  00000000  00000000  00071aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc0  00000000  00000000  00083295  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c60  00000000  00000000  00083f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ccb5  00000000  00000000  00084bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019010  00000000  00000000  0009186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093451  00000000  00000000  000aa87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002148  00000000  00000000  0013dccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 09 00 20 65 06 00 00 61 06 00 00 61 06 00 00     (.. e...a...a...
	...
      2c:	61 06 00 00 00 00 00 00 00 00 00 00 61 06 00 00     a...........a...
      3c:	6d 2b 00 00 61 06 00 00 61 06 00 00 61 06 00 00     m+..a...a...a...
      4c:	09 09 00 00 3d 1b 00 00 61 1d 00 00 61 06 00 00     ....=...a...a...
      5c:	61 06 00 00 61 06 00 00 61 06 00 00 61 06 00 00     a...a...a...a...
      6c:	61 06 00 00 81 0a 00 00 61 06 00 00 61 06 00 00     a.......a...a...
      7c:	1d 31 00 00 7d 27 00 00 e9 31 00 00 65 32 00 00     .1..}'...1..e2..
      8c:	65 33 00 00 ed 33 00 00 e5 32 00 00 75 34 00 00     e3...3...2..u4..
      9c:	29 25 00 00 2d 19 00 00 61 06 00 00 61 06 00 00     )%..-...a...a...
      ac:	61 06 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003f8 	.word	0x200003f8
      d4:	00000000 	.word	0x00000000
      d8:	00005a54 	.word	0x00005a54

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003fc 	.word	0x200003fc
     108:	00005a54 	.word	0x00005a54
     10c:	00005a54 	.word	0x00005a54
     110:	00000000 	.word	0x00000000

00000114 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     114:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     116:	6983      	ldr	r3, [r0, #24]
     118:	2b00      	cmp	r3, #0
     11a:	d000      	beq.n	11e <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     11c:	4798      	blx	r3
	}
}
     11e:	bd10      	pop	{r4, pc}

00000120 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     120:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     122:	69c3      	ldr	r3, [r0, #28]
     124:	2b00      	cmp	r3, #0
     126:	d000      	beq.n	12a <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     128:	4798      	blx	r3
	}
}
     12a:	bd10      	pop	{r4, pc}

0000012c <adc_async_channel_conversion_done>:
{
     12c:	b5f0      	push	{r4, r5, r6, r7, lr}
     12e:	b083      	sub	sp, #12
     130:	0005      	movs	r5, r0
     132:	000e      	movs	r6, r1
     134:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     136:	6a03      	ldr	r3, [r0, #32]
     138:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     13a:	0053      	lsls	r3, r2, #1
     13c:	189b      	adds	r3, r3, r2
     13e:	00dc      	lsls	r4, r3, #3
     140:	6a83      	ldr	r3, [r0, #40]	; 0x28
     142:	469c      	mov	ip, r3
     144:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     146:	1d27      	adds	r7, r4, #4
     148:	9101      	str	r1, [sp, #4]
     14a:	466b      	mov	r3, sp
     14c:	7919      	ldrb	r1, [r3, #4]
     14e:	0038      	movs	r0, r7
     150:	4b0c      	ldr	r3, [pc, #48]	; (184 <adc_async_channel_conversion_done+0x58>)
     152:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     154:	0028      	movs	r0, r5
     156:	4b0c      	ldr	r3, [pc, #48]	; (188 <adc_async_channel_conversion_done+0x5c>)
     158:	4798      	blx	r3
     15a:	2801      	cmp	r0, #1
     15c:	d907      	bls.n	16e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     15e:	9b01      	ldr	r3, [sp, #4]
     160:	0a19      	lsrs	r1, r3, #8
     162:	0038      	movs	r0, r7
     164:	4b07      	ldr	r3, [pc, #28]	; (184 <adc_async_channel_conversion_done+0x58>)
     166:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     168:	8aa3      	ldrh	r3, [r4, #20]
     16a:	3301      	adds	r3, #1
     16c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     16e:	8aa3      	ldrh	r3, [r4, #20]
     170:	3301      	adds	r3, #1
     172:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     174:	6823      	ldr	r3, [r4, #0]
     176:	2b00      	cmp	r3, #0
     178:	d002      	beq.n	180 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     17a:	0031      	movs	r1, r6
     17c:	0028      	movs	r0, r5
     17e:	4798      	blx	r3
}
     180:	b003      	add	sp, #12
     182:	bdf0      	pop	{r4, r5, r6, r7, pc}
     184:	0000174d 	.word	0x0000174d
     188:	00000537 	.word	0x00000537

0000018c <adc_async_init>:
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	46d6      	mov	lr, sl
     190:	b500      	push	{lr}
     192:	b082      	sub	sp, #8
     194:	0005      	movs	r5, r0
     196:	9101      	str	r1, [sp, #4]
     198:	0016      	movs	r6, r2
     19a:	001c      	movs	r4, r3
     19c:	ab08      	add	r3, sp, #32
     19e:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     1a0:	2800      	cmp	r0, #0
     1a2:	d00c      	beq.n	1be <adc_async_init+0x32>
     1a4:	2900      	cmp	r1, #0
     1a6:	d00c      	beq.n	1c2 <adc_async_init+0x36>
     1a8:	2a00      	cmp	r2, #0
     1aa:	d00c      	beq.n	1c6 <adc_async_init+0x3a>
     1ac:	2f00      	cmp	r7, #0
     1ae:	d00c      	beq.n	1ca <adc_async_init+0x3e>
     1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     1b2:	2b00      	cmp	r3, #0
     1b4:	d001      	beq.n	1ba <adc_async_init+0x2e>
     1b6:	2001      	movs	r0, #1
     1b8:	e008      	b.n	1cc <adc_async_init+0x40>
     1ba:	2000      	movs	r0, #0
     1bc:	e006      	b.n	1cc <adc_async_init+0x40>
     1be:	2000      	movs	r0, #0
     1c0:	e004      	b.n	1cc <adc_async_init+0x40>
     1c2:	2000      	movs	r0, #0
     1c4:	e002      	b.n	1cc <adc_async_init+0x40>
     1c6:	2000      	movs	r0, #0
     1c8:	e000      	b.n	1cc <adc_async_init+0x40>
     1ca:	2000      	movs	r0, #0
     1cc:	223f      	movs	r2, #63	; 0x3f
     1ce:	4916      	ldr	r1, [pc, #88]	; (228 <adc_async_init+0x9c>)
     1d0:	4b16      	ldr	r3, [pc, #88]	; (22c <adc_async_init+0xa0>)
     1d2:	469a      	mov	sl, r3
     1d4:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     1d6:	1c62      	adds	r2, r4, #1
     1d8:	0ffb      	lsrs	r3, r7, #31
     1da:	17d0      	asrs	r0, r2, #31
     1dc:	42ba      	cmp	r2, r7
     1de:	4158      	adcs	r0, r3
     1e0:	b2c0      	uxtb	r0, r0
     1e2:	2240      	movs	r2, #64	; 0x40
     1e4:	4910      	ldr	r1, [pc, #64]	; (228 <adc_async_init+0x9c>)
     1e6:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     1e8:	2300      	movs	r3, #0
     1ea:	e003      	b.n	1f4 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     1ec:	22ff      	movs	r2, #255	; 0xff
     1ee:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     1f0:	3301      	adds	r3, #1
     1f2:	b2db      	uxtb	r3, r3
     1f4:	42a3      	cmp	r3, r4
     1f6:	d9f9      	bls.n	1ec <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     1f8:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     1fa:	2324      	movs	r3, #36	; 0x24
     1fc:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     1fe:	3301      	adds	r3, #1
     200:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     202:	9b09      	ldr	r3, [sp, #36]	; 0x24
     204:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     206:	9901      	ldr	r1, [sp, #4]
     208:	0028      	movs	r0, r5
     20a:	4b09      	ldr	r3, [pc, #36]	; (230 <adc_async_init+0xa4>)
     20c:	4798      	blx	r3
	if (init_status) {
     20e:	2800      	cmp	r0, #0
     210:	d105      	bne.n	21e <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     212:	4b08      	ldr	r3, [pc, #32]	; (234 <adc_async_init+0xa8>)
     214:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     216:	4b08      	ldr	r3, [pc, #32]	; (238 <adc_async_init+0xac>)
     218:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     21a:	4b08      	ldr	r3, [pc, #32]	; (23c <adc_async_init+0xb0>)
     21c:	606b      	str	r3, [r5, #4]
}
     21e:	b002      	add	sp, #8
     220:	bc04      	pop	{r2}
     222:	4692      	mov	sl, r2
     224:	bdf0      	pop	{r4, r5, r6, r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00005768 	.word	0x00005768
     22c:	000016f9 	.word	0x000016f9
     230:	000004d1 	.word	0x000004d1
     234:	0000012d 	.word	0x0000012d
     238:	00000115 	.word	0x00000115
     23c:	00000121 	.word	0x00000121

00000240 <adc_async_register_channel_buffer>:
{
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
     242:	b083      	sub	sp, #12
     244:	0007      	movs	r7, r0
     246:	000c      	movs	r4, r1
     248:	9200      	str	r2, [sp, #0]
     24a:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     24c:	2800      	cmp	r0, #0
     24e:	d019      	beq.n	284 <adc_async_register_channel_buffer+0x44>
     250:	2a00      	cmp	r2, #0
     252:	d019      	beq.n	288 <adc_async_register_channel_buffer+0x48>
     254:	2b00      	cmp	r3, #0
     256:	d119      	bne.n	28c <adc_async_register_channel_buffer+0x4c>
     258:	2000      	movs	r0, #0
     25a:	4e24      	ldr	r6, [pc, #144]	; (2ec <adc_async_register_channel_buffer+0xac>)
     25c:	2266      	movs	r2, #102	; 0x66
     25e:	0031      	movs	r1, r6
     260:	4d23      	ldr	r5, [pc, #140]	; (2f0 <adc_async_register_channel_buffer+0xb0>)
     262:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     264:	2324      	movs	r3, #36	; 0x24
     266:	5cfb      	ldrb	r3, [r7, r3]
     268:	2000      	movs	r0, #0
     26a:	42a3      	cmp	r3, r4
     26c:	4140      	adcs	r0, r0
     26e:	b2c0      	uxtb	r0, r0
     270:	2267      	movs	r2, #103	; 0x67
     272:	0031      	movs	r1, r6
     274:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     276:	6a39      	ldr	r1, [r7, #32]
     278:	5d0b      	ldrb	r3, [r1, r4]
     27a:	2bff      	cmp	r3, #255	; 0xff
     27c:	d12c      	bne.n	2d8 <adc_async_register_channel_buffer+0x98>
     27e:	2600      	movs	r6, #0
     280:	2300      	movs	r3, #0
     282:	e007      	b.n	294 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     284:	2000      	movs	r0, #0
     286:	e7e8      	b.n	25a <adc_async_register_channel_buffer+0x1a>
     288:	2000      	movs	r0, #0
     28a:	e7e6      	b.n	25a <adc_async_register_channel_buffer+0x1a>
     28c:	2001      	movs	r0, #1
     28e:	e7e4      	b.n	25a <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     290:	3301      	adds	r3, #1
     292:	b2db      	uxtb	r3, r3
     294:	2224      	movs	r2, #36	; 0x24
     296:	5cba      	ldrb	r2, [r7, r2]
     298:	4293      	cmp	r3, r2
     29a:	d805      	bhi.n	2a8 <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     29c:	5cca      	ldrb	r2, [r1, r3]
     29e:	2aff      	cmp	r2, #255	; 0xff
     2a0:	d0f6      	beq.n	290 <adc_async_register_channel_buffer+0x50>
			index++;
     2a2:	3601      	adds	r6, #1
     2a4:	b2f6      	uxtb	r6, r6
     2a6:	e7f3      	b.n	290 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     2a8:	2325      	movs	r3, #37	; 0x25
     2aa:	5cfb      	ldrb	r3, [r7, r3]
     2ac:	429e      	cmp	r6, r3
     2ae:	d816      	bhi.n	2de <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     2b0:	0073      	lsls	r3, r6, #1
     2b2:	199b      	adds	r3, r3, r6
     2b4:	00dd      	lsls	r5, r3, #3
     2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     2b8:	1958      	adds	r0, r3, r5
     2ba:	3004      	adds	r0, #4
     2bc:	9a01      	ldr	r2, [sp, #4]
     2be:	9900      	ldr	r1, [sp, #0]
     2c0:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <adc_async_register_channel_buffer+0xb4>)
     2c2:	4798      	blx	r3
     2c4:	2800      	cmp	r0, #0
     2c6:	d10d      	bne.n	2e4 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     2c8:	6a3b      	ldr	r3, [r7, #32]
     2ca:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     2ce:	195b      	adds	r3, r3, r5
     2d0:	2200      	movs	r2, #0
     2d2:	829a      	strh	r2, [r3, #20]
}
     2d4:	b003      	add	sp, #12
     2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     2d8:	200d      	movs	r0, #13
     2da:	4240      	negs	r0, r0
     2dc:	e7fa      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     2de:	201c      	movs	r0, #28
     2e0:	4240      	negs	r0, r0
     2e2:	e7f7      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     2e4:	200d      	movs	r0, #13
     2e6:	4240      	negs	r0, r0
     2e8:	e7f4      	b.n	2d4 <adc_async_register_channel_buffer+0x94>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	00005768 	.word	0x00005768
     2f0:	000016f9 	.word	0x000016f9
     2f4:	00001701 	.word	0x00001701

000002f8 <adc_async_enable_channel>:
{
     2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2fa:	0006      	movs	r6, r0
     2fc:	000c      	movs	r4, r1
	ASSERT(descr);
     2fe:	4d0b      	ldr	r5, [pc, #44]	; (32c <adc_async_enable_channel+0x34>)
     300:	1e43      	subs	r3, r0, #1
     302:	4198      	sbcs	r0, r3
     304:	b2c0      	uxtb	r0, r0
     306:	2283      	movs	r2, #131	; 0x83
     308:	0029      	movs	r1, r5
     30a:	4f09      	ldr	r7, [pc, #36]	; (330 <adc_async_enable_channel+0x38>)
     30c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     30e:	2324      	movs	r3, #36	; 0x24
     310:	5cf3      	ldrb	r3, [r6, r3]
     312:	2000      	movs	r0, #0
     314:	42a3      	cmp	r3, r4
     316:	4140      	adcs	r0, r0
     318:	b2c0      	uxtb	r0, r0
     31a:	2284      	movs	r2, #132	; 0x84
     31c:	0029      	movs	r1, r5
     31e:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     320:	0021      	movs	r1, r4
     322:	0030      	movs	r0, r6
     324:	4b03      	ldr	r3, [pc, #12]	; (334 <adc_async_enable_channel+0x3c>)
     326:	4798      	blx	r3
}
     328:	2000      	movs	r0, #0
     32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     32c:	00005768 	.word	0x00005768
     330:	000016f9 	.word	0x000016f9
     334:	00000529 	.word	0x00000529

00000338 <adc_async_set_inputs>:
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	b083      	sub	sp, #12
     33c:	0006      	movs	r6, r0
     33e:	9100      	str	r1, [sp, #0]
     340:	9201      	str	r2, [sp, #4]
     342:	001c      	movs	r4, r3
	ASSERT(descr);
     344:	4d0c      	ldr	r5, [pc, #48]	; (378 <adc_async_set_inputs+0x40>)
     346:	1e43      	subs	r3, r0, #1
     348:	4198      	sbcs	r0, r3
     34a:	b2c0      	uxtb	r0, r0
     34c:	22f5      	movs	r2, #245	; 0xf5
     34e:	0029      	movs	r1, r5
     350:	4f0a      	ldr	r7, [pc, #40]	; (37c <adc_async_set_inputs+0x44>)
     352:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     354:	2324      	movs	r3, #36	; 0x24
     356:	5cf3      	ldrb	r3, [r6, r3]
     358:	2000      	movs	r0, #0
     35a:	42a3      	cmp	r3, r4
     35c:	4140      	adcs	r0, r0
     35e:	b2c0      	uxtb	r0, r0
     360:	22f6      	movs	r2, #246	; 0xf6
     362:	0029      	movs	r1, r5
     364:	47b8      	blx	r7
	_adc_async_set_inputs(&descr->device, pos_input, neg_input, channel);
     366:	0023      	movs	r3, r4
     368:	9a01      	ldr	r2, [sp, #4]
     36a:	9900      	ldr	r1, [sp, #0]
     36c:	0030      	movs	r0, r6
     36e:	4c04      	ldr	r4, [pc, #16]	; (380 <adc_async_set_inputs+0x48>)
     370:	47a0      	blx	r4
}
     372:	2000      	movs	r0, #0
     374:	b003      	add	sp, #12
     376:	bdf0      	pop	{r4, r5, r6, r7, pc}
     378:	00005768 	.word	0x00005768
     37c:	000016f9 	.word	0x000016f9
     380:	00000555 	.word	0x00000555

00000384 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     384:	2000      	movs	r0, #0
     386:	4770      	bx	lr

00000388 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     388:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     38a:	4b0b      	ldr	r3, [pc, #44]	; (3b8 <_adc_get_regs+0x30>)
     38c:	4798      	blx	r3
     38e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     390:	2000      	movs	r0, #0
     392:	2800      	cmp	r0, #0
     394:	d006      	beq.n	3a4 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     396:	227f      	movs	r2, #127	; 0x7f
     398:	4908      	ldr	r1, [pc, #32]	; (3bc <_adc_get_regs+0x34>)
     39a:	2000      	movs	r0, #0
     39c:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_adc_get_regs+0x38>)
     39e:	4798      	blx	r3
	return 0;
     3a0:	2000      	movs	r0, #0
}
     3a2:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     3a4:	00c3      	lsls	r3, r0, #3
     3a6:	1a1b      	subs	r3, r3, r0
     3a8:	0099      	lsls	r1, r3, #2
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <_adc_get_regs+0x3c>)
     3ac:	5ccb      	ldrb	r3, [r1, r3]
     3ae:	429a      	cmp	r2, r3
     3b0:	d0f7      	beq.n	3a2 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     3b2:	3001      	adds	r0, #1
     3b4:	b2c0      	uxtb	r0, r0
     3b6:	e7ec      	b.n	392 <_adc_get_regs+0xa>
     3b8:	00000385 	.word	0x00000385
     3bc:	0000579c 	.word	0x0000579c
     3c0:	000016f9 	.word	0x000016f9
     3c4:	00005780 	.word	0x00005780

000003c8 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	0004      	movs	r4, r0
     3cc:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     3ce:	4b3a      	ldr	r3, [pc, #232]	; (4b8 <STACK_SIZE+0xb8>)
     3d0:	18c0      	adds	r0, r0, r3
     3d2:	4243      	negs	r3, r0
     3d4:	4158      	adcs	r0, r3
     3d6:	b2c0      	uxtb	r0, r0
     3d8:	2294      	movs	r2, #148	; 0x94
     3da:	4938      	ldr	r1, [pc, #224]	; (4bc <STACK_SIZE+0xbc>)
     3dc:	4b38      	ldr	r3, [pc, #224]	; (4c0 <STACK_SIZE+0xc0>)
     3de:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     3e0:	4b38      	ldr	r3, [pc, #224]	; (4c4 <STACK_SIZE+0xc4>)
     3e2:	681a      	ldr	r2, [r3, #0]
     3e4:	08d2      	lsrs	r2, r2, #3
     3e6:	0212      	lsls	r2, r2, #8
     3e8:	23e0      	movs	r3, #224	; 0xe0
     3ea:	00db      	lsls	r3, r3, #3
     3ec:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     3ee:	4936      	ldr	r1, [pc, #216]	; (4c8 <STACK_SIZE+0xc8>)
     3f0:	680b      	ldr	r3, [r1, #0]
     3f2:	6849      	ldr	r1, [r1, #4]
     3f4:	0149      	lsls	r1, r1, #5
     3f6:	0edb      	lsrs	r3, r3, #27
     3f8:	430b      	orrs	r3, r1
     3fa:	21ff      	movs	r1, #255	; 0xff
     3fc:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     3fe:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     400:	7e63      	ldrb	r3, [r4, #25]
     402:	09db      	lsrs	r3, r3, #7
     404:	d1fc      	bne.n	400 <STACK_SIZE>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     406:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     408:	079b      	lsls	r3, r3, #30
     40a:	d504      	bpl.n	416 <STACK_SIZE+0x16>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     40c:	2300      	movs	r3, #0
     40e:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     410:	7e63      	ldrb	r3, [r4, #25]
     412:	09db      	lsrs	r3, r3, #7
     414:	d1fc      	bne.n	410 <STACK_SIZE+0x10>
	((Adc *)hw)->CTRLA.reg = data;
     416:	2301      	movs	r3, #1
     418:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     41a:	7e63      	ldrb	r3, [r4, #25]
     41c:	09db      	lsrs	r3, r3, #7
     41e:	d1fc      	bne.n	41a <STACK_SIZE+0x1a>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     420:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     422:	00ea      	lsls	r2, r5, #3
     424:	1b52      	subs	r2, r2, r5
     426:	0091      	lsls	r1, r2, #2
     428:	4b28      	ldr	r3, [pc, #160]	; (4cc <STACK_SIZE+0xcc>)
     42a:	185b      	adds	r3, r3, r1
     42c:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     42e:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     430:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     432:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     434:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     436:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     438:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     43a:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     43c:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     43e:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     440:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     442:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     444:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     446:	222a      	movs	r2, #42	; 0x2a
     448:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     44a:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     44c:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     44e:	7e63      	ldrb	r3, [r4, #25]
     450:	09db      	lsrs	r3, r3, #7
     452:	d1fc      	bne.n	44e <STACK_SIZE+0x4e>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     454:	00eb      	lsls	r3, r5, #3
     456:	1b5b      	subs	r3, r3, r5
     458:	009a      	lsls	r2, r3, #2
     45a:	4b1c      	ldr	r3, [pc, #112]	; (4cc <STACK_SIZE+0xcc>)
     45c:	189b      	adds	r3, r3, r2
     45e:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     460:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     462:	7e63      	ldrb	r3, [r4, #25]
     464:	09db      	lsrs	r3, r3, #7
     466:	d1fc      	bne.n	462 <STACK_SIZE+0x62>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     468:	00eb      	lsls	r3, r5, #3
     46a:	1b5b      	subs	r3, r3, r5
     46c:	009a      	lsls	r2, r3, #2
     46e:	4b17      	ldr	r3, [pc, #92]	; (4cc <STACK_SIZE+0xcc>)
     470:	189b      	adds	r3, r3, r2
     472:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     474:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     476:	7e63      	ldrb	r3, [r4, #25]
     478:	09db      	lsrs	r3, r3, #7
     47a:	d1fc      	bne.n	476 <STACK_SIZE+0x76>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     47c:	00eb      	lsls	r3, r5, #3
     47e:	1b5b      	subs	r3, r3, r5
     480:	009a      	lsls	r2, r3, #2
     482:	4b12      	ldr	r3, [pc, #72]	; (4cc <STACK_SIZE+0xcc>)
     484:	189b      	adds	r3, r3, r2
     486:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     488:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     48a:	7e63      	ldrb	r3, [r4, #25]
     48c:	09db      	lsrs	r3, r3, #7
     48e:	d1fc      	bne.n	48a <STACK_SIZE+0x8a>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     490:	00eb      	lsls	r3, r5, #3
     492:	1b5b      	subs	r3, r3, r5
     494:	009a      	lsls	r2, r3, #2
     496:	4b0d      	ldr	r3, [pc, #52]	; (4cc <STACK_SIZE+0xcc>)
     498:	189b      	adds	r3, r3, r2
     49a:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     49c:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     49e:	7e63      	ldrb	r3, [r4, #25]
     4a0:	09db      	lsrs	r3, r3, #7
     4a2:	d1fc      	bne.n	49e <STACK_SIZE+0x9e>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     4a4:	00eb      	lsls	r3, r5, #3
     4a6:	1b5d      	subs	r5, r3, r5
     4a8:	00aa      	lsls	r2, r5, #2
     4aa:	4b08      	ldr	r3, [pc, #32]	; (4cc <STACK_SIZE+0xcc>)
     4ac:	189b      	adds	r3, r3, r2
     4ae:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
     4b0:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     4b2:	2000      	movs	r0, #0
     4b4:	bd70      	pop	{r4, r5, r6, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	bdffc000 	.word	0xbdffc000
     4bc:	0000579c 	.word	0x0000579c
     4c0:	000016f9 	.word	0x000016f9
     4c4:	00806024 	.word	0x00806024
     4c8:	00806020 	.word	0x00806020
     4cc:	00005780 	.word	0x00005780

000004d0 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	0005      	movs	r5, r0
     4d4:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
     4d6:	1e43      	subs	r3, r0, #1
     4d8:	4198      	sbcs	r0, r3
     4da:	b2c0      	uxtb	r0, r0
     4dc:	22d3      	movs	r2, #211	; 0xd3
     4de:	490d      	ldr	r1, [pc, #52]	; (514 <_adc_async_init+0x44>)
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <_adc_async_init+0x48>)
     4e2:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     4e4:	0020      	movs	r0, r4
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <_adc_async_init+0x4c>)
     4e8:	4798      	blx	r3
     4ea:	0001      	movs	r1, r0
     4ec:	0020      	movs	r0, r4
     4ee:	4b0c      	ldr	r3, [pc, #48]	; (520 <_adc_async_init+0x50>)
     4f0:	4798      	blx	r3
	if (init_status) {
     4f2:	2800      	cmp	r0, #0
     4f4:	d10d      	bne.n	512 <_adc_async_init+0x42>
		return init_status;
	}
	device->hw = hw;
     4f6:	616c      	str	r4, [r5, #20]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     4f8:	4b0a      	ldr	r3, [pc, #40]	; (524 <_adc_async_init+0x54>)
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	0412      	lsls	r2, r2, #16
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     506:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     50a:	3101      	adds	r1, #1
     50c:	31ff      	adds	r1, #255	; 0xff
     50e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     510:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(ADC_IRQn);
	NVIC_ClearPendingIRQ(ADC_IRQn);
	NVIC_EnableIRQ(ADC_IRQn);

	return ERR_NONE;
}
     512:	bd70      	pop	{r4, r5, r6, pc}
     514:	0000579c 	.word	0x0000579c
     518:	000016f9 	.word	0x000016f9
     51c:	00000389 	.word	0x00000389
     520:	000003c9 	.word	0x000003c9
     524:	e000e100 	.word	0xe000e100

00000528 <_adc_async_enable_channel>:
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     528:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     52a:	7813      	ldrb	r3, [r2, #0]
     52c:	2102      	movs	r1, #2
     52e:	430b      	orrs	r3, r1
     530:	b2db      	uxtb	r3, r3
     532:	7013      	strb	r3, [r2, #0]
}
     534:	4770      	bx	lr

00000536 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     536:	6942      	ldr	r2, [r0, #20]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     538:	7e53      	ldrb	r3, [r2, #25]
     53a:	09db      	lsrs	r3, r3, #7
     53c:	d1fc      	bne.n	538 <_adc_async_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
     53e:	8892      	ldrh	r2, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
     540:	0912      	lsrs	r2, r2, #4
     542:	3303      	adds	r3, #3
     544:	4013      	ands	r3, r2
     546:	2b03      	cmp	r3, #3
     548:	d001      	beq.n	54e <_adc_async_get_data_size+0x18>
     54a:	2002      	movs	r0, #2
}
     54c:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     54e:	2001      	movs	r0, #1
     550:	e7fc      	b.n	54c <_adc_async_get_data_size+0x16>
	...

00000554 <_adc_async_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_async_set_inputs(struct _adc_async_device *const device, const adc_pos_input_t pos_input,
                           const adc_neg_input_t neg_input, const uint8_t channel)
{
     554:	b530      	push	{r4, r5, lr}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
     556:	6944      	ldr	r4, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     558:	6923      	ldr	r3, [r4, #16]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
     55a:	251f      	movs	r5, #31
     55c:	43ab      	bics	r3, r5
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
     55e:	4029      	ands	r1, r5
     560:	4319      	orrs	r1, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     562:	6121      	str	r1, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     564:	7e63      	ldrb	r3, [r4, #25]
     566:	09db      	lsrs	r3, r3, #7
     568:	d1fc      	bne.n	564 <_adc_async_set_inputs+0x10>
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
     56a:	6941      	ldr	r1, [r0, #20]
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
     56c:	690b      	ldr	r3, [r1, #16]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
     56e:	4806      	ldr	r0, [pc, #24]	; (588 <_adc_async_set_inputs+0x34>)
     570:	4003      	ands	r3, r0
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
     572:	0212      	lsls	r2, r2, #8
     574:	20f8      	movs	r0, #248	; 0xf8
     576:	0140      	lsls	r0, r0, #5
     578:	4002      	ands	r2, r0
     57a:	431a      	orrs	r2, r3
	((Adc *)hw)->INPUTCTRL.reg = tmp;
     57c:	610a      	str	r2, [r1, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     57e:	7e4b      	ldrb	r3, [r1, #25]
     580:	09db      	lsrs	r3, r3, #7
     582:	d1fc      	bne.n	57e <_adc_async_set_inputs+0x2a>
}
     584:	bd30      	pop	{r4, r5, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	ffffe0ff 	.word	0xffffe0ff

0000058c <adc_init>:
struct adc_async_channel_descriptor ADC_0_ch[ADC_0_CH_AMOUNT];

static uint8_t ADC_0_buffer[ADC_0_BUFFER_SIZE];
static uint8_t ADC_0_map[ADC_0_CH_MAX + 1];

void adc_init() {
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
     58e:	b085      	sub	sp, #20
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     590:	4a24      	ldr	r2, [pc, #144]	; (624 <adc_init+0x98>)
     592:	6a11      	ldr	r1, [r2, #32]
     594:	2380      	movs	r3, #128	; 0x80
     596:	025b      	lsls	r3, r3, #9
     598:	430b      	orrs	r3, r1
     59a:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     59c:	4a22      	ldr	r2, [pc, #136]	; (628 <adc_init+0x9c>)
     59e:	4b23      	ldr	r3, [pc, #140]	; (62c <adc_init+0xa0>)
     5a0:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     5a2:	4d23      	ldr	r5, [pc, #140]	; (630 <adc_init+0xa4>)
     5a4:	4e23      	ldr	r6, [pc, #140]	; (634 <adc_init+0xa8>)
     5a6:	2300      	movs	r3, #0
     5a8:	9302      	str	r3, [sp, #8]
     5aa:	4b23      	ldr	r3, [pc, #140]	; (638 <adc_init+0xac>)
     5ac:	9301      	str	r3, [sp, #4]
     5ae:	2401      	movs	r4, #1
     5b0:	9400      	str	r4, [sp, #0]
     5b2:	2300      	movs	r3, #0
     5b4:	002a      	movs	r2, r5
     5b6:	4921      	ldr	r1, [pc, #132]	; (63c <adc_init+0xb0>)
     5b8:	0030      	movs	r0, r6
     5ba:	4f21      	ldr	r7, [pc, #132]	; (640 <adc_init+0xb4>)
     5bc:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     5be:	1d2a      	adds	r2, r5, #4
     5c0:	2310      	movs	r3, #16
     5c2:	2100      	movs	r1, #0
     5c4:	0030      	movs	r0, r6
     5c6:	4d1f      	ldr	r5, [pc, #124]	; (644 <adc_init+0xb8>)
     5c8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ca:	26c0      	movs	r6, #192	; 0xc0
     5cc:	05f6      	lsls	r6, r6, #23
     5ce:	2304      	movs	r3, #4
     5d0:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d2:	4b1d      	ldr	r3, [pc, #116]	; (648 <adc_init+0xbc>)
     5d4:	4a1d      	ldr	r2, [pc, #116]	; (64c <adc_init+0xc0>)
     5d6:	629a      	str	r2, [r3, #40]	; 0x28
     5d8:	22c0      	movs	r2, #192	; 0xc0
     5da:	0612      	lsls	r2, r2, #24
     5dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	2042      	movs	r0, #66	; 0x42
     5e0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	2501      	movs	r5, #1
     5e6:	4329      	orrs	r1, r5
     5e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ec:	3811      	subs	r0, #17
     5ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f0:	270f      	movs	r7, #15
     5f2:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     5f4:	4329      	orrs	r1, r5
     5f6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fa:	2108      	movs	r1, #8
     5fc:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5fe:	4914      	ldr	r1, [pc, #80]	; (650 <adc_init+0xc4>)
     600:	6299      	str	r1, [r3, #40]	; 0x28
     602:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     604:	2143      	movs	r1, #67	; 0x43
     606:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     608:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60a:	432a      	orrs	r2, r5
     60c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     610:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     612:	3934      	subs	r1, #52	; 0x34
     614:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     616:	2110      	movs	r1, #16
     618:	430a      	orrs	r2, r1
     61a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61c:	541a      	strb	r2, [r3, r0]

	// Disable digital pin circuitry
	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
     61e:	b005      	add	sp, #20
     620:	bdf0      	pop	{r4, r5, r6, r7, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	40000400 	.word	0x40000400
     628:	0000401e 	.word	0x0000401e
     62c:	40000c00 	.word	0x40000c00
     630:	20000414 	.word	0x20000414
     634:	20000474 	.word	0x20000474
     638:	200004a0 	.word	0x200004a0
     63c:	42004000 	.word	0x42004000
     640:	0000018d 	.word	0x0000018d
     644:	00000241 	.word	0x00000241
     648:	41004400 	.word	0x41004400
     64c:	40000004 	.word	0x40000004
     650:	40000008 	.word	0x40000008

00000654 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     654:	b510      	push	{r4, lr}
	system_init();
     656:	4b01      	ldr	r3, [pc, #4]	; (65c <atmel_start_init+0x8>)
     658:	4798      	blx	r3
}
     65a:	bd10      	pop	{r4, pc}
     65c:	0000108d 	.word	0x0000108d

00000660 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     660:	e7fe      	b.n	660 <Dummy_Handler>
	...

00000664 <Reset_Handler>:
{
     664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     666:	4a23      	ldr	r2, [pc, #140]	; (6f4 <Reset_Handler+0x90>)
     668:	4b23      	ldr	r3, [pc, #140]	; (6f8 <Reset_Handler+0x94>)
     66a:	429a      	cmp	r2, r3
     66c:	d009      	beq.n	682 <Reset_Handler+0x1e>
     66e:	4b22      	ldr	r3, [pc, #136]	; (6f8 <Reset_Handler+0x94>)
     670:	4a20      	ldr	r2, [pc, #128]	; (6f4 <Reset_Handler+0x90>)
     672:	e003      	b.n	67c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     674:	6811      	ldr	r1, [r2, #0]
     676:	6019      	str	r1, [r3, #0]
     678:	3304      	adds	r3, #4
     67a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     67c:	491f      	ldr	r1, [pc, #124]	; (6fc <Reset_Handler+0x98>)
     67e:	428b      	cmp	r3, r1
     680:	d3f8      	bcc.n	674 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     682:	4b1f      	ldr	r3, [pc, #124]	; (700 <Reset_Handler+0x9c>)
     684:	e002      	b.n	68c <Reset_Handler+0x28>
                *pDest++ = 0;
     686:	2200      	movs	r2, #0
     688:	601a      	str	r2, [r3, #0]
     68a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     68c:	4a1d      	ldr	r2, [pc, #116]	; (704 <Reset_Handler+0xa0>)
     68e:	4293      	cmp	r3, r2
     690:	d3f9      	bcc.n	686 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     692:	4a1d      	ldr	r2, [pc, #116]	; (708 <Reset_Handler+0xa4>)
     694:	21ff      	movs	r1, #255	; 0xff
     696:	4b1d      	ldr	r3, [pc, #116]	; (70c <Reset_Handler+0xa8>)
     698:	438b      	bics	r3, r1
     69a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     69c:	39fd      	subs	r1, #253	; 0xfd
     69e:	2390      	movs	r3, #144	; 0x90
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	4a1b      	ldr	r2, [pc, #108]	; (710 <Reset_Handler+0xac>)
     6a4:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     6a6:	4a1b      	ldr	r2, [pc, #108]	; (714 <Reset_Handler+0xb0>)
     6a8:	78d3      	ldrb	r3, [r2, #3]
     6aa:	2503      	movs	r5, #3
     6ac:	43ab      	bics	r3, r5
     6ae:	2402      	movs	r4, #2
     6b0:	4323      	orrs	r3, r4
     6b2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     6b4:	78d3      	ldrb	r3, [r2, #3]
     6b6:	270c      	movs	r7, #12
     6b8:	43bb      	bics	r3, r7
     6ba:	2608      	movs	r6, #8
     6bc:	4333      	orrs	r3, r6
     6be:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     6c0:	4b15      	ldr	r3, [pc, #84]	; (718 <Reset_Handler+0xb4>)
     6c2:	7b98      	ldrb	r0, [r3, #14]
     6c4:	2230      	movs	r2, #48	; 0x30
     6c6:	4390      	bics	r0, r2
     6c8:	2220      	movs	r2, #32
     6ca:	4310      	orrs	r0, r2
     6cc:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     6ce:	7b99      	ldrb	r1, [r3, #14]
     6d0:	43b9      	bics	r1, r7
     6d2:	4331      	orrs	r1, r6
     6d4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     6d6:	7b9a      	ldrb	r2, [r3, #14]
     6d8:	43aa      	bics	r2, r5
     6da:	4322      	orrs	r2, r4
     6dc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     6de:	4a0f      	ldr	r2, [pc, #60]	; (71c <Reset_Handler+0xb8>)
     6e0:	6851      	ldr	r1, [r2, #4]
     6e2:	2380      	movs	r3, #128	; 0x80
     6e4:	430b      	orrs	r3, r1
     6e6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <Reset_Handler+0xbc>)
     6ea:	4798      	blx	r3
        main();
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <Reset_Handler+0xc0>)
     6ee:	4798      	blx	r3
     6f0:	e7fe      	b.n	6f0 <Reset_Handler+0x8c>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00005a54 	.word	0x00005a54
     6f8:	20000000 	.word	0x20000000
     6fc:	200003f4 	.word	0x200003f4
     700:	200003f8 	.word	0x200003f8
     704:	20000524 	.word	0x20000524
     708:	e000ed00 	.word	0xe000ed00
     70c:	00000000 	.word	0x00000000
     710:	41007000 	.word	0x41007000
     714:	41005000 	.word	0x41005000
     718:	41004800 	.word	0x41004800
     71c:	41004000 	.word	0x41004000
     720:	00005721 	.word	0x00005721
     724:	00002c91 	.word	0x00002c91

00000728 <dip_switch_read_group>:
volatile uint16_t dip_switch_dac_data = 1 << (DIP_SWITCH_BITS_PER_CHANNEL - 1);
volatile uint8_t dip_switch_block = 0;
volatile uint16_t dip_switch_data = 0;


uint8_t dip_switch_read_group(uint16_t data) {
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	0006      	movs	r6, r0
	uint8_t result = 0;
	uint8_t pos = 0;
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     72c:	2103      	movs	r1, #3
	uint8_t pos = 0;
     72e:	2200      	movs	r2, #0
	uint8_t result = 0;
     730:	2000      	movs	r0, #0
	for (int i = DIP_SWITCH_BITS-1; i >= 0; i--) {
     732:	e000      	b.n	736 <dip_switch_read_group+0xe>
     734:	3901      	subs	r1, #1
     736:	2900      	cmp	r1, #0
     738:	db13      	blt.n	762 <dip_switch_read_group+0x3a>
		pos |= 1 << i;
     73a:	2301      	movs	r3, #1
     73c:	408b      	lsls	r3, r1
     73e:	b25b      	sxtb	r3, r3
     740:	431a      	orrs	r2, r3
     742:	b255      	sxtb	r5, r2
     744:	b2ea      	uxtb	r2, r5
		if (data < DIP_SWITCH_THRESHOLDS[pos]) {
     746:	0057      	lsls	r7, r2, #1
     748:	4c06      	ldr	r4, [pc, #24]	; (764 <dip_switch_read_group+0x3c>)
     74a:	5b3c      	ldrh	r4, [r7, r4]
     74c:	42b4      	cmp	r4, r6
     74e:	d9f1      	bls.n	734 <dip_switch_read_group+0xc>
			result |= 1 << (DIP_SWITCH_BITS - i - 1);
     750:	2203      	movs	r2, #3
     752:	1a52      	subs	r2, r2, r1
     754:	2401      	movs	r4, #1
     756:	4094      	lsls	r4, r2
     758:	4320      	orrs	r0, r4
     75a:	b2c0      	uxtb	r0, r0
			pos ^= 1 << i;
     75c:	406b      	eors	r3, r5
     75e:	b2da      	uxtb	r2, r3
     760:	e7e8      	b.n	734 <dip_switch_read_group+0xc>
		}
	}
	
	return result;
}
     762:	bdf0      	pop	{r4, r5, r6, r7, pc}
     764:	000057b0 	.word	0x000057b0

00000768 <dip_switch_data_read>:

void dip_switch_data_read(const uint16_t data) {
     768:	b510      	push	{r4, lr}
	uint8_t nibble = dip_switch_read_group(data);
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <dip_switch_data_read+0x6c>)
     76c:	4798      	blx	r3
	if (!dip_switch_block) {
     76e:	4b1a      	ldr	r3, [pc, #104]	; (7d8 <dip_switch_data_read+0x70>)
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d102      	bne.n	77c <dip_switch_data_read+0x14>
		dip_switch_data = 0;
     776:	2200      	movs	r2, #0
     778:	4b17      	ldr	r3, [pc, #92]	; (7d8 <dip_switch_data_read+0x70>)
     77a:	805a      	strh	r2, [r3, #2]
	}
	dip_switch_data |= nibble << ((DIP_SWITCH_BLOCKS - dip_switch_block - 1) * DIP_SWITCH_BITS);
     77c:	4c16      	ldr	r4, [pc, #88]	; (7d8 <dip_switch_data_read+0x70>)
     77e:	7822      	ldrb	r2, [r4, #0]
     780:	2302      	movs	r3, #2
     782:	1a9b      	subs	r3, r3, r2
     784:	009b      	lsls	r3, r3, #2
     786:	4098      	lsls	r0, r3
     788:	0003      	movs	r3, r0
     78a:	8860      	ldrh	r0, [r4, #2]
     78c:	4318      	orrs	r0, r3
     78e:	b280      	uxth	r0, r0
     790:	8060      	strh	r0, [r4, #2]
	dip_switch_block = (dip_switch_block + 1) % DIP_SWITCH_BLOCKS;
     792:	7820      	ldrb	r0, [r4, #0]
     794:	3001      	adds	r0, #1
     796:	2103      	movs	r1, #3
     798:	4b10      	ldr	r3, [pc, #64]	; (7dc <dip_switch_data_read+0x74>)
     79a:	4798      	blx	r3
     79c:	b2c9      	uxtb	r1, r1
     79e:	7021      	strb	r1, [r4, #0]

	ac_async_set_positive_input(&AC_0, 0, DIP_SWITCH_BLOCK_TO_AC_MUXPOS_PIN(dip_switch_block));
     7a0:	7822      	ldrb	r2, [r4, #0]
	tmp |= AC_COMPCTRL_MUXPOS(data);
	((Ac *)hw)->COMPCTRL[index].reg = tmp;
}

static inline void _ac_async_set_positive_input(struct _ac_async_device *const device, uint8_t comp, hri_ac_compctrl_reg_t muxpos) {
	hri_ac_clear_COMPCTRL_ENABLE_bit_no_lock(device->hw, comp);
     7a2:	4b0f      	ldr	r3, [pc, #60]	; (7e0 <dip_switch_data_read+0x78>)
     7a4:	68d9      	ldr	r1, [r3, #12]
	((Ac *)hw)->COMPCTRL[index].reg &= ~AC_COMPCTRL_ENABLE;
     7a6:	690b      	ldr	r3, [r1, #16]
     7a8:	2001      	movs	r0, #1
     7aa:	4383      	bics	r3, r0
     7ac:	610b      	str	r3, [r1, #16]
	tmp = ((Ac *)hw)->COMPCTRL[index].reg;
     7ae:	690b      	ldr	r3, [r1, #16]
	tmp &= ~AC_COMPCTRL_MUXPOS_Msk;
     7b0:	480c      	ldr	r0, [pc, #48]	; (7e4 <dip_switch_data_read+0x7c>)
     7b2:	4003      	ands	r3, r0
	tmp |= AC_COMPCTRL_MUXPOS(data);
     7b4:	0312      	lsls	r2, r2, #12
     7b6:	20c0      	movs	r0, #192	; 0xc0
     7b8:	0180      	lsls	r0, r0, #6
     7ba:	4002      	ands	r2, r0
     7bc:	4313      	orrs	r3, r2
	((Ac *)hw)->COMPCTRL[index].reg = tmp;
     7be:	610b      	str	r3, [r1, #16]
	
	if (!dip_switch_block) {
     7c0:	7823      	ldrb	r3, [r4, #0]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d000      	beq.n	7c8 <dip_switch_data_read+0x60>
		dip_switch_data_ready(dip_switch_data);
	}
}
     7c6:	bd10      	pop	{r4, pc}
		dip_switch_data_ready(dip_switch_data);
     7c8:	8860      	ldrh	r0, [r4, #2]
     7ca:	b280      	uxth	r0, r0
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <dip_switch_data_read+0x80>)
     7ce:	4798      	blx	r3
}
     7d0:	e7f9      	b.n	7c6 <dip_switch_data_read+0x5e>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000729 	.word	0x00000729
     7d8:	20000428 	.word	0x20000428
     7dc:	000038a5 	.word	0x000038a5
     7e0:	200004e8 	.word	0x200004e8
     7e4:	ffffcfff 	.word	0xffffcfff
     7e8:	00002af1 	.word	0x00002af1

000007ec <dip_switch_comparison_ready>:

//volatile bool comparisonStarted = false;

void dip_switch_comparison_ready(const struct ac_async_descriptor *const descr, const uint8_t comp, const uint8_t result) {
     7ec:	b510      	push	{r4, lr}
	//gpio_set_pin_level(LED1, false);

	dip_switch_dac_data ^= ((uint16_t) (!result)) << dip_switch_bit_pos;
     7ee:	4253      	negs	r3, r2
     7f0:	415a      	adcs	r2, r3
     7f2:	4917      	ldr	r1, [pc, #92]	; (850 <dip_switch_comparison_ready+0x64>)
     7f4:	780b      	ldrb	r3, [r1, #0]
     7f6:	b2db      	uxtb	r3, r3
     7f8:	409a      	lsls	r2, r3
     7fa:	0013      	movs	r3, r2
     7fc:	884a      	ldrh	r2, [r1, #2]
     7fe:	405a      	eors	r2, r3
     800:	b292      	uxth	r2, r2
     802:	804a      	strh	r2, [r1, #2]
	
	
	if (dip_switch_bit_pos) {
     804:	780b      	ldrb	r3, [r1, #0]
     806:	2b00      	cmp	r3, #0
     808:	d018      	beq.n	83c <dip_switch_comparison_ready+0x50>
		dip_switch_bit_pos--;
     80a:	780b      	ldrb	r3, [r1, #0]
     80c:	3b01      	subs	r3, #1
     80e:	b2db      	uxtb	r3, r3
     810:	700b      	strb	r3, [r1, #0]
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
		dip_switch_data_read(dip_switch_dac_data);
		dip_switch_dac_data = 0;
	}

	dip_switch_dac_data |= 1 << dip_switch_bit_pos;
     812:	4a0f      	ldr	r2, [pc, #60]	; (850 <dip_switch_comparison_ready+0x64>)
     814:	7811      	ldrb	r1, [r2, #0]
     816:	b2c9      	uxtb	r1, r1
     818:	2301      	movs	r3, #1
     81a:	408b      	lsls	r3, r1
     81c:	0019      	movs	r1, r3
     81e:	8853      	ldrh	r3, [r2, #2]
     820:	430b      	orrs	r3, r1
     822:	b29b      	uxth	r3, r3
     824:	8053      	strh	r3, [r2, #2]
	uint16_t dac_data = dip_switch_dac_data;
     826:	8853      	ldrh	r3, [r2, #2]
     828:	b29b      	uxth	r3, r3
#ifndef DAC_UTIL_H_
#define DAC_UTIL_H_

static inline void hri_dac_write_DATA_reg_no_lock(const void *const hw, hri_dac_data_reg_t data)
{
	((Dac *)hw)->DATA.reg = data;
     82a:	4a0a      	ldr	r2, [pc, #40]	; (854 <dip_switch_comparison_ready+0x68>)
     82c:	8113      	strh	r3, [r2, #8]
#define RTC_UTIL_H_


static inline void hri_rtcmode0_set_CTRL_ENABLE_bit_no_lock(const void *const hw)
{
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     82e:	4a0a      	ldr	r2, [pc, #40]	; (858 <dip_switch_comparison_ready+0x6c>)
     830:	8813      	ldrh	r3, [r2, #0]
     832:	2102      	movs	r1, #2
     834:	430b      	orrs	r3, r1
     836:	b29b      	uxth	r3, r3
     838:	8013      	strh	r3, [r2, #0]
	
	//start timer to wait for the sample to be ready
	hri_rtcmode0_set_CTRL_ENABLE_bit_no_lock(RTC);

	//gpio_set_pin_level(LED1, true);
}
     83a:	bd10      	pop	{r4, pc}
		dip_switch_bit_pos = DIP_SWITCH_BITS_PER_CHANNEL - 1;
     83c:	4c04      	ldr	r4, [pc, #16]	; (850 <dip_switch_comparison_ready+0x64>)
     83e:	2309      	movs	r3, #9
     840:	7023      	strb	r3, [r4, #0]
		dip_switch_data_read(dip_switch_dac_data);
     842:	8860      	ldrh	r0, [r4, #2]
     844:	b280      	uxth	r0, r0
     846:	4b05      	ldr	r3, [pc, #20]	; (85c <dip_switch_comparison_ready+0x70>)
     848:	4798      	blx	r3
		dip_switch_dac_data = 0;
     84a:	2300      	movs	r3, #0
     84c:	8063      	strh	r3, [r4, #2]
     84e:	e7e0      	b.n	812 <dip_switch_comparison_ready+0x26>
     850:	20000000 	.word	0x20000000
     854:	42004800 	.word	0x42004800
     858:	40001400 	.word	0x40001400
     85c:	00000769 	.word	0x00000769

00000860 <dip_switch_init>:

void dip_switch_init() {
     860:	b530      	push	{r4, r5, lr}
     862:	b083      	sub	sp, #12
	dac_sync_enable_channel(&DAC_0, 0);
     864:	4c1e      	ldr	r4, [pc, #120]	; (8e0 <dip_switch_init+0x80>)
     866:	2100      	movs	r1, #0
     868:	0020      	movs	r0, r4
     86a:	4b1e      	ldr	r3, [pc, #120]	; (8e4 <dip_switch_init+0x84>)
     86c:	4798      	blx	r3
	uint16_t dac_data = dip_switch_dac_data;
     86e:	4b1e      	ldr	r3, [pc, #120]	; (8e8 <dip_switch_init+0x88>)
     870:	885b      	ldrh	r3, [r3, #2]
     872:	466a      	mov	r2, sp
     874:	3206      	adds	r2, #6
     876:	8013      	strh	r3, [r2, #0]
	dac_sync_write(&DAC_0, 0, &dac_data, 1);
     878:	2301      	movs	r3, #1
     87a:	2100      	movs	r1, #0
     87c:	0020      	movs	r0, r4
     87e:	4c1b      	ldr	r4, [pc, #108]	; (8ec <dip_switch_init+0x8c>)
     880:	47a0      	blx	r4
	ac_async_register_callback(&AC_0, AC_COMPARISON_READY_CB, dip_switch_comparison_ready);
     882:	4d1b      	ldr	r5, [pc, #108]	; (8f0 <dip_switch_init+0x90>)
     884:	4a1b      	ldr	r2, [pc, #108]	; (8f4 <dip_switch_init+0x94>)
     886:	2100      	movs	r1, #0
     888:	0028      	movs	r0, r5
     88a:	4b1b      	ldr	r3, [pc, #108]	; (8f8 <dip_switch_init+0x98>)
     88c:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     88e:	4c1b      	ldr	r4, [pc, #108]	; (8fc <dip_switch_init+0x9c>)
     890:	22c6      	movs	r2, #198	; 0xc6
     892:	0092      	lsls	r2, r2, #2
     894:	58a3      	ldr	r3, [r4, r2]
     896:	21ff      	movs	r1, #255	; 0xff
     898:	438b      	bics	r3, r1
     89a:	393f      	subs	r1, #63	; 0x3f
     89c:	430b      	orrs	r3, r1
     89e:	50a3      	str	r3, [r4, r2]
	//Lower dip switch reading priority. This is a really unimportant task.
	NVIC_SetPriority(AC_IRQn, INTERRUPT_PRIORITY_IDLE);
	ac_async_enable(&AC_0);
     8a0:	0028      	movs	r0, r5
     8a2:	4b17      	ldr	r3, [pc, #92]	; (900 <dip_switch_init+0xa0>)
     8a4:	4798      	blx	r3
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8a6:	2208      	movs	r2, #8
     8a8:	2380      	movs	r3, #128	; 0x80
     8aa:	50e2      	str	r2, [r4, r3]
  __ASM volatile ("dsb 0xF":::"memory");
     8ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8b0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8b4:	3301      	adds	r3, #1
     8b6:	33ff      	adds	r3, #255	; 0xff
     8b8:	50e2      	str	r2, [r4, r3]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     8ba:	20c0      	movs	r0, #192	; 0xc0
     8bc:	0080      	lsls	r0, r0, #2
     8be:	5823      	ldr	r3, [r4, r0]
     8c0:	021b      	lsls	r3, r3, #8
     8c2:	0a1b      	lsrs	r3, r3, #8
     8c4:	21c0      	movs	r1, #192	; 0xc0
     8c6:	0609      	lsls	r1, r1, #24
     8c8:	430b      	orrs	r3, r1
     8ca:	5023      	str	r3, [r4, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8cc:	6022      	str	r2, [r4, #0]
	((Ac *)hw)->COMPCTRL[index].reg |= AC_COMPCTRL_ENABLE;
     8ce:	4b0d      	ldr	r3, [pc, #52]	; (904 <dip_switch_init+0xa4>)
     8d0:	691a      	ldr	r2, [r3, #16]
     8d2:	2101      	movs	r1, #1
     8d4:	430a      	orrs	r2, r1
     8d6:	611a      	str	r2, [r3, #16]
	((Ac *)hw)->CTRLB.reg = data;
     8d8:	7059      	strb	r1, [r3, #1]
	
	//start first comparison
	//ac_async_start_comparison(&AC_0, 0);
	hri_ac_set_COMPCTRL_ENABLE_bit_no_lock(AC, 0);
	hri_ac_write_CTRLB_reg_no_lock(AC, AC_CTRLB_START0);
}
     8da:	b003      	add	sp, #12
     8dc:	bd30      	pop	{r4, r5, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	200004fc 	.word	0x200004fc
     8e4:	00001455 	.word	0x00001455
     8e8:	20000000 	.word	0x20000000
     8ec:	0000148d 	.word	0x0000148d
     8f0:	200004e8 	.word	0x200004e8
     8f4:	000007ed 	.word	0x000007ed
     8f8:	000013d5 	.word	0x000013d5
     8fc:	e000e100 	.word	0xe000e100
     900:	000013ad 	.word	0x000013ad
     904:	42004400 	.word	0x42004400

00000908 <RTC_Handler>:
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit_no_lock(const void *const hw)
{
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <RTC_Handler+0x20>)
     90a:	881a      	ldrh	r2, [r3, #0]
     90c:	2102      	movs	r1, #2
     90e:	438a      	bics	r2, r1
     910:	801a      	strh	r2, [r3, #0]
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     912:	2201      	movs	r2, #1
     914:	721a      	strb	r2, [r3, #8]
}

static inline void hri_rtcmode0_write_COUNT_reg_no_lock(const void *const hw, hri_rtcmode0_count_reg_t data)
{
	((Rtc *)hw)->MODE0.COUNT.reg = data;
     916:	2100      	movs	r1, #0
     918:	6119      	str	r1, [r3, #16]
	((Ac *)hw)->COMPCTRL[index].reg |= AC_COMPCTRL_ENABLE;
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <RTC_Handler+0x24>)
     91c:	6919      	ldr	r1, [r3, #16]
     91e:	4311      	orrs	r1, r2
     920:	6119      	str	r1, [r3, #16]
	((Ac *)hw)->CTRLB.reg = data;
     922:	705a      	strb	r2, [r3, #1]
	
	//start comparison
	//ac_async_start_comparison(&AC_0, 0);
	hri_ac_set_COMPCTRL_ENABLE_bit_no_lock(AC, 0);
	hri_ac_write_CTRLB_reg_no_lock(AC, AC_CTRLB_START0);
}
     924:	4770      	bx	lr
     926:	46c0      	nop			; (mov r8, r8)
     928:	40001400 	.word	0x40001400
     92c:	42004400 	.word	0x42004400

00000930 <display_init>:
const uint16_t DISPLAY_SEGMENTS[DISPLAY_NUMSEGMENTS * 2] = {0b0000000000000011, 0b0000000000001100, 0b0000000000110000, 0b0000000011000000, 0b0000001100000000, 0b0000110000000000, 0b0011000000000000, 0b1100000000000000};

volatile uint8_t display_current_segment = 0;
volatile uint8_t display_current_digits[DISPLAY_NUMSEGMENTS * 2] = {DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK, DISPLAY_BLANK};

void display_init() {
     930:	b510      	push	{r4, lr}
	SPI_0_enable();
     932:	4b0b      	ldr	r3, [pc, #44]	; (960 <display_init+0x30>)
     934:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     936:	4b0b      	ldr	r3, [pc, #44]	; (964 <display_init+0x34>)
     938:	21ce      	movs	r1, #206	; 0xce
     93a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     93c:	2001      	movs	r0, #1
     93e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     940:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     942:	22c0      	movs	r2, #192	; 0xc0
     944:	05d2      	lsls	r2, r2, #23
     946:	2180      	movs	r1, #128	; 0x80
     948:	01c9      	lsls	r1, r1, #7
     94a:	3087      	adds	r0, #135	; 0x87
     94c:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94e:	3020      	adds	r0, #32
     950:	4c05      	ldr	r4, [pc, #20]	; (968 <display_init+0x38>)
     952:	501c      	str	r4, [r3, r0]
     954:	24c0      	movs	r4, #192	; 0xc0
     956:	0624      	lsls	r4, r4, #24
     958:	501c      	str	r4, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     95a:	2398      	movs	r3, #152	; 0x98
     95c:	50d1      	str	r1, [r2, r3]
	gpio_set_pin_function(DISPLAY_SS, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_direction(DISPLAY_SS, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(DISPLAY_SS, true);
}
     95e:	bd10      	pop	{r4, pc}
     960:	00001f29 	.word	0x00001f29
     964:	41004400 	.word	0x41004400
     968:	40004000 	.word	0x40004000

0000096c <display_update_base>:
	for (; i < DISPLAY_NUMSEGMENTS; i++) {
		display_set_digit(i, DISPLAY_VALUE_SPACE);
	}
}

void display_update_base(uint16_t value, uint8_t base) {
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96e:	0006      	movs	r6, r0
     970:	000d      	movs	r5, r1
	uint16_t val = value;
	for (int i = DISPLAY_NUMSEGMENTS - 1; i >= 0; i--) {
     972:	2403      	movs	r4, #3
     974:	e017      	b.n	9a6 <display_update_base+0x3a>
		if (val > 0 || i == DISPLAY_NUMSEGMENTS - 1) {
			display_set_digit(i, val % base);
     976:	0029      	movs	r1, r5
     978:	0030      	movs	r0, r6
     97a:	4b13      	ldr	r3, [pc, #76]	; (9c8 <display_update_base+0x5c>)
     97c:	4798      	blx	r3
	display_current_digits[segment * 2] = DISPLAY_VALUES_OUTER[value_index];
     97e:	22ff      	movs	r2, #255	; 0xff
     980:	0013      	movs	r3, r2
     982:	4023      	ands	r3, r4
     984:	005b      	lsls	r3, r3, #1
     986:	4011      	ands	r1, r2
     988:	4a10      	ldr	r2, [pc, #64]	; (9cc <display_update_base+0x60>)
     98a:	5c57      	ldrb	r7, [r2, r1]
     98c:	4810      	ldr	r0, [pc, #64]	; (9d0 <display_update_base+0x64>)
     98e:	54c7      	strb	r7, [r0, r3]
	display_current_digits[segment * 2 + 1] = DISPLAY_VALUES_INNER[value_index];
     990:	3301      	adds	r3, #1
     992:	1851      	adds	r1, r2, r1
     994:	2228      	movs	r2, #40	; 0x28
     996:	5c8a      	ldrb	r2, [r1, r2]
     998:	54c2      	strb	r2, [r0, r3]
			val /= base;
     99a:	0029      	movs	r1, r5
     99c:	0030      	movs	r0, r6
     99e:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <display_update_base+0x68>)
     9a0:	4798      	blx	r3
     9a2:	b286      	uxth	r6, r0
	for (int i = DISPLAY_NUMSEGMENTS - 1; i >= 0; i--) {
     9a4:	3c01      	subs	r4, #1
     9a6:	2c00      	cmp	r4, #0
     9a8:	db0c      	blt.n	9c4 <display_update_base+0x58>
		if (val > 0 || i == DISPLAY_NUMSEGMENTS - 1) {
     9aa:	2e00      	cmp	r6, #0
     9ac:	d1e3      	bne.n	976 <display_update_base+0xa>
     9ae:	2c03      	cmp	r4, #3
     9b0:	d0e1      	beq.n	976 <display_update_base+0xa>
	display_current_digits[segment * 2] = DISPLAY_VALUES_OUTER[value_index];
     9b2:	23ff      	movs	r3, #255	; 0xff
     9b4:	4023      	ands	r3, r4
     9b6:	005b      	lsls	r3, r3, #1
     9b8:	4a05      	ldr	r2, [pc, #20]	; (9d0 <display_update_base+0x64>)
     9ba:	217f      	movs	r1, #127	; 0x7f
     9bc:	54d1      	strb	r1, [r2, r3]
	display_current_digits[segment * 2 + 1] = DISPLAY_VALUES_INNER[value_index];
     9be:	3301      	adds	r3, #1
     9c0:	54d1      	strb	r1, [r2, r3]
     9c2:	e7ef      	b.n	9a4 <display_update_base+0x38>
		} else {
			display_set_digit(i, DISPLAY_VALUE_SPACE);
		}
	}
}
     9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000038a5 	.word	0x000038a5
     9cc:	000057d0 	.word	0x000057d0
     9d0:	20000004 	.word	0x20000004
     9d4:	000036d9 	.word	0x000036d9

000009d8 <display_update>:

void display_update(uint16_t value) {
     9d8:	b510      	push	{r4, lr}
	display_update_base(value, 10);
     9da:	210a      	movs	r1, #10
     9dc:	4b01      	ldr	r3, [pc, #4]	; (9e4 <display_update+0xc>)
     9de:	4798      	blx	r3
}
     9e0:	bd10      	pop	{r4, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	0000096d 	.word	0x0000096d

000009e8 <display_render>:

void display_update_hex(uint16_t value) {
	display_update_base(value, 16);
}

void display_render() {
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	46d6      	mov	lr, sl
     9ec:	464f      	mov	r7, r9
     9ee:	4646      	mov	r6, r8
     9f0:	b5c0      	push	{r6, r7, lr}
     9f2:	b082      	sub	sp, #8
	display_current_segment = (display_current_segment + 1) % (DISPLAY_NUMSEGMENTS * 2);
     9f4:	4d1e      	ldr	r5, [pc, #120]	; (a70 <display_render+0x88>)
     9f6:	782b      	ldrb	r3, [r5, #0]
     9f8:	3301      	adds	r3, #1
     9fa:	17d9      	asrs	r1, r3, #31
     9fc:	0f49      	lsrs	r1, r1, #29
     9fe:	185a      	adds	r2, r3, r1
     a00:	2307      	movs	r3, #7
     a02:	4013      	ands	r3, r2
     a04:	1a5b      	subs	r3, r3, r1
     a06:	b2db      	uxtb	r3, r3
     a08:	702b      	strb	r3, [r5, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	27c0      	movs	r7, #192	; 0xc0
     a0c:	05ff      	lsls	r7, r7, #23
     a0e:	2380      	movs	r3, #128	; 0x80
     a10:	01db      	lsls	r3, r3, #7
     a12:	4698      	mov	r8, r3
     a14:	2394      	movs	r3, #148	; 0x94
     a16:	4642      	mov	r2, r8
     a18:	50fa      	str	r2, [r7, r3]
	uint8_t block;
	gpio_set_pin_level(DISPLAY_SS, false);
	
	block = DISPLAY_SEGMENTS[display_current_segment] >> 8;
     a1a:	782b      	ldrb	r3, [r5, #0]
     a1c:	4e15      	ldr	r6, [pc, #84]	; (a74 <display_render+0x8c>)
     a1e:	2250      	movs	r2, #80	; 0x50
     a20:	4691      	mov	r9, r2
     a22:	005b      	lsls	r3, r3, #1
     a24:	18f3      	adds	r3, r6, r3
     a26:	5a9b      	ldrh	r3, [r3, r2]
     a28:	466a      	mov	r2, sp
     a2a:	1dd4      	adds	r4, r2, #7
     a2c:	0a1b      	lsrs	r3, r3, #8
     a2e:	71d3      	strb	r3, [r2, #7]
	SPI_0_exchange_block(&block, 1);
     a30:	2101      	movs	r1, #1
     a32:	0020      	movs	r0, r4
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <display_render+0x90>)
     a36:	469a      	mov	sl, r3
     a38:	4798      	blx	r3
	
	block = DISPLAY_SEGMENTS[display_current_segment] & 0xFF;
     a3a:	782b      	ldrb	r3, [r5, #0]
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	18f6      	adds	r6, r6, r3
     a40:	464b      	mov	r3, r9
     a42:	5af3      	ldrh	r3, [r6, r3]
     a44:	7023      	strb	r3, [r4, #0]
	SPI_0_exchange_block(&block, 1);
     a46:	2101      	movs	r1, #1
     a48:	0020      	movs	r0, r4
     a4a:	47d0      	blx	sl
	
	block = display_current_digits[display_current_segment];
     a4c:	782b      	ldrb	r3, [r5, #0]
     a4e:	b2db      	uxtb	r3, r3
     a50:	4a0a      	ldr	r2, [pc, #40]	; (a7c <display_render+0x94>)
     a52:	5cd3      	ldrb	r3, [r2, r3]
     a54:	7023      	strb	r3, [r4, #0]
	SPI_0_exchange_block(&block, 1);
     a56:	2101      	movs	r1, #1
     a58:	0020      	movs	r0, r4
     a5a:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a5c:	2398      	movs	r3, #152	; 0x98
     a5e:	4642      	mov	r2, r8
     a60:	50fa      	str	r2, [r7, r3]
	
	gpio_set_pin_level(DISPLAY_SS, true);
     a62:	b002      	add	sp, #8
     a64:	bc1c      	pop	{r2, r3, r4}
     a66:	4690      	mov	r8, r2
     a68:	4699      	mov	r9, r3
     a6a:	46a2      	mov	sl, r4
     a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	2000042c 	.word	0x2000042c
     a74:	000057d0 	.word	0x000057d0
     a78:	00001f41 	.word	0x00001f41
     a7c:	20000004 	.word	0x20000004

00000a80 <SERCOM3_Handler>:
volatile unsigned short dmxNextAddress = 1;
volatile unsigned short dmxNextAddress2 = 1;
unsigned short dmxStartAddress = 1;
unsigned short currentChannel = 0;

void SERCOM3_Handler() {
     a80:	b510      	push	{r4, lr}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     a82:	4b21      	ldr	r3, [pc, #132]	; (b08 <SERCOM3_Handler+0x88>)
     a84:	7e1b      	ldrb	r3, [r3, #24]
	if (hri_sercomusart_get_interrupt_ERROR_bit(SERCOM3)) {
     a86:	09db      	lsrs	r3, r3, #7
     a88:	d013      	beq.n	ab2 <SERCOM3_Handler+0x32>
}

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     a8a:	4b1f      	ldr	r3, [pc, #124]	; (b08 <SERCOM3_Handler+0x88>)
     a8c:	2280      	movs	r2, #128	; 0x80
     a8e:	761a      	strb	r2, [r3, #24]
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
     a90:	3a41      	subs	r2, #65	; 0x41
     a92:	835a      	strh	r2, [r3, #26]
	return ((Sercom *)hw)->USART.DATA.reg;
     a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		hri_sercomusart_clear_interrupt_ERROR_bit(SERCOM3);
		hri_sercomusart_clear_STATUS_reg(SERCOM3, SERCOM_USART_STATUS_MASK);
		hri_sercomusart_read_DATA_reg(SERCOM3);
		currentChannel = 0;
     a96:	2200      	movs	r2, #0
     a98:	4b1c      	ldr	r3, [pc, #112]	; (b0c <SERCOM3_Handler+0x8c>)
     a9a:	801a      	strh	r2, [r3, #0]
		unsigned short newAddress = dmxNextAddress;
     a9c:	4a1c      	ldr	r2, [pc, #112]	; (b10 <SERCOM3_Handler+0x90>)
     a9e:	8813      	ldrh	r3, [r2, #0]
     aa0:	b29b      	uxth	r3, r3
		if (newAddress == dmxNextAddress2) {
     aa2:	8852      	ldrh	r2, [r2, #2]
     aa4:	b292      	uxth	r2, r2
     aa6:	4293      	cmp	r3, r2
     aa8:	d000      	beq.n	aac <SERCOM3_Handler+0x2c>
		if (currentChannel == dmxStartAddress + DMX_CHANNELS - 1) {
			dmx_received();
		}
		currentChannel++;
	}
}
     aaa:	bd10      	pop	{r4, pc}
			dmxStartAddress = newAddress;
     aac:	4a18      	ldr	r2, [pc, #96]	; (b10 <SERCOM3_Handler+0x90>)
     aae:	8093      	strh	r3, [r2, #4]
     ab0:	e7fb      	b.n	aaa <SERCOM3_Handler+0x2a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ab2:	4b15      	ldr	r3, [pc, #84]	; (b08 <SERCOM3_Handler+0x88>)
     ab4:	7e1b      	ldrb	r3, [r3, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(SERCOM3)) {
     ab6:	075b      	lsls	r3, r3, #29
     ab8:	d5f7      	bpl.n	aaa <SERCOM3_Handler+0x2a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     aba:	4b13      	ldr	r3, [pc, #76]	; (b08 <SERCOM3_Handler+0x88>)
     abc:	2204      	movs	r2, #4
     abe:	761a      	strb	r2, [r3, #24]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     ac0:	8b5a      	ldrh	r2, [r3, #26]
		if (hri_sercomusart_read_STATUS_reg(SERCOM3) & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
     ac2:	2337      	movs	r3, #55	; 0x37
     ac4:	421a      	tst	r2, r3
     ac6:	d117      	bne.n	af8 <SERCOM3_Handler+0x78>
	return ((Sercom *)hw)->USART.DATA.reg;
     ac8:	4b0f      	ldr	r3, [pc, #60]	; (b08 <SERCOM3_Handler+0x88>)
     aca:	8d19      	ldrh	r1, [r3, #40]	; 0x28
		uint8_t dmx_value = hri_sercomusart_read_DATA_reg(SERCOM3);
     acc:	b2c9      	uxtb	r1, r1
		if (currentChannel >= dmxStartAddress) {
     ace:	4b0f      	ldr	r3, [pc, #60]	; (b0c <SERCOM3_Handler+0x8c>)
     ad0:	881a      	ldrh	r2, [r3, #0]
     ad2:	4b0f      	ldr	r3, [pc, #60]	; (b10 <SERCOM3_Handler+0x90>)
     ad4:	889b      	ldrh	r3, [r3, #4]
     ad6:	429a      	cmp	r2, r3
     ad8:	d306      	bcc.n	ae8 <SERCOM3_Handler+0x68>
			if (currentChannel < dmxStartAddress + DMX_CHANNELS) {
     ada:	0018      	movs	r0, r3
     adc:	3012      	adds	r0, #18
     ade:	4282      	cmp	r2, r0
     ae0:	da02      	bge.n	ae8 <SERCOM3_Handler+0x68>
				dmx[currentChannel - dmxStartAddress] = dmx_value;
     ae2:	1ad0      	subs	r0, r2, r3
     ae4:	4c0b      	ldr	r4, [pc, #44]	; (b14 <SERCOM3_Handler+0x94>)
     ae6:	5421      	strb	r1, [r4, r0]
		if (currentChannel == dmxStartAddress + DMX_CHANNELS - 1) {
     ae8:	3311      	adds	r3, #17
     aea:	429a      	cmp	r2, r3
     aec:	d009      	beq.n	b02 <SERCOM3_Handler+0x82>
		currentChannel++;
     aee:	4a07      	ldr	r2, [pc, #28]	; (b0c <SERCOM3_Handler+0x8c>)
     af0:	8813      	ldrh	r3, [r2, #0]
     af2:	3301      	adds	r3, #1
     af4:	8013      	strh	r3, [r2, #0]
     af6:	e7d8      	b.n	aaa <SERCOM3_Handler+0x2a>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     af8:	4b03      	ldr	r3, [pc, #12]	; (b08 <SERCOM3_Handler+0x88>)
     afa:	223f      	movs	r2, #63	; 0x3f
     afc:	835a      	strh	r2, [r3, #26]
	return ((Sercom *)hw)->USART.DATA.reg;
     afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b00:	e7d3      	b.n	aaa <SERCOM3_Handler+0x2a>
			dmx_received();
     b02:	4b05      	ldr	r3, [pc, #20]	; (b18 <SERCOM3_Handler+0x98>)
     b04:	4798      	blx	r3
     b06:	e7f2      	b.n	aee <SERCOM3_Handler+0x6e>
     b08:	42001400 	.word	0x42001400
     b0c:	2000042e 	.word	0x2000042e
     b10:	2000000c 	.word	0x2000000c
     b14:	200004b8 	.word	0x200004b8
     b18:	00002b01 	.word	0x00002b01

00000b1c <dmx_set_address>:

void dmx_set_address(unsigned short address) {
	dmxNextAddress = address;
     b1c:	4b01      	ldr	r3, [pc, #4]	; (b24 <dmx_set_address+0x8>)
     b1e:	8018      	strh	r0, [r3, #0]
	dmxNextAddress2 = address;
     b20:	8058      	strh	r0, [r3, #2]
}
     b22:	4770      	bx	lr
     b24:	2000000c 	.word	0x2000000c

00000b28 <dmx_init>:

void dmx_init() {
     b28:	b510      	push	{r4, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b2a:	4b0b      	ldr	r3, [pc, #44]	; (b58 <dmx_init+0x30>)
     b2c:	2180      	movs	r1, #128	; 0x80
     b2e:	0149      	lsls	r1, r1, #5
     b30:	2280      	movs	r2, #128	; 0x80
     b32:	5099      	str	r1, [r3, r2]
  __ASM volatile ("dsb 0xF":::"memory");
     b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b38:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b3c:	3201      	adds	r2, #1
     b3e:	32ff      	adds	r2, #255	; 0xff
     b40:	5099      	str	r1, [r3, r2]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     b42:	20c3      	movs	r0, #195	; 0xc3
     b44:	0080      	lsls	r0, r0, #2
     b46:	581a      	ldr	r2, [r3, r0]
     b48:	24ff      	movs	r4, #255	; 0xff
     b4a:	43a2      	bics	r2, r4
     b4c:	3cbf      	subs	r4, #191	; 0xbf
     b4e:	4322      	orrs	r2, r4
     b50:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b52:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(SERCOM3_IRQn);
	NVIC_ClearPendingIRQ(SERCOM3_IRQn);
	NVIC_SetPriority(SERCOM3_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(SERCOM3_IRQn);
     b54:	bd10      	pop	{r4, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	e000e100 	.word	0xe000e100

00000b5c <EXTERNAL_IRQ_0_init>:
struct ac_async_descriptor AC_0;

struct dac_sync_descriptor DAC_0;

void EXTERNAL_IRQ_0_init(void)
{
     b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5e:	46d6      	mov	lr, sl
     b60:	464f      	mov	r7, r9
     b62:	4646      	mov	r6, r8
     b64:	b5c0      	push	{r6, r7, lr}
     b66:	4a3f      	ldr	r2, [pc, #252]	; (c64 <EXTERNAL_IRQ_0_init+0x108>)
     b68:	4b3f      	ldr	r3, [pc, #252]	; (c68 <EXTERNAL_IRQ_0_init+0x10c>)
     b6a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b6c:	22c0      	movs	r2, #192	; 0xc0
     b6e:	05d2      	lsls	r2, r2, #23
     b70:	2480      	movs	r4, #128	; 0x80
     b72:	0264      	lsls	r4, r4, #9
     b74:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b76:	4b3d      	ldr	r3, [pc, #244]	; (c6c <EXTERNAL_IRQ_0_init+0x110>)
     b78:	4f3d      	ldr	r7, [pc, #244]	; (c70 <EXTERNAL_IRQ_0_init+0x114>)
     b7a:	629f      	str	r7, [r3, #40]	; 0x28
     b7c:	493d      	ldr	r1, [pc, #244]	; (c74 <EXTERNAL_IRQ_0_init+0x118>)
     b7e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b80:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b82:	2050      	movs	r0, #80	; 0x50
     b84:	5c19      	ldrb	r1, [r3, r0]
     b86:	2604      	movs	r6, #4
     b88:	4331      	orrs	r1, r6
     b8a:	b2c9      	uxtb	r1, r1
     b8c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b8e:	6194      	str	r4, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b90:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b92:	2501      	movs	r5, #1
     b94:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b96:	2401      	movs	r4, #1
     b98:	4321      	orrs	r1, r4
     b9a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b9c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b9e:	2138      	movs	r1, #56	; 0x38
     ba0:	4688      	mov	r8, r1
     ba2:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ba4:	3841      	subs	r0, #65	; 0x41
     ba6:	4682      	mov	sl, r0
     ba8:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     baa:	4640      	mov	r0, r8
     bac:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bae:	2180      	movs	r1, #128	; 0x80
     bb0:	0289      	lsls	r1, r1, #10
     bb2:	4689      	mov	r9, r1
     bb4:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bb6:	629f      	str	r7, [r3, #40]	; 0x28
     bb8:	492f      	ldr	r1, [pc, #188]	; (c78 <EXTERNAL_IRQ_0_init+0x11c>)
     bba:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bbc:	4649      	mov	r1, r9
     bbe:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     bc0:	2151      	movs	r1, #81	; 0x51
     bc2:	468c      	mov	ip, r1
     bc4:	5c59      	ldrb	r1, [r3, r1]
     bc6:	4331      	orrs	r1, r6
     bc8:	b2c9      	uxtb	r1, r1
     bca:	4660      	mov	r0, ip
     bcc:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bce:	4649      	mov	r1, r9
     bd0:	6191      	str	r1, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bd2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     bd4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bd6:	4321      	orrs	r1, r4
     bd8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bda:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bdc:	4641      	mov	r1, r8
     bde:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     be0:	3842      	subs	r0, #66	; 0x42
     be2:	4684      	mov	ip, r0
     be4:	4001      	ands	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be6:	4640      	mov	r0, r8
     be8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bea:	2180      	movs	r1, #128	; 0x80
     bec:	0389      	lsls	r1, r1, #14
     bee:	4688      	mov	r8, r1
     bf0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bf2:	629f      	str	r7, [r3, #40]	; 0x28
     bf4:	4921      	ldr	r1, [pc, #132]	; (c7c <EXTERNAL_IRQ_0_init+0x120>)
     bf6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bf8:	4641      	mov	r1, r8
     bfa:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     bfc:	2755      	movs	r7, #85	; 0x55
     bfe:	5dd9      	ldrb	r1, [r3, r7]
     c00:	4331      	orrs	r1, r6
     c02:	b2c9      	uxtb	r1, r1
     c04:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c06:	4641      	mov	r1, r8
     c08:	6191      	str	r1, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c0a:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c0e:	4321      	orrs	r1, r4
     c10:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c12:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c14:	3f1b      	subs	r7, #27
     c16:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c18:	4660      	mov	r0, ip
     c1a:	4001      	ands	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c1c:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c1e:	2180      	movs	r1, #128	; 0x80
     c20:	01c9      	lsls	r1, r1, #7
     c22:	468c      	mov	ip, r1
     c24:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c26:	4916      	ldr	r1, [pc, #88]	; (c80 <EXTERNAL_IRQ_0_init+0x124>)
     c28:	6299      	str	r1, [r3, #40]	; 0x28
     c2a:	4916      	ldr	r1, [pc, #88]	; (c84 <EXTERNAL_IRQ_0_init+0x128>)
     c2c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c2e:	4661      	mov	r1, ip
     c30:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c32:	214e      	movs	r1, #78	; 0x4e
     c34:	5c5f      	ldrb	r7, [r3, r1]
     c36:	433e      	orrs	r6, r7
     c38:	b2f6      	uxtb	r6, r6
     c3a:	545e      	strb	r6, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c3c:	4660      	mov	r0, ip
     c3e:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c40:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c42:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c44:	4322      	orrs	r2, r4
     c46:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c48:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c4a:	3917      	subs	r1, #23
     c4c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c4e:	4650      	mov	r0, sl
     c50:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c52:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PWR_GOOD, PINMUX_PA14A_EIC_EXTINT14);

	ext_irq_init();
     c54:	4b0c      	ldr	r3, [pc, #48]	; (c88 <EXTERNAL_IRQ_0_init+0x12c>)
     c56:	4798      	blx	r3
}
     c58:	bc1c      	pop	{r2, r3, r4}
     c5a:	4690      	mov	r8, r2
     c5c:	4699      	mov	r9, r3
     c5e:	46a2      	mov	sl, r4
     c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	00004005 	.word	0x00004005
     c68:	40000c00 	.word	0x40000c00
     c6c:	41004400 	.word	0x41004400
     c70:	40020000 	.word	0x40020000
     c74:	c0020001 	.word	0xc0020001
     c78:	c0020002 	.word	0xc0020002
     c7c:	c0020020 	.word	0xc0020020
     c80:	40024000 	.word	0x40024000
     c84:	c0020000 	.word	0xc0020000
     c88:	00001579 	.word	0x00001579

00000c8c <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     c8c:	4a02      	ldr	r2, [pc, #8]	; (c98 <FLASH_0_CLOCK_init+0xc>)
     c8e:	69d3      	ldr	r3, [r2, #28]
     c90:	2104      	movs	r1, #4
     c92:	430b      	orrs	r3, r1
     c94:	61d3      	str	r3, [r2, #28]

void FLASH_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBB, NVMCTRL);
}
     c96:	4770      	bx	lr
     c98:	40000400 	.word	0x40000400

00000c9c <FLASH_0_init>:

void FLASH_0_init(void)
{
     c9c:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <FLASH_0_init+0x10>)
     ca0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     ca2:	4903      	ldr	r1, [pc, #12]	; (cb0 <FLASH_0_init+0x14>)
     ca4:	4803      	ldr	r0, [pc, #12]	; (cb4 <FLASH_0_init+0x18>)
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <FLASH_0_init+0x1c>)
     ca8:	4798      	blx	r3
}
     caa:	bd10      	pop	{r4, pc}
     cac:	00000c8d 	.word	0x00000c8d
     cb0:	41004000 	.word	0x41004000
     cb4:	200004cc 	.word	0x200004cc
     cb8:	000016ad 	.word	0x000016ad

00000cbc <USART_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     cbc:	4a04      	ldr	r2, [pc, #16]	; (cd0 <USART_0_CLOCK_init+0x14>)
     cbe:	6a13      	ldr	r3, [r2, #32]
     cc0:	2120      	movs	r1, #32
     cc2:	430b      	orrs	r3, r1
     cc4:	6213      	str	r3, [r2, #32]
     cc6:	4a03      	ldr	r2, [pc, #12]	; (cd4 <USART_0_CLOCK_init+0x18>)
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <USART_0_CLOCK_init+0x1c>)
     cca:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     ccc:	4770      	bx	lr
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	40000400 	.word	0x40000400
     cd4:	00004017 	.word	0x00004017
     cd8:	40000c00 	.word	0x40000c00

00000cdc <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     cdc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cde:	4b0f      	ldr	r3, [pc, #60]	; (d1c <USART_0_PORT_init+0x40>)
     ce0:	2256      	movs	r2, #86	; 0x56
     ce2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ce4:	2501      	movs	r5, #1
     ce6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ce8:	2401      	movs	r4, #1
     cea:	4321      	orrs	r1, r4
     cec:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cee:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cf0:	203b      	movs	r0, #59	; 0x3b
     cf2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cf4:	3a47      	subs	r2, #71	; 0x47
     cf6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     cf8:	2202      	movs	r2, #2
     cfa:	4311      	orrs	r1, r2
     cfc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cfe:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d00:	2157      	movs	r1, #87	; 0x57
     d02:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d04:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d06:	4322      	orrs	r2, r4
     d08:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d0c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d0e:	3948      	subs	r1, #72	; 0x48
     d10:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     d12:	2120      	movs	r1, #32
     d14:	430a      	orrs	r2, r1
     d16:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d18:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(DMX_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(DMX_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     d1a:	bd30      	pop	{r4, r5, pc}
     d1c:	41004400 	.word	0x41004400

00000d20 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     d20:	b5f0      	push	{r4, r5, r6, r7, lr}
     d22:	46d6      	mov	lr, sl
     d24:	464f      	mov	r7, r9
     d26:	4646      	mov	r6, r8
     d28:	b5c0      	push	{r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	27c0      	movs	r7, #192	; 0xc0
     d2c:	05ff      	lsls	r7, r7, #23
     d2e:	2694      	movs	r6, #148	; 0x94
     d30:	2380      	movs	r3, #128	; 0x80
     d32:	015b      	lsls	r3, r3, #5
     d34:	51bb      	str	r3, [r7, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d36:	2588      	movs	r5, #136	; 0x88
     d38:	517b      	str	r3, [r7, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d3a:	4b29      	ldr	r3, [pc, #164]	; (de0 <SPI_0_PORT_init+0xc0>)
     d3c:	24a8      	movs	r4, #168	; 0xa8
     d3e:	4a29      	ldr	r2, [pc, #164]	; (de4 <SPI_0_PORT_init+0xc4>)
     d40:	511a      	str	r2, [r3, r4]
     d42:	22c0      	movs	r2, #192	; 0xc0
     d44:	0612      	lsls	r2, r2, #24
     d46:	4692      	mov	sl, r2
     d48:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d4a:	21cc      	movs	r1, #204	; 0xcc
     d4c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4e:	2001      	movs	r0, #1
     d50:	4680      	mov	r8, r0
     d52:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d54:	4684      	mov	ip, r0
     d56:	4660      	mov	r0, ip
     d58:	4302      	orrs	r2, r0
     d5a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d5c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d5e:	3916      	subs	r1, #22
     d60:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d62:	200f      	movs	r0, #15
     d64:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     d66:	2002      	movs	r0, #2
     d68:	4681      	mov	r9, r0
     d6a:	4648      	mov	r0, r9
     d6c:	4302      	orrs	r2, r0
     d6e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d70:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	0192      	lsls	r2, r2, #6
     d76:	51ba      	str	r2, [r7, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d78:	517a      	str	r2, [r7, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d7a:	4a1b      	ldr	r2, [pc, #108]	; (de8 <SPI_0_PORT_init+0xc8>)
     d7c:	511a      	str	r2, [r3, r4]
     d7e:	4652      	mov	r2, sl
     d80:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d82:	20cd      	movs	r0, #205	; 0xcd
     d84:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d86:	4645      	mov	r5, r8
     d88:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d8a:	4665      	mov	r5, ip
     d8c:	432a      	orrs	r2, r5
     d8e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d90:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d92:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d94:	3e85      	subs	r6, #133	; 0x85
     d96:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     d98:	2520      	movs	r5, #32
     d9a:	4328      	orrs	r0, r5
     d9c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d9e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     da0:	2180      	movs	r1, #128	; 0x80
     da2:	0209      	lsls	r1, r1, #8
     da4:	2284      	movs	r2, #132	; 0x84
     da6:	50b9      	str	r1, [r7, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da8:	4a10      	ldr	r2, [pc, #64]	; (dec <SPI_0_PORT_init+0xcc>)
     daa:	511a      	str	r2, [r3, r4]
     dac:	4a10      	ldr	r2, [pc, #64]	; (df0 <SPI_0_PORT_init+0xd0>)
     dae:	511a      	str	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     db0:	22cf      	movs	r2, #207	; 0xcf
     db2:	5c99      	ldrb	r1, [r3, r2]
     db4:	2004      	movs	r0, #4
     db6:	4381      	bics	r1, r0
     db8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbc:	4640      	mov	r0, r8
     dbe:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dc0:	4660      	mov	r0, ip
     dc2:	4301      	orrs	r1, r0
     dc4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dc8:	21b7      	movs	r1, #183	; 0xb7
     dca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dcc:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     dce:	432a      	orrs	r2, r5
     dd0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dd2:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DISPLAY_MISO, PINMUX_PB15C_SERCOM4_PAD3);
}
     dd4:	bc1c      	pop	{r2, r3, r4}
     dd6:	4690      	mov	r8, r2
     dd8:	4699      	mov	r9, r3
     dda:	46a2      	mov	sl, r4
     ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	41004400 	.word	0x41004400
     de4:	40001000 	.word	0x40001000
     de8:	40002000 	.word	0x40002000
     dec:	40028000 	.word	0x40028000
     df0:	c0020000 	.word	0xc0020000

00000df4 <SPI_0_CLOCK_init>:
     df4:	4a04      	ldr	r2, [pc, #16]	; (e08 <SPI_0_CLOCK_init+0x14>)
     df6:	6a13      	ldr	r3, [r2, #32]
     df8:	2140      	movs	r1, #64	; 0x40
     dfa:	430b      	orrs	r3, r1
     dfc:	6213      	str	r3, [r2, #32]
     dfe:	4a03      	ldr	r2, [pc, #12]	; (e0c <SPI_0_CLOCK_init+0x18>)
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <SPI_0_CLOCK_init+0x1c>)
     e02:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
}
     e04:	4770      	bx	lr
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	40000400 	.word	0x40000400
     e0c:	00004018 	.word	0x00004018
     e10:	40000c00 	.word	0x40000c00

00000e14 <TIMER_8_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     e14:	4a04      	ldr	r2, [pc, #16]	; (e28 <TIMER_8_CLOCK_init+0x14>)
     e16:	6993      	ldr	r3, [r2, #24]
     e18:	2120      	movs	r1, #32
     e1a:	430b      	orrs	r3, r1
     e1c:	6193      	str	r3, [r2, #24]
     e1e:	4a03      	ldr	r2, [pc, #12]	; (e2c <TIMER_8_CLOCK_init+0x18>)
     e20:	4b03      	ldr	r3, [pc, #12]	; (e30 <TIMER_8_CLOCK_init+0x1c>)
     e22:	805a      	strh	r2, [r3, #2]
 */
void TIMER_8_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     e24:	4770      	bx	lr
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	40000400 	.word	0x40000400
     e2c:	00004004 	.word	0x00004004
     e30:	40000c00 	.word	0x40000c00

00000e34 <TIMER_3_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     e34:	4a04      	ldr	r2, [pc, #16]	; (e48 <TIMER_3_CLOCK_init+0x14>)
     e36:	6a11      	ldr	r1, [r2, #32]
     e38:	2380      	movs	r3, #128	; 0x80
     e3a:	011b      	lsls	r3, r3, #4
     e3c:	430b      	orrs	r3, r1
     e3e:	6213      	str	r3, [r2, #32]
     e40:	4a02      	ldr	r2, [pc, #8]	; (e4c <TIMER_3_CLOCK_init+0x18>)
     e42:	4b03      	ldr	r3, [pc, #12]	; (e50 <TIMER_3_CLOCK_init+0x1c>)
     e44:	805a      	strh	r2, [r3, #2]
void TIMER_3_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);

	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);
}
     e46:	4770      	bx	lr
     e48:	40000400 	.word	0x40000400
     e4c:	0000401b 	.word	0x0000401b
     e50:	40000c00 	.word	0x40000c00

00000e54 <TIMER_5_CLOCK_init>:
     e54:	4a04      	ldr	r2, [pc, #16]	; (e68 <TIMER_5_CLOCK_init+0x14>)
     e56:	6a11      	ldr	r1, [r2, #32]
     e58:	2380      	movs	r3, #128	; 0x80
     e5a:	015b      	lsls	r3, r3, #5
     e5c:	430b      	orrs	r3, r1
     e5e:	6213      	str	r3, [r2, #32]
     e60:	4a02      	ldr	r2, [pc, #8]	; (e6c <TIMER_5_CLOCK_init+0x18>)
     e62:	4b03      	ldr	r3, [pc, #12]	; (e70 <TIMER_5_CLOCK_init+0x1c>)
     e64:	805a      	strh	r2, [r3, #2]
void TIMER_5_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);

	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);
}
     e66:	4770      	bx	lr
     e68:	40000400 	.word	0x40000400
     e6c:	0000401c 	.word	0x0000401c
     e70:	40000c00 	.word	0x40000c00

00000e74 <TIMER_6_CLOCK_init>:
     e74:	4a04      	ldr	r2, [pc, #16]	; (e88 <TIMER_6_CLOCK_init+0x14>)
     e76:	6a11      	ldr	r1, [r2, #32]
     e78:	2380      	movs	r3, #128	; 0x80
     e7a:	019b      	lsls	r3, r3, #6
     e7c:	430b      	orrs	r3, r1
     e7e:	6213      	str	r3, [r2, #32]
     e80:	4a02      	ldr	r2, [pc, #8]	; (e8c <TIMER_6_CLOCK_init+0x18>)
     e82:	4b03      	ldr	r3, [pc, #12]	; (e90 <TIMER_6_CLOCK_init+0x1c>)
     e84:	805a      	strh	r2, [r3, #2]
void TIMER_6_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC5);

	_gclk_enable_channel(TC5_GCLK_ID, CONF_GCLK_TC5_SRC);
}
     e86:	4770      	bx	lr
     e88:	40000400 	.word	0x40000400
     e8c:	0000401c 	.word	0x0000401c
     e90:	40000c00 	.word	0x40000c00

00000e94 <TIMER_4_CLOCK_init>:
     e94:	4a04      	ldr	r2, [pc, #16]	; (ea8 <TIMER_4_CLOCK_init+0x14>)
     e96:	6a11      	ldr	r1, [r2, #32]
     e98:	2380      	movs	r3, #128	; 0x80
     e9a:	01db      	lsls	r3, r3, #7
     e9c:	430b      	orrs	r3, r1
     e9e:	6213      	str	r3, [r2, #32]
     ea0:	4a02      	ldr	r2, [pc, #8]	; (eac <TIMER_4_CLOCK_init+0x18>)
     ea2:	4b03      	ldr	r3, [pc, #12]	; (eb0 <TIMER_4_CLOCK_init+0x1c>)
     ea4:	805a      	strh	r2, [r3, #2]
void TIMER_4_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC6);

	_gclk_enable_channel(TC6_GCLK_ID, CONF_GCLK_TC6_SRC);
}
     ea6:	4770      	bx	lr
     ea8:	40000400 	.word	0x40000400
     eac:	0000401d 	.word	0x0000401d
     eb0:	40000c00 	.word	0x40000c00

00000eb4 <TIMER_7_CLOCK_init>:
     eb4:	4a04      	ldr	r2, [pc, #16]	; (ec8 <TIMER_7_CLOCK_init+0x14>)
     eb6:	6a11      	ldr	r1, [r2, #32]
     eb8:	2380      	movs	r3, #128	; 0x80
     eba:	021b      	lsls	r3, r3, #8
     ebc:	430b      	orrs	r3, r1
     ebe:	6213      	str	r3, [r2, #32]
     ec0:	4a02      	ldr	r2, [pc, #8]	; (ecc <TIMER_7_CLOCK_init+0x18>)
     ec2:	4b03      	ldr	r3, [pc, #12]	; (ed0 <TIMER_7_CLOCK_init+0x1c>)
     ec4:	805a      	strh	r2, [r3, #2]
void TIMER_7_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TC7);

	_gclk_enable_channel(TC7_GCLK_ID, CONF_GCLK_TC7_SRC);
}
     ec6:	4770      	bx	lr
     ec8:	40000400 	.word	0x40000400
     ecc:	0000401d 	.word	0x0000401d
     ed0:	40000c00 	.word	0x40000c00

00000ed4 <AC_0_PORT_init>:

void AC_0_PORT_init(void)
{
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	46c6      	mov	lr, r8
     ed8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eda:	27c0      	movs	r7, #192	; 0xc0
     edc:	05ff      	lsls	r7, r7, #23
     ede:	2310      	movs	r3, #16
     ee0:	607b      	str	r3, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ee2:	4b20      	ldr	r3, [pc, #128]	; (f64 <AC_0_PORT_init+0x90>)
     ee4:	4a20      	ldr	r2, [pc, #128]	; (f68 <AC_0_PORT_init+0x94>)
     ee6:	629a      	str	r2, [r3, #40]	; 0x28
     ee8:	26c0      	movs	r6, #192	; 0xc0
     eea:	0636      	lsls	r6, r6, #24
     eec:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eee:	2144      	movs	r1, #68	; 0x44
     ef0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ef2:	2501      	movs	r5, #1
     ef4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ef6:	2001      	movs	r0, #1
     ef8:	4302      	orrs	r2, r0
     efa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     efc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     efe:	2232      	movs	r2, #50	; 0x32
     f00:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f02:	240f      	movs	r4, #15
     f04:	46a0      	mov	r8, r4
     f06:	43a1      	bics	r1, r4
	tmp |= PORT_PMUX_PMUXE(data);
     f08:	4301      	orrs	r1, r0
     f0a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f0c:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f0e:	2120      	movs	r1, #32
     f10:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f12:	4916      	ldr	r1, [pc, #88]	; (f6c <AC_0_PORT_init+0x98>)
     f14:	6299      	str	r1, [r3, #40]	; 0x28
     f16:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f18:	2145      	movs	r1, #69	; 0x45
     f1a:	468c      	mov	ip, r1
     f1c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f1e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f20:	4301      	orrs	r1, r0
     f22:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f24:	4664      	mov	r4, ip
     f26:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f28:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f2a:	3c36      	subs	r4, #54	; 0x36
     f2c:	4021      	ands	r1, r4
	tmp |= PORT_PMUX_PMUXO(data);
     f2e:	2410      	movs	r4, #16
     f30:	46a4      	mov	ip, r4
     f32:	4664      	mov	r4, ip
     f34:	4321      	orrs	r1, r4
     f36:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f38:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f3a:	320e      	adds	r2, #14
     f3c:	607a      	str	r2, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f3e:	4a0c      	ldr	r2, [pc, #48]	; (f70 <AC_0_PORT_init+0x9c>)
     f40:	629a      	str	r2, [r3, #40]	; 0x28
     f42:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f44:	2246      	movs	r2, #70	; 0x46
     f46:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f48:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f4a:	4301      	orrs	r1, r0
     f4c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f4e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f50:	2133      	movs	r1, #51	; 0x33
     f52:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f54:	4644      	mov	r4, r8
     f56:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     f58:	4302      	orrs	r2, r0
     f5a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f5c:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(CONFIG3, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(CONFIG3, PINMUX_PA06B_AC_AIN2);
}
     f5e:	bc04      	pop	{r2}
     f60:	4690      	mov	r8, r2
     f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f64:	41004400 	.word	0x41004400
     f68:	40000010 	.word	0x40000010
     f6c:	40000020 	.word	0x40000020
     f70:	40000040 	.word	0x40000040

00000f74 <AC_0_CLOCK_init>:
     f74:	4a05      	ldr	r2, [pc, #20]	; (f8c <AC_0_CLOCK_init+0x18>)
     f76:	6a11      	ldr	r1, [r2, #32]
     f78:	2380      	movs	r3, #128	; 0x80
     f7a:	029b      	lsls	r3, r3, #10
     f7c:	430b      	orrs	r3, r1
     f7e:	6213      	str	r3, [r2, #32]
     f80:	4b03      	ldr	r3, [pc, #12]	; (f90 <AC_0_CLOCK_init+0x1c>)
     f82:	4a04      	ldr	r2, [pc, #16]	; (f94 <AC_0_CLOCK_init+0x20>)
     f84:	805a      	strh	r2, [r3, #2]
     f86:	4a04      	ldr	r2, [pc, #16]	; (f98 <AC_0_CLOCK_init+0x24>)
     f88:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBC, AC);
	_gclk_enable_channel(AC_GCLK_ID_DIG, CONF_GCLK_DIG_AC_SRC);
	_gclk_enable_channel(AC_GCLK_ID_ANA, CONF_GCLK_ANA_AC_SRC);
}
     f8a:	4770      	bx	lr
     f8c:	40000400 	.word	0x40000400
     f90:	40000c00 	.word	0x40000c00
     f94:	0000401f 	.word	0x0000401f
     f98:	00004020 	.word	0x00004020

00000f9c <AC_0_init>:

void AC_0_init(void)
{
     f9c:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <AC_0_init+0x14>)
     fa0:	4798      	blx	r3
	ac_async_init(&AC_0, AC);
     fa2:	4904      	ldr	r1, [pc, #16]	; (fb4 <AC_0_init+0x18>)
     fa4:	4804      	ldr	r0, [pc, #16]	; (fb8 <AC_0_init+0x1c>)
     fa6:	4b05      	ldr	r3, [pc, #20]	; (fbc <AC_0_init+0x20>)
     fa8:	4798      	blx	r3
	AC_0_PORT_init();
     faa:	4b05      	ldr	r3, [pc, #20]	; (fc0 <AC_0_init+0x24>)
     fac:	4798      	blx	r3
}
     fae:	bd10      	pop	{r4, pc}
     fb0:	00000f75 	.word	0x00000f75
     fb4:	42004400 	.word	0x42004400
     fb8:	200004e8 	.word	0x200004e8
     fbc:	00001369 	.word	0x00001369
     fc0:	00000ed5 	.word	0x00000ed5

00000fc4 <DAC_0_CLOCK_init>:
     fc4:	4a04      	ldr	r2, [pc, #16]	; (fd8 <DAC_0_CLOCK_init+0x14>)
     fc6:	6a11      	ldr	r1, [r2, #32]
     fc8:	2380      	movs	r3, #128	; 0x80
     fca:	02db      	lsls	r3, r3, #11
     fcc:	430b      	orrs	r3, r1
     fce:	6213      	str	r3, [r2, #32]
     fd0:	4a02      	ldr	r2, [pc, #8]	; (fdc <DAC_0_CLOCK_init+0x18>)
     fd2:	4b03      	ldr	r3, [pc, #12]	; (fe0 <DAC_0_CLOCK_init+0x1c>)
     fd4:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     fd6:	4770      	bx	lr
     fd8:	40000400 	.word	0x40000400
     fdc:	00004021 	.word	0x00004021
     fe0:	40000c00 	.word	0x40000c00

00000fe4 <DAC_0_init>:

void DAC_0_init(void)
{
     fe4:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     fe6:	4b03      	ldr	r3, [pc, #12]	; (ff4 <DAC_0_init+0x10>)
     fe8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     fea:	4903      	ldr	r1, [pc, #12]	; (ff8 <DAC_0_init+0x14>)
     fec:	4803      	ldr	r0, [pc, #12]	; (ffc <DAC_0_init+0x18>)
     fee:	4b04      	ldr	r3, [pc, #16]	; (1000 <DAC_0_init+0x1c>)
     ff0:	4798      	blx	r3
	DAC_0_PORT_init();
}
     ff2:	bd10      	pop	{r4, pc}
     ff4:	00000fc5 	.word	0x00000fc5
     ff8:	42004800 	.word	0x42004800
     ffc:	200004fc 	.word	0x200004fc
    1000:	00001405 	.word	0x00001405

00001004 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1004:	b510      	push	{r4, lr}
    1006:	4a05      	ldr	r2, [pc, #20]	; (101c <EVENT_SYSTEM_0_init+0x18>)
    1008:	4b05      	ldr	r3, [pc, #20]	; (1020 <EVENT_SYSTEM_0_init+0x1c>)
    100a:	805a      	strh	r2, [r3, #2]
    100c:	4a05      	ldr	r2, [pc, #20]	; (1024 <EVENT_SYSTEM_0_init+0x20>)
    100e:	6a13      	ldr	r3, [r2, #32]
    1010:	2102      	movs	r1, #2
    1012:	430b      	orrs	r3, r1
    1014:	6213      	str	r3, [r2, #32]
	_gclk_enable_channel(EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC);

	_pm_enable_bus_clock(PM_BUS_APBC, EVSYS);

	event_system_init();
    1016:	4b04      	ldr	r3, [pc, #16]	; (1028 <EVENT_SYSTEM_0_init+0x24>)
    1018:	4798      	blx	r3
}
    101a:	bd10      	pop	{r4, pc}
    101c:	00004007 	.word	0x00004007
    1020:	40000c00 	.word	0x40000c00
    1024:	40000400 	.word	0x40000400
    1028:	00001529 	.word	0x00001529

0000102c <TIMER_1_CLOCK_init>:
    102c:	4a04      	ldr	r2, [pc, #16]	; (1040 <TIMER_1_CLOCK_init+0x14>)
    102e:	6a11      	ldr	r1, [r2, #32]
    1030:	2380      	movs	r3, #128	; 0x80
    1032:	005b      	lsls	r3, r3, #1
    1034:	430b      	orrs	r3, r1
    1036:	6213      	str	r3, [r2, #32]
    1038:	4a02      	ldr	r2, [pc, #8]	; (1044 <TIMER_1_CLOCK_init+0x18>)
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <TIMER_1_CLOCK_init+0x1c>)
    103c:	805a      	strh	r2, [r3, #2]

void TIMER_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
    103e:	4770      	bx	lr
    1040:	40000400 	.word	0x40000400
    1044:	0000401a 	.word	0x0000401a
    1048:	40000c00 	.word	0x40000c00

0000104c <TIMER_0_CLOCK_init>:
    104c:	4a04      	ldr	r2, [pc, #16]	; (1060 <TIMER_0_CLOCK_init+0x14>)
    104e:	6a11      	ldr	r1, [r2, #32]
    1050:	2380      	movs	r3, #128	; 0x80
    1052:	009b      	lsls	r3, r3, #2
    1054:	430b      	orrs	r3, r1
    1056:	6213      	str	r3, [r2, #32]
    1058:	4a02      	ldr	r2, [pc, #8]	; (1064 <TIMER_0_CLOCK_init+0x18>)
    105a:	4b03      	ldr	r3, [pc, #12]	; (1068 <TIMER_0_CLOCK_init+0x1c>)
    105c:	805a      	strh	r2, [r3, #2]

void TIMER_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC1);
	_gclk_enable_channel(TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC);
}
    105e:	4770      	bx	lr
    1060:	40000400 	.word	0x40000400
    1064:	0000401a 	.word	0x0000401a
    1068:	40000c00 	.word	0x40000c00

0000106c <TIMER_2_CLOCK_init>:
    106c:	4a04      	ldr	r2, [pc, #16]	; (1080 <TIMER_2_CLOCK_init+0x14>)
    106e:	6a11      	ldr	r1, [r2, #32]
    1070:	2380      	movs	r3, #128	; 0x80
    1072:	00db      	lsls	r3, r3, #3
    1074:	430b      	orrs	r3, r1
    1076:	6213      	str	r3, [r2, #32]
    1078:	4a02      	ldr	r2, [pc, #8]	; (1084 <TIMER_2_CLOCK_init+0x18>)
    107a:	4b03      	ldr	r3, [pc, #12]	; (1088 <TIMER_2_CLOCK_init+0x1c>)
    107c:	805a      	strh	r2, [r3, #2]

void TIMER_2_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC2);
	_gclk_enable_channel(TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC);
}
    107e:	4770      	bx	lr
    1080:	40000400 	.word	0x40000400
    1084:	0000401b 	.word	0x0000401b
    1088:	40000c00 	.word	0x40000c00

0000108c <system_init>:

void system_init(void)
{
    108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    108e:	46de      	mov	lr, fp
    1090:	4657      	mov	r7, sl
    1092:	464e      	mov	r6, r9
    1094:	4645      	mov	r5, r8
    1096:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1098:	4b84      	ldr	r3, [pc, #528]	; (12ac <system_init+0x220>)
    109a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    109c:	22c0      	movs	r2, #192	; 0xc0
    109e:	05d2      	lsls	r2, r2, #23
    10a0:	2404      	movs	r4, #4
    10a2:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10a4:	4b82      	ldr	r3, [pc, #520]	; (12b0 <system_init+0x224>)
    10a6:	4983      	ldr	r1, [pc, #524]	; (12b4 <system_init+0x228>)
    10a8:	6299      	str	r1, [r3, #40]	; 0x28
    10aa:	4d83      	ldr	r5, [pc, #524]	; (12b8 <system_init+0x22c>)
    10ac:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10ae:	2042      	movs	r0, #66	; 0x42
    10b0:	5c19      	ldrb	r1, [r3, r0]
    10b2:	43a1      	bics	r1, r4
    10b4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10b6:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10b8:	2101      	movs	r1, #1
    10ba:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10bc:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10be:	383a      	subs	r0, #58	; 0x3a
    10c0:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10c2:	487e      	ldr	r0, [pc, #504]	; (12bc <system_init+0x230>)
    10c4:	6298      	str	r0, [r3, #40]	; 0x28
    10c6:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10c8:	2043      	movs	r0, #67	; 0x43
    10ca:	5c1e      	ldrb	r6, [r3, r0]
    10cc:	43a6      	bics	r6, r4
    10ce:	541e      	strb	r6, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10d0:	5c1e      	ldrb	r6, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10d2:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10d4:	541e      	strb	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10d6:	303d      	adds	r0, #61	; 0x3d
    10d8:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10da:	4879      	ldr	r0, [pc, #484]	; (12c0 <system_init+0x234>)
    10dc:	6298      	str	r0, [r3, #40]	; 0x28
    10de:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10e0:	2047      	movs	r0, #71	; 0x47
    10e2:	5c1d      	ldrb	r5, [r3, r0]
    10e4:	43a5      	bics	r5, r4
    10e6:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10e8:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10ea:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10ec:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10ee:	2080      	movs	r0, #128	; 0x80
    10f0:	0340      	lsls	r0, r0, #13
    10f2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10f4:	4873      	ldr	r0, [pc, #460]	; (12c4 <system_init+0x238>)
    10f6:	6298      	str	r0, [r3, #40]	; 0x28
    10f8:	4873      	ldr	r0, [pc, #460]	; (12c8 <system_init+0x23c>)
    10fa:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10fc:	2054      	movs	r0, #84	; 0x54
    10fe:	5c1d      	ldrb	r5, [r3, r0]
    1100:	43a5      	bics	r5, r4
    1102:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1104:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1106:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1108:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    110a:	2080      	movs	r0, #128	; 0x80
    110c:	0500      	lsls	r0, r0, #20
    110e:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1110:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1112:	2680      	movs	r6, #128	; 0x80
    1114:	05f6      	lsls	r6, r6, #23
    1116:	629e      	str	r6, [r3, #40]	; 0x28
    1118:	486c      	ldr	r0, [pc, #432]	; (12cc <system_init+0x240>)
    111a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    111c:	255b      	movs	r5, #91	; 0x5b
    111e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1120:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1122:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1124:	2080      	movs	r0, #128	; 0x80
    1126:	0540      	lsls	r0, r0, #21
    1128:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    112a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    112c:	629e      	str	r6, [r3, #40]	; 0x28
    112e:	4868      	ldr	r0, [pc, #416]	; (12d0 <system_init+0x244>)
    1130:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1132:	3501      	adds	r5, #1
    1134:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1136:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1138:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    113a:	2098      	movs	r0, #152	; 0x98
    113c:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    113e:	3810      	subs	r0, #16
    1140:	4683      	mov	fp, r0
    1142:	5011      	str	r1, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1144:	3020      	adds	r0, #32
    1146:	4d63      	ldr	r5, [pc, #396]	; (12d4 <system_init+0x248>)
    1148:	501d      	str	r5, [r3, r0]
    114a:	25c0      	movs	r5, #192	; 0xc0
    114c:	062d      	lsls	r5, r5, #24
    114e:	46aa      	mov	sl, r5
    1150:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1152:	27c0      	movs	r7, #192	; 0xc0
    1154:	46b8      	mov	r8, r7
    1156:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1158:	438f      	bics	r7, r1
    115a:	46bc      	mov	ip, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    115c:	4647      	mov	r7, r8
    115e:	4665      	mov	r5, ip
    1160:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1162:	2594      	movs	r5, #148	; 0x94
    1164:	46a8      	mov	r8, r5
    1166:	3d92      	subs	r5, #146	; 0x92
    1168:	46ac      	mov	ip, r5
    116a:	4645      	mov	r5, r8
    116c:	4667      	mov	r7, ip
    116e:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1170:	4665      	mov	r5, ip
    1172:	465f      	mov	r7, fp
    1174:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1176:	4d58      	ldr	r5, [pc, #352]	; (12d8 <system_init+0x24c>)
    1178:	501d      	str	r5, [r3, r0]
    117a:	4655      	mov	r5, sl
    117c:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    117e:	25c1      	movs	r5, #193	; 0xc1
    1180:	46a9      	mov	r9, r5
    1182:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1184:	002f      	movs	r7, r5
    1186:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1188:	464d      	mov	r5, r9
    118a:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    118c:	2580      	movs	r5, #128	; 0x80
    118e:	01ed      	lsls	r5, r5, #7
    1190:	46ac      	mov	ip, r5
    1192:	4645      	mov	r5, r8
    1194:	4667      	mov	r7, ip
    1196:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1198:	4665      	mov	r5, ip
    119a:	465f      	mov	r7, fp
    119c:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    119e:	4d4f      	ldr	r5, [pc, #316]	; (12dc <system_init+0x250>)
    11a0:	501d      	str	r5, [r3, r0]
    11a2:	4655      	mov	r5, sl
    11a4:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11a6:	25ce      	movs	r5, #206	; 0xce
    11a8:	46ac      	mov	ip, r5
    11aa:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ac:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11ae:	4667      	mov	r7, ip
    11b0:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11b2:	2580      	movs	r5, #128	; 0x80
    11b4:	02ad      	lsls	r5, r5, #10
    11b6:	465f      	mov	r7, fp
    11b8:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ba:	501e      	str	r6, [r3, r0]
    11bc:	4f48      	ldr	r7, [pc, #288]	; (12e0 <system_init+0x254>)
    11be:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11c0:	4647      	mov	r7, r8
    11c2:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11c4:	25d1      	movs	r5, #209	; 0xd1
    11c6:	46a9      	mov	r9, r5
    11c8:	5d5d      	ldrb	r5, [r3, r5]
    11ca:	43a5      	bics	r5, r4
    11cc:	464f      	mov	r7, r9
    11ce:	55dd      	strb	r5, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11d0:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11d2:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11d4:	2701      	movs	r7, #1
    11d6:	46bc      	mov	ip, r7
    11d8:	4667      	mov	r7, ip
    11da:	433d      	orrs	r5, r7
    11dc:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11de:	464f      	mov	r7, r9
    11e0:	55dd      	strb	r5, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11e2:	25b8      	movs	r5, #184	; 0xb8
    11e4:	46a9      	mov	r9, r5
    11e6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11e8:	3fc2      	subs	r7, #194	; 0xc2
    11ea:	403d      	ands	r5, r7
	tmp |= PORT_PMUX_PMUXO(data);
    11ec:	2770      	movs	r7, #112	; 0x70
    11ee:	46ba      	mov	sl, r7
    11f0:	4657      	mov	r7, sl
    11f2:	433d      	orrs	r5, r7
    11f4:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11f6:	464f      	mov	r7, r9
    11f8:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11fa:	465d      	mov	r5, fp
    11fc:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11fe:	501e      	str	r6, [r3, r0]
    1200:	4d38      	ldr	r5, [pc, #224]	; (12e4 <system_init+0x258>)
    1202:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1204:	4640      	mov	r0, r8
    1206:	5016      	str	r6, [r2, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1208:	304a      	adds	r0, #74	; 0x4a
    120a:	5c1a      	ldrb	r2, [r3, r0]
    120c:	43a2      	bics	r2, r4
    120e:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1210:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1212:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1214:	4661      	mov	r1, ip
    1216:	430a      	orrs	r2, r1
    1218:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    121a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    121c:	21bf      	movs	r1, #191	; 0xbf
    121e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1220:	38cf      	subs	r0, #207	; 0xcf
    1222:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1224:	2005      	movs	r0, #5
    1226:	4302      	orrs	r2, r0
    1228:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    122a:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      GPIO_PIN_FUNCTION_F);

	EXTERNAL_IRQ_0_init();
    122c:	4b2e      	ldr	r3, [pc, #184]	; (12e8 <system_init+0x25c>)
    122e:	4798      	blx	r3

	FLASH_0_init();
    1230:	4b2e      	ldr	r3, [pc, #184]	; (12ec <system_init+0x260>)
    1232:	4798      	blx	r3

	USART_0_CLOCK_init();
    1234:	4b2e      	ldr	r3, [pc, #184]	; (12f0 <system_init+0x264>)
    1236:	4798      	blx	r3
	USART_0_init();
    1238:	4b2e      	ldr	r3, [pc, #184]	; (12f4 <system_init+0x268>)
    123a:	4798      	blx	r3
	USART_0_PORT_init();
    123c:	4b2e      	ldr	r3, [pc, #184]	; (12f8 <system_init+0x26c>)
    123e:	4798      	blx	r3

	SPI_0_CLOCK_init();
    1240:	4b2e      	ldr	r3, [pc, #184]	; (12fc <system_init+0x270>)
    1242:	4798      	blx	r3
	SPI_0_init();
    1244:	4b2e      	ldr	r3, [pc, #184]	; (1300 <system_init+0x274>)
    1246:	4798      	blx	r3
	SPI_0_PORT_init();
    1248:	4b2e      	ldr	r3, [pc, #184]	; (1304 <system_init+0x278>)
    124a:	4798      	blx	r3

	TIMER_8_CLOCK_init();
    124c:	4b2e      	ldr	r3, [pc, #184]	; (1308 <system_init+0x27c>)
    124e:	4798      	blx	r3
	TIMER_8_init();
    1250:	4b2e      	ldr	r3, [pc, #184]	; (130c <system_init+0x280>)
    1252:	4798      	blx	r3

	TIMER_3_CLOCK_init();
    1254:	4b2e      	ldr	r3, [pc, #184]	; (1310 <system_init+0x284>)
    1256:	4798      	blx	r3

	TIMER_3_init();
    1258:	4b2e      	ldr	r3, [pc, #184]	; (1314 <system_init+0x288>)
    125a:	4798      	blx	r3

	TIMER_5_CLOCK_init();
    125c:	4b2e      	ldr	r3, [pc, #184]	; (1318 <system_init+0x28c>)
    125e:	4798      	blx	r3

	TIMER_5_init();
    1260:	4b2e      	ldr	r3, [pc, #184]	; (131c <system_init+0x290>)
    1262:	4798      	blx	r3

	TIMER_6_CLOCK_init();
    1264:	4b2e      	ldr	r3, [pc, #184]	; (1320 <system_init+0x294>)
    1266:	4798      	blx	r3

	TIMER_6_init();
    1268:	4b2e      	ldr	r3, [pc, #184]	; (1324 <system_init+0x298>)
    126a:	4798      	blx	r3

	TIMER_4_CLOCK_init();
    126c:	4b2e      	ldr	r3, [pc, #184]	; (1328 <system_init+0x29c>)
    126e:	4798      	blx	r3

	TIMER_4_init();
    1270:	4b2e      	ldr	r3, [pc, #184]	; (132c <system_init+0x2a0>)
    1272:	4798      	blx	r3

	TIMER_7_CLOCK_init();
    1274:	4b2e      	ldr	r3, [pc, #184]	; (1330 <system_init+0x2a4>)
    1276:	4798      	blx	r3

	TIMER_7_init();
    1278:	4b2e      	ldr	r3, [pc, #184]	; (1334 <system_init+0x2a8>)
    127a:	4798      	blx	r3

	AC_0_init();
    127c:	4b2e      	ldr	r3, [pc, #184]	; (1338 <system_init+0x2ac>)
    127e:	4798      	blx	r3

	DAC_0_init();
    1280:	4b2e      	ldr	r3, [pc, #184]	; (133c <system_init+0x2b0>)
    1282:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1284:	4b2e      	ldr	r3, [pc, #184]	; (1340 <system_init+0x2b4>)
    1286:	4798      	blx	r3

	TIMER_1_CLOCK_init();
    1288:	4b2e      	ldr	r3, [pc, #184]	; (1344 <system_init+0x2b8>)
    128a:	4798      	blx	r3

	TIMER_1_init();
    128c:	4b2e      	ldr	r3, [pc, #184]	; (1348 <system_init+0x2bc>)
    128e:	4798      	blx	r3

	TIMER_0_CLOCK_init();
    1290:	4b2e      	ldr	r3, [pc, #184]	; (134c <system_init+0x2c0>)
    1292:	4798      	blx	r3

	TIMER_0_init();
    1294:	4b2e      	ldr	r3, [pc, #184]	; (1350 <system_init+0x2c4>)
    1296:	4798      	blx	r3

	TIMER_2_CLOCK_init();
    1298:	4b2e      	ldr	r3, [pc, #184]	; (1354 <system_init+0x2c8>)
    129a:	4798      	blx	r3

	TIMER_2_init();
    129c:	4b2e      	ldr	r3, [pc, #184]	; (1358 <system_init+0x2cc>)
    129e:	4798      	blx	r3
}
    12a0:	bc3c      	pop	{r2, r3, r4, r5}
    12a2:	4690      	mov	r8, r2
    12a4:	4699      	mov	r9, r3
    12a6:	46a2      	mov	sl, r4
    12a8:	46ab      	mov	fp, r5
    12aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ac:	00001971 	.word	0x00001971
    12b0:	41004400 	.word	0x41004400
    12b4:	40020004 	.word	0x40020004
    12b8:	c0020000 	.word	0xc0020000
    12bc:	40020008 	.word	0x40020008
    12c0:	40020080 	.word	0x40020080
    12c4:	40020000 	.word	0x40020000
    12c8:	c0020010 	.word	0xc0020010
    12cc:	c0000800 	.word	0xc0000800
    12d0:	c0001000 	.word	0xc0001000
    12d4:	40000001 	.word	0x40000001
    12d8:	40000002 	.word	0x40000002
    12dc:	40004000 	.word	0x40004000
    12e0:	c0000002 	.word	0xc0000002
    12e4:	c0004000 	.word	0xc0004000
    12e8:	00000b5d 	.word	0x00000b5d
    12ec:	00000c9d 	.word	0x00000c9d
    12f0:	00000cbd 	.word	0x00000cbd
    12f4:	00002421 	.word	0x00002421
    12f8:	00000cdd 	.word	0x00000cdd
    12fc:	00000df5 	.word	0x00000df5
    1300:	00001e6d 	.word	0x00001e6d
    1304:	00000d21 	.word	0x00000d21
    1308:	00000e15 	.word	0x00000e15
    130c:	00001df5 	.word	0x00001df5
    1310:	00000e35 	.word	0x00000e35
    1314:	00002255 	.word	0x00002255
    1318:	00000e55 	.word	0x00000e55
    131c:	000022b1 	.word	0x000022b1
    1320:	00000e75 	.word	0x00000e75
    1324:	0000230d 	.word	0x0000230d
    1328:	00000e95 	.word	0x00000e95
    132c:	00002369 	.word	0x00002369
    1330:	00000eb5 	.word	0x00000eb5
    1334:	000023c5 	.word	0x000023c5
    1338:	00000f9d 	.word	0x00000f9d
    133c:	00000fe5 	.word	0x00000fe5
    1340:	00001005 	.word	0x00001005
    1344:	0000102d 	.word	0x0000102d
    1348:	0000204d 	.word	0x0000204d
    134c:	0000104d 	.word	0x0000104d
    1350:	00002121 	.word	0x00002121
    1354:	0000106d 	.word	0x0000106d
    1358:	000021a5 	.word	0x000021a5

0000135c <ac_async_comparison_ready>:
 *
 * \param[in] device The pointer to AC device structure
 * \param[in] comp Comparator number
 */
static void ac_async_comparison_ready(struct _ac_async_device *device, const uint8_t comp, const uint8_t result)
{
    135c:	b510      	push	{r4, lr}
	struct ac_async_descriptor *const descr = CONTAINER_OF(device, struct ac_async_descriptor, device);

	if (descr->cb.comparison_ready) {
    135e:	6903      	ldr	r3, [r0, #16]
    1360:	2b00      	cmp	r3, #0
    1362:	d000      	beq.n	1366 <ac_async_comparison_ready+0xa>
		descr->cb.comparison_ready(descr, comp, result);
    1364:	4798      	blx	r3
	}
}
    1366:	bd10      	pop	{r4, pc}

00001368 <ac_async_init>:
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	0004      	movs	r4, r0
    136c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    136e:	2800      	cmp	r0, #0
    1370:	d011      	beq.n	1396 <ac_async_init+0x2e>
    1372:	2900      	cmp	r1, #0
    1374:	d00d      	beq.n	1392 <ac_async_init+0x2a>
    1376:	2001      	movs	r0, #1
    1378:	2236      	movs	r2, #54	; 0x36
    137a:	4908      	ldr	r1, [pc, #32]	; (139c <ac_async_init+0x34>)
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <ac_async_init+0x38>)
    137e:	4798      	blx	r3
	init_status = _ac_async_init(&descr->device, hw);
    1380:	0029      	movs	r1, r5
    1382:	0020      	movs	r0, r4
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <ac_async_init+0x3c>)
    1386:	4798      	blx	r3
	if (init_status) {
    1388:	2800      	cmp	r0, #0
    138a:	d101      	bne.n	1390 <ac_async_init+0x28>
	descr->device.cb.comparison_ready_cb = ac_async_comparison_ready;
    138c:	4b06      	ldr	r3, [pc, #24]	; (13a8 <ac_async_init+0x40>)
    138e:	6023      	str	r3, [r4, #0]
}
    1390:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1392:	2000      	movs	r0, #0
    1394:	e7f0      	b.n	1378 <ac_async_init+0x10>
    1396:	2000      	movs	r0, #0
    1398:	e7ee      	b.n	1378 <ac_async_init+0x10>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	00005830 	.word	0x00005830
    13a0:	000016f9 	.word	0x000016f9
    13a4:	00001865 	.word	0x00001865
    13a8:	0000135d 	.word	0x0000135d

000013ac <ac_async_enable>:
{
    13ac:	b510      	push	{r4, lr}
    13ae:	0004      	movs	r4, r0
	ASSERT(descr);
    13b0:	1e43      	subs	r3, r0, #1
    13b2:	4198      	sbcs	r0, r3
    13b4:	b2c0      	uxtb	r0, r0
    13b6:	2252      	movs	r2, #82	; 0x52
    13b8:	4903      	ldr	r1, [pc, #12]	; (13c8 <ac_async_enable+0x1c>)
    13ba:	4b04      	ldr	r3, [pc, #16]	; (13cc <ac_async_enable+0x20>)
    13bc:	4798      	blx	r3
	_ac_async_enable(&descr->device);
    13be:	0020      	movs	r0, r4
    13c0:	4b03      	ldr	r3, [pc, #12]	; (13d0 <ac_async_enable+0x24>)
    13c2:	4798      	blx	r3
}
    13c4:	2000      	movs	r0, #0
    13c6:	bd10      	pop	{r4, pc}
    13c8:	00005830 	.word	0x00005830
    13cc:	000016f9 	.word	0x000016f9
    13d0:	00001919 	.word	0x00001919

000013d4 <ac_async_register_callback>:
{
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	0004      	movs	r4, r0
    13d8:	000d      	movs	r5, r1
    13da:	0016      	movs	r6, r2
	ASSERT(descr);
    13dc:	1e43      	subs	r3, r0, #1
    13de:	4198      	sbcs	r0, r3
    13e0:	b2c0      	uxtb	r0, r0
    13e2:	226b      	movs	r2, #107	; 0x6b
    13e4:	4905      	ldr	r1, [pc, #20]	; (13fc <ac_async_register_callback+0x28>)
    13e6:	4b06      	ldr	r3, [pc, #24]	; (1400 <ac_async_register_callback+0x2c>)
    13e8:	4798      	blx	r3
	switch (type) {
    13ea:	2d00      	cmp	r5, #0
    13ec:	d102      	bne.n	13f4 <ac_async_register_callback+0x20>
		descr->cb.comparison_ready = cb;
    13ee:	6126      	str	r6, [r4, #16]
	return ERR_NONE;
    13f0:	2000      	movs	r0, #0
}
    13f2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    13f4:	200d      	movs	r0, #13
    13f6:	4240      	negs	r0, r0
    13f8:	e7fb      	b.n	13f2 <ac_async_register_callback+0x1e>
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	00005830 	.word	0x00005830
    1400:	000016f9 	.word	0x000016f9

00001404 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	0004      	movs	r4, r0
    1408:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    140a:	2800      	cmp	r0, #0
    140c:	d010      	beq.n	1430 <dac_sync_init+0x2c>
    140e:	2900      	cmp	r1, #0
    1410:	d00c      	beq.n	142c <dac_sync_init+0x28>
    1412:	2001      	movs	r0, #1
    1414:	2232      	movs	r2, #50	; 0x32
    1416:	490c      	ldr	r1, [pc, #48]	; (1448 <dac_sync_init+0x44>)
    1418:	4b0c      	ldr	r3, [pc, #48]	; (144c <dac_sync_init+0x48>)
    141a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    141c:	0029      	movs	r1, r5
    141e:	0020      	movs	r0, r4
    1420:	4b0b      	ldr	r3, [pc, #44]	; (1450 <dac_sync_init+0x4c>)
    1422:	4798      	blx	r3
	if (rc) {
    1424:	2800      	cmp	r0, #0
    1426:	d10e      	bne.n	1446 <dac_sync_init+0x42>
    1428:	2300      	movs	r3, #0
    142a:	e00a      	b.n	1442 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    142c:	2000      	movs	r0, #0
    142e:	e7f1      	b.n	1414 <dac_sync_init+0x10>
    1430:	2000      	movs	r0, #0
    1432:	e7ef      	b.n	1414 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1434:	00da      	lsls	r2, r3, #3
    1436:	18a2      	adds	r2, r4, r2
    1438:	2100      	movs	r1, #0
    143a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    143c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    143e:	3301      	adds	r3, #1
    1440:	b2db      	uxtb	r3, r3
    1442:	2b00      	cmp	r3, #0
    1444:	d0f6      	beq.n	1434 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    1446:	bd70      	pop	{r4, r5, r6, pc}
    1448:	0000584c 	.word	0x0000584c
    144c:	000016f9 	.word	0x000016f9
    1450:	000019ed 	.word	0x000019ed

00001454 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    1454:	b570      	push	{r4, r5, r6, lr}
    1456:	0004      	movs	r4, r0
    1458:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
    145a:	2800      	cmp	r0, #0
    145c:	d00c      	beq.n	1478 <dac_sync_enable_channel+0x24>
    145e:	2900      	cmp	r1, #0
    1460:	d00c      	beq.n	147c <dac_sync_enable_channel+0x28>
    1462:	2000      	movs	r0, #0
    1464:	2252      	movs	r2, #82	; 0x52
    1466:	4906      	ldr	r1, [pc, #24]	; (1480 <dac_sync_enable_channel+0x2c>)
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <dac_sync_enable_channel+0x30>)
    146a:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    146c:	0029      	movs	r1, r5
    146e:	0020      	movs	r0, r4
    1470:	4b05      	ldr	r3, [pc, #20]	; (1488 <dac_sync_enable_channel+0x34>)
    1472:	4798      	blx	r3

	return ERR_NONE;
}
    1474:	2000      	movs	r0, #0
    1476:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
    1478:	2000      	movs	r0, #0
    147a:	e7f3      	b.n	1464 <dac_sync_enable_channel+0x10>
    147c:	2001      	movs	r0, #1
    147e:	e7f1      	b.n	1464 <dac_sync_enable_channel+0x10>
    1480:	0000584c 	.word	0x0000584c
    1484:	000016f9 	.word	0x000016f9
    1488:	00001a19 	.word	0x00001a19

0000148c <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
    148c:	b5f0      	push	{r4, r5, r6, r7, lr}
    148e:	46ce      	mov	lr, r9
    1490:	b500      	push	{lr}
    1492:	b082      	sub	sp, #8
    1494:	0007      	movs	r7, r0
    1496:	000d      	movs	r5, r1
    1498:	0014      	movs	r4, r2
    149a:	4699      	mov	r9, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    149c:	2800      	cmp	r0, #0
    149e:	d007      	beq.n	14b0 <dac_sync_write+0x24>
    14a0:	2900      	cmp	r1, #0
    14a2:	d107      	bne.n	14b4 <dac_sync_write+0x28>
    14a4:	2a00      	cmp	r2, #0
    14a6:	d018      	beq.n	14da <dac_sync_write+0x4e>
    14a8:	2b00      	cmp	r3, #0
    14aa:	d118      	bne.n	14de <dac_sync_write+0x52>
    14ac:	2000      	movs	r0, #0
    14ae:	e002      	b.n	14b6 <dac_sync_write+0x2a>
    14b0:	2000      	movs	r0, #0
    14b2:	e000      	b.n	14b6 <dac_sync_write+0x2a>
    14b4:	2000      	movs	r0, #0
    14b6:	226a      	movs	r2, #106	; 0x6a
    14b8:	4917      	ldr	r1, [pc, #92]	; (1518 <dac_sync_write+0x8c>)
    14ba:	4b18      	ldr	r3, [pc, #96]	; (151c <dac_sync_write+0x90>)
    14bc:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
    14be:	9701      	str	r7, [sp, #4]
    14c0:	0029      	movs	r1, r5
    14c2:	0038      	movs	r0, r7
    14c4:	4b16      	ldr	r3, [pc, #88]	; (1520 <dac_sync_write+0x94>)
    14c6:	4798      	blx	r3
    14c8:	2800      	cmp	r0, #0
    14ca:	d022      	beq.n	1512 <dac_sync_write+0x86>
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
    14cc:	002e      	movs	r6, r5
    14ce:	00eb      	lsls	r3, r5, #3
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	605c      	str	r4, [r3, #4]
	descr->sel_ch[ch].length = length;
    14d4:	464a      	mov	r2, r9
    14d6:	609a      	str	r2, [r3, #8]

	while (descr->sel_ch[ch].length) {
    14d8:	e011      	b.n	14fe <dac_sync_write+0x72>
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    14da:	2000      	movs	r0, #0
    14dc:	e7eb      	b.n	14b6 <dac_sync_write+0x2a>
    14de:	2001      	movs	r0, #1
    14e0:	e7e9      	b.n	14b6 <dac_sync_write+0x2a>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
    14e2:	00f4      	lsls	r4, r6, #3
    14e4:	193c      	adds	r4, r7, r4
    14e6:	6863      	ldr	r3, [r4, #4]
    14e8:	8819      	ldrh	r1, [r3, #0]
    14ea:	002a      	movs	r2, r5
    14ec:	9801      	ldr	r0, [sp, #4]
    14ee:	4b0d      	ldr	r3, [pc, #52]	; (1524 <dac_sync_write+0x98>)
    14f0:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
    14f2:	6863      	ldr	r3, [r4, #4]
    14f4:	3302      	adds	r3, #2
    14f6:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
    14f8:	68a3      	ldr	r3, [r4, #8]
    14fa:	3b01      	subs	r3, #1
    14fc:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
    14fe:	00f3      	lsls	r3, r6, #3
    1500:	18fb      	adds	r3, r7, r3
    1502:	689b      	ldr	r3, [r3, #8]
    1504:	2b00      	cmp	r3, #0
    1506:	d1ec      	bne.n	14e2 <dac_sync_write+0x56>
	}

	return ERR_NONE;
    1508:	2000      	movs	r0, #0
}
    150a:	b002      	add	sp, #8
    150c:	bc04      	pop	{r2}
    150e:	4691      	mov	r9, r2
    1510:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_READY;
    1512:	201d      	movs	r0, #29
    1514:	4240      	negs	r0, r0
    1516:	e7f8      	b.n	150a <dac_sync_write+0x7e>
    1518:	0000584c 	.word	0x0000584c
    151c:	000016f9 	.word	0x000016f9
    1520:	00001a2d 	.word	0x00001a2d
    1524:	00001a3f 	.word	0x00001a3f

00001528 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1528:	b510      	push	{r4, lr}
	return _event_system_init();
    152a:	4b01      	ldr	r3, [pc, #4]	; (1530 <event_system_init+0x8>)
    152c:	4798      	blx	r3
}
    152e:	bd10      	pop	{r4, pc}
    1530:	00001bf9 	.word	0x00001bf9

00001534 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1534:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1536:	2504      	movs	r5, #4
    1538:	2400      	movs	r4, #0

	while (upper >= lower) {
    153a:	e007      	b.n	154c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    153c:	4a0d      	ldr	r2, [pc, #52]	; (1574 <process_ext_irq+0x40>)
    153e:	58b3      	ldr	r3, [r6, r2]
    1540:	2b00      	cmp	r3, #0
    1542:	d000      	beq.n	1546 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    1544:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    1546:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    1548:	3a01      	subs	r2, #1
    154a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    154c:	42ac      	cmp	r4, r5
    154e:	d8fa      	bhi.n	1546 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1550:	192b      	adds	r3, r5, r4
    1552:	105b      	asrs	r3, r3, #1
    1554:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1556:	2a03      	cmp	r2, #3
    1558:	d8f5      	bhi.n	1546 <process_ext_irq+0x12>
    155a:	21ff      	movs	r1, #255	; 0xff
    155c:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    155e:	00de      	lsls	r6, r3, #3
    1560:	4904      	ldr	r1, [pc, #16]	; (1574 <process_ext_irq+0x40>)
    1562:	1989      	adds	r1, r1, r6
    1564:	6849      	ldr	r1, [r1, #4]
    1566:	4281      	cmp	r1, r0
    1568:	d0e8      	beq.n	153c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    156a:	d2ed      	bcs.n	1548 <process_ext_irq+0x14>
			lower = middle + 1;
    156c:	3201      	adds	r2, #1
    156e:	b2d4      	uxtb	r4, r2
    1570:	e7ec      	b.n	154c <process_ext_irq+0x18>
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	20000430 	.word	0x20000430

00001578 <ext_irq_init>:
{
    1578:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    157a:	2300      	movs	r3, #0
    157c:	e009      	b.n	1592 <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    157e:	4a08      	ldr	r2, [pc, #32]	; (15a0 <ext_irq_init+0x28>)
    1580:	00d9      	lsls	r1, r3, #3
    1582:	1850      	adds	r0, r2, r1
    1584:	2401      	movs	r4, #1
    1586:	4264      	negs	r4, r4
    1588:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    158a:	2000      	movs	r0, #0
    158c:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    158e:	3301      	adds	r3, #1
    1590:	b29b      	uxth	r3, r3
    1592:	2b03      	cmp	r3, #3
    1594:	d9f3      	bls.n	157e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    1596:	4803      	ldr	r0, [pc, #12]	; (15a4 <ext_irq_init+0x2c>)
    1598:	4b03      	ldr	r3, [pc, #12]	; (15a8 <ext_irq_init+0x30>)
    159a:	4798      	blx	r3
}
    159c:	bd10      	pop	{r4, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	20000430 	.word	0x20000430
    15a4:	00001535 	.word	0x00001535
    15a8:	00001a4d 	.word	0x00001a4d

000015ac <ext_irq_register>:
{
    15ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ae:	46d6      	mov	lr, sl
    15b0:	464f      	mov	r7, r9
    15b2:	4646      	mov	r6, r8
    15b4:	b5c0      	push	{r6, r7, lr}
    15b6:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    15b8:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    15ba:	2b03      	cmp	r3, #3
    15bc:	d80c      	bhi.n	15d8 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    15be:	00dc      	lsls	r4, r3, #3
    15c0:	4a32      	ldr	r2, [pc, #200]	; (168c <ext_irq_register+0xe0>)
    15c2:	1912      	adds	r2, r2, r4
    15c4:	6852      	ldr	r2, [r2, #4]
    15c6:	4282      	cmp	r2, r0
    15c8:	d002      	beq.n	15d0 <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    15ca:	3301      	adds	r3, #1
    15cc:	b2db      	uxtb	r3, r3
    15ce:	e7f4      	b.n	15ba <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    15d0:	4b2e      	ldr	r3, [pc, #184]	; (168c <ext_irq_register+0xe0>)
    15d2:	50e1      	str	r1, [r4, r3]
			found          = true;
    15d4:	2601      	movs	r6, #1
			break;
    15d6:	e000      	b.n	15da <ext_irq_register+0x2e>
	bool    found = false;
    15d8:	2600      	movs	r6, #0
	if (NULL == cb) {
    15da:	2900      	cmp	r1, #0
    15dc:	d00c      	beq.n	15f8 <ext_irq_register+0x4c>
	if (!found) {
    15de:	2e00      	cmp	r6, #0
    15e0:	d142      	bne.n	1668 <ext_irq_register+0xbc>
    15e2:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    15e4:	2b03      	cmp	r3, #3
    15e6:	d811      	bhi.n	160c <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    15e8:	00da      	lsls	r2, r3, #3
    15ea:	4d28      	ldr	r5, [pc, #160]	; (168c <ext_irq_register+0xe0>)
    15ec:	5952      	ldr	r2, [r2, r5]
    15ee:	2a00      	cmp	r2, #0
    15f0:	d007      	beq.n	1602 <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    15f2:	3301      	adds	r3, #1
    15f4:	b2db      	uxtb	r3, r3
    15f6:	e7f5      	b.n	15e4 <ext_irq_register+0x38>
		if (!found) {
    15f8:	2e00      	cmp	r6, #0
    15fa:	d040      	beq.n	167e <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    15fc:	4b24      	ldr	r3, [pc, #144]	; (1690 <ext_irq_register+0xe4>)
    15fe:	4798      	blx	r3
    1600:	e037      	b.n	1672 <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    1602:	00dc      	lsls	r4, r3, #3
    1604:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    1606:	192c      	adds	r4, r5, r4
    1608:	6060      	str	r0, [r4, #4]
				found           = true;
    160a:	2601      	movs	r6, #1
    160c:	2200      	movs	r2, #0
    160e:	e001      	b.n	1614 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1610:	3201      	adds	r2, #1
    1612:	b2d2      	uxtb	r2, r2
    1614:	2a03      	cmp	r2, #3
    1616:	d827      	bhi.n	1668 <ext_irq_register+0xbc>
    1618:	2b03      	cmp	r3, #3
    161a:	d825      	bhi.n	1668 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    161c:	9301      	str	r3, [sp, #4]
    161e:	491b      	ldr	r1, [pc, #108]	; (168c <ext_irq_register+0xe0>)
    1620:	00dc      	lsls	r4, r3, #3
    1622:	190c      	adds	r4, r1, r4
    1624:	6867      	ldr	r7, [r4, #4]
    1626:	00d4      	lsls	r4, r2, #3
    1628:	1909      	adds	r1, r1, r4
    162a:	6849      	ldr	r1, [r1, #4]
    162c:	428f      	cmp	r7, r1
    162e:	d2ef      	bcs.n	1610 <ext_irq_register+0x64>
    1630:	1c4c      	adds	r4, r1, #1
    1632:	d0ed      	beq.n	1610 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    1634:	a902      	add	r1, sp, #8
    1636:	468c      	mov	ip, r1
    1638:	4c14      	ldr	r4, [pc, #80]	; (168c <ext_irq_register+0xe0>)
    163a:	46a0      	mov	r8, r4
    163c:	00d4      	lsls	r4, r2, #3
    163e:	46a1      	mov	r9, r4
    1640:	4644      	mov	r4, r8
    1642:	444c      	add	r4, r9
    1644:	4665      	mov	r5, ip
    1646:	cc82      	ldmia	r4!, {r1, r7}
    1648:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    164a:	9901      	ldr	r1, [sp, #4]
    164c:	00c9      	lsls	r1, r1, #3
    164e:	468a      	mov	sl, r1
    1650:	4649      	mov	r1, r9
    1652:	4441      	add	r1, r8
    1654:	4644      	mov	r4, r8
    1656:	4454      	add	r4, sl
    1658:	cca0      	ldmia	r4!, {r5, r7}
    165a:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    165c:	4645      	mov	r5, r8
    165e:	4455      	add	r5, sl
    1660:	4661      	mov	r1, ip
    1662:	c990      	ldmia	r1!, {r4, r7}
    1664:	c590      	stmia	r5!, {r4, r7}
    1666:	e7d3      	b.n	1610 <ext_irq_register+0x64>
	if (!found) {
    1668:	2e00      	cmp	r6, #0
    166a:	d00b      	beq.n	1684 <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    166c:	2101      	movs	r1, #1
    166e:	4b08      	ldr	r3, [pc, #32]	; (1690 <ext_irq_register+0xe4>)
    1670:	4798      	blx	r3
}
    1672:	b004      	add	sp, #16
    1674:	bc1c      	pop	{r2, r3, r4}
    1676:	4690      	mov	r8, r2
    1678:	4699      	mov	r9, r3
    167a:	46a2      	mov	sl, r4
    167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    167e:	200d      	movs	r0, #13
    1680:	4240      	negs	r0, r0
    1682:	e7f6      	b.n	1672 <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    1684:	200d      	movs	r0, #13
    1686:	4240      	negs	r0, r0
    1688:	e7f3      	b.n	1672 <ext_irq_register+0xc6>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	20000430 	.word	0x20000430
    1690:	00001ae9 	.word	0x00001ae9

00001694 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1694:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1696:	6943      	ldr	r3, [r0, #20]
    1698:	2b00      	cmp	r3, #0
    169a:	d000      	beq.n	169e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    169c:	4798      	blx	r3
	}
}
    169e:	bd10      	pop	{r4, pc}

000016a0 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    16a0:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    16a2:	6983      	ldr	r3, [r0, #24]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d000      	beq.n	16aa <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    16a8:	4798      	blx	r3
	}
}
    16aa:	bd10      	pop	{r4, pc}

000016ac <flash_init>:
{
    16ac:	b570      	push	{r4, r5, r6, lr}
    16ae:	0004      	movs	r4, r0
    16b0:	000d      	movs	r5, r1
	ASSERT(flash && hw);
    16b2:	2800      	cmp	r0, #0
    16b4:	d013      	beq.n	16de <flash_init+0x32>
    16b6:	2900      	cmp	r1, #0
    16b8:	d00f      	beq.n	16da <flash_init+0x2e>
    16ba:	2001      	movs	r0, #1
    16bc:	2238      	movs	r2, #56	; 0x38
    16be:	4909      	ldr	r1, [pc, #36]	; (16e4 <flash_init+0x38>)
    16c0:	4b09      	ldr	r3, [pc, #36]	; (16e8 <flash_init+0x3c>)
    16c2:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    16c4:	0029      	movs	r1, r5
    16c6:	0020      	movs	r0, r4
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <flash_init+0x40>)
    16ca:	4798      	blx	r3
	if (rc) {
    16cc:	2800      	cmp	r0, #0
    16ce:	d103      	bne.n	16d8 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
    16d0:	4b07      	ldr	r3, [pc, #28]	; (16f0 <flash_init+0x44>)
    16d2:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    16d4:	4b07      	ldr	r3, [pc, #28]	; (16f4 <flash_init+0x48>)
    16d6:	6063      	str	r3, [r4, #4]
}
    16d8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
    16da:	2000      	movs	r0, #0
    16dc:	e7ee      	b.n	16bc <flash_init+0x10>
    16de:	2000      	movs	r0, #0
    16e0:	e7ec      	b.n	16bc <flash_init+0x10>
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00005868 	.word	0x00005868
    16e8:	000016f9 	.word	0x000016f9
    16ec:	00001cb5 	.word	0x00001cb5
    16f0:	00001695 	.word	0x00001695
    16f4:	000016a1 	.word	0x000016a1

000016f8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    16f8:	2800      	cmp	r0, #0
    16fa:	d100      	bne.n	16fe <assert+0x6>
		__asm("BKPT #0");
    16fc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    16fe:	4770      	bx	lr

00001700 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1700:	b570      	push	{r4, r5, r6, lr}
    1702:	0004      	movs	r4, r0
    1704:	000e      	movs	r6, r1
    1706:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    1708:	2800      	cmp	r0, #0
    170a:	d012      	beq.n	1732 <ringbuffer_init+0x32>
    170c:	2900      	cmp	r1, #0
    170e:	d012      	beq.n	1736 <ringbuffer_init+0x36>
    1710:	2a00      	cmp	r2, #0
    1712:	d112      	bne.n	173a <ringbuffer_init+0x3a>
    1714:	2000      	movs	r0, #0
    1716:	2228      	movs	r2, #40	; 0x28
    1718:	490a      	ldr	r1, [pc, #40]	; (1744 <ringbuffer_init+0x44>)
    171a:	4b0b      	ldr	r3, [pc, #44]	; (1748 <ringbuffer_init+0x48>)
    171c:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    171e:	1e6b      	subs	r3, r5, #1
    1720:	422b      	tst	r3, r5
    1722:	d10c      	bne.n	173e <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1724:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1726:	2300      	movs	r3, #0
    1728:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    172a:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    172c:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    172e:	2000      	movs	r0, #0
}
    1730:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1732:	2000      	movs	r0, #0
    1734:	e7ef      	b.n	1716 <ringbuffer_init+0x16>
    1736:	2000      	movs	r0, #0
    1738:	e7ed      	b.n	1716 <ringbuffer_init+0x16>
    173a:	2001      	movs	r0, #1
    173c:	e7eb      	b.n	1716 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    173e:	200d      	movs	r0, #13
    1740:	4240      	negs	r0, r0
    1742:	e7f5      	b.n	1730 <ringbuffer_init+0x30>
    1744:	00005880 	.word	0x00005880
    1748:	000016f9 	.word	0x000016f9

0000174c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    174c:	b570      	push	{r4, r5, r6, lr}
    174e:	0004      	movs	r4, r0
    1750:	000d      	movs	r5, r1
	ASSERT(rb);
    1752:	1e43      	subs	r3, r0, #1
    1754:	4198      	sbcs	r0, r3
    1756:	b2c0      	uxtb	r0, r0
    1758:	2251      	movs	r2, #81	; 0x51
    175a:	490a      	ldr	r1, [pc, #40]	; (1784 <ringbuffer_put+0x38>)
    175c:	4b0a      	ldr	r3, [pc, #40]	; (1788 <ringbuffer_put+0x3c>)
    175e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1760:	6863      	ldr	r3, [r4, #4]
    1762:	68e2      	ldr	r2, [r4, #12]
    1764:	4013      	ands	r3, r2
    1766:	6822      	ldr	r2, [r4, #0]
    1768:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    176a:	68e3      	ldr	r3, [r4, #12]
    176c:	68a2      	ldr	r2, [r4, #8]
    176e:	1a9a      	subs	r2, r3, r2
    1770:	6861      	ldr	r1, [r4, #4]
    1772:	428a      	cmp	r2, r1
    1774:	d901      	bls.n	177a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1776:	1a59      	subs	r1, r3, r1
    1778:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    177a:	3301      	adds	r3, #1
    177c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    177e:	2000      	movs	r0, #0
    1780:	bd70      	pop	{r4, r5, r6, pc}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	00005880 	.word	0x00005880
    1788:	000016f9 	.word	0x000016f9

0000178c <_ac_init_irq_param>:
/**
 * \brief Init irq param with the given ac hardware instance
 */
static void _ac_init_irq_param(const void *const hw, void *dev)
{
	if (hw == AC) {
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <_ac_init_irq_param+0x10>)
    178e:	4298      	cmp	r0, r3
    1790:	d000      	beq.n	1794 <_ac_init_irq_param+0x8>
		_ac_dev = (struct _ac_async_device *)dev;
	}
}
    1792:	4770      	bx	lr
		_ac_dev = (struct _ac_async_device *)dev;
    1794:	4b02      	ldr	r3, [pc, #8]	; (17a0 <_ac_init_irq_param+0x14>)
    1796:	6019      	str	r1, [r3, #0]
}
    1798:	e7fb      	b.n	1792 <_ac_init_irq_param+0x6>
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	42004400 	.word	0x42004400
    17a0:	20000450 	.word	0x20000450

000017a4 <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
    17a4:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    17a6:	2300      	movs	r3, #0
    17a8:	2b00      	cmp	r3, #0
    17aa:	d001      	beq.n	17b0 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
    17ac:	2000      	movs	r0, #0
}
    17ae:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
    17b0:	009a      	lsls	r2, r3, #2
    17b2:	18d2      	adds	r2, r2, r3
    17b4:	0091      	lsls	r1, r2, #2
    17b6:	4a05      	ldr	r2, [pc, #20]	; (17cc <_get_ac_cfg+0x28>)
    17b8:	588a      	ldr	r2, [r1, r2]
    17ba:	4282      	cmp	r2, r0
    17bc:	d002      	beq.n	17c4 <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    17be:	3301      	adds	r3, #1
    17c0:	b2db      	uxtb	r3, r3
    17c2:	e7f1      	b.n	17a8 <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
    17c4:	4801      	ldr	r0, [pc, #4]	; (17cc <_get_ac_cfg+0x28>)
    17c6:	1840      	adds	r0, r0, r1
    17c8:	e7f1      	b.n	17ae <_get_ac_cfg+0xa>
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	000058a4 	.word	0x000058a4

000017d0 <_ac_init>:
{
    17d0:	b510      	push	{r4, lr}
    17d2:	0004      	movs	r4, r0
	ASSERT(hw);
    17d4:	1e43      	subs	r3, r0, #1
    17d6:	4198      	sbcs	r0, r3
    17d8:	b2c0      	uxtb	r0, r0
    17da:	2218      	movs	r2, #24
    17dc:	32ff      	adds	r2, #255	; 0xff
    17de:	491e      	ldr	r1, [pc, #120]	; (1858 <_ac_init+0x88>)
    17e0:	4b1e      	ldr	r3, [pc, #120]	; (185c <_ac_init+0x8c>)
    17e2:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    17e4:	0020      	movs	r0, r4
    17e6:	4b1e      	ldr	r3, [pc, #120]	; (1860 <_ac_init+0x90>)
    17e8:	4798      	blx	r3
	if (cfg == NULL) {
    17ea:	2800      	cmp	r0, #0
    17ec:	d031      	beq.n	1852 <_ac_init+0x82>
typedef uint8_t  hri_ac_statusc_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    17ee:	7a63      	ldrb	r3, [r4, #9]
    17f0:	09db      	lsrs	r3, r3, #7
    17f2:	d1fc      	bne.n	17ee <_ac_init+0x1e>
    17f4:	7a63      	ldrb	r3, [r4, #9]
    17f6:	09db      	lsrs	r3, r3, #7
    17f8:	d1fc      	bne.n	17f4 <_ac_init+0x24>

static inline hri_ac_ctrla_reg_t hri_ac_get_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw);
	tmp = ((Ac *)hw)->CTRLA.reg;
    17fa:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
    17fc:	079b      	lsls	r3, r3, #30
    17fe:	d507      	bpl.n	1810 <_ac_init+0x40>
}

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLA.reg = data;
    1800:	2300      	movs	r3, #0
    1802:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1804:	7a63      	ldrb	r3, [r4, #9]
    1806:	09db      	lsrs	r3, r3, #7
    1808:	d1fc      	bne.n	1804 <_ac_init+0x34>
    180a:	7a63      	ldrb	r3, [r4, #9]
    180c:	09db      	lsrs	r3, r3, #7
    180e:	d1fc      	bne.n	180a <_ac_init+0x3a>
	((Ac *)hw)->CTRLA.reg = data;
    1810:	2301      	movs	r3, #1
    1812:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1814:	7a63      	ldrb	r3, [r4, #9]
    1816:	09db      	lsrs	r3, r3, #7
    1818:	d1fc      	bne.n	1814 <_ac_init+0x44>
    181a:	7a63      	ldrb	r3, [r4, #9]
    181c:	09db      	lsrs	r3, r3, #7
    181e:	d1fc      	bne.n	181a <_ac_init+0x4a>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1820:	6883      	ldr	r3, [r0, #8]
    1822:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1824:	7a63      	ldrb	r3, [r4, #9]
    1826:	09db      	lsrs	r3, r3, #7
    1828:	d1fc      	bne.n	1824 <_ac_init+0x54>
	((Ac *)hw)->COMPCTRL[index].reg = data;
    182a:	68c3      	ldr	r3, [r0, #12]
    182c:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    182e:	7a63      	ldrb	r3, [r4, #9]
    1830:	09db      	lsrs	r3, r3, #7
    1832:	d1fc      	bne.n	182e <_ac_init+0x5e>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
    1834:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
    1836:	3320      	adds	r3, #32
    1838:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
    183a:	7c42      	ldrb	r2, [r0, #17]
    183c:	3301      	adds	r3, #1
    183e:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
    1840:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
    1842:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
    1844:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
    1846:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1848:	7a63      	ldrb	r3, [r4, #9]
    184a:	09db      	lsrs	r3, r3, #7
    184c:	d1fc      	bne.n	1848 <_ac_init+0x78>
	return ERR_NONE;
    184e:	2000      	movs	r0, #0
}
    1850:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
    1852:	200a      	movs	r0, #10
    1854:	4240      	negs	r0, r0
    1856:	e7fb      	b.n	1850 <_ac_init+0x80>
    1858:	000058b8 	.word	0x000058b8
    185c:	000016f9 	.word	0x000016f9
    1860:	000017a5 	.word	0x000017a5

00001864 <_ac_async_init>:
{
    1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1866:	0006      	movs	r6, r0
    1868:	000c      	movs	r4, r1
	ASSERT(device);
    186a:	1e43      	subs	r3, r0, #1
    186c:	4198      	sbcs	r0, r3
    186e:	b2c0      	uxtb	r0, r0
    1870:	2275      	movs	r2, #117	; 0x75
    1872:	4923      	ldr	r1, [pc, #140]	; (1900 <_ac_async_init+0x9c>)
    1874:	4b23      	ldr	r3, [pc, #140]	; (1904 <_ac_async_init+0xa0>)
    1876:	4798      	blx	r3
	init_status = _ac_init(hw);
    1878:	0020      	movs	r0, r4
    187a:	4b23      	ldr	r3, [pc, #140]	; (1908 <_ac_async_init+0xa4>)
    187c:	4798      	blx	r3
    187e:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1880:	d001      	beq.n	1886 <_ac_async_init+0x22>
}
    1882:	0028      	movs	r0, r5
    1884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	device->hw = hw;
    1886:	60f4      	str	r4, [r6, #12]
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
    1888:	0020      	movs	r0, r4
    188a:	4b20      	ldr	r3, [pc, #128]	; (190c <_ac_async_init+0xa8>)
    188c:	4798      	blx	r3
    188e:	1e07      	subs	r7, r0, #0
	if (cfg == NULL) {
    1890:	d032      	beq.n	18f8 <_ac_async_init+0x94>
	_ac_init_irq_param(hw, (void *)device);
    1892:	0031      	movs	r1, r6
    1894:	0020      	movs	r0, r4
    1896:	4b1e      	ldr	r3, [pc, #120]	; (1910 <_ac_async_init+0xac>)
    1898:	4798      	blx	r3
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP0;
    189a:	2301      	movs	r3, #1
    189c:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_COMP1;
    189e:	3301      	adds	r3, #1
    18a0:	7163      	strb	r3, [r4, #5]
	((Ac *)hw)->INTENSET.reg = AC_INTENSET_WIN0;
    18a2:	330e      	adds	r3, #14
    18a4:	7163      	strb	r3, [r4, #5]
	NVIC_DisableIRQ(cfg->irq);
    18a6:	2304      	movs	r3, #4
    18a8:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    18aa:	2b00      	cmp	r3, #0
    18ac:	db0b      	blt.n	18c6 <_ac_async_init+0x62>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ae:	221f      	movs	r2, #31
    18b0:	4013      	ands	r3, r2
    18b2:	3a1e      	subs	r2, #30
    18b4:	409a      	lsls	r2, r3
    18b6:	0013      	movs	r3, r2
    18b8:	2280      	movs	r2, #128	; 0x80
    18ba:	4916      	ldr	r1, [pc, #88]	; (1914 <_ac_async_init+0xb0>)
    18bc:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    18be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
    18c6:	2304      	movs	r3, #4
    18c8:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    18ca:	2b00      	cmp	r3, #0
    18cc:	db08      	blt.n	18e0 <_ac_async_init+0x7c>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ce:	221f      	movs	r2, #31
    18d0:	4013      	ands	r3, r2
    18d2:	3a1e      	subs	r2, #30
    18d4:	409a      	lsls	r2, r3
    18d6:	0013      	movs	r3, r2
    18d8:	22c0      	movs	r2, #192	; 0xc0
    18da:	0052      	lsls	r2, r2, #1
    18dc:	490d      	ldr	r1, [pc, #52]	; (1914 <_ac_async_init+0xb0>)
    18de:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(cfg->irq);
    18e0:	2304      	movs	r3, #4
    18e2:	56fb      	ldrsb	r3, [r7, r3]
  if ((int32_t)(IRQn) >= 0)
    18e4:	2b00      	cmp	r3, #0
    18e6:	dbcc      	blt.n	1882 <_ac_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18e8:	221f      	movs	r2, #31
    18ea:	4013      	ands	r3, r2
    18ec:	3a1e      	subs	r2, #30
    18ee:	409a      	lsls	r2, r3
    18f0:	0013      	movs	r3, r2
    18f2:	4a08      	ldr	r2, [pc, #32]	; (1914 <_ac_async_init+0xb0>)
    18f4:	6013      	str	r3, [r2, #0]
    18f6:	e7c4      	b.n	1882 <_ac_async_init+0x1e>
		return ERR_NOT_FOUND;
    18f8:	250a      	movs	r5, #10
    18fa:	426d      	negs	r5, r5
    18fc:	e7c1      	b.n	1882 <_ac_async_init+0x1e>
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	000058b8 	.word	0x000058b8
    1904:	000016f9 	.word	0x000016f9
    1908:	000017d1 	.word	0x000017d1
    190c:	000017a5 	.word	0x000017a5
    1910:	0000178d 	.word	0x0000178d
    1914:	e000e100 	.word	0xe000e100

00001918 <_ac_async_enable>:
	hri_ac_set_CTRLA_ENABLE_bit(device->hw);
    1918:	68c2      	ldr	r2, [r0, #12]
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_ENABLE;
    191a:	7813      	ldrb	r3, [r2, #0]
    191c:	2102      	movs	r1, #2
    191e:	430b      	orrs	r3, r1
    1920:	b2db      	uxtb	r3, r3
    1922:	7013      	strb	r3, [r2, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
    1924:	7a53      	ldrb	r3, [r2, #9]
    1926:	09db      	lsrs	r3, r3, #7
    1928:	d1fc      	bne.n	1924 <_ac_async_enable+0xc>
}
    192a:	4770      	bx	lr

0000192c <AC_Handler>:
{
    192c:	b510      	push	{r4, lr}
	void *const hw    = _ac_dev->hw;
    192e:	4b0f      	ldr	r3, [pc, #60]	; (196c <AC_Handler+0x40>)
    1930:	6818      	ldr	r0, [r3, #0]
    1932:	68c3      	ldr	r3, [r0, #12]
	if (_ac_dev->cb.comparison_ready_cb == NULL) {
    1934:	6802      	ldr	r2, [r0, #0]
    1936:	2a00      	cmp	r2, #0
    1938:	d005      	beq.n	1946 <AC_Handler+0x1a>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP0) >> AC_INTFLAG_COMP0_Pos;
    193a:	799a      	ldrb	r2, [r3, #6]
	if (hri_ac_get_interrupt_COMP0_bit(hw)) {
    193c:	07d2      	lsls	r2, r2, #31
    193e:	d403      	bmi.n	1948 <AC_Handler+0x1c>
	return (((Ac *)hw)->INTFLAG.reg & AC_INTFLAG_COMP1) >> AC_INTFLAG_COMP1_Pos;
    1940:	799a      	ldrb	r2, [r3, #6]
	} else if (hri_ac_get_interrupt_COMP1_bit(hw)) {
    1942:	0792      	lsls	r2, r2, #30
    1944:	d408      	bmi.n	1958 <AC_Handler+0x2c>
}
    1946:	bd10      	pop	{r4, pc}
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE0) >> AC_STATUSA_STATE0_Pos;
    1948:	7a1a      	ldrb	r2, [r3, #8]
    194a:	2101      	movs	r1, #1
    194c:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP0;
    194e:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 0, state);
    1950:	6803      	ldr	r3, [r0, #0]
    1952:	2100      	movs	r1, #0
    1954:	4798      	blx	r3
    1956:	e7f6      	b.n	1946 <AC_Handler+0x1a>
	return (((Ac *)hw)->STATUSA.reg & AC_STATUSA_STATE1) >> AC_STATUSA_STATE1_Pos;
    1958:	7a19      	ldrb	r1, [r3, #8]
    195a:	0849      	lsrs	r1, r1, #1
    195c:	2201      	movs	r2, #1
    195e:	400a      	ands	r2, r1
	((Ac *)hw)->INTFLAG.reg = AC_INTFLAG_COMP1;
    1960:	2102      	movs	r1, #2
    1962:	7199      	strb	r1, [r3, #6]
		_ac_dev->cb.comparison_ready_cb(_ac_dev, 1, state);
    1964:	6803      	ldr	r3, [r0, #0]
    1966:	3901      	subs	r1, #1
    1968:	4798      	blx	r3
    196a:	e7ec      	b.n	1946 <AC_Handler+0x1a>
    196c:	20000450 	.word	0x20000450

00001970 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1970:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1972:	4a08      	ldr	r2, [pc, #32]	; (1994 <_init_chip+0x24>)
    1974:	6853      	ldr	r3, [r2, #4]
    1976:	2102      	movs	r1, #2
    1978:	430b      	orrs	r3, r1
    197a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    197c:	4b06      	ldr	r3, [pc, #24]	; (1998 <_init_chip+0x28>)
    197e:	4798      	blx	r3
	_sysctrl_init_sources();
    1980:	4b06      	ldr	r3, [pc, #24]	; (199c <_init_chip+0x2c>)
    1982:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1984:	2008      	movs	r0, #8
    1986:	4c06      	ldr	r4, [pc, #24]	; (19a0 <_init_chip+0x30>)
    1988:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    198a:	4b06      	ldr	r3, [pc, #24]	; (19a4 <_init_chip+0x34>)
    198c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    198e:	20f7      	movs	r0, #247	; 0xf7
    1990:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1992:	bd10      	pop	{r4, pc}
    1994:	41004000 	.word	0x41004000
    1998:	00001dd5 	.word	0x00001dd5
    199c:	00001f69 	.word	0x00001f69
    19a0:	00001c3d 	.word	0x00001c3d
    19a4:	00001fc5 	.word	0x00001fc5

000019a8 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19a8:	79c3      	ldrb	r3, [r0, #7]
    19aa:	09db      	lsrs	r3, r3, #7
    19ac:	d1fc      	bne.n	19a8 <_dac_init>
    19ae:	79c3      	ldrb	r3, [r0, #7]
    19b0:	09db      	lsrs	r3, r3, #7
    19b2:	d1fc      	bne.n	19ae <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    19b4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    19b6:	079b      	lsls	r3, r3, #30
    19b8:	d507      	bpl.n	19ca <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    19ba:	2300      	movs	r3, #0
    19bc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19be:	79c3      	ldrb	r3, [r0, #7]
    19c0:	09db      	lsrs	r3, r3, #7
    19c2:	d1fc      	bne.n	19be <_dac_init+0x16>
    19c4:	79c3      	ldrb	r3, [r0, #7]
    19c6:	09db      	lsrs	r3, r3, #7
    19c8:	d1fc      	bne.n	19c4 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    19ca:	2301      	movs	r3, #1
    19cc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19ce:	79c3      	ldrb	r3, [r0, #7]
    19d0:	09db      	lsrs	r3, r3, #7
    19d2:	d1fc      	bne.n	19ce <_dac_init+0x26>
    19d4:	79c3      	ldrb	r3, [r0, #7]
    19d6:	09db      	lsrs	r3, r3, #7
    19d8:	d1fc      	bne.n	19d4 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    19da:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    19dc:	224a      	movs	r2, #74	; 0x4a
    19de:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    19e0:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    19e2:	79c3      	ldrb	r3, [r0, #7]
    19e4:	09db      	lsrs	r3, r3, #7
    19e6:	d1fc      	bne.n	19e2 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    19e8:	2000      	movs	r0, #0
    19ea:	4770      	bx	lr

000019ec <_dac_sync_init>:
{
    19ec:	b570      	push	{r4, r5, r6, lr}
    19ee:	0005      	movs	r5, r0
    19f0:	000c      	movs	r4, r1
	ASSERT(device);
    19f2:	1e43      	subs	r3, r0, #1
    19f4:	4198      	sbcs	r0, r3
    19f6:	b2c0      	uxtb	r0, r0
    19f8:	2249      	movs	r2, #73	; 0x49
    19fa:	4904      	ldr	r1, [pc, #16]	; (1a0c <_dac_sync_init+0x20>)
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <_dac_sync_init+0x24>)
    19fe:	4798      	blx	r3
	device->hw = hw;
    1a00:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1a02:	0020      	movs	r0, r4
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <_dac_sync_init+0x28>)
    1a06:	4798      	blx	r3
}
    1a08:	bd70      	pop	{r4, r5, r6, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	000058cc 	.word	0x000058cc
    1a10:	000016f9 	.word	0x000016f9
    1a14:	000019a9 	.word	0x000019a9

00001a18 <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    1a18:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1a1a:	7813      	ldrb	r3, [r2, #0]
    1a1c:	2102      	movs	r1, #2
    1a1e:	430b      	orrs	r3, r1
    1a20:	b2db      	uxtb	r3, r3
    1a22:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a24:	79d3      	ldrb	r3, [r2, #7]
    1a26:	09db      	lsrs	r3, r3, #7
    1a28:	d1fc      	bne.n	1a24 <_dac_sync_enable_channel+0xc>
}
    1a2a:	4770      	bx	lr

00001a2c <_dac_sync_is_channel_enable>:
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    1a2c:	6802      	ldr	r2, [r0, #0]
    1a2e:	79d3      	ldrb	r3, [r2, #7]
    1a30:	09db      	lsrs	r3, r3, #7
    1a32:	d1fc      	bne.n	1a2e <_dac_sync_is_channel_enable+0x2>
	tmp = ((Dac *)hw)->CTRLA.reg;
    1a34:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    1a36:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1a38:	2001      	movs	r0, #1
    1a3a:	4018      	ands	r0, r3
}
    1a3c:	4770      	bx	lr

00001a3e <_dac_sync_write_data>:
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    1a3e:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    1a40:	8111      	strh	r1, [r2, #8]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1a42:	79d3      	ldrb	r3, [r2, #7]
    1a44:	09db      	lsrs	r3, r3, #7
    1a46:	d1fc      	bne.n	1a42 <_dac_sync_write_data+0x4>
}
    1a48:	4770      	bx	lr
	...

00001a4c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1a4c:	4b22      	ldr	r3, [pc, #136]	; (1ad8 <_ext_irq_init+0x8c>)
    1a4e:	785b      	ldrb	r3, [r3, #1]
    1a50:	09db      	lsrs	r3, r3, #7
    1a52:	d1fb      	bne.n	1a4c <_ext_irq_init>
    1a54:	4b20      	ldr	r3, [pc, #128]	; (1ad8 <_ext_irq_init+0x8c>)
    1a56:	785b      	ldrb	r3, [r3, #1]
    1a58:	09db      	lsrs	r3, r3, #7
    1a5a:	d1fb      	bne.n	1a54 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1a5c:	4b1e      	ldr	r3, [pc, #120]	; (1ad8 <_ext_irq_init+0x8c>)
    1a5e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1a60:	079b      	lsls	r3, r3, #30
    1a62:	d50a      	bpl.n	1a7a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1a64:	2200      	movs	r2, #0
    1a66:	4b1c      	ldr	r3, [pc, #112]	; (1ad8 <_ext_irq_init+0x8c>)
    1a68:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1a6a:	4b1b      	ldr	r3, [pc, #108]	; (1ad8 <_ext_irq_init+0x8c>)
    1a6c:	785b      	ldrb	r3, [r3, #1]
    1a6e:	09db      	lsrs	r3, r3, #7
    1a70:	d1fb      	bne.n	1a6a <_ext_irq_init+0x1e>
    1a72:	4b19      	ldr	r3, [pc, #100]	; (1ad8 <_ext_irq_init+0x8c>)
    1a74:	785b      	ldrb	r3, [r3, #1]
    1a76:	09db      	lsrs	r3, r3, #7
    1a78:	d1fb      	bne.n	1a72 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    1a7a:	2201      	movs	r2, #1
    1a7c:	4b16      	ldr	r3, [pc, #88]	; (1ad8 <_ext_irq_init+0x8c>)
    1a7e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1a80:	4b15      	ldr	r3, [pc, #84]	; (1ad8 <_ext_irq_init+0x8c>)
    1a82:	785b      	ldrb	r3, [r3, #1]
    1a84:	09db      	lsrs	r3, r3, #7
    1a86:	d1fb      	bne.n	1a80 <_ext_irq_init+0x34>
    1a88:	4b13      	ldr	r3, [pc, #76]	; (1ad8 <_ext_irq_init+0x8c>)
    1a8a:	785b      	ldrb	r3, [r3, #1]
    1a8c:	09db      	lsrs	r3, r3, #7
    1a8e:	d1fb      	bne.n	1a88 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1a90:	4b11      	ldr	r3, [pc, #68]	; (1ad8 <_ext_irq_init+0x8c>)
    1a92:	2200      	movs	r2, #0
    1a94:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1a96:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1a98:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1a9a:	4a10      	ldr	r2, [pc, #64]	; (1adc <_ext_irq_init+0x90>)
    1a9c:	619a      	str	r2, [r3, #24]
    1a9e:	2280      	movs	r2, #128	; 0x80
    1aa0:	0452      	lsls	r2, r2, #17
    1aa2:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1aa4:	781a      	ldrb	r2, [r3, #0]
    1aa6:	2102      	movs	r1, #2
    1aa8:	430a      	orrs	r2, r1
    1aaa:	b2d2      	uxtb	r2, r2
    1aac:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1aae:	4b0a      	ldr	r3, [pc, #40]	; (1ad8 <_ext_irq_init+0x8c>)
    1ab0:	785b      	ldrb	r3, [r3, #1]
    1ab2:	09db      	lsrs	r3, r3, #7
    1ab4:	d1fb      	bne.n	1aae <_ext_irq_init+0x62>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab6:	4b0a      	ldr	r3, [pc, #40]	; (1ae0 <_ext_irq_init+0x94>)
    1ab8:	2210      	movs	r2, #16
    1aba:	2180      	movs	r1, #128	; 0x80
    1abc:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ac2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ac6:	3101      	adds	r1, #1
    1ac8:	31ff      	adds	r1, #255	; 0xff
    1aca:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1acc:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <_ext_irq_init+0x98>)
    1ad0:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1ad2:	2000      	movs	r0, #0
    1ad4:	4770      	bx	lr
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	40001800 	.word	0x40001800
    1adc:	03230022 	.word	0x03230022
    1ae0:	e000e100 	.word	0xe000e100
    1ae4:	20000454 	.word	0x20000454

00001ae8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1ae8:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    1aea:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    1aec:	2b03      	cmp	r3, #3
    1aee:	d80b      	bhi.n	1b08 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    1af0:	00dc      	lsls	r4, r3, #3
    1af2:	4a10      	ldr	r2, [pc, #64]	; (1b34 <_ext_irq_enable+0x4c>)
    1af4:	1912      	adds	r2, r2, r4
    1af6:	6852      	ldr	r2, [r2, #4]
    1af8:	4282      	cmp	r2, r0
    1afa:	d002      	beq.n	1b02 <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    1afc:	3301      	adds	r3, #1
    1afe:	b2db      	uxtb	r3, r3
    1b00:	e7f4      	b.n	1aec <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1b02:	4b0c      	ldr	r3, [pc, #48]	; (1b34 <_ext_irq_enable+0x4c>)
    1b04:	5ce2      	ldrb	r2, [r4, r3]
			break;
    1b06:	e000      	b.n	1b0a <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1b08:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    1b0a:	2aff      	cmp	r2, #255	; 0xff
    1b0c:	d00e      	beq.n	1b2c <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    1b0e:	2900      	cmp	r1, #0
    1b10:	d106      	bne.n	1b20 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1b12:	2301      	movs	r3, #1
    1b14:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1b16:	4a08      	ldr	r2, [pc, #32]	; (1b38 <_ext_irq_enable+0x50>)
    1b18:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b1a:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    1b1c:	2000      	movs	r0, #0
}
    1b1e:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1b20:	2301      	movs	r3, #1
    1b22:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1b24:	4a04      	ldr	r2, [pc, #16]	; (1b38 <_ext_irq_enable+0x50>)
    1b26:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1b28:	2000      	movs	r0, #0
    1b2a:	e7f8      	b.n	1b1e <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    1b2c:	200d      	movs	r0, #13
    1b2e:	4240      	negs	r0, r0
    1b30:	e7f5      	b.n	1b1e <_ext_irq_enable+0x36>
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	000058e4 	.word	0x000058e4
    1b38:	40001800 	.word	0x40001800

00001b3c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b3e:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1b40:	4b27      	ldr	r3, [pc, #156]	; (1be0 <EIC_Handler+0xa4>)
    1b42:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1b44:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1b46:	400a      	ands	r2, r1
    1b48:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1b4a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1b4c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1b4e:	4b25      	ldr	r3, [pc, #148]	; (1be4 <EIC_Handler+0xa8>)
    1b50:	6818      	ldr	r0, [r3, #0]
    1b52:	1e43      	subs	r3, r0, #1
    1b54:	4198      	sbcs	r0, r3
    1b56:	b2c0      	uxtb	r0, r0
    1b58:	22d2      	movs	r2, #210	; 0xd2
    1b5a:	4923      	ldr	r1, [pc, #140]	; (1be8 <EIC_Handler+0xac>)
    1b5c:	4b23      	ldr	r3, [pc, #140]	; (1bec <EIC_Handler+0xb0>)
    1b5e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1b60:	2501      	movs	r5, #1
    1b62:	426d      	negs	r5, r5

	while (flags) {
    1b64:	e031      	b.n	1bca <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1b66:	00db      	lsls	r3, r3, #3
    1b68:	4a21      	ldr	r2, [pc, #132]	; (1bf0 <EIC_Handler+0xb4>)
    1b6a:	18d3      	adds	r3, r2, r3
    1b6c:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1b6e:	1c6b      	adds	r3, r5, #1
    1b70:	d003      	beq.n	1b7a <EIC_Handler+0x3e>
				callback(pin);
    1b72:	4b1c      	ldr	r3, [pc, #112]	; (1be4 <EIC_Handler+0xa8>)
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	0028      	movs	r0, r5
    1b78:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1b7a:	2201      	movs	r2, #1
    1b7c:	40a2      	lsls	r2, r4
    1b7e:	9b01      	ldr	r3, [sp, #4]
    1b80:	4393      	bics	r3, r2
    1b82:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1b84:	9801      	ldr	r0, [sp, #4]
    1b86:	4b1b      	ldr	r3, [pc, #108]	; (1bf4 <EIC_Handler+0xb8>)
    1b88:	4798      	blx	r3
    1b8a:	3801      	subs	r0, #1
    1b8c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1b8e:	1c63      	adds	r3, r4, #1
    1b90:	d014      	beq.n	1bbc <EIC_Handler+0x80>
    1b92:	2604      	movs	r6, #4
    1b94:	2000      	movs	r0, #0
    1b96:	e001      	b.n	1b9c <EIC_Handler+0x60>
					upper = middle - 1;
    1b98:	3901      	subs	r1, #1
    1b9a:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    1b9c:	42b0      	cmp	r0, r6
    1b9e:	d8e6      	bhi.n	1b6e <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    1ba0:	1833      	adds	r3, r6, r0
    1ba2:	105b      	asrs	r3, r3, #1
    1ba4:	b2d9      	uxtb	r1, r3
    1ba6:	22ff      	movs	r2, #255	; 0xff
    1ba8:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    1baa:	00df      	lsls	r7, r3, #3
    1bac:	4a10      	ldr	r2, [pc, #64]	; (1bf0 <EIC_Handler+0xb4>)
    1bae:	5cba      	ldrb	r2, [r7, r2]
    1bb0:	42a2      	cmp	r2, r4
    1bb2:	d0d8      	beq.n	1b66 <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    1bb4:	daf0      	bge.n	1b98 <EIC_Handler+0x5c>
					lower = middle + 1;
    1bb6:	3101      	adds	r1, #1
    1bb8:	b2c8      	uxtb	r0, r1
    1bba:	e7ef      	b.n	1b9c <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    1bbc:	4b08      	ldr	r3, [pc, #32]	; (1be0 <EIC_Handler+0xa4>)
    1bbe:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1bc0:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1bc2:	400a      	ands	r2, r1
    1bc4:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1bc6:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1bc8:	611a      	str	r2, [r3, #16]
	while (flags) {
    1bca:	9b01      	ldr	r3, [sp, #4]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d005      	beq.n	1bdc <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    1bd0:	9801      	ldr	r0, [sp, #4]
    1bd2:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <EIC_Handler+0xb8>)
    1bd4:	4798      	blx	r3
    1bd6:	3801      	subs	r0, #1
    1bd8:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1bda:	e7d8      	b.n	1b8e <EIC_Handler+0x52>
	}
}
    1bdc:	b003      	add	sp, #12
    1bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be0:	40001800 	.word	0x40001800
    1be4:	20000454 	.word	0x20000454
    1be8:	00005904 	.word	0x00005904
    1bec:	000016f9 	.word	0x000016f9
    1bf0:	000058e4 	.word	0x000058e4
    1bf4:	0000394d 	.word	0x0000394d

00001bf8 <_event_system_init>:
int32_t _event_system_init(void)
{
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1bf8:	2300      	movs	r3, #0
    1bfa:	e006      	b.n	1c0a <_event_system_init+0x12>
		hri_evsys_write_USER_reg(EVSYS, user_mux_confs[i]);
    1bfc:	0059      	lsls	r1, r3, #1
    1bfe:	4a0d      	ldr	r2, [pc, #52]	; (1c34 <_event_system_init+0x3c>)
    1c00:	5a89      	ldrh	r1, [r1, r2]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER.reg = data;
    1c02:	4a0d      	ldr	r2, [pc, #52]	; (1c38 <_event_system_init+0x40>)
    1c04:	8111      	strh	r1, [r2, #8]
	for (i = 0; i < EVSYS_USERS; i++) {
    1c06:	3301      	adds	r3, #1
    1c08:	b2db      	uxtb	r3, r3
    1c0a:	2b1e      	cmp	r3, #30
    1c0c:	d9f6      	bls.n	1bfc <_event_system_init+0x4>
    1c0e:	2300      	movs	r3, #0
    1c10:	e007      	b.n	1c22 <_event_system_init+0x2a>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, channel_confs[i]);
    1c12:	0099      	lsls	r1, r3, #2
    1c14:	4a07      	ldr	r2, [pc, #28]	; (1c34 <_event_system_init+0x3c>)
    1c16:	1852      	adds	r2, r2, r1
    1c18:	6c11      	ldr	r1, [r2, #64]	; 0x40
	((Evsys *)hw)->CHANNEL.reg = data;
    1c1a:	4a07      	ldr	r2, [pc, #28]	; (1c38 <_event_system_init+0x40>)
    1c1c:	6051      	str	r1, [r2, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1c1e:	3301      	adds	r3, #1
    1c20:	b2db      	uxtb	r3, r3
    1c22:	2b0b      	cmp	r3, #11
    1c24:	d9f5      	bls.n	1c12 <_event_system_init+0x1a>
	((Evsys *)hw)->INTENSET.reg = data;
    1c26:	4b04      	ldr	r3, [pc, #16]	; (1c38 <_event_system_init+0x40>)
    1c28:	2200      	movs	r2, #0
    1c2a:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    1c2c:	3a01      	subs	r2, #1
    1c2e:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    1c30:	2000      	movs	r0, #0
    1c32:	4770      	bx	lr
    1c34:	0000591c 	.word	0x0000591c
    1c38:	42000400 	.word	0x42000400

00001c3c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c3c:	07c3      	lsls	r3, r0, #31
    1c3e:	d509      	bpl.n	1c54 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1c40:	4b11      	ldr	r3, [pc, #68]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c42:	2280      	movs	r2, #128	; 0x80
    1c44:	0052      	lsls	r2, r2, #1
    1c46:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c48:	4a10      	ldr	r2, [pc, #64]	; (1c8c <_gclk_init_generators_by_fref+0x50>)
    1c4a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c4c:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c4e:	785b      	ldrb	r3, [r3, #1]
    1c50:	09db      	lsrs	r3, r3, #7
    1c52:	d1fb      	bne.n	1c4c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1c54:	0783      	lsls	r3, r0, #30
    1c56:	d509      	bpl.n	1c6c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1c58:	4b0b      	ldr	r3, [pc, #44]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c5a:	2202      	movs	r2, #2
    1c5c:	32ff      	adds	r2, #255	; 0xff
    1c5e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c60:	4a0b      	ldr	r2, [pc, #44]	; (1c90 <_gclk_init_generators_by_fref+0x54>)
    1c62:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c64:	4b08      	ldr	r3, [pc, #32]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c66:	785b      	ldrb	r3, [r3, #1]
    1c68:	09db      	lsrs	r3, r3, #7
    1c6a:	d1fb      	bne.n	1c64 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1c6c:	0703      	lsls	r3, r0, #28
    1c6e:	d509      	bpl.n	1c84 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1c70:	4b05      	ldr	r3, [pc, #20]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c72:	2204      	movs	r2, #4
    1c74:	32ff      	adds	r2, #255	; 0xff
    1c76:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c78:	4a06      	ldr	r2, [pc, #24]	; (1c94 <_gclk_init_generators_by_fref+0x58>)
    1c7a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c7c:	4b02      	ldr	r3, [pc, #8]	; (1c88 <_gclk_init_generators_by_fref+0x4c>)
    1c7e:	785b      	ldrb	r3, [r3, #1]
    1c80:	09db      	lsrs	r3, r3, #7
    1c82:	d1fb      	bne.n	1c7c <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1c84:	4770      	bx	lr
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	40000c00 	.word	0x40000c00
    1c8c:	00090700 	.word	0x00090700
    1c90:	00090701 	.word	0x00090701
    1c94:	00090503 	.word	0x00090503

00001c98 <_is_valid_rww_flash_address>:
{
#define RWWEE_ADDR_START NVMCTRL_RWW_EEPROM_ADDR
#define RWWEE_ADDR_END (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES)

	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
    1c98:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <_is_valid_rww_flash_address+0x18>)
    1c9a:	469c      	mov	ip, r3
    1c9c:	4460      	add	r0, ip
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
    1c9e:	2380      	movs	r3, #128	; 0x80
    1ca0:	011b      	lsls	r3, r3, #4
    1ca2:	4298      	cmp	r0, r3
    1ca4:	d801      	bhi.n	1caa <_is_valid_rww_flash_address+0x12>
		return false;
	}
	return true;
    1ca6:	2001      	movs	r0, #1
}
    1ca8:	4770      	bx	lr
		return false;
    1caa:	2000      	movs	r0, #0
    1cac:	e7fc      	b.n	1ca8 <_is_valid_rww_flash_address+0x10>
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	ffc00000 	.word	0xffc00000

00001cb4 <_flash_init>:
{
    1cb4:	b570      	push	{r4, r5, r6, lr}
    1cb6:	0005      	movs	r5, r0
    1cb8:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1cba:	2800      	cmp	r0, #0
    1cbc:	d01c      	beq.n	1cf8 <_flash_init+0x44>
    1cbe:	4b10      	ldr	r3, [pc, #64]	; (1d00 <_flash_init+0x4c>)
    1cc0:	4299      	cmp	r1, r3
    1cc2:	d01b      	beq.n	1cfc <_flash_init+0x48>
    1cc4:	2000      	movs	r0, #0
    1cc6:	2246      	movs	r2, #70	; 0x46
    1cc8:	490e      	ldr	r1, [pc, #56]	; (1d04 <_flash_init+0x50>)
    1cca:	4b0f      	ldr	r3, [pc, #60]	; (1d08 <_flash_init+0x54>)
    1ccc:	4798      	blx	r3
	device->hw = hw;
    1cce:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    1cd0:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    1cd2:	239e      	movs	r3, #158	; 0x9e
    1cd4:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    1cd6:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    1cd8:	4b0c      	ldr	r3, [pc, #48]	; (1d0c <_flash_init+0x58>)
    1cda:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cdc:	4b0c      	ldr	r3, [pc, #48]	; (1d10 <_flash_init+0x5c>)
    1cde:	2220      	movs	r2, #32
    1ce0:	2180      	movs	r1, #128	; 0x80
    1ce2:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cec:	3101      	adds	r1, #1
    1cee:	31ff      	adds	r1, #255	; 0xff
    1cf0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cf2:	601a      	str	r2, [r3, #0]
}
    1cf4:	2000      	movs	r0, #0
    1cf6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    1cf8:	2000      	movs	r0, #0
    1cfa:	e7e4      	b.n	1cc6 <_flash_init+0x12>
    1cfc:	2001      	movs	r0, #1
    1cfe:	e7e2      	b.n	1cc6 <_flash_init+0x12>
    1d00:	41004000 	.word	0x41004000
    1d04:	0000598c 	.word	0x0000598c
    1d08:	000016f9 	.word	0x000016f9
    1d0c:	20000458 	.word	0x20000458
    1d10:	e000e100 	.word	0xe000e100

00001d14 <_flash_read>:
{
    1d14:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    1d16:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    1d18:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1d1a:	7d2e      	ldrb	r6, [r5, #20]
    1d1c:	07f6      	lsls	r6, r6, #31
    1d1e:	d5fb      	bpl.n	1d18 <_flash_read+0x4>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1d20:	2020      	movs	r0, #32
    1d22:	30ff      	adds	r0, #255	; 0xff
    1d24:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
    1d26:	07c8      	lsls	r0, r1, #31
    1d28:	d507      	bpl.n	1d3a <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    1d2a:	3401      	adds	r4, #1
    1d2c:	2001      	movs	r0, #1
    1d2e:	4381      	bics	r1, r0
    1d30:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    1d32:	0a09      	lsrs	r1, r1, #8
    1d34:	7011      	strb	r1, [r2, #0]
		i         = 1;
    1d36:	2101      	movs	r1, #1
    1d38:	e003      	b.n	1d42 <_flash_read+0x2e>
		i = 0;
    1d3a:	2100      	movs	r1, #0
    1d3c:	e001      	b.n	1d42 <_flash_read+0x2e>
		i += 2;
    1d3e:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
    1d40:	002c      	movs	r4, r5
	while (i < length) {
    1d42:	4299      	cmp	r1, r3
    1d44:	d20b      	bcs.n	1d5e <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
    1d46:	1c65      	adds	r5, r4, #1
    1d48:	0064      	lsls	r4, r4, #1
    1d4a:	8820      	ldrh	r0, [r4, #0]
    1d4c:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
    1d4e:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
    1d50:	1e5c      	subs	r4, r3, #1
    1d52:	42a1      	cmp	r1, r4
    1d54:	d2f3      	bcs.n	1d3e <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
    1d56:	1c4c      	adds	r4, r1, #1
    1d58:	0a00      	lsrs	r0, r0, #8
    1d5a:	5510      	strb	r0, [r2, r4]
    1d5c:	e7ef      	b.n	1d3e <_flash_read+0x2a>
}
    1d5e:	bd70      	pop	{r4, r5, r6, pc}

00001d60 <NVMCTRL_Handler>:
{
    1d60:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1d62:	4b0a      	ldr	r3, [pc, #40]	; (1d8c <NVMCTRL_Handler+0x2c>)
    1d64:	6818      	ldr	r0, [r3, #0]
    1d66:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1d68:	7d1a      	ldrb	r2, [r3, #20]
	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1d6a:	07d2      	lsls	r2, r2, #31
    1d6c:	d504      	bpl.n	1d78 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    1d6e:	6803      	ldr	r3, [r0, #0]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d000      	beq.n	1d76 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1d74:	4798      	blx	r3
}
    1d76:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1d78:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    1d7a:	0792      	lsls	r2, r2, #30
    1d7c:	d5fb      	bpl.n	1d76 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    1d7e:	2202      	movs	r2, #2
    1d80:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1d82:	6843      	ldr	r3, [r0, #4]
    1d84:	2b00      	cmp	r3, #0
    1d86:	d0f6      	beq.n	1d76 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1d88:	4798      	blx	r3
}
    1d8a:	e7f4      	b.n	1d76 <NVMCTRL_Handler+0x16>
    1d8c:	20000458 	.word	0x20000458

00001d90 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
    1d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d92:	0006      	movs	r6, r0
    1d94:	000c      	movs	r4, r1
    1d96:	0017      	movs	r7, r2
    1d98:	001d      	movs	r5, r3
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
    1d9a:	0008      	movs	r0, r1
    1d9c:	4b0b      	ldr	r3, [pc, #44]	; (1dcc <_rww_flash_read+0x3c>)
    1d9e:	4798      	blx	r3
    1da0:	2800      	cmp	r0, #0
    1da2:	d00c      	beq.n	1dbe <_rww_flash_read+0x2e>
    1da4:	1960      	adds	r0, r4, r5
    1da6:	4b09      	ldr	r3, [pc, #36]	; (1dcc <_rww_flash_read+0x3c>)
    1da8:	4798      	blx	r3
    1daa:	2800      	cmp	r0, #0
    1dac:	d00a      	beq.n	1dc4 <_rww_flash_read+0x34>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
    1dae:	002b      	movs	r3, r5
    1db0:	003a      	movs	r2, r7
    1db2:	0021      	movs	r1, r4
    1db4:	0030      	movs	r0, r6
    1db6:	4c06      	ldr	r4, [pc, #24]	; (1dd0 <_rww_flash_read+0x40>)
    1db8:	47a0      	blx	r4

	return ERR_NONE;
    1dba:	2000      	movs	r0, #0
}
    1dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
    1dbe:	200e      	movs	r0, #14
    1dc0:	4240      	negs	r0, r0
    1dc2:	e7fb      	b.n	1dbc <_rww_flash_read+0x2c>
    1dc4:	200e      	movs	r0, #14
    1dc6:	4240      	negs	r0, r0
    1dc8:	e7f8      	b.n	1dbc <_rww_flash_read+0x2c>
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00001c99 	.word	0x00001c99
    1dd0:	00001d15 	.word	0x00001d15

00001dd4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1dd4:	4b06      	ldr	r3, [pc, #24]	; (1df0 <_pm_init+0x1c>)
    1dd6:	7a1a      	ldrb	r2, [r3, #8]
    1dd8:	b2d2      	uxtb	r2, r2
    1dda:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1ddc:	7a5a      	ldrb	r2, [r3, #9]
    1dde:	b2d2      	uxtb	r2, r2
    1de0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1de2:	7a9a      	ldrb	r2, [r3, #10]
    1de4:	b2d2      	uxtb	r2, r2
    1de6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1de8:	7ada      	ldrb	r2, [r3, #11]
    1dea:	b2d2      	uxtb	r2, r2
    1dec:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1dee:	4770      	bx	lr
    1df0:	40000400 	.word	0x40000400

00001df4 <TIMER_8_init>:
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1df4:	4b1c      	ldr	r3, [pc, #112]	; (1e68 <TIMER_8_init+0x74>)
    1df6:	7a9b      	ldrb	r3, [r3, #10]
    1df8:	09db      	lsrs	r3, r3, #7
    1dfa:	d1fb      	bne.n	1df4 <TIMER_8_init>
    1dfc:	4b1a      	ldr	r3, [pc, #104]	; (1e68 <TIMER_8_init+0x74>)
    1dfe:	7a9b      	ldrb	r3, [r3, #10]
    1e00:	09db      	lsrs	r3, r3, #7
    1e02:	d1fb      	bne.n	1dfc <TIMER_8_init+0x8>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1e04:	4b18      	ldr	r3, [pc, #96]	; (1e68 <TIMER_8_init+0x74>)
    1e06:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_8_init()
{

	hri_rtcmode0_wait_for_sync(RTC);
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(RTC)) {
    1e08:	079b      	lsls	r3, r3, #30
    1e0a:	d50c      	bpl.n	1e26 <TIMER_8_init+0x32>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    1e0c:	4a16      	ldr	r2, [pc, #88]	; (1e68 <TIMER_8_init+0x74>)
    1e0e:	8813      	ldrh	r3, [r2, #0]
    1e10:	2102      	movs	r1, #2
    1e12:	438b      	bics	r3, r1
    1e14:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1e16:	4b14      	ldr	r3, [pc, #80]	; (1e68 <TIMER_8_init+0x74>)
    1e18:	7a9b      	ldrb	r3, [r3, #10]
    1e1a:	09db      	lsrs	r3, r3, #7
    1e1c:	d1fb      	bne.n	1e16 <TIMER_8_init+0x22>
    1e1e:	4b12      	ldr	r3, [pc, #72]	; (1e68 <TIMER_8_init+0x74>)
    1e20:	7a9b      	ldrb	r3, [r3, #10]
    1e22:	09db      	lsrs	r3, r3, #7
    1e24:	d1fb      	bne.n	1e1e <TIMER_8_init+0x2a>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    1e26:	4a10      	ldr	r2, [pc, #64]	; (1e68 <TIMER_8_init+0x74>)
    1e28:	8813      	ldrh	r3, [r2, #0]
    1e2a:	2101      	movs	r1, #1
    1e2c:	430b      	orrs	r3, r1
    1e2e:	b29b      	uxth	r3, r3
    1e30:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1e32:	4b0d      	ldr	r3, [pc, #52]	; (1e68 <TIMER_8_init+0x74>)
    1e34:	7a9b      	ldrb	r3, [r3, #10]
    1e36:	09db      	lsrs	r3, r3, #7
    1e38:	d1fb      	bne.n	1e32 <TIMER_8_init+0x3e>
    1e3a:	4b0b      	ldr	r3, [pc, #44]	; (1e68 <TIMER_8_init+0x74>)
    1e3c:	7a9b      	ldrb	r3, [r3, #10]
    1e3e:	09db      	lsrs	r3, r3, #7
    1e40:	d1fb      	bne.n	1e3a <TIMER_8_init+0x46>
}

static inline void hri_rtc_write_READREQ_reg(const void *const hw, hri_rtc_readreq_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg = data;
    1e42:	4b09      	ldr	r3, [pc, #36]	; (1e68 <TIMER_8_init+0x74>)
    1e44:	2280      	movs	r2, #128	; 0x80
    1e46:	01d2      	lsls	r2, r2, #7
    1e48:	805a      	strh	r2, [r3, #2]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1e4a:	22f0      	movs	r2, #240	; 0xf0
    1e4c:	0112      	lsls	r2, r2, #4
    1e4e:	619a      	str	r2, [r3, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1e50:	4b05      	ldr	r3, [pc, #20]	; (1e68 <TIMER_8_init+0x74>)
    1e52:	7a9b      	ldrb	r3, [r3, #10]
    1e54:	09db      	lsrs	r3, r3, #7
    1e56:	d1fb      	bne.n	1e50 <TIMER_8_init+0x5c>
	((Rtc *)hw)->MODE0.INTENSET.reg = data;
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <TIMER_8_init+0x74>)
    1e5a:	2201      	movs	r2, #1
    1e5c:	71da      	strb	r2, [r3, #7]
	((Rtc *)hw)->MODE0.INTENCLR.reg = ~data;
    1e5e:	32fd      	adds	r2, #253	; 0xfd
    1e60:	719a      	strb	r2, [r3, #6]
	        | 0 << RTC_MODE0_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: disabled */

	// hri_rtcmode0_write_CTRL_ENABLE_bit(RTC,0 << RTC_MODE0_CTRL_ENABLE_Pos); /* Enable: disabled */

	return 0;
}
    1e62:	2000      	movs	r0, #0
    1e64:	4770      	bx	lr
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	40001400 	.word	0x40001400

00001e6c <SPI_0_init>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e6c:	4b2a      	ldr	r3, [pc, #168]	; (1f18 <SPI_0_init+0xac>)
    1e6e:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize SPI interface
 */
int8_t SPI_0_init()
{

	if (!hri_sercomspi_is_syncing(SERCOM4, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1e70:	07db      	lsls	r3, r3, #31
    1e72:	d41b      	bmi.n	1eac <SPI_0_init+0x40>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e74:	4b28      	ldr	r3, [pc, #160]	; (1f18 <SPI_0_init+0xac>)
    1e76:	69db      	ldr	r3, [r3, #28]
    1e78:	079b      	lsls	r3, r3, #30
    1e7a:	d1fb      	bne.n	1e74 <SPI_0_init+0x8>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1e7c:	4b26      	ldr	r3, [pc, #152]	; (1f18 <SPI_0_init+0xac>)
    1e7e:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_SPI_CTRLA_MODE(3);
		if (hri_sercomspi_get_CTRLA_reg(SERCOM4, SERCOM_SPI_CTRLA_ENABLE)) {
    1e80:	079b      	lsls	r3, r3, #30
    1e82:	d50c      	bpl.n	1e9e <SPI_0_init+0x32>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1e84:	4a24      	ldr	r2, [pc, #144]	; (1f18 <SPI_0_init+0xac>)
    1e86:	6813      	ldr	r3, [r2, #0]
    1e88:	2102      	movs	r1, #2
    1e8a:	438b      	bics	r3, r1
    1e8c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e8e:	4b22      	ldr	r3, [pc, #136]	; (1f18 <SPI_0_init+0xac>)
    1e90:	69db      	ldr	r3, [r3, #28]
    1e92:	079b      	lsls	r3, r3, #30
    1e94:	d1fb      	bne.n	1e8e <SPI_0_init+0x22>
    1e96:	4b20      	ldr	r3, [pc, #128]	; (1f18 <SPI_0_init+0xac>)
    1e98:	69db      	ldr	r3, [r3, #28]
    1e9a:	079b      	lsls	r3, r3, #30
    1e9c:	d4fb      	bmi.n	1e96 <SPI_0_init+0x2a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e9e:	220d      	movs	r2, #13
    1ea0:	4b1d      	ldr	r3, [pc, #116]	; (1f18 <SPI_0_init+0xac>)
    1ea2:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ea4:	4b1c      	ldr	r3, [pc, #112]	; (1f18 <SPI_0_init+0xac>)
    1ea6:	69db      	ldr	r3, [r3, #28]
    1ea8:	079b      	lsls	r3, r3, #30
    1eaa:	d1fb      	bne.n	1ea4 <SPI_0_init+0x38>
    1eac:	4b1a      	ldr	r3, [pc, #104]	; (1f18 <SPI_0_init+0xac>)
    1eae:	69db      	ldr	r3, [r3, #28]
    1eb0:	07db      	lsls	r3, r3, #31
    1eb2:	d4fb      	bmi.n	1eac <SPI_0_init+0x40>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1eb4:	4a19      	ldr	r2, [pc, #100]	; (1f1c <SPI_0_init+0xb0>)
    1eb6:	4b18      	ldr	r3, [pc, #96]	; (1f18 <SPI_0_init+0xac>)
    1eb8:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1eba:	4b17      	ldr	r3, [pc, #92]	; (1f18 <SPI_0_init+0xac>)
    1ebc:	69db      	ldr	r3, [r3, #28]
    1ebe:	079b      	lsls	r3, r3, #30
    1ec0:	d1fb      	bne.n	1eba <SPI_0_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ec2:	4a15      	ldr	r2, [pc, #84]	; (1f18 <SPI_0_init+0xac>)
    1ec4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_SPI_CTRLA_DOPO_Msk;
    1ec6:	4916      	ldr	r1, [pc, #88]	; (1f20 <SPI_0_init+0xb4>)
    1ec8:	400b      	ands	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    1eca:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ecc:	4b12      	ldr	r3, [pc, #72]	; (1f18 <SPI_0_init+0xac>)
    1ece:	69db      	ldr	r3, [r3, #28]
    1ed0:	075b      	lsls	r3, r3, #29
    1ed2:	d1fb      	bne.n	1ecc <SPI_0_init+0x60>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ed4:	4910      	ldr	r1, [pc, #64]	; (1f18 <SPI_0_init+0xac>)
    1ed6:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_SPI_CTRLA_DIPO_Msk;
    1ed8:	4a12      	ldr	r2, [pc, #72]	; (1f24 <SPI_0_init+0xb8>)
    1eda:	401a      	ands	r2, r3
	tmp |= SERCOM_SPI_CTRLA_DIPO(data);
    1edc:	23c0      	movs	r3, #192	; 0xc0
    1ede:	039b      	lsls	r3, r3, #14
    1ee0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    1ee2:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ee4:	4b0c      	ldr	r3, [pc, #48]	; (1f18 <SPI_0_init+0xac>)
    1ee6:	69db      	ldr	r3, [r3, #28]
    1ee8:	075b      	lsls	r3, r3, #29
    1eea:	d1fb      	bne.n	1ee4 <SPI_0_init+0x78>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1eec:	2280      	movs	r2, #128	; 0x80
    1eee:	0292      	lsls	r2, r2, #10
    1ef0:	4b09      	ldr	r3, [pc, #36]	; (1f18 <SPI_0_init+0xac>)
    1ef2:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ef4:	4b08      	ldr	r3, [pc, #32]	; (1f18 <SPI_0_init+0xac>)
    1ef6:	69db      	ldr	r3, [r3, #28]
    1ef8:	075b      	lsls	r3, r3, #29
    1efa:	d1fb      	bne.n	1ef4 <SPI_0_init+0x88>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1efc:	4a06      	ldr	r2, [pc, #24]	; (1f18 <SPI_0_init+0xac>)
    1efe:	2367      	movs	r3, #103	; 0x67
    1f00:	7313      	strb	r3, [r2, #12]
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1f02:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_SPI_CTRLA_ENABLE;
    1f04:	2102      	movs	r1, #2
    1f06:	438b      	bics	r3, r1
	tmp |= value << SERCOM_SPI_CTRLA_ENABLE_Pos;
    1f08:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    1f0a:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f0c:	4b02      	ldr	r3, [pc, #8]	; (1f18 <SPI_0_init+0xac>)
    1f0e:	69db      	ldr	r3, [r3, #28]
    1f10:	079b      	lsls	r3, r3, #30
    1f12:	d1fb      	bne.n	1f0c <SPI_0_init+0xa0>
	//		 | 0 << SERCOM_SPI_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: disabled */

	hri_sercomspi_write_CTRLA_ENABLE_bit(SERCOM4, 1 << SERCOM_SPI_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1f14:	2000      	movs	r0, #0
    1f16:	4770      	bx	lr
    1f18:	42001800 	.word	0x42001800
    1f1c:	3000000c 	.word	0x3000000c
    1f20:	fffcffff 	.word	0xfffcffff
    1f24:	ffcfffff 	.word	0xffcfffff

00001f28 <SPI_0_enable>:
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f28:	4a04      	ldr	r2, [pc, #16]	; (1f3c <SPI_0_enable+0x14>)
    1f2a:	6813      	ldr	r3, [r2, #0]
    1f2c:	2102      	movs	r1, #2
    1f2e:	430b      	orrs	r3, r1
    1f30:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <SPI_0_enable+0x14>)
    1f34:	69db      	ldr	r3, [r3, #28]
    1f36:	079b      	lsls	r3, r3, #30
    1f38:	d1fb      	bne.n	1f32 <SPI_0_enable+0xa>
 * \brief Enable SPI module
 */
void SPI_0_enable()
{
	hri_sercomspi_set_CTRLA_ENABLE_bit(SERCOM4);
}
    1f3a:	4770      	bx	lr
    1f3c:	42001800 	.word	0x42001800

00001f40 <SPI_0_exchange_block>:
void SPI_0_exchange_block(void *block, uint8_t size)
{

	uint8_t *b = (uint8_t *)block;

	while (size--) {
    1f40:	e00b      	b.n	1f5a <SPI_0_exchange_block+0x1a>
		hri_sercomspi_write_DATA_reg(SERCOM4, *b);
    1f42:	7801      	ldrb	r1, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1f44:	4b07      	ldr	r3, [pc, #28]	; (1f64 <SPI_0_exchange_block+0x24>)
    1f46:	6299      	str	r1, [r3, #40]	; 0x28
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1f48:	4b06      	ldr	r3, [pc, #24]	; (1f64 <SPI_0_exchange_block+0x24>)
    1f4a:	7e1b      	ldrb	r3, [r3, #24]
		while (!(hri_sercomspi_read_INTFLAG_reg(SERCOM4) & SERCOM_SPI_INTFLAG_RXC))
    1f4c:	075b      	lsls	r3, r3, #29
    1f4e:	d5fb      	bpl.n	1f48 <SPI_0_exchange_block+0x8>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <SPI_0_exchange_block+0x24>)
    1f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			;
		*b = hri_sercomspi_read_DATA_reg(SERCOM4);
    1f54:	7003      	strb	r3, [r0, #0]
		b++;
    1f56:	3001      	adds	r0, #1
	while (size--) {
    1f58:	0011      	movs	r1, r2
    1f5a:	1e4a      	subs	r2, r1, #1
    1f5c:	b2d2      	uxtb	r2, r2
    1f5e:	2900      	cmp	r1, #0
    1f60:	d1ef      	bne.n	1f42 <SPI_0_exchange_block+0x2>
	}
}
    1f62:	4770      	bx	lr
    1f64:	42001800 	.word	0x42001800

00001f68 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    1f68:	4a14      	ldr	r2, [pc, #80]	; (1fbc <_sysctrl_init_sources+0x54>)
    1f6a:	230e      	movs	r3, #14
    1f6c:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1f6e:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1f70:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1f72:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1f74:	0f9b      	lsrs	r3, r3, #30
    1f76:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1f78:	0409      	lsls	r1, r1, #16
    1f7a:	4811      	ldr	r0, [pc, #68]	; (1fc0 <_sysctrl_init_sources+0x58>)
    1f7c:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    1f7e:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1f80:	2102      	movs	r1, #2
    1f82:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1f84:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1f86:	6993      	ldr	r3, [r2, #24]
    1f88:	430b      	orrs	r3, r1
    1f8a:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1f8c:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1f8e:	311d      	adds	r1, #29
    1f90:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1f92:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    1f94:	4b09      	ldr	r3, [pc, #36]	; (1fbc <_sysctrl_init_sources+0x54>)
    1f96:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    1f98:	079b      	lsls	r3, r3, #30
    1f9a:	d5fb      	bpl.n	1f94 <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    1f9c:	4a07      	ldr	r2, [pc, #28]	; (1fbc <_sysctrl_init_sources+0x54>)
    1f9e:	8a93      	ldrh	r3, [r2, #20]
    1fa0:	2180      	movs	r1, #128	; 0x80
    1fa2:	430b      	orrs	r3, r1
    1fa4:	b29b      	uxth	r3, r3
    1fa6:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <_sysctrl_init_sources+0x54>)
    1faa:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1fac:	071b      	lsls	r3, r3, #28
    1fae:	d5fb      	bpl.n	1fa8 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1fb0:	4a02      	ldr	r2, [pc, #8]	; (1fbc <_sysctrl_init_sources+0x54>)
    1fb2:	6a13      	ldr	r3, [r2, #32]
    1fb4:	2180      	movs	r1, #128	; 0x80
    1fb6:	430b      	orrs	r3, r1
    1fb8:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1fba:	4770      	bx	lr
    1fbc:	40000800 	.word	0x40000800
    1fc0:	0fff0000 	.word	0x0fff0000

00001fc4 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1fc4:	2286      	movs	r2, #134	; 0x86
    1fc6:	01d2      	lsls	r2, r2, #7
    1fc8:	4b1c      	ldr	r3, [pc, #112]	; (203c <_sysctrl_init_referenced_generators+0x78>)
    1fca:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1fcc:	2202      	movs	r2, #2
    1fce:	4b1c      	ldr	r3, [pc, #112]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    1fd0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1fd2:	4b1b      	ldr	r3, [pc, #108]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    1fd4:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1fd6:	06db      	lsls	r3, r3, #27
    1fd8:	d5fb      	bpl.n	1fd2 <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1fda:	4a1a      	ldr	r2, [pc, #104]	; (2044 <_sysctrl_init_referenced_generators+0x80>)
    1fdc:	4b18      	ldr	r3, [pc, #96]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    1fde:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1fe0:	4b19      	ldr	r3, [pc, #100]	; (2048 <_sysctrl_init_referenced_generators+0x84>)
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	0e9b      	lsrs	r3, r3, #26
    1fe6:	2b3f      	cmp	r3, #63	; 0x3f
    1fe8:	d020      	beq.n	202c <_sysctrl_init_referenced_generators+0x68>
    1fea:	029b      	lsls	r3, r3, #10
    1fec:	2280      	movs	r2, #128	; 0x80
    1fee:	0092      	lsls	r2, r2, #2
    1ff0:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1ff2:	4a13      	ldr	r2, [pc, #76]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    1ff4:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1ff6:	2306      	movs	r3, #6
    1ff8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1ffa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1ffc:	075b      	lsls	r3, r3, #29
    1ffe:	d518      	bpl.n	2032 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2000:	4b0f      	ldr	r3, [pc, #60]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    2002:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    2004:	23d0      	movs	r3, #208	; 0xd0
    2006:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2008:	2bd0      	cmp	r3, #208	; 0xd0
    200a:	d1f9      	bne.n	2000 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    200c:	4a0c      	ldr	r2, [pc, #48]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    200e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2010:	2180      	movs	r1, #128	; 0x80
    2012:	430b      	orrs	r3, r1
    2014:	b29b      	uxth	r3, r3
    2016:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    2018:	4b08      	ldr	r3, [pc, #32]	; (203c <_sysctrl_init_referenced_generators+0x78>)
    201a:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    201c:	09db      	lsrs	r3, r3, #7
    201e:	d1fb      	bne.n	2018 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    2020:	4a07      	ldr	r2, [pc, #28]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    2022:	6993      	ldr	r3, [r2, #24]
    2024:	2102      	movs	r1, #2
    2026:	438b      	bics	r3, r1
    2028:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    202a:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    202c:	23fc      	movs	r3, #252	; 0xfc
    202e:	01db      	lsls	r3, r3, #7
    2030:	e7df      	b.n	1ff2 <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2032:	4b03      	ldr	r3, [pc, #12]	; (2040 <_sysctrl_init_referenced_generators+0x7c>)
    2034:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2036:	06db      	lsls	r3, r3, #27
    2038:	d5fb      	bpl.n	2032 <_sysctrl_init_referenced_generators+0x6e>
    203a:	e7e7      	b.n	200c <_sysctrl_init_referenced_generators+0x48>
    203c:	40000c00 	.word	0x40000c00
    2040:	40000800 	.word	0x40000800
    2044:	040105b8 	.word	0x040105b8
    2048:	00806024 	.word	0x00806024

0000204c <TIMER_1_init>:
	};
}

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    204c:	4b33      	ldr	r3, [pc, #204]	; (211c <TIMER_1_init+0xd0>)
    204e:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2050:	07db      	lsls	r3, r3, #31
    2052:	d41b      	bmi.n	208c <TIMER_1_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2054:	4b31      	ldr	r3, [pc, #196]	; (211c <TIMER_1_init+0xd0>)
    2056:	689b      	ldr	r3, [r3, #8]
    2058:	079b      	lsls	r3, r3, #30
    205a:	d1fb      	bne.n	2054 <TIMER_1_init+0x8>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
    205c:	4b2f      	ldr	r3, [pc, #188]	; (211c <TIMER_1_init+0xd0>)
    205e:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2060:	079b      	lsls	r3, r3, #30
    2062:	d50c      	bpl.n	207e <TIMER_1_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2064:	4a2d      	ldr	r2, [pc, #180]	; (211c <TIMER_1_init+0xd0>)
    2066:	6813      	ldr	r3, [r2, #0]
    2068:	2102      	movs	r1, #2
    206a:	438b      	bics	r3, r1
    206c:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    206e:	4b2b      	ldr	r3, [pc, #172]	; (211c <TIMER_1_init+0xd0>)
    2070:	689b      	ldr	r3, [r3, #8]
    2072:	079b      	lsls	r3, r3, #30
    2074:	d1fb      	bne.n	206e <TIMER_1_init+0x22>
    2076:	4b29      	ldr	r3, [pc, #164]	; (211c <TIMER_1_init+0xd0>)
    2078:	689b      	ldr	r3, [r3, #8]
    207a:	079b      	lsls	r3, r3, #30
    207c:	d4fb      	bmi.n	2076 <TIMER_1_init+0x2a>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    207e:	2201      	movs	r2, #1
    2080:	4b26      	ldr	r3, [pc, #152]	; (211c <TIMER_1_init+0xd0>)
    2082:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2084:	4b25      	ldr	r3, [pc, #148]	; (211c <TIMER_1_init+0xd0>)
    2086:	689b      	ldr	r3, [r3, #8]
    2088:	079b      	lsls	r3, r3, #30
    208a:	d1fb      	bne.n	2084 <TIMER_1_init+0x38>
    208c:	4b23      	ldr	r3, [pc, #140]	; (211c <TIMER_1_init+0xd0>)
    208e:	689b      	ldr	r3, [r3, #8]
    2090:	07db      	lsls	r3, r3, #31
    2092:	d4fb      	bmi.n	208c <TIMER_1_init+0x40>
	((Tcc *)hw)->CTRLA.reg = data;
    2094:	22c0      	movs	r2, #192	; 0xc0
    2096:	0092      	lsls	r2, r2, #2
    2098:	4b20      	ldr	r3, [pc, #128]	; (211c <TIMER_1_init+0xd0>)
    209a:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    209c:	4b1f      	ldr	r3, [pc, #124]	; (211c <TIMER_1_init+0xd0>)
    209e:	689b      	ldr	r3, [r3, #8]
    20a0:	079b      	lsls	r3, r3, #30
    20a2:	d1fb      	bne.n	209c <TIMER_1_init+0x50>
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    20a4:	227f      	movs	r2, #127	; 0x7f
    20a6:	4b1d      	ldr	r3, [pc, #116]	; (211c <TIMER_1_init+0xd0>)
    20a8:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20aa:	4b1c      	ldr	r3, [pc, #112]	; (211c <TIMER_1_init+0xd0>)
    20ac:	689a      	ldr	r2, [r3, #8]
    20ae:	23f0      	movs	r3, #240	; 0xf0
    20b0:	011b      	lsls	r3, r3, #4
    20b2:	421a      	tst	r2, r3
    20b4:	d1f9      	bne.n	20aa <TIMER_1_init+0x5e>
	((Tcc *)hw)->CC[index].reg = data;
    20b6:	227f      	movs	r2, #127	; 0x7f
    20b8:	4b18      	ldr	r3, [pc, #96]	; (211c <TIMER_1_init+0xd0>)
    20ba:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20bc:	4b17      	ldr	r3, [pc, #92]	; (211c <TIMER_1_init+0xd0>)
    20be:	689a      	ldr	r2, [r3, #8]
    20c0:	23f0      	movs	r3, #240	; 0xf0
    20c2:	011b      	lsls	r3, r3, #4
    20c4:	421a      	tst	r2, r3
    20c6:	d1f9      	bne.n	20bc <TIMER_1_init+0x70>
	((Tcc *)hw)->CC[index].reg = data;
    20c8:	227f      	movs	r2, #127	; 0x7f
    20ca:	4b14      	ldr	r3, [pc, #80]	; (211c <TIMER_1_init+0xd0>)
    20cc:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20ce:	4b13      	ldr	r3, [pc, #76]	; (211c <TIMER_1_init+0xd0>)
    20d0:	689a      	ldr	r2, [r3, #8]
    20d2:	23f0      	movs	r3, #240	; 0xf0
    20d4:	011b      	lsls	r3, r3, #4
    20d6:	421a      	tst	r2, r3
    20d8:	d1f9      	bne.n	20ce <TIMER_1_init+0x82>
	((Tcc *)hw)->CC[index].reg = data;
    20da:	227f      	movs	r2, #127	; 0x7f
    20dc:	4b0f      	ldr	r3, [pc, #60]	; (211c <TIMER_1_init+0xd0>)
    20de:	651a      	str	r2, [r3, #80]	; 0x50
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20e0:	4b0e      	ldr	r3, [pc, #56]	; (211c <TIMER_1_init+0xd0>)
    20e2:	689a      	ldr	r2, [r3, #8]
    20e4:	23f0      	movs	r3, #240	; 0xf0
    20e6:	011b      	lsls	r3, r3, #4
    20e8:	421a      	tst	r2, r3
    20ea:	d1f9      	bne.n	20e0 <TIMER_1_init+0x94>
	((Tcc *)hw)->PER.reg = data;
    20ec:	22fe      	movs	r2, #254	; 0xfe
    20ee:	4b0b      	ldr	r3, [pc, #44]	; (211c <TIMER_1_init+0xd0>)
    20f0:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20f2:	4b0a      	ldr	r3, [pc, #40]	; (211c <TIMER_1_init+0xd0>)
    20f4:	689b      	ldr	r3, [r3, #8]
    20f6:	061b      	lsls	r3, r3, #24
    20f8:	d4fb      	bmi.n	20f2 <TIMER_1_init+0xa6>
	((Tcc *)hw)->INTENSET.reg = data;
    20fa:	4a08      	ldr	r2, [pc, #32]	; (211c <TIMER_1_init+0xd0>)
    20fc:	2301      	movs	r3, #1
    20fe:	6293      	str	r3, [r2, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    2100:	3b03      	subs	r3, #3
    2102:	6253      	str	r3, [r2, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2104:	6813      	ldr	r3, [r2, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    2106:	2102      	movs	r1, #2
    2108:	438b      	bics	r3, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    210a:	430b      	orrs	r3, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    210c:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    210e:	4b03      	ldr	r3, [pc, #12]	; (211c <TIMER_1_init+0xd0>)
    2110:	689b      	ldr	r3, [r3, #8]
    2112:	079b      	lsls	r3, r3, #30
    2114:	d1fb      	bne.n	210e <TIMER_1_init+0xc2>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2116:	2000      	movs	r0, #0
    2118:	4770      	bx	lr
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	42002000 	.word	0x42002000

00002120 <TIMER_0_init>:
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    2120:	4b1e      	ldr	r3, [pc, #120]	; (219c <TIMER_0_init+0x7c>)
    2122:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tcc_is_syncing(TCC1, TCC_SYNCBUSY_SWRST)) {
    2124:	07db      	lsls	r3, r3, #31
    2126:	d41b      	bmi.n	2160 <TIMER_0_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2128:	4b1c      	ldr	r3, [pc, #112]	; (219c <TIMER_0_init+0x7c>)
    212a:	689b      	ldr	r3, [r3, #8]
    212c:	079b      	lsls	r3, r3, #30
    212e:	d1fb      	bne.n	2128 <TIMER_0_init+0x8>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2130:	4b1a      	ldr	r3, [pc, #104]	; (219c <TIMER_0_init+0x7c>)
    2132:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC1, TCC_CTRLA_ENABLE)) {
    2134:	079b      	lsls	r3, r3, #30
    2136:	d50c      	bpl.n	2152 <TIMER_0_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2138:	4a18      	ldr	r2, [pc, #96]	; (219c <TIMER_0_init+0x7c>)
    213a:	6813      	ldr	r3, [r2, #0]
    213c:	2102      	movs	r1, #2
    213e:	438b      	bics	r3, r1
    2140:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2142:	4b16      	ldr	r3, [pc, #88]	; (219c <TIMER_0_init+0x7c>)
    2144:	689b      	ldr	r3, [r3, #8]
    2146:	079b      	lsls	r3, r3, #30
    2148:	d1fb      	bne.n	2142 <TIMER_0_init+0x22>
    214a:	4b14      	ldr	r3, [pc, #80]	; (219c <TIMER_0_init+0x7c>)
    214c:	689b      	ldr	r3, [r3, #8]
    214e:	079b      	lsls	r3, r3, #30
    2150:	d4fb      	bmi.n	214a <TIMER_0_init+0x2a>
	((Tcc *)hw)->CTRLA.reg = data;
    2152:	2201      	movs	r2, #1
    2154:	4b11      	ldr	r3, [pc, #68]	; (219c <TIMER_0_init+0x7c>)
    2156:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2158:	4b10      	ldr	r3, [pc, #64]	; (219c <TIMER_0_init+0x7c>)
    215a:	689b      	ldr	r3, [r3, #8]
    215c:	079b      	lsls	r3, r3, #30
    215e:	d1fb      	bne.n	2158 <TIMER_0_init+0x38>
    2160:	4b0e      	ldr	r3, [pc, #56]	; (219c <TIMER_0_init+0x7c>)
    2162:	689b      	ldr	r3, [r3, #8]
    2164:	07db      	lsls	r3, r3, #31
    2166:	d4fb      	bmi.n	2160 <TIMER_0_init+0x40>
	((Tcc *)hw)->PER.reg = data;
    2168:	4a0d      	ldr	r2, [pc, #52]	; (21a0 <TIMER_0_init+0x80>)
    216a:	4b0c      	ldr	r3, [pc, #48]	; (219c <TIMER_0_init+0x7c>)
    216c:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    216e:	4b0b      	ldr	r3, [pc, #44]	; (219c <TIMER_0_init+0x7c>)
    2170:	689b      	ldr	r3, [r3, #8]
    2172:	061b      	lsls	r3, r3, #24
    2174:	d4fb      	bmi.n	216e <TIMER_0_init+0x4e>
	((Tcc *)hw)->EVCTRL.reg = data;
    2176:	4b09      	ldr	r3, [pc, #36]	; (219c <TIMER_0_init+0x7c>)
    2178:	2280      	movs	r2, #128	; 0x80
    217a:	0452      	lsls	r2, r2, #17
    217c:	621a      	str	r2, [r3, #32]
	((Tcc *)hw)->INTENSET.reg = data;
    217e:	2201      	movs	r2, #1
    2180:	629a      	str	r2, [r3, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    2182:	3a03      	subs	r2, #3
    2184:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2186:	681a      	ldr	r2, [r3, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    2188:	2102      	movs	r1, #2
    218a:	438a      	bics	r2, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    218c:	430a      	orrs	r2, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    218e:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2190:	4b02      	ldr	r3, [pc, #8]	; (219c <TIMER_0_init+0x7c>)
    2192:	689b      	ldr	r3, [r3, #8]
    2194:	079b      	lsls	r3, r3, #30
    2196:	d1fb      	bne.n	2190 <TIMER_0_init+0x70>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC1, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2198:	2000      	movs	r0, #0
    219a:	4770      	bx	lr
    219c:	42002400 	.word	0x42002400
    21a0:	0000ffff 	.word	0x0000ffff

000021a4 <TIMER_2_init>:
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    21a4:	4b2a      	ldr	r3, [pc, #168]	; (2250 <TIMER_2_init+0xac>)
    21a6:	689b      	ldr	r3, [r3, #8]
 * \brief Initialize TCC interface
 */
int8_t TIMER_2_init()
{

	if (!hri_tcc_is_syncing(TCC2, TCC_SYNCBUSY_SWRST)) {
    21a8:	07db      	lsls	r3, r3, #31
    21aa:	d41b      	bmi.n	21e4 <TIMER_2_init+0x40>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21ac:	4b28      	ldr	r3, [pc, #160]	; (2250 <TIMER_2_init+0xac>)
    21ae:	689b      	ldr	r3, [r3, #8]
    21b0:	079b      	lsls	r3, r3, #30
    21b2:	d1fb      	bne.n	21ac <TIMER_2_init+0x8>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    21b4:	4b26      	ldr	r3, [pc, #152]	; (2250 <TIMER_2_init+0xac>)
    21b6:	681b      	ldr	r3, [r3, #0]
		if (hri_tcc_get_CTRLA_reg(TCC2, TCC_CTRLA_ENABLE)) {
    21b8:	079b      	lsls	r3, r3, #30
    21ba:	d50c      	bpl.n	21d6 <TIMER_2_init+0x32>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    21bc:	4a24      	ldr	r2, [pc, #144]	; (2250 <TIMER_2_init+0xac>)
    21be:	6813      	ldr	r3, [r2, #0]
    21c0:	2102      	movs	r1, #2
    21c2:	438b      	bics	r3, r1
    21c4:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21c6:	4b22      	ldr	r3, [pc, #136]	; (2250 <TIMER_2_init+0xac>)
    21c8:	689b      	ldr	r3, [r3, #8]
    21ca:	079b      	lsls	r3, r3, #30
    21cc:	d1fb      	bne.n	21c6 <TIMER_2_init+0x22>
    21ce:	4b20      	ldr	r3, [pc, #128]	; (2250 <TIMER_2_init+0xac>)
    21d0:	689b      	ldr	r3, [r3, #8]
    21d2:	079b      	lsls	r3, r3, #30
    21d4:	d4fb      	bmi.n	21ce <TIMER_2_init+0x2a>
	((Tcc *)hw)->CTRLA.reg = data;
    21d6:	2201      	movs	r2, #1
    21d8:	4b1d      	ldr	r3, [pc, #116]	; (2250 <TIMER_2_init+0xac>)
    21da:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21dc:	4b1c      	ldr	r3, [pc, #112]	; (2250 <TIMER_2_init+0xac>)
    21de:	689b      	ldr	r3, [r3, #8]
    21e0:	079b      	lsls	r3, r3, #30
    21e2:	d1fb      	bne.n	21dc <TIMER_2_init+0x38>
    21e4:	4b1a      	ldr	r3, [pc, #104]	; (2250 <TIMER_2_init+0xac>)
    21e6:	689b      	ldr	r3, [r3, #8]
    21e8:	07db      	lsls	r3, r3, #31
    21ea:	d4fb      	bmi.n	21e4 <TIMER_2_init+0x40>
	((Tcc *)hw)->CTRLA.reg = data;
    21ec:	22c0      	movs	r2, #192	; 0xc0
    21ee:	0092      	lsls	r2, r2, #2
    21f0:	4b17      	ldr	r3, [pc, #92]	; (2250 <TIMER_2_init+0xac>)
    21f2:	601a      	str	r2, [r3, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    21f4:	4b16      	ldr	r3, [pc, #88]	; (2250 <TIMER_2_init+0xac>)
    21f6:	689b      	ldr	r3, [r3, #8]
    21f8:	079b      	lsls	r3, r3, #30
    21fa:	d1fb      	bne.n	21f4 <TIMER_2_init+0x50>
	((Tcc *)hw)->CC[index].reg = data;
    21fc:	227f      	movs	r2, #127	; 0x7f
    21fe:	4b14      	ldr	r3, [pc, #80]	; (2250 <TIMER_2_init+0xac>)
    2200:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2202:	4b13      	ldr	r3, [pc, #76]	; (2250 <TIMER_2_init+0xac>)
    2204:	689a      	ldr	r2, [r3, #8]
    2206:	23f0      	movs	r3, #240	; 0xf0
    2208:	011b      	lsls	r3, r3, #4
    220a:	421a      	tst	r2, r3
    220c:	d1f9      	bne.n	2202 <TIMER_2_init+0x5e>
	((Tcc *)hw)->CC[index].reg = data;
    220e:	227f      	movs	r2, #127	; 0x7f
    2210:	4b0f      	ldr	r3, [pc, #60]	; (2250 <TIMER_2_init+0xac>)
    2212:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2214:	4b0e      	ldr	r3, [pc, #56]	; (2250 <TIMER_2_init+0xac>)
    2216:	689a      	ldr	r2, [r3, #8]
    2218:	23f0      	movs	r3, #240	; 0xf0
    221a:	011b      	lsls	r3, r3, #4
    221c:	421a      	tst	r2, r3
    221e:	d1f9      	bne.n	2214 <TIMER_2_init+0x70>
	((Tcc *)hw)->PER.reg = data;
    2220:	22fe      	movs	r2, #254	; 0xfe
    2222:	4b0b      	ldr	r3, [pc, #44]	; (2250 <TIMER_2_init+0xac>)
    2224:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2226:	4b0a      	ldr	r3, [pc, #40]	; (2250 <TIMER_2_init+0xac>)
    2228:	689b      	ldr	r3, [r3, #8]
    222a:	061b      	lsls	r3, r3, #24
    222c:	d4fb      	bmi.n	2226 <TIMER_2_init+0x82>
	((Tcc *)hw)->INTENSET.reg = data;
    222e:	4a08      	ldr	r2, [pc, #32]	; (2250 <TIMER_2_init+0xac>)
    2230:	2301      	movs	r3, #1
    2232:	6293      	str	r3, [r2, #40]	; 0x28
	((Tcc *)hw)->INTENCLR.reg = ~data;
    2234:	3b03      	subs	r3, #3
    2236:	6253      	str	r3, [r2, #36]	; 0x24
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2238:	6813      	ldr	r3, [r2, #0]
	tmp &= ~TCC_CTRLA_ENABLE;
    223a:	2102      	movs	r1, #2
    223c:	438b      	bics	r3, r1
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    223e:	430b      	orrs	r3, r1
	((Tcc *)hw)->CTRLA.reg = tmp;
    2240:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2242:	4b03      	ldr	r3, [pc, #12]	; (2250 <TIMER_2_init+0xac>)
    2244:	689b      	ldr	r3, [r3, #8]
    2246:	079b      	lsls	r3, r3, #30
    2248:	d1fb      	bne.n	2242 <TIMER_2_init+0x9e>
	                            | 1 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC2, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    224a:	2000      	movs	r0, #0
    224c:	4770      	bx	lr
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	42002800 	.word	0x42002800

00002254 <TIMER_3_init>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2254:	4b15      	ldr	r3, [pc, #84]	; (22ac <TIMER_3_init+0x58>)
    2256:	7bdb      	ldrb	r3, [r3, #15]
    2258:	09db      	lsrs	r3, r3, #7
    225a:	d1fb      	bne.n	2254 <TIMER_3_init>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    225c:	4b13      	ldr	r3, [pc, #76]	; (22ac <TIMER_3_init+0x58>)
    225e:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_3_init()
{

	hri_tc_wait_for_sync(TC3);
	if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    2260:	079b      	lsls	r3, r3, #30
    2262:	d508      	bpl.n	2276 <TIMER_3_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2264:	4a11      	ldr	r2, [pc, #68]	; (22ac <TIMER_3_init+0x58>)
    2266:	8813      	ldrh	r3, [r2, #0]
    2268:	2102      	movs	r1, #2
    226a:	438b      	bics	r3, r1
    226c:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    226e:	4b0f      	ldr	r3, [pc, #60]	; (22ac <TIMER_3_init+0x58>)
    2270:	7bdb      	ldrb	r3, [r3, #15]
    2272:	09db      	lsrs	r3, r3, #7
    2274:	d1fb      	bne.n	226e <TIMER_3_init+0x1a>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2276:	2201      	movs	r2, #1
    2278:	4b0c      	ldr	r3, [pc, #48]	; (22ac <TIMER_3_init+0x58>)
    227a:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    227c:	4b0b      	ldr	r3, [pc, #44]	; (22ac <TIMER_3_init+0x58>)
    227e:	7bdb      	ldrb	r3, [r3, #15]
    2280:	09db      	lsrs	r3, r3, #7
    2282:	d1fb      	bne.n	227c <TIMER_3_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2284:	4b09      	ldr	r3, [pc, #36]	; (22ac <TIMER_3_init+0x58>)
    2286:	22d1      	movs	r2, #209	; 0xd1
    2288:	0092      	lsls	r2, r2, #2
    228a:	801a      	strh	r2, [r3, #0]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    228c:	227f      	movs	r2, #127	; 0x7f
    228e:	761a      	strb	r2, [r3, #24]
    2290:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2292:	327f      	adds	r2, #127	; 0x7f
    2294:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    2296:	2101      	movs	r1, #1
    2298:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    229a:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    229c:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    229e:	3101      	adds	r1, #1
    22a0:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    22a2:	430a      	orrs	r2, r1
    22a4:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    22a6:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    22a8:	2000      	movs	r0, #0
    22aa:	4770      	bx	lr
    22ac:	42002c00 	.word	0x42002c00

000022b0 <TIMER_5_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    22b0:	4b15      	ldr	r3, [pc, #84]	; (2308 <TIMER_5_init+0x58>)
    22b2:	7bdb      	ldrb	r3, [r3, #15]
    22b4:	09db      	lsrs	r3, r3, #7
    22b6:	d1fb      	bne.n	22b0 <TIMER_5_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22b8:	4b13      	ldr	r3, [pc, #76]	; (2308 <TIMER_5_init+0x58>)
    22ba:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_5_init()
{

	hri_tc_wait_for_sync(TC4);
	if (hri_tc_get_CTRLA_reg(TC4, TC_CTRLA_ENABLE)) {
    22bc:	079b      	lsls	r3, r3, #30
    22be:	d508      	bpl.n	22d2 <TIMER_5_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    22c0:	4a11      	ldr	r2, [pc, #68]	; (2308 <TIMER_5_init+0x58>)
    22c2:	8813      	ldrh	r3, [r2, #0]
    22c4:	2102      	movs	r1, #2
    22c6:	438b      	bics	r3, r1
    22c8:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    22ca:	4b0f      	ldr	r3, [pc, #60]	; (2308 <TIMER_5_init+0x58>)
    22cc:	7bdb      	ldrb	r3, [r3, #15]
    22ce:	09db      	lsrs	r3, r3, #7
    22d0:	d1fb      	bne.n	22ca <TIMER_5_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22d2:	2201      	movs	r2, #1
    22d4:	4b0c      	ldr	r3, [pc, #48]	; (2308 <TIMER_5_init+0x58>)
    22d6:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    22d8:	4b0b      	ldr	r3, [pc, #44]	; (2308 <TIMER_5_init+0x58>)
    22da:	7bdb      	ldrb	r3, [r3, #15]
    22dc:	09db      	lsrs	r3, r3, #7
    22de:	d1fb      	bne.n	22d8 <TIMER_5_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22e0:	4b09      	ldr	r3, [pc, #36]	; (2308 <TIMER_5_init+0x58>)
    22e2:	22d1      	movs	r2, #209	; 0xd1
    22e4:	0092      	lsls	r2, r2, #2
    22e6:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    22e8:	227f      	movs	r2, #127	; 0x7f
    22ea:	761a      	strb	r2, [r3, #24]
    22ec:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    22ee:	327f      	adds	r2, #127	; 0x7f
    22f0:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    22f2:	2101      	movs	r1, #1
    22f4:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    22f6:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22f8:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    22fa:	3101      	adds	r1, #1
    22fc:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    22fe:	430a      	orrs	r2, r1
    2300:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    2302:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC4, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2304:	2000      	movs	r0, #0
    2306:	4770      	bx	lr
    2308:	42003000 	.word	0x42003000

0000230c <TIMER_6_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    230c:	4b15      	ldr	r3, [pc, #84]	; (2364 <TIMER_6_init+0x58>)
    230e:	7bdb      	ldrb	r3, [r3, #15]
    2310:	09db      	lsrs	r3, r3, #7
    2312:	d1fb      	bne.n	230c <TIMER_6_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2314:	4b13      	ldr	r3, [pc, #76]	; (2364 <TIMER_6_init+0x58>)
    2316:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_6_init()
{

	hri_tc_wait_for_sync(TC5);
	if (hri_tc_get_CTRLA_reg(TC5, TC_CTRLA_ENABLE)) {
    2318:	079b      	lsls	r3, r3, #30
    231a:	d508      	bpl.n	232e <TIMER_6_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    231c:	4a11      	ldr	r2, [pc, #68]	; (2364 <TIMER_6_init+0x58>)
    231e:	8813      	ldrh	r3, [r2, #0]
    2320:	2102      	movs	r1, #2
    2322:	438b      	bics	r3, r1
    2324:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2326:	4b0f      	ldr	r3, [pc, #60]	; (2364 <TIMER_6_init+0x58>)
    2328:	7bdb      	ldrb	r3, [r3, #15]
    232a:	09db      	lsrs	r3, r3, #7
    232c:	d1fb      	bne.n	2326 <TIMER_6_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    232e:	2201      	movs	r2, #1
    2330:	4b0c      	ldr	r3, [pc, #48]	; (2364 <TIMER_6_init+0x58>)
    2332:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2334:	4b0b      	ldr	r3, [pc, #44]	; (2364 <TIMER_6_init+0x58>)
    2336:	7bdb      	ldrb	r3, [r3, #15]
    2338:	09db      	lsrs	r3, r3, #7
    233a:	d1fb      	bne.n	2334 <TIMER_6_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    233c:	4b09      	ldr	r3, [pc, #36]	; (2364 <TIMER_6_init+0x58>)
    233e:	22d1      	movs	r2, #209	; 0xd1
    2340:	0092      	lsls	r2, r2, #2
    2342:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2344:	227f      	movs	r2, #127	; 0x7f
    2346:	761a      	strb	r2, [r3, #24]
    2348:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    234a:	327f      	adds	r2, #127	; 0x7f
    234c:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    234e:	2101      	movs	r1, #1
    2350:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    2352:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2354:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    2356:	3101      	adds	r1, #1
    2358:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    235a:	430a      	orrs	r2, r1
    235c:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    235e:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC5, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2360:	2000      	movs	r0, #0
    2362:	4770      	bx	lr
    2364:	42003400 	.word	0x42003400

00002368 <TIMER_4_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2368:	4b15      	ldr	r3, [pc, #84]	; (23c0 <TIMER_4_init+0x58>)
    236a:	7bdb      	ldrb	r3, [r3, #15]
    236c:	09db      	lsrs	r3, r3, #7
    236e:	d1fb      	bne.n	2368 <TIMER_4_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2370:	4b13      	ldr	r3, [pc, #76]	; (23c0 <TIMER_4_init+0x58>)
    2372:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_4_init()
{

	hri_tc_wait_for_sync(TC6);
	if (hri_tc_get_CTRLA_reg(TC6, TC_CTRLA_ENABLE)) {
    2374:	079b      	lsls	r3, r3, #30
    2376:	d508      	bpl.n	238a <TIMER_4_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2378:	4a11      	ldr	r2, [pc, #68]	; (23c0 <TIMER_4_init+0x58>)
    237a:	8813      	ldrh	r3, [r2, #0]
    237c:	2102      	movs	r1, #2
    237e:	438b      	bics	r3, r1
    2380:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2382:	4b0f      	ldr	r3, [pc, #60]	; (23c0 <TIMER_4_init+0x58>)
    2384:	7bdb      	ldrb	r3, [r3, #15]
    2386:	09db      	lsrs	r3, r3, #7
    2388:	d1fb      	bne.n	2382 <TIMER_4_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    238a:	2201      	movs	r2, #1
    238c:	4b0c      	ldr	r3, [pc, #48]	; (23c0 <TIMER_4_init+0x58>)
    238e:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2390:	4b0b      	ldr	r3, [pc, #44]	; (23c0 <TIMER_4_init+0x58>)
    2392:	7bdb      	ldrb	r3, [r3, #15]
    2394:	09db      	lsrs	r3, r3, #7
    2396:	d1fb      	bne.n	2390 <TIMER_4_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2398:	4b09      	ldr	r3, [pc, #36]	; (23c0 <TIMER_4_init+0x58>)
    239a:	22d1      	movs	r2, #209	; 0xd1
    239c:	0092      	lsls	r2, r2, #2
    239e:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    23a0:	227f      	movs	r2, #127	; 0x7f
    23a2:	761a      	strb	r2, [r3, #24]
    23a4:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    23a6:	327f      	adds	r2, #127	; 0x7f
    23a8:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    23aa:	2101      	movs	r1, #1
    23ac:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    23ae:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    23b0:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    23b2:	3101      	adds	r1, #1
    23b4:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    23b6:	430a      	orrs	r2, r1
    23b8:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    23ba:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC6, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    23bc:	2000      	movs	r0, #0
    23be:	4770      	bx	lr
    23c0:	42003800 	.word	0x42003800

000023c4 <TIMER_7_init>:
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23c4:	4b15      	ldr	r3, [pc, #84]	; (241c <TIMER_7_init+0x58>)
    23c6:	7bdb      	ldrb	r3, [r3, #15]
    23c8:	09db      	lsrs	r3, r3, #7
    23ca:	d1fb      	bne.n	23c4 <TIMER_7_init>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    23cc:	4b13      	ldr	r3, [pc, #76]	; (241c <TIMER_7_init+0x58>)
    23ce:	881b      	ldrh	r3, [r3, #0]
 */
int8_t TIMER_7_init()
{

	hri_tc_wait_for_sync(TC7);
	if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    23d0:	079b      	lsls	r3, r3, #30
    23d2:	d508      	bpl.n	23e6 <TIMER_7_init+0x22>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    23d4:	4a11      	ldr	r2, [pc, #68]	; (241c <TIMER_7_init+0x58>)
    23d6:	8813      	ldrh	r3, [r2, #0]
    23d8:	2102      	movs	r1, #2
    23da:	438b      	bics	r3, r1
    23dc:	8013      	strh	r3, [r2, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23de:	4b0f      	ldr	r3, [pc, #60]	; (241c <TIMER_7_init+0x58>)
    23e0:	7bdb      	ldrb	r3, [r3, #15]
    23e2:	09db      	lsrs	r3, r3, #7
    23e4:	d1fb      	bne.n	23de <TIMER_7_init+0x1a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    23e6:	2201      	movs	r2, #1
    23e8:	4b0c      	ldr	r3, [pc, #48]	; (241c <TIMER_7_init+0x58>)
    23ea:	801a      	strh	r2, [r3, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    23ec:	4b0b      	ldr	r3, [pc, #44]	; (241c <TIMER_7_init+0x58>)
    23ee:	7bdb      	ldrb	r3, [r3, #15]
    23f0:	09db      	lsrs	r3, r3, #7
    23f2:	d1fb      	bne.n	23ec <TIMER_7_init+0x28>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    23f4:	4b09      	ldr	r3, [pc, #36]	; (241c <TIMER_7_init+0x58>)
    23f6:	22d1      	movs	r2, #209	; 0xd1
    23f8:	0092      	lsls	r2, r2, #2
    23fa:	801a      	strh	r2, [r3, #0]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    23fc:	227f      	movs	r2, #127	; 0x7f
    23fe:	761a      	strb	r2, [r3, #24]
    2400:	765a      	strb	r2, [r3, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2402:	327f      	adds	r2, #127	; 0x7f
    2404:	751a      	strb	r2, [r3, #20]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    2406:	2101      	movs	r1, #1
    2408:	7359      	strb	r1, [r3, #13]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    240a:	731a      	strb	r2, [r3, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    240c:	881a      	ldrh	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE;
    240e:	3101      	adds	r1, #1
    2410:	438a      	bics	r2, r1
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    2412:	430a      	orrs	r2, r1
    2414:	b292      	uxth	r2, r2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    2416:	801a      	strh	r2, [r3, #0]
	                           | 1 << TC_INTENSET_OVF_Pos);   /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2418:	2000      	movs	r0, #0
    241a:	4770      	bx	lr
    241c:	42003c00 	.word	0x42003c00

00002420 <USART_0_init>:
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2420:	4b2c      	ldr	r3, [pc, #176]	; (24d4 <USART_0_init+0xb4>)
    2422:	69db      	ldr	r3, [r3, #28]
 * \brief Initialize USART interface
 */
int8_t USART_0_init()
{

	if (!hri_sercomusart_is_syncing(SERCOM3, SERCOM_USART_SYNCBUSY_SWRST)) {
    2424:	07db      	lsls	r3, r3, #31
    2426:	d41b      	bmi.n	2460 <USART_0_init+0x40>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2428:	4b2a      	ldr	r3, [pc, #168]	; (24d4 <USART_0_init+0xb4>)
    242a:	69db      	ldr	r3, [r3, #28]
    242c:	079b      	lsls	r3, r3, #30
    242e:	d1fb      	bne.n	2428 <USART_0_init+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2430:	4b28      	ldr	r3, [pc, #160]	; (24d4 <USART_0_init+0xb4>)
    2432:	681b      	ldr	r3, [r3, #0]
		uint32_t mode = SERCOM_USART_CTRLA_MODE(1);
		if (hri_sercomusart_get_CTRLA_reg(SERCOM3, SERCOM_USART_CTRLA_ENABLE)) {
    2434:	079b      	lsls	r3, r3, #30
    2436:	d50c      	bpl.n	2452 <USART_0_init+0x32>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2438:	4a26      	ldr	r2, [pc, #152]	; (24d4 <USART_0_init+0xb4>)
    243a:	6813      	ldr	r3, [r2, #0]
    243c:	2102      	movs	r1, #2
    243e:	438b      	bics	r3, r1
    2440:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2442:	4b24      	ldr	r3, [pc, #144]	; (24d4 <USART_0_init+0xb4>)
    2444:	69db      	ldr	r3, [r3, #28]
    2446:	079b      	lsls	r3, r3, #30
    2448:	d1fb      	bne.n	2442 <USART_0_init+0x22>
    244a:	4b22      	ldr	r3, [pc, #136]	; (24d4 <USART_0_init+0xb4>)
    244c:	69db      	ldr	r3, [r3, #28]
    244e:	079b      	lsls	r3, r3, #30
    2450:	d4fb      	bmi.n	244a <USART_0_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2452:	2205      	movs	r2, #5
    2454:	4b1f      	ldr	r3, [pc, #124]	; (24d4 <USART_0_init+0xb4>)
    2456:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2458:	4b1e      	ldr	r3, [pc, #120]	; (24d4 <USART_0_init+0xb4>)
    245a:	69db      	ldr	r3, [r3, #28]
    245c:	079b      	lsls	r3, r3, #30
    245e:	d1fb      	bne.n	2458 <USART_0_init+0x38>
    2460:	4b1c      	ldr	r3, [pc, #112]	; (24d4 <USART_0_init+0xb4>)
    2462:	69db      	ldr	r3, [r3, #28]
    2464:	07db      	lsls	r3, r3, #31
    2466:	d4fb      	bmi.n	2460 <USART_0_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2468:	4a1b      	ldr	r2, [pc, #108]	; (24d8 <USART_0_init+0xb8>)
    246a:	4b1a      	ldr	r3, [pc, #104]	; (24d4 <USART_0_init+0xb4>)
    246c:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    246e:	4b19      	ldr	r3, [pc, #100]	; (24d4 <USART_0_init+0xb4>)
    2470:	69db      	ldr	r3, [r3, #28]
    2472:	079b      	lsls	r3, r3, #30
    2474:	d1fb      	bne.n	246e <USART_0_init+0x4e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2476:	4a17      	ldr	r2, [pc, #92]	; (24d4 <USART_0_init+0xb4>)
    2478:	6813      	ldr	r3, [r2, #0]
	tmp &= ~SERCOM_USART_CTRLA_TXPO_Msk;
    247a:	4918      	ldr	r1, [pc, #96]	; (24dc <USART_0_init+0xbc>)
    247c:	400b      	ands	r3, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    247e:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2480:	4b14      	ldr	r3, [pc, #80]	; (24d4 <USART_0_init+0xb4>)
    2482:	69db      	ldr	r3, [r3, #28]
    2484:	075b      	lsls	r3, r3, #29
    2486:	d1fb      	bne.n	2480 <USART_0_init+0x60>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2488:	4912      	ldr	r1, [pc, #72]	; (24d4 <USART_0_init+0xb4>)
    248a:	680b      	ldr	r3, [r1, #0]
	tmp &= ~SERCOM_USART_CTRLA_RXPO_Msk;
    248c:	4a14      	ldr	r2, [pc, #80]	; (24e0 <USART_0_init+0xc0>)
    248e:	401a      	ands	r2, r3
	tmp |= SERCOM_USART_CTRLA_RXPO(data);
    2490:	2380      	movs	r3, #128	; 0x80
    2492:	035b      	lsls	r3, r3, #13
    2494:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    2496:	600b      	str	r3, [r1, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2498:	4b0e      	ldr	r3, [pc, #56]	; (24d4 <USART_0_init+0xb4>)
    249a:	69db      	ldr	r3, [r3, #28]
    249c:	075b      	lsls	r3, r3, #29
    249e:	d1fb      	bne.n	2498 <USART_0_init+0x78>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    24a0:	4a10      	ldr	r2, [pc, #64]	; (24e4 <USART_0_init+0xc4>)
    24a2:	4b0c      	ldr	r3, [pc, #48]	; (24d4 <USART_0_init+0xb4>)
    24a4:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24a6:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <USART_0_init+0xb4>)
    24a8:	69db      	ldr	r3, [r3, #28]
    24aa:	075b      	lsls	r3, r3, #29
    24ac:	d1fb      	bne.n	24a6 <USART_0_init+0x86>
	((Sercom *)hw)->USART.BAUD.reg = data;
    24ae:	4b09      	ldr	r3, [pc, #36]	; (24d4 <USART_0_init+0xb4>)
    24b0:	4a0d      	ldr	r2, [pc, #52]	; (24e8 <USART_0_init+0xc8>)
    24b2:	819a      	strh	r2, [r3, #12]
	((Sercom *)hw)->USART.INTENSET.reg = data;
    24b4:	2284      	movs	r2, #132	; 0x84
    24b6:	759a      	strb	r2, [r3, #22]
	((Sercom *)hw)->USART.INTENCLR.reg = ~data;
    24b8:	3a09      	subs	r2, #9
    24ba:	751a      	strb	r2, [r3, #20]
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    24bc:	681a      	ldr	r2, [r3, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    24be:	2102      	movs	r1, #2
    24c0:	438a      	bics	r2, r1
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    24c2:	430a      	orrs	r2, r1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    24c4:	601a      	str	r2, [r3, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    24c6:	4b03      	ldr	r3, [pc, #12]	; (24d4 <USART_0_init+0xb4>)
    24c8:	69db      	ldr	r3, [r3, #28]
    24ca:	079b      	lsls	r3, r3, #30
    24cc:	d1fb      	bne.n	24c6 <USART_0_init+0xa6>
	        | 0 << SERCOM_USART_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: disabled */

	hri_sercomusart_write_CTRLA_ENABLE_bit(SERCOM3, 1 << SERCOM_USART_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    24ce:	2000      	movs	r0, #0
    24d0:	4770      	bx	lr
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	42001400 	.word	0x42001400
    24d8:	40000004 	.word	0x40000004
    24dc:	fffcffff 	.word	0xfffcffff
    24e0:	ffcfffff 	.word	0xffcfffff
    24e4:	00020040 	.word	0x00020040
    24e8:	ffffeaa7 	.word	0xffffeaa7

000024ec <hv_dc_supply_cancel>:
		}
	}
}

void hv_dc_supply_cancel() {
	hv_dc_supply_state = HV_DC_SUPPLY_STATE_OFF;
    24ec:	2200      	movs	r2, #0
    24ee:	4b0a      	ldr	r3, [pc, #40]	; (2518 <hv_dc_supply_cancel+0x2c>)
    24f0:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_tcc_get_STATUS_PERBV_bit(const void *const hw)
{
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    24f2:	4b0a      	ldr	r3, [pc, #40]	; (251c <hv_dc_supply_cancel+0x30>)
    24f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    24f6:	061b      	lsls	r3, r3, #24
    24f8:	d409      	bmi.n	250e <hv_dc_supply_cancel+0x22>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    24fa:	4b08      	ldr	r3, [pc, #32]	; (251c <hv_dc_supply_cancel+0x30>)
    24fc:	3202      	adds	r2, #2
    24fe:	715a      	strb	r2, [r3, #5]
#ifndef TCC_UTIL_H_
#define TCC_UTIL_H_

static inline void hri_tcc_write_CCB_reg_no_lock(const void *const hw, uint8_t index, hri_tcc_ccb_reg_t data)
{
	((Tcc *)hw)->CCB[index].reg = data;
    2500:	2100      	movs	r1, #0
    2502:	6759      	str	r1, [r3, #116]	; 0x74
    2504:	4906      	ldr	r1, [pc, #24]	; (2520 <hv_dc_supply_cancel+0x34>)
    2506:	6719      	str	r1, [r3, #112]	; 0x70
}

static inline void hri_tcc_write_PERB_reg_no_lock(const void *const hw, hri_tcc_perb_reg_t data)
{
	((Tcc *)hw)->PERB.reg = data;
    2508:	4906      	ldr	r1, [pc, #24]	; (2524 <hv_dc_supply_cancel+0x38>)
    250a:	66d9      	str	r1, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    250c:	711a      	strb	r2, [r3, #4]
	//CAUTION: This step can be skipped by a pending update. Sometimes, it has to be done again in TCC1_Handler
	hv_dc_supply_set_timer(0x000000, HV_DC_SUPPLY_MAX_BURST_CYCLES, true);
	hv_dc_supply_sensed_voltage = 0;
    250e:	2200      	movs	r2, #0
    2510:	4b01      	ldr	r3, [pc, #4]	; (2518 <hv_dc_supply_cancel+0x2c>)
    2512:	805a      	strh	r2, [r3, #2]
}
    2514:	4770      	bx	lr
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	20000460 	.word	0x20000460
    251c:	42002400 	.word	0x42002400
    2520:	00ffffff 	.word	0x00ffffff
    2524:	0003a8f4 	.word	0x0003a8f4

00002528 <ADC_Handler>:
void ADC_Handler() {
    2528:	b5f0      	push	{r4, r5, r6, r7, lr}
    252a:	46ce      	mov	lr, r9
    252c:	4647      	mov	r7, r8
    252e:	b580      	push	{r7, lr}
    2530:	b087      	sub	sp, #28
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2532:	2201      	movs	r2, #1
    2534:	4b84      	ldr	r3, [pc, #528]	; (2748 <ADC_Handler+0x220>)
    2536:	761a      	strb	r2, [r3, #24]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    2538:	4b83      	ldr	r3, [pc, #524]	; (2748 <ADC_Handler+0x220>)
    253a:	7e5b      	ldrb	r3, [r3, #25]
    253c:	09db      	lsrs	r3, r3, #7
    253e:	d1fb      	bne.n	2538 <ADC_Handler+0x10>
	return ((Adc *)hw)->RESULT.reg;
    2540:	4b81      	ldr	r3, [pc, #516]	; (2748 <ADC_Handler+0x220>)
    2542:	8b59      	ldrh	r1, [r3, #26]
    2544:	b289      	uxth	r1, r1
	hv_dc_supply_sensed_voltage = voltage;
    2546:	4b81      	ldr	r3, [pc, #516]	; (274c <ADC_Handler+0x224>)
    2548:	8059      	strh	r1, [r3, #2]
	switch (hv_dc_supply_state) {
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	b2db      	uxtb	r3, r3
    254e:	2b01      	cmp	r3, #1
    2550:	d007      	beq.n	2562 <ADC_Handler+0x3a>
    2552:	2b02      	cmp	r3, #2
    2554:	d100      	bne.n	2558 <ADC_Handler+0x30>
    2556:	e072      	b.n	263e <ADC_Handler+0x116>
}
    2558:	b007      	add	sp, #28
    255a:	bc0c      	pop	{r2, r3}
    255c:	4690      	mov	r8, r2
    255e:	4699      	mov	r9, r3
    2560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2562:	2001      	movs	r0, #1
    2564:	2394      	movs	r3, #148	; 0x94
    2566:	22c0      	movs	r2, #192	; 0xc0
    2568:	05d2      	lsls	r2, r2, #23
    256a:	50d0      	str	r0, [r2, r3]
			if (voltage >= HV_DC_SUPPLY_SENSE_TARGET) {
    256c:	4b78      	ldr	r3, [pc, #480]	; (2750 <ADC_Handler+0x228>)
    256e:	4299      	cmp	r1, r3
    2570:	d90f      	bls.n	2592 <ADC_Handler+0x6a>
				hv_dc_supply_state = HV_DC_SUPPLY_STATE_REGULATE;
    2572:	2202      	movs	r2, #2
    2574:	4b75      	ldr	r3, [pc, #468]	; (274c <ADC_Handler+0x224>)
    2576:	701a      	strb	r2, [r3, #0]
	controller->integral_max = tuneFrom->integral_max;
}
#endif

static inline void pid_controller_init(PidController* controller, PID_VALUE_T current_output) {
	controller->last_error = 0;
    2578:	4876      	ldr	r0, [pc, #472]	; (2754 <ADC_Handler+0x22c>)
    257a:	2200      	movs	r2, #0
    257c:	2300      	movs	r3, #0
    257e:	6502      	str	r2, [r0, #80]	; 0x50
    2580:	6543      	str	r3, [r0, #84]	; 0x54
	controller->last_integral_value = 0;
    2582:	6582      	str	r2, [r0, #88]	; 0x58
    2584:	65c3      	str	r3, [r0, #92]	; 0x5c
	controller->last_derivative_value = 0;
    2586:	6602      	str	r2, [r0, #96]	; 0x60
    2588:	6643      	str	r3, [r0, #100]	; 0x64
	controller->last_output = current_output * controller->kpid_divisor;
    258a:	6904      	ldr	r4, [r0, #16]
    258c:	6945      	ldr	r5, [r0, #20]
    258e:	6682      	str	r2, [r0, #104]	; 0x68
    2590:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (voltage >= HV_DC_SUPPLY_LOCKOUT_OVERVOLTAGE_TARGET) {
    2592:	4b71      	ldr	r3, [pc, #452]	; (2758 <ADC_Handler+0x230>)
    2594:	4299      	cmp	r1, r3
    2596:	d85e      	bhi.n	2656 <ADC_Handler+0x12e>
	switch (hv_dc_supply_state) {
    2598:	4b6c      	ldr	r3, [pc, #432]	; (274c <ADC_Handler+0x224>)
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	b2db      	uxtb	r3, r3
    259e:	2b01      	cmp	r3, #1
    25a0:	d05c      	beq.n	265c <ADC_Handler+0x134>
    25a2:	2b02      	cmp	r3, #2
    25a4:	d1d8      	bne.n	2558 <ADC_Handler+0x30>
			int32_t error = ((int32_t) HV_DC_SUPPLY_SENSE_TARGET) - ((int32_t) voltage);
    25a6:	2397      	movs	r3, #151	; 0x97
    25a8:	00db      	lsls	r3, r3, #3
    25aa:	1a59      	subs	r1, r3, r1
			PID_VALUE_T duty_cycle = pid_controller_update(&controller, error);
    25ac:	000e      	movs	r6, r1
    25ae:	17cf      	asrs	r7, r1, #31
}

static inline PID_VALUE_T pid_controller_update(PidController* controller, const PID_VALUE_T error) {
	//calculate basic p, i and d terms
	PID_VALUE_T proportional = (controller->kp_factor * error);
    25b0:	4b68      	ldr	r3, [pc, #416]	; (2754 <ADC_Handler+0x22c>)
    25b2:	4698      	mov	r8, r3
    25b4:	681a      	ldr	r2, [r3, #0]
    25b6:	685b      	ldr	r3, [r3, #4]
    25b8:	4968      	ldr	r1, [pc, #416]	; (275c <ADC_Handler+0x234>)
    25ba:	4689      	mov	r9, r1
    25bc:	0030      	movs	r0, r6
    25be:	0039      	movs	r1, r7
    25c0:	47c8      	blx	r9
    25c2:	9000      	str	r0, [sp, #0]
    25c4:	9101      	str	r1, [sp, #4]
	PID_VALUE_T integral = (controller->ki_factor * (error + controller->last_error)) + controller->last_integral_value;
    25c6:	4643      	mov	r3, r8
    25c8:	6898      	ldr	r0, [r3, #8]
    25ca:	68d9      	ldr	r1, [r3, #12]
    25cc:	6d1c      	ldr	r4, [r3, #80]	; 0x50
    25ce:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    25d0:	0032      	movs	r2, r6
    25d2:	003b      	movs	r3, r7
    25d4:	1912      	adds	r2, r2, r4
    25d6:	416b      	adcs	r3, r5
    25d8:	47c8      	blx	r9
    25da:	4643      	mov	r3, r8
    25dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    25de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    25e0:	1812      	adds	r2, r2, r0
    25e2:	414b      	adcs	r3, r1
    25e4:	9204      	str	r2, [sp, #16]
    25e6:	9305      	str	r3, [sp, #20]
	PID_VALUE_T derivative = ((controller->kd_factor * (error - controller->last_error)) + (controller->kd_filter_factor * controller->last_derivative_value)) / controller->kd_divisor;
    25e8:	4643      	mov	r3, r8
    25ea:	6998      	ldr	r0, [r3, #24]
    25ec:	69d9      	ldr	r1, [r3, #28]
    25ee:	0032      	movs	r2, r6
    25f0:	003b      	movs	r3, r7
    25f2:	1b12      	subs	r2, r2, r4
    25f4:	41ab      	sbcs	r3, r5
    25f6:	47c8      	blx	r9
    25f8:	0004      	movs	r4, r0
    25fa:	000d      	movs	r5, r1
    25fc:	4643      	mov	r3, r8
    25fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2602:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2606:	47c8      	blx	r9
    2608:	1900      	adds	r0, r0, r4
    260a:	4169      	adcs	r1, r5
    260c:	4643      	mov	r3, r8
    260e:	6a1a      	ldr	r2, [r3, #32]
    2610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2612:	4c53      	ldr	r4, [pc, #332]	; (2760 <ADC_Handler+0x238>)
    2614:	47a0      	blx	r4
    2616:	9002      	str	r0, [sp, #8]
    2618:	9103      	str	r1, [sp, #12]

	//integrator anti-windup
	PID_VALUE_T integrator_limit;
	if (proportional < controller->integral_max) {
    261a:	4643      	mov	r3, r8
    261c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2620:	9c00      	ldr	r4, [sp, #0]
    2622:	9d01      	ldr	r5, [sp, #4]
    2624:	42ab      	cmp	r3, r5
    2626:	dc02      	bgt.n	262e <ADC_Handler+0x106>
    2628:	d12e      	bne.n	2688 <ADC_Handler+0x160>
    262a:	42a2      	cmp	r2, r4
    262c:	d92c      	bls.n	2688 <ADC_Handler+0x160>
		integrator_limit = controller->integral_max - proportional;
    262e:	4b49      	ldr	r3, [pc, #292]	; (2754 <ADC_Handler+0x22c>)
    2630:	6c9c      	ldr	r4, [r3, #72]	; 0x48
    2632:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    2634:	9a00      	ldr	r2, [sp, #0]
    2636:	9b01      	ldr	r3, [sp, #4]
    2638:	1aa4      	subs	r4, r4, r2
    263a:	419d      	sbcs	r5, r3
    263c:	e026      	b.n	268c <ADC_Handler+0x164>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    263e:	2001      	movs	r0, #1
    2640:	2398      	movs	r3, #152	; 0x98
    2642:	22c0      	movs	r2, #192	; 0xc0
    2644:	05d2      	lsls	r2, r2, #23
    2646:	50d0      	str	r0, [r2, r3]
			if (voltage <= HV_DC_SUPPLY_REGULATION_END_TARGET) {
    2648:	4b46      	ldr	r3, [pc, #280]	; (2764 <ADC_Handler+0x23c>)
    264a:	4299      	cmp	r1, r3
    264c:	d8a1      	bhi.n	2592 <ADC_Handler+0x6a>
				hv_dc_supply_state = HV_DC_SUPPLY_STATE_INITIALIZE;
    264e:	2201      	movs	r2, #1
    2650:	4b3e      	ldr	r3, [pc, #248]	; (274c <ADC_Handler+0x224>)
    2652:	701a      	strb	r2, [r3, #0]
    2654:	e79d      	b.n	2592 <ADC_Handler+0x6a>
		hv_dc_supply_cancel();
    2656:	4b44      	ldr	r3, [pc, #272]	; (2768 <ADC_Handler+0x240>)
    2658:	4798      	blx	r3
    265a:	e77d      	b.n	2558 <ADC_Handler+0x30>
	return (duty_cycle * HV_DC_SUPPLY_CONDUCTION_TIME_FACTOR) / (voltage + HV_DC_SUPPLY_DIODE_VOLTAGE_VALUE);
    265c:	3106      	adds	r1, #6
    265e:	4843      	ldr	r0, [pc, #268]	; (276c <ADC_Handler+0x244>)
    2660:	4b43      	ldr	r3, [pc, #268]	; (2770 <ADC_Handler+0x248>)
    2662:	4798      	blx	r3
	return hv_dc_supply_conduction_time(voltage, duty_cycle) + HV_DC_SUPPLY_BURST_SAFETY_MARGIN_CYCLES + duty_cycle;
    2664:	0003      	movs	r3, r0
    2666:	33e1      	adds	r3, #225	; 0xe1
    2668:	33ff      	adds	r3, #255	; 0xff
    266a:	b29b      	uxth	r3, r3
	if (value < min) {
    266c:	4a41      	ldr	r2, [pc, #260]	; (2774 <ADC_Handler+0x24c>)
    266e:	4293      	cmp	r3, r2
    2670:	d908      	bls.n	2684 <ADC_Handler+0x15c>
	hv_dc_supply_duty_cycle = duty_cycle;
    2672:	2090      	movs	r0, #144	; 0x90
    2674:	0040      	lsls	r0, r0, #1
    2676:	2100      	movs	r1, #0
    2678:	4a34      	ldr	r2, [pc, #208]	; (274c <ADC_Handler+0x224>)
    267a:	6090      	str	r0, [r2, #8]
    267c:	60d1      	str	r1, [r2, #12]
	hv_dc_supply_period = period;
    267e:	4a35      	ldr	r2, [pc, #212]	; (2754 <ADC_Handler+0x22c>)
    2680:	6713      	str	r3, [r2, #112]	; 0x70
    2682:	e769      	b.n	2558 <ADC_Handler+0x30>
		return min;
    2684:	4b3c      	ldr	r3, [pc, #240]	; (2778 <ADC_Handler+0x250>)
    2686:	e7f4      	b.n	2672 <ADC_Handler+0x14a>
	} else {
		integrator_limit = 0;
    2688:	2400      	movs	r4, #0
    268a:	2500      	movs	r5, #0
	}
	if (integral > integrator_limit) {
    268c:	9a04      	ldr	r2, [sp, #16]
    268e:	9b05      	ldr	r3, [sp, #20]
    2690:	42ab      	cmp	r3, r5
    2692:	dc04      	bgt.n	269e <ADC_Handler+0x176>
    2694:	d101      	bne.n	269a <ADC_Handler+0x172>
    2696:	42a2      	cmp	r2, r4
    2698:	d801      	bhi.n	269e <ADC_Handler+0x176>
	PID_VALUE_T integral = (controller->ki_factor * (error + controller->last_error)) + controller->last_integral_value;
    269a:	9c04      	ldr	r4, [sp, #16]
    269c:	9d05      	ldr	r5, [sp, #20]
		integral = integrator_limit;
	}
	
	if (proportional > controller->integral_min) {
    269e:	4b2d      	ldr	r3, [pc, #180]	; (2754 <ADC_Handler+0x22c>)
    26a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    26a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26a4:	9901      	ldr	r1, [sp, #4]
    26a6:	4299      	cmp	r1, r3
    26a8:	dc03      	bgt.n	26b2 <ADC_Handler+0x18a>
    26aa:	d10a      	bne.n	26c2 <ADC_Handler+0x19a>
    26ac:	9900      	ldr	r1, [sp, #0]
    26ae:	4291      	cmp	r1, r2
    26b0:	d907      	bls.n	26c2 <ADC_Handler+0x19a>
		integrator_limit = controller->integral_min - proportional;
    26b2:	4b28      	ldr	r3, [pc, #160]	; (2754 <ADC_Handler+0x22c>)
    26b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    26b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    26b8:	9800      	ldr	r0, [sp, #0]
    26ba:	9901      	ldr	r1, [sp, #4]
    26bc:	1a12      	subs	r2, r2, r0
    26be:	418b      	sbcs	r3, r1
    26c0:	e001      	b.n	26c6 <ADC_Handler+0x19e>
	} else {
		integrator_limit = 0;
    26c2:	2200      	movs	r2, #0
    26c4:	2300      	movs	r3, #0
	}
	if (integral < integrator_limit) {
    26c6:	42ab      	cmp	r3, r5
    26c8:	dc04      	bgt.n	26d4 <ADC_Handler+0x1ac>
    26ca:	d101      	bne.n	26d0 <ADC_Handler+0x1a8>
    26cc:	42a2      	cmp	r2, r4
    26ce:	d801      	bhi.n	26d4 <ADC_Handler+0x1ac>
    26d0:	0022      	movs	r2, r4
    26d2:	002b      	movs	r3, r5
		integral = integrator_limit;
	}

	//store current values
	controller->last_error = error;
    26d4:	4c1f      	ldr	r4, [pc, #124]	; (2754 <ADC_Handler+0x22c>)
    26d6:	6526      	str	r6, [r4, #80]	; 0x50
    26d8:	6567      	str	r7, [r4, #84]	; 0x54
	controller->last_integral_value = integral;
    26da:	65a2      	str	r2, [r4, #88]	; 0x58
    26dc:	65e3      	str	r3, [r4, #92]	; 0x5c
	controller->last_derivative_value = derivative;
    26de:	9802      	ldr	r0, [sp, #8]
    26e0:	9903      	ldr	r1, [sp, #12]
    26e2:	6620      	str	r0, [r4, #96]	; 0x60
    26e4:	6661      	str	r1, [r4, #100]	; 0x64
	
	PID_VALUE_T result = controller->last_output + proportional + integral + derivative;
    26e6:	9e00      	ldr	r6, [sp, #0]
    26e8:	9f01      	ldr	r7, [sp, #4]
    26ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    26ec:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    26ee:	1836      	adds	r6, r6, r0
    26f0:	414f      	adcs	r7, r1
    26f2:	1992      	adds	r2, r2, r6
    26f4:	417b      	adcs	r3, r7
    26f6:	9802      	ldr	r0, [sp, #8]
    26f8:	9903      	ldr	r1, [sp, #12]
    26fa:	1880      	adds	r0, r0, r2
    26fc:	4159      	adcs	r1, r3
		//gpio_set_pin_level(LED2, result != 0);
		//gpio_set_pin_level(LED2, result <= controller->min + (controller->max - controller->min) / 2 && result >= controller->min);
		//gpio_set_pin_level(LED2, result >= controller->min + (controller->max - controller->min) / 2 && result <= controller->max);
	//}
	
	if (result > controller->max) {
    26fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2702:	4299      	cmp	r1, r3
    2704:	dc02      	bgt.n	270c <ADC_Handler+0x1e4>
    2706:	d104      	bne.n	2712 <ADC_Handler+0x1ea>
    2708:	4290      	cmp	r0, r2
    270a:	d902      	bls.n	2712 <ADC_Handler+0x1ea>
		result = controller->max;
    270c:	4b11      	ldr	r3, [pc, #68]	; (2754 <ADC_Handler+0x22c>)
    270e:	6b98      	ldr	r0, [r3, #56]	; 0x38
    2710:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	}
	if (result < controller->min) {
    2712:	4b10      	ldr	r3, [pc, #64]	; (2754 <ADC_Handler+0x22c>)
    2714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2718:	428b      	cmp	r3, r1
    271a:	dd0f      	ble.n	273c <ADC_Handler+0x214>
		result = controller->min;
    271c:	4b0d      	ldr	r3, [pc, #52]	; (2754 <ADC_Handler+0x22c>)
    271e:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2720:	6b59      	ldr	r1, [r3, #52]	; 0x34
	}
	
	//gpio_set_pin_level(GPIO1, result > controller->min + (controller->max - controller->min) / 2);
	
	controller->last_output = result;
    2722:	4c0c      	ldr	r4, [pc, #48]	; (2754 <ADC_Handler+0x22c>)
    2724:	66a0      	str	r0, [r4, #104]	; 0x68
    2726:	66e1      	str	r1, [r4, #108]	; 0x6c
	return result / controller->kpid_divisor;
    2728:	6922      	ldr	r2, [r4, #16]
    272a:	6963      	ldr	r3, [r4, #20]
    272c:	4d0c      	ldr	r5, [pc, #48]	; (2760 <ADC_Handler+0x238>)
    272e:	47a8      	blx	r5
	hv_dc_supply_duty_cycle = duty_cycle;
    2730:	4b06      	ldr	r3, [pc, #24]	; (274c <ADC_Handler+0x224>)
    2732:	6098      	str	r0, [r3, #8]
    2734:	60d9      	str	r1, [r3, #12]
	hv_dc_supply_period = period;
    2736:	4b10      	ldr	r3, [pc, #64]	; (2778 <ADC_Handler+0x250>)
    2738:	6723      	str	r3, [r4, #112]	; 0x70
}
    273a:	e70d      	b.n	2558 <ADC_Handler+0x30>
	if (result < controller->min) {
    273c:	428b      	cmp	r3, r1
    273e:	d1f0      	bne.n	2722 <ADC_Handler+0x1fa>
    2740:	4282      	cmp	r2, r0
    2742:	d8eb      	bhi.n	271c <ADC_Handler+0x1f4>
    2744:	e7ed      	b.n	2722 <ADC_Handler+0x1fa>
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	42004000 	.word	0x42004000
    274c:	20000460 	.word	0x20000460
    2750:	000004b7 	.word	0x000004b7
    2754:	20000018 	.word	0x20000018
    2758:	0000054f 	.word	0x0000054f
    275c:	000038f9 	.word	0x000038f9
    2760:	000038b1 	.word	0x000038b1
    2764:	000002f9 	.word	0x000002f9
    2768:	000024ed 	.word	0x000024ed
    276c:	00040200 	.word	0x00040200
    2770:	000035c5 	.word	0x000035c5
    2774:	000003be 	.word	0x000003be
    2778:	000003bf 	.word	0x000003bf

0000277c <TCC1_Handler>:
void TCC1_Handler() {
    277c:	b510      	push	{r4, lr}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    277e:	2201      	movs	r2, #1
    2780:	4b28      	ldr	r3, [pc, #160]	; (2824 <TCC1_Handler+0xa8>)
    2782:	62da      	str	r2, [r3, #44]	; 0x2c
	hv_dc_supply_counter++;
    2784:	4a28      	ldr	r2, [pc, #160]	; (2828 <TCC1_Handler+0xac>)
    2786:	8a13      	ldrh	r3, [r2, #16]
    2788:	3301      	adds	r3, #1
    278a:	b29b      	uxth	r3, r3
    278c:	8213      	strh	r3, [r2, #16]
	if (!hv_dc_supply_state || hv_dc_supply_counter >= HV_DC_SUPPLY_MAX_CYCLES) {
    278e:	7813      	ldrb	r3, [r2, #0]
    2790:	2b00      	cmp	r3, #0
    2792:	d016      	beq.n	27c2 <TCC1_Handler+0x46>
    2794:	0013      	movs	r3, r2
    2796:	8a1a      	ldrh	r2, [r3, #16]
		if (!(hv_dc_supply_counter & HV_DC_SUPPLY_NON_MEASURABLE_CYCLES)) {
    2798:	8a1b      	ldrh	r3, [r3, #16]
    279a:	071b      	lsls	r3, r3, #28
    279c:	d014      	beq.n	27c8 <TCC1_Handler+0x4c>
			hv_dc_supply_set_timer(hv_dc_supply_duty_cycle, hv_dc_supply_period, false);
    279e:	4b22      	ldr	r3, [pc, #136]	; (2828 <TCC1_Handler+0xac>)
    27a0:	6898      	ldr	r0, [r3, #8]
    27a2:	68d9      	ldr	r1, [r3, #12]
    27a4:	4b21      	ldr	r3, [pc, #132]	; (282c <TCC1_Handler+0xb0>)
    27a6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    27a8:	4b1e      	ldr	r3, [pc, #120]	; (2824 <TCC1_Handler+0xa8>)
    27aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    27ac:	061b      	lsls	r3, r3, #24
    27ae:	d407      	bmi.n	27c0 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    27b0:	4b1c      	ldr	r3, [pc, #112]	; (2824 <TCC1_Handler+0xa8>)
    27b2:	2202      	movs	r2, #2
    27b4:	715a      	strb	r2, [r3, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    27b6:	6758      	str	r0, [r3, #116]	; 0x74
    27b8:	491d      	ldr	r1, [pc, #116]	; (2830 <TCC1_Handler+0xb4>)
    27ba:	6719      	str	r1, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    27bc:	66dc      	str	r4, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    27be:	711a      	strb	r2, [r3, #4]
}
    27c0:	bd10      	pop	{r4, pc}
		hv_dc_supply_cancel();
    27c2:	4b1c      	ldr	r3, [pc, #112]	; (2834 <TCC1_Handler+0xb8>)
    27c4:	4798      	blx	r3
    27c6:	e7fb      	b.n	27c0 <TCC1_Handler+0x44>
			if (hv_dc_supply_is_measurable(hv_dc_supply_duty_cycle)) {
    27c8:	4b17      	ldr	r3, [pc, #92]	; (2828 <TCC1_Handler+0xac>)
    27ca:	689a      	ldr	r2, [r3, #8]
    27cc:	68db      	ldr	r3, [r3, #12]
    27ce:	b292      	uxth	r2, r2
    27d0:	2a55      	cmp	r2, #85	; 0x55
    27d2:	d918      	bls.n	2806 <TCC1_Handler+0x8a>
				hv_dc_supply_set_timer(hv_dc_supply_duty_cycle, hv_dc_supply_period, true);
    27d4:	4b14      	ldr	r3, [pc, #80]	; (2828 <TCC1_Handler+0xac>)
    27d6:	689a      	ldr	r2, [r3, #8]
    27d8:	68db      	ldr	r3, [r3, #12]
    27da:	4914      	ldr	r1, [pc, #80]	; (282c <TCC1_Handler+0xb0>)
    27dc:	6f08      	ldr	r0, [r1, #112]	; 0x70
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    27de:	4911      	ldr	r1, [pc, #68]	; (2824 <TCC1_Handler+0xa8>)
    27e0:	6b09      	ldr	r1, [r1, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    27e2:	0609      	lsls	r1, r1, #24
    27e4:	d4ec      	bmi.n	27c0 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    27e6:	490f      	ldr	r1, [pc, #60]	; (2824 <TCC1_Handler+0xa8>)
    27e8:	2402      	movs	r4, #2
    27ea:	714c      	strb	r4, [r1, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    27ec:	674a      	str	r2, [r1, #116]	; 0x74
		hri_tcc_write_CCB_reg_no_lock(HV_SW_TIMER, 0, (measure && hv_dc_supply_is_measurable(duty_cycle)) ? duty_cycle + HV_DC_SUPPLY_BURST_END_RIPPLE_CYCLES : 0xFFFFFF);
    27ee:	b291      	uxth	r1, r2
    27f0:	2955      	cmp	r1, #85	; 0x55
    27f2:	d906      	bls.n	2802 <TCC1_Handler+0x86>
    27f4:	3213      	adds	r2, #19
    27f6:	4b0b      	ldr	r3, [pc, #44]	; (2824 <TCC1_Handler+0xa8>)
    27f8:	671a      	str	r2, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    27fa:	66d8      	str	r0, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    27fc:	2202      	movs	r2, #2
    27fe:	711a      	strb	r2, [r3, #4]
    2800:	e7de      	b.n	27c0 <TCC1_Handler+0x44>
    2802:	4a0b      	ldr	r2, [pc, #44]	; (2830 <TCC1_Handler+0xb4>)
    2804:	e7f7      	b.n	27f6 <TCC1_Handler+0x7a>
	return (((Tcc *)hw)->STATUS.reg & TCC_STATUS_PERBV) >> TCC_STATUS_PERBV_Pos;
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <TCC1_Handler+0xa8>)
    2808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if (!hri_tcc_get_STATUS_PERBV_bit(HV_SW_TIMER)) {
    280a:	061b      	lsls	r3, r3, #24
    280c:	d4d8      	bmi.n	27c0 <TCC1_Handler+0x44>
	((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
    280e:	4b05      	ldr	r3, [pc, #20]	; (2824 <TCC1_Handler+0xa8>)
    2810:	2202      	movs	r2, #2
    2812:	715a      	strb	r2, [r3, #5]
	((Tcc *)hw)->CCB[index].reg = data;
    2814:	2156      	movs	r1, #86	; 0x56
    2816:	6759      	str	r1, [r3, #116]	; 0x74
    2818:	3113      	adds	r1, #19
    281a:	6719      	str	r1, [r3, #112]	; 0x70
	((Tcc *)hw)->PERB.reg = data;
    281c:	4906      	ldr	r1, [pc, #24]	; (2838 <TCC1_Handler+0xbc>)
    281e:	66d9      	str	r1, [r3, #108]	; 0x6c
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    2820:	711a      	strb	r2, [r3, #4]
    2822:	e7cd      	b.n	27c0 <TCC1_Handler+0x44>
    2824:	42002400 	.word	0x42002400
    2828:	20000460 	.word	0x20000460
    282c:	20000018 	.word	0x20000018
    2830:	00ffffff 	.word	0x00ffffff
    2834:	000024ed 	.word	0x000024ed
    2838:	000003bf 	.word	0x000003bf

0000283c <hv_dc_supply_power_pulse>:

void hv_dc_supply_power_pulse() {
	//gpio_set_pin_level(GPIO1, true);
	hv_dc_supply_counter = 0;
    283c:	4b06      	ldr	r3, [pc, #24]	; (2858 <hv_dc_supply_power_pulse+0x1c>)
    283e:	2200      	movs	r2, #0
    2840:	821a      	strh	r2, [r3, #16]
	hv_dc_supply_state = HV_DC_SUPPLY_STATE_ON;
    2842:	3201      	adds	r2, #1
    2844:	701a      	strb	r2, [r3, #0]
	hv_dc_supply_duty_cycle = duty_cycle;
    2846:	2090      	movs	r0, #144	; 0x90
    2848:	0040      	lsls	r0, r0, #1
    284a:	2100      	movs	r1, #0
    284c:	6098      	str	r0, [r3, #8]
    284e:	60d9      	str	r1, [r3, #12]
	hv_dc_supply_period = period;
    2850:	4a02      	ldr	r2, [pc, #8]	; (285c <hv_dc_supply_power_pulse+0x20>)
    2852:	4b03      	ldr	r3, [pc, #12]	; (2860 <hv_dc_supply_power_pulse+0x24>)
    2854:	671a      	str	r2, [r3, #112]	; 0x70
	hv_dc_supply_configure_timer(HV_DC_SUPPLY_INIT_DUTY_CYCLE_CYCLES, HV_DC_SUPPLY_MAX_BURST_CYCLES);
}
    2856:	4770      	bx	lr
    2858:	20000460 	.word	0x20000460
    285c:	0003a8f4 	.word	0x0003a8f4
    2860:	20000018 	.word	0x20000018

00002864 <hv_dc_supply_enable_adc>:

void hv_dc_supply_enable_adc() {
    2864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2866:	26c0      	movs	r6, #192	; 0xc0
    2868:	05f6      	lsls	r6, r6, #23
    286a:	2304      	movs	r3, #4
    286c:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    286e:	4b1a      	ldr	r3, [pc, #104]	; (28d8 <hv_dc_supply_enable_adc+0x74>)
    2870:	4a1a      	ldr	r2, [pc, #104]	; (28dc <hv_dc_supply_enable_adc+0x78>)
    2872:	629a      	str	r2, [r3, #40]	; 0x28
    2874:	22c0      	movs	r2, #192	; 0xc0
    2876:	0612      	lsls	r2, r2, #24
    2878:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    287a:	2042      	movs	r0, #66	; 0x42
    287c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    287e:	2401      	movs	r4, #1
    2880:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2882:	2501      	movs	r5, #1
    2884:	4329      	orrs	r1, r5
    2886:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2888:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    288a:	3811      	subs	r0, #17
    288c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    288e:	270f      	movs	r7, #15
    2890:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2892:	4329      	orrs	r1, r5
    2894:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2896:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2898:	2108      	movs	r1, #8
    289a:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    289c:	4910      	ldr	r1, [pc, #64]	; (28e0 <hv_dc_supply_enable_adc+0x7c>)
    289e:	6299      	str	r1, [r3, #40]	; 0x28
    28a0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    28a2:	2143      	movs	r1, #67	; 0x43
    28a4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    28a6:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    28a8:	432a      	orrs	r2, r5
    28aa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    28ac:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    28ae:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    28b0:	3934      	subs	r1, #52	; 0x34
    28b2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    28b4:	2110      	movs	r1, #16
    28b6:	430a      	orrs	r2, r1
    28b8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    28ba:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PWR_SENSE, PINMUX_PA02B_ADC_AIN0);

	gpio_set_pin_direction(HV_SENSE, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(HV_SENSE, PINMUX_PA03B_ADC_AIN1);
	
	adc_async_set_inputs(&ADC_0, ADC_MUXPOS_AIN1, ADC_MUXNEG_AIN0, 0);
    28bc:	4d09      	ldr	r5, [pc, #36]	; (28e4 <hv_dc_supply_enable_adc+0x80>)
    28be:	2300      	movs	r3, #0
    28c0:	2200      	movs	r2, #0
    28c2:	2101      	movs	r1, #1
    28c4:	0028      	movs	r0, r5
    28c6:	4e08      	ldr	r6, [pc, #32]	; (28e8 <hv_dc_supply_enable_adc+0x84>)
    28c8:	47b0      	blx	r6
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    28ca:	4b08      	ldr	r3, [pc, #32]	; (28ec <hv_dc_supply_enable_adc+0x88>)
    28cc:	75dc      	strb	r4, [r3, #23]
	
	hri_adc_write_INTEN_RESRDY_bit(ADC, true);
	adc_async_enable_channel(&ADC_0, 0);
    28ce:	2100      	movs	r1, #0
    28d0:	0028      	movs	r0, r5
    28d2:	4b07      	ldr	r3, [pc, #28]	; (28f0 <hv_dc_supply_enable_adc+0x8c>)
    28d4:	4798      	blx	r3
}
    28d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d8:	41004400 	.word	0x41004400
    28dc:	40000004 	.word	0x40000004
    28e0:	40000008 	.word	0x40000008
    28e4:	20000474 	.word	0x20000474
    28e8:	00000339 	.word	0x00000339
    28ec:	42004000 	.word	0x42004000
    28f0:	000002f9 	.word	0x000002f9

000028f4 <hv_dc_supply_init_timer>:

void hv_dc_supply_init_timer() {
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	46d6      	mov	lr, sl
    28f8:	464f      	mov	r7, r9
    28fa:	4646      	mov	r6, r8
    28fc:	b5c0      	push	{r6, r7, lr}
	((Tcc *)hw)->PER.reg = data;
    28fe:	4a3f      	ldr	r2, [pc, #252]	; (29fc <hv_dc_supply_init_timer+0x108>)
    2900:	4b3f      	ldr	r3, [pc, #252]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2902:	641a      	str	r2, [r3, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2904:	4b3e      	ldr	r3, [pc, #248]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2906:	689b      	ldr	r3, [r3, #8]
    2908:	061b      	lsls	r3, r3, #24
    290a:	d4fb      	bmi.n	2904 <hv_dc_supply_init_timer+0x10>
	((Tcc *)hw)->CC[index].reg = data;
    290c:	2200      	movs	r2, #0
    290e:	4b3c      	ldr	r3, [pc, #240]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2910:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2912:	4b3b      	ldr	r3, [pc, #236]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2914:	689a      	ldr	r2, [r3, #8]
    2916:	23f0      	movs	r3, #240	; 0xf0
    2918:	011b      	lsls	r3, r3, #4
    291a:	421a      	tst	r2, r3
    291c:	d1f9      	bne.n	2912 <hv_dc_supply_init_timer+0x1e>
	((Tcc *)hw)->CC[index].reg = data;
    291e:	4a39      	ldr	r2, [pc, #228]	; (2a04 <hv_dc_supply_init_timer+0x110>)
    2920:	4b37      	ldr	r3, [pc, #220]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2922:	645a      	str	r2, [r3, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2924:	4b36      	ldr	r3, [pc, #216]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2926:	689a      	ldr	r2, [r3, #8]
    2928:	23f0      	movs	r3, #240	; 0xf0
    292a:	011b      	lsls	r3, r3, #4
    292c:	421a      	tst	r2, r3
    292e:	d1f9      	bne.n	2924 <hv_dc_supply_init_timer+0x30>
	((Tcc *)hw)->WAVE.reg = data;
    2930:	4a35      	ldr	r2, [pc, #212]	; (2a08 <hv_dc_supply_init_timer+0x114>)
    2932:	4b33      	ldr	r3, [pc, #204]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2934:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2936:	4b32      	ldr	r3, [pc, #200]	; (2a00 <hv_dc_supply_init_timer+0x10c>)
    2938:	689a      	ldr	r2, [r3, #8]
    293a:	4b34      	ldr	r3, [pc, #208]	; (2a0c <hv_dc_supply_init_timer+0x118>)
    293c:	421a      	tst	r2, r3
    293e:	d1fa      	bne.n	2936 <hv_dc_supply_init_timer+0x42>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2940:	21c0      	movs	r1, #192	; 0xc0
    2942:	05c9      	lsls	r1, r1, #23
    2944:	2480      	movs	r4, #128	; 0x80
    2946:	618c      	str	r4, [r1, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2948:	608c      	str	r4, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    294a:	4b31      	ldr	r3, [pc, #196]	; (2a10 <hv_dc_supply_init_timer+0x11c>)
    294c:	4a31      	ldr	r2, [pc, #196]	; (2a14 <hv_dc_supply_init_timer+0x120>)
    294e:	629a      	str	r2, [r3, #40]	; 0x28
    2950:	22c0      	movs	r2, #192	; 0xc0
    2952:	0612      	lsls	r2, r2, #24
    2954:	4692      	mov	sl, r2
    2956:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2958:	2747      	movs	r7, #71	; 0x47
    295a:	5dd8      	ldrb	r0, [r3, r7]
    295c:	2240      	movs	r2, #64	; 0x40
    295e:	4310      	orrs	r0, r2
    2960:	b2c0      	uxtb	r0, r0
    2962:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2964:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2966:	2501      	movs	r5, #1
    2968:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    296a:	2601      	movs	r6, #1
    296c:	46b4      	mov	ip, r6
    296e:	4666      	mov	r6, ip
    2970:	4330      	orrs	r0, r6
    2972:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2974:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2976:	3f14      	subs	r7, #20
    2978:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    297a:	260f      	movs	r6, #15
    297c:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    297e:	4310      	orrs	r0, r2
    2980:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2982:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2984:	2080      	movs	r0, #128	; 0x80
    2986:	05c0      	lsls	r0, r0, #23
    2988:	4680      	mov	r8, r0
    298a:	2098      	movs	r0, #152	; 0x98
    298c:	4646      	mov	r6, r8
    298e:	500e      	str	r6, [r1, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2990:	3755      	adds	r7, #85	; 0x55
    2992:	51ce      	str	r6, [r1, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2994:	20a8      	movs	r0, #168	; 0xa8
    2996:	501e      	str	r6, [r3, r0]
    2998:	4e1f      	ldr	r6, [pc, #124]	; (2a18 <hv_dc_supply_init_timer+0x124>)
    299a:	501e      	str	r6, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    299c:	26de      	movs	r6, #222	; 0xde
    299e:	46b0      	mov	r8, r6
    29a0:	5d9e      	ldrb	r6, [r3, r6]
    29a2:	4332      	orrs	r2, r6
    29a4:	b2d2      	uxtb	r2, r2
    29a6:	4646      	mov	r6, r8
    29a8:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29aa:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    29ac:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    29ae:	4666      	mov	r6, ip
    29b0:	4332      	orrs	r2, r6
    29b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29b4:	4646      	mov	r6, r8
    29b6:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    29b8:	22bf      	movs	r2, #191	; 0xbf
    29ba:	4694      	mov	ip, r2
    29bc:	5c9a      	ldrb	r2, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    29be:	3ecf      	subs	r6, #207	; 0xcf
    29c0:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    29c2:	2605      	movs	r6, #5
    29c4:	46b0      	mov	r8, r6
    29c6:	4646      	mov	r6, r8
    29c8:	4332      	orrs	r2, r6
    29ca:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29cc:	4666      	mov	r6, ip
    29ce:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29d0:	51cd      	str	r5, [r1, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29d2:	4a12      	ldr	r2, [pc, #72]	; (2a1c <hv_dc_supply_init_timer+0x128>)
    29d4:	501a      	str	r2, [r3, r0]
    29d6:	4652      	mov	r2, sl
    29d8:	501a      	str	r2, [r3, r0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29da:	4b11      	ldr	r3, [pc, #68]	; (2a20 <hv_dc_supply_init_timer+0x12c>)
    29dc:	2280      	movs	r2, #128	; 0x80
    29de:	0252      	lsls	r2, r2, #9
    29e0:	511a      	str	r2, [r3, r4]
  __ASM volatile ("dsb 0xF":::"memory");
    29e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29e6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29ea:	21c0      	movs	r1, #192	; 0xc0
    29ec:	0049      	lsls	r1, r1, #1
    29ee:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29f0:	601a      	str	r2, [r3, #0]
	//---
	
	NVIC_DisableIRQ(TCC1_IRQn);
	NVIC_ClearPendingIRQ(TCC1_IRQn);
	NVIC_EnableIRQ(TCC1_IRQn);
}
    29f2:	bc1c      	pop	{r2, r3, r4}
    29f4:	4690      	mov	r8, r2
    29f6:	4699      	mov	r9, r3
    29f8:	46a2      	mov	sl, r4
    29fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29fc:	0003a8f4 	.word	0x0003a8f4
    2a00:	42002400 	.word	0x42002400
    2a04:	00ffffff 	.word	0x00ffffff
    2a08:	00020002 	.word	0x00020002
    2a0c:	007f0fff 	.word	0x007f0fff
    2a10:	41004400 	.word	0x41004400
    2a14:	40000080 	.word	0x40000080
    2a18:	c0004000 	.word	0xc0004000
    2a1c:	40000001 	.word	0x40000001
    2a20:	e000e100 	.word	0xe000e100

00002a24 <hv_dc_supply_init>:

void hv_dc_supply_init() {
    2a24:	b510      	push	{r4, lr}
	adc_init();
    2a26:	4b03      	ldr	r3, [pc, #12]	; (2a34 <hv_dc_supply_init+0x10>)
    2a28:	4798      	blx	r3
	hv_dc_supply_init_timer();
    2a2a:	4b03      	ldr	r3, [pc, #12]	; (2a38 <hv_dc_supply_init+0x14>)
    2a2c:	4798      	blx	r3
	hv_dc_supply_enable_adc();
    2a2e:	4b03      	ldr	r3, [pc, #12]	; (2a3c <hv_dc_supply_init+0x18>)
    2a30:	4798      	blx	r3
}
    2a32:	bd10      	pop	{r4, pc}
    2a34:	0000058d 	.word	0x0000058d
    2a38:	000028f5 	.word	0x000028f5
    2a3c:	00002865 	.word	0x00002865

00002a40 <hv_dc_supply_get_voltage>:

float hv_dc_supply_get_voltage() {
    2a40:	b510      	push	{r4, lr}
	return HV_DC_SUPPLY_SENSE_TARGET_TO_VOLTAGE((float) hv_dc_supply_sensed_voltage);
    2a42:	4b0b      	ldr	r3, [pc, #44]	; (2a70 <hv_dc_supply_get_voltage+0x30>)
    2a44:	8858      	ldrh	r0, [r3, #2]
    2a46:	b280      	uxth	r0, r0
    2a48:	4b0a      	ldr	r3, [pc, #40]	; (2a74 <hv_dc_supply_get_voltage+0x34>)
    2a4a:	4798      	blx	r3
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <hv_dc_supply_get_voltage+0x38>)
    2a4e:	4798      	blx	r3
    2a50:	4a0a      	ldr	r2, [pc, #40]	; (2a7c <hv_dc_supply_get_voltage+0x3c>)
    2a52:	4b0b      	ldr	r3, [pc, #44]	; (2a80 <hv_dc_supply_get_voltage+0x40>)
    2a54:	4c0b      	ldr	r4, [pc, #44]	; (2a84 <hv_dc_supply_get_voltage+0x44>)
    2a56:	47a0      	blx	r4
    2a58:	4a0b      	ldr	r2, [pc, #44]	; (2a88 <hv_dc_supply_get_voltage+0x48>)
    2a5a:	4b0c      	ldr	r3, [pc, #48]	; (2a8c <hv_dc_supply_get_voltage+0x4c>)
    2a5c:	4c0c      	ldr	r4, [pc, #48]	; (2a90 <hv_dc_supply_get_voltage+0x50>)
    2a5e:	47a0      	blx	r4
    2a60:	2200      	movs	r2, #0
    2a62:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <hv_dc_supply_get_voltage+0x54>)
    2a64:	4c0c      	ldr	r4, [pc, #48]	; (2a98 <hv_dc_supply_get_voltage+0x58>)
    2a66:	47a0      	blx	r4
    2a68:	4b0c      	ldr	r3, [pc, #48]	; (2a9c <hv_dc_supply_get_voltage+0x5c>)
    2a6a:	4798      	blx	r3
}
    2a6c:	bd10      	pop	{r4, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	20000460 	.word	0x20000460
    2a74:	00003f81 	.word	0x00003f81
    2a78:	00005159 	.word	0x00005159
    2a7c:	d0d3a3d0 	.word	0xd0d3a3d0
    2a80:	3fc0d3a3 	.word	0x3fc0d3a3
    2a84:	0000462d 	.word	0x0000462d
    2a88:	c28f5c29 	.word	0xc28f5c29
    2a8c:	3fec28f5 	.word	0x3fec28f5
    2a90:	00004b2d 	.word	0x00004b2d
    2a94:	40280000 	.word	0x40280000
    2a98:	0000400d 	.word	0x0000400d
    2a9c:	000051fd 	.word	0x000051fd

00002aa0 <btn3_pressed>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2aa0:	2280      	movs	r2, #128	; 0x80
    2aa2:	0352      	lsls	r2, r2, #13
    2aa4:	23c0      	movs	r3, #192	; 0xc0
    2aa6:	05db      	lsls	r3, r3, #23
    2aa8:	619a      	str	r2, [r3, #24]
	hv_dc_supply_power_pulse();
}

void btn3_pressed() {
	hv_dc_supply_disable_output();
}
    2aaa:	4770      	bx	lr

00002aac <btn1_pressed>:
void btn1_pressed() {
    2aac:	b510      	push	{r4, lr}
	hv_dc_supply_cancel();
    2aae:	4b01      	ldr	r3, [pc, #4]	; (2ab4 <btn1_pressed+0x8>)
    2ab0:	4798      	blx	r3
}
    2ab2:	bd10      	pop	{r4, pc}
    2ab4:	000024ed 	.word	0x000024ed

00002ab8 <btn2_pressed>:
void btn2_pressed() {
    2ab8:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2aba:	4a0a      	ldr	r2, [pc, #40]	; (2ae4 <btn2_pressed+0x2c>)
    2abc:	2154      	movs	r1, #84	; 0x54
    2abe:	5c53      	ldrb	r3, [r2, r1]
    2ac0:	2040      	movs	r0, #64	; 0x40
    2ac2:	4303      	orrs	r3, r0
    2ac4:	b2db      	uxtb	r3, r3
    2ac6:	5453      	strb	r3, [r2, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ac8:	23c0      	movs	r3, #192	; 0xc0
    2aca:	05db      	lsls	r3, r3, #23
    2acc:	2180      	movs	r1, #128	; 0x80
    2ace:	0349      	lsls	r1, r1, #13
    2ad0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ad2:	2080      	movs	r0, #128	; 0x80
    2ad4:	05c0      	lsls	r0, r0, #23
    2ad6:	6290      	str	r0, [r2, #40]	; 0x28
    2ad8:	4803      	ldr	r0, [pc, #12]	; (2ae8 <btn2_pressed+0x30>)
    2ada:	6290      	str	r0, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2adc:	6159      	str	r1, [r3, #20]
	hv_dc_supply_power_pulse();
    2ade:	4b03      	ldr	r3, [pc, #12]	; (2aec <btn2_pressed+0x34>)
    2ae0:	4798      	blx	r3
}
    2ae2:	bd10      	pop	{r4, pc}
    2ae4:	41004400 	.word	0x41004400
    2ae8:	c0000010 	.word	0xc0000010
    2aec:	0000283d 	.word	0x0000283d

00002af0 <dip_switch_data_ready>:

void dip_switch_data_ready(uint16_t data) {
    2af0:	b510      	push	{r4, lr}
	dmx_set_address(data & DMX_ADDRESS_MASK);
    2af2:	0540      	lsls	r0, r0, #21
    2af4:	0d40      	lsrs	r0, r0, #21
    2af6:	4b01      	ldr	r3, [pc, #4]	; (2afc <dip_switch_data_ready+0xc>)
    2af8:	4798      	blx	r3
}
    2afa:	bd10      	pop	{r4, pc}
    2afc:	00000b1d 	.word	0x00000b1d

00002b00 <dmx_received>:

uint8_t dmx_buffer[DMX_CHANNELS];

void dmx_received() {
    2b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t dmx_pos = OUTPUT_CHANNEL_DMX_OFFSET;
	for (uint8_t i = 0; i < OUTPUT_CHANNELS_COUNT; i++) {
    2b02:	2400      	movs	r4, #0
	uint8_t dmx_pos = OUTPUT_CHANNEL_DMX_OFFSET;
    2b04:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < OUTPUT_CHANNELS_COUNT; i++) {
    2b06:	e001      	b.n	2b0c <dmx_received+0xc>
    2b08:	3401      	adds	r4, #1
    2b0a:	b2e4      	uxtb	r4, r4
    2b0c:	2c07      	cmp	r4, #7
    2b0e:	d821      	bhi.n	2b54 <dmx_received+0x54>
		uint8_t frequency = dmx[dmx_pos++];
    2b10:	1c6b      	adds	r3, r5, #1
    2b12:	b2db      	uxtb	r3, r3
    2b14:	4a10      	ldr	r2, [pc, #64]	; (2b58 <dmx_received+0x58>)
    2b16:	5d50      	ldrb	r0, [r2, r5]
		uint8_t amplitude = dmx[dmx_pos++];
    2b18:	3502      	adds	r5, #2
    2b1a:	b2ed      	uxtb	r5, r5
    2b1c:	5cd6      	ldrb	r6, [r2, r3]
    2b1e:	b2f6      	uxtb	r6, r6
static const sine_wave_frequency_t OUTPUT_CHANNELS_FREQUENCY_RANGE_VALUE = OUTPUT_CHANNELS_MAX_FREQUENCY_VALUE_DEF - OUTPUT_CHANNELS_MIN_FREQUENCY_VALUE_DEF;

void output_channels_init();

static inline void output_channels_update(uint8_t channel, uint8_t frequency, uint8_t amplitude) {
	sine_wave_update(&(output_channels_wave_form[channel]), OUTPUT_CHANNELS_MIN_FREQUENCY_VALUE + (frequency * OUTPUT_CHANNELS_FREQUENCY_RANGE_VALUE / 0xFF), amplitude);
    2b20:	4b0e      	ldr	r3, [pc, #56]	; (2b5c <dmx_received+0x5c>)
    2b22:	4358      	muls	r0, r3
    2b24:	21ff      	movs	r1, #255	; 0xff
    2b26:	4b0e      	ldr	r3, [pc, #56]	; (2b60 <dmx_received+0x60>)
    2b28:	4798      	blx	r3
    2b2a:	4b0e      	ldr	r3, [pc, #56]	; (2b64 <dmx_received+0x64>)
    2b2c:	469c      	mov	ip, r3
    2b2e:	4460      	add	r0, ip
    2b30:	b280      	uxth	r0, r0
	//return result; //(sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS] * sine->amplitude) / SINE_WAVE_MAX_VALUE + (SINE_WAVE_MAX_VALUE - sine->amplitude) / 2;
}

static inline void sine_wave_update(SineWave* sine, sine_wave_frequency_t _frequency, sine_wave_output_t _amplitude) {
	//if there is a pending update, do that first
	if (!sine->updated) {
    2b32:	0063      	lsls	r3, r4, #1
    2b34:	191b      	adds	r3, r3, r4
    2b36:	009a      	lsls	r2, r3, #2
    2b38:	4b0b      	ldr	r3, [pc, #44]	; (2b68 <dmx_received+0x68>)
    2b3a:	189b      	adds	r3, r3, r2
    2b3c:	7a9b      	ldrb	r3, [r3, #10]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d1e2      	bne.n	2b08 <dmx_received+0x8>
		sine->frequency_buffer = _frequency;
    2b42:	4909      	ldr	r1, [pc, #36]	; (2b68 <dmx_received+0x68>)
    2b44:	0017      	movs	r7, r2
    2b46:	188a      	adds	r2, r1, r2
    2b48:	8110      	strh	r0, [r2, #8]
		sine->amplitude_buffer = _amplitude;
    2b4a:	7196      	strb	r6, [r2, #6]
		sine->updated = true;
    2b4c:	19c9      	adds	r1, r1, r7
    2b4e:	2301      	movs	r3, #1
    2b50:	728b      	strb	r3, [r1, #10]
    2b52:	e7d9      	b.n	2b08 <dmx_received+0x8>
		output_channels_update(i, frequency, amplitude);
	}
}
    2b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	200004b8 	.word	0x200004b8
    2b5c:	00001ccc 	.word	0x00001ccc
    2b60:	000036d9 	.word	0x000036d9
    2b64:	0000041d 	.word	0x0000041d
    2b68:	2000008c 	.word	0x2000008c

00002b6c <SysTick_Handler>:

uint8_t stepCounter = 0;
//uint32_t counter = 0;

void SysTick_Handler() {
    2b6c:	b510      	push	{r4, lr}
	stepCounter++;
    2b6e:	4a0d      	ldr	r2, [pc, #52]	; (2ba4 <SysTick_Handler+0x38>)
    2b70:	7813      	ldrb	r3, [r2, #0]
    2b72:	3301      	adds	r3, #1
    2b74:	b2db      	uxtb	r3, r3
    2b76:	7013      	strb	r3, [r2, #0]
	if (!(stepCounter & 0b11111)) {
    2b78:	06db      	lsls	r3, r3, #27
    2b7a:	d002      	beq.n	2b82 <SysTick_Handler+0x16>
		//display_test_pattern(counter2);
		
		float voltage = round(hv_dc_supply_get_voltage() * 10);
		display_update(voltage);
	}
	display_render();
    2b7c:	4b0a      	ldr	r3, [pc, #40]	; (2ba8 <SysTick_Handler+0x3c>)
    2b7e:	4798      	blx	r3
}
    2b80:	bd10      	pop	{r4, pc}
		float voltage = round(hv_dc_supply_get_voltage() * 10);
    2b82:	4b0a      	ldr	r3, [pc, #40]	; (2bac <SysTick_Handler+0x40>)
    2b84:	4798      	blx	r3
    2b86:	490a      	ldr	r1, [pc, #40]	; (2bb0 <SysTick_Handler+0x44>)
    2b88:	4b0a      	ldr	r3, [pc, #40]	; (2bb4 <SysTick_Handler+0x48>)
    2b8a:	4798      	blx	r3
    2b8c:	4b0a      	ldr	r3, [pc, #40]	; (2bb8 <SysTick_Handler+0x4c>)
    2b8e:	4798      	blx	r3
    2b90:	4b0a      	ldr	r3, [pc, #40]	; (2bbc <SysTick_Handler+0x50>)
    2b92:	4798      	blx	r3
    2b94:	4b0a      	ldr	r3, [pc, #40]	; (2bc0 <SysTick_Handler+0x54>)
    2b96:	4798      	blx	r3
		display_update(voltage);
    2b98:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <SysTick_Handler+0x58>)
    2b9a:	4798      	blx	r3
    2b9c:	b280      	uxth	r0, r0
    2b9e:	4b0a      	ldr	r3, [pc, #40]	; (2bc8 <SysTick_Handler+0x5c>)
    2ba0:	4798      	blx	r3
    2ba2:	e7eb      	b.n	2b7c <SysTick_Handler+0x10>
    2ba4:	20000472 	.word	0x20000472
    2ba8:	000009e9 	.word	0x000009e9
    2bac:	00002a41 	.word	0x00002a41
    2bb0:	41200000 	.word	0x41200000
    2bb4:	000039c9 	.word	0x000039c9
    2bb8:	00005159 	.word	0x00005159
    2bbc:	00003519 	.word	0x00003519
    2bc0:	000051fd 	.word	0x000051fd
    2bc4:	00003961 	.word	0x00003961
    2bc8:	000009d9 	.word	0x000009d9

00002bcc <init>:

volatile uint32_t prio;

void init() {
    2bcc:	b510      	push	{r4, lr}
static inline void user_settings_save() {
	_rww_flash_write(&(FLASH_0.dev), NVMCTRL_RWW_EEPROM_ADDR, &(userSettings.buffer), sizeof(userSettings));
}

static inline void user_settings_load() {
	_rww_flash_read(&(FLASH_0.dev), NVMCTRL_RWW_EEPROM_ADDR, &(userSettings.buffer), sizeof(userSettings));
    2bce:	2302      	movs	r3, #2
    2bd0:	4a1e      	ldr	r2, [pc, #120]	; (2c4c <init+0x80>)
    2bd2:	2180      	movs	r1, #128	; 0x80
    2bd4:	03c9      	lsls	r1, r1, #15
    2bd6:	481e      	ldr	r0, [pc, #120]	; (2c50 <init+0x84>)
    2bd8:	4c1e      	ldr	r4, [pc, #120]	; (2c54 <init+0x88>)
    2bda:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2bdc:	491e      	ldr	r1, [pc, #120]	; (2c58 <init+0x8c>)
    2bde:	235b      	movs	r3, #91	; 0x5b
    2be0:	5cca      	ldrb	r2, [r1, r3]
    2be2:	2040      	movs	r0, #64	; 0x40
    2be4:	4302      	orrs	r2, r0
    2be6:	b2d2      	uxtb	r2, r2
    2be8:	54ca      	strb	r2, [r1, r3]
    2bea:	225c      	movs	r2, #92	; 0x5c
    2bec:	5c8b      	ldrb	r3, [r1, r2]
    2bee:	4303      	orrs	r3, r0
    2bf0:	b2db      	uxtb	r3, r3
    2bf2:	548b      	strb	r3, [r1, r2]
	user_settings_load();
	
	gpio_set_pin_drive_strength(LED1);
	gpio_set_pin_drive_strength(LED2);
	
	ext_irq_register(BTN1, btn1_pressed);
    2bf4:	4919      	ldr	r1, [pc, #100]	; (2c5c <init+0x90>)
    2bf6:	2010      	movs	r0, #16
    2bf8:	4c19      	ldr	r4, [pc, #100]	; (2c60 <init+0x94>)
    2bfa:	47a0      	blx	r4
	ext_irq_register(BTN2, btn2_pressed);
    2bfc:	4919      	ldr	r1, [pc, #100]	; (2c64 <init+0x98>)
    2bfe:	2011      	movs	r0, #17
    2c00:	47a0      	blx	r4
	ext_irq_register(BTN3, btn3_pressed);
    2c02:	4919      	ldr	r1, [pc, #100]	; (2c68 <init+0x9c>)
    2c04:	2015      	movs	r0, #21
    2c06:	47a0      	blx	r4
	
	dmx_set_address(1);
    2c08:	2001      	movs	r0, #1
    2c0a:	4b18      	ldr	r3, [pc, #96]	; (2c6c <init+0xa0>)
    2c0c:	4798      	blx	r3
	dmx_init();
    2c0e:	4b18      	ldr	r3, [pc, #96]	; (2c70 <init+0xa4>)
    2c10:	4798      	blx	r3
	
	hv_dc_supply_init();
    2c12:	4b18      	ldr	r3, [pc, #96]	; (2c74 <init+0xa8>)
    2c14:	4798      	blx	r3
	
	dip_switch_init();
    2c16:	4b18      	ldr	r3, [pc, #96]	; (2c78 <init+0xac>)
    2c18:	4798      	blx	r3
	
	output_channels_init();
    2c1a:	4b18      	ldr	r3, [pc, #96]	; (2c7c <init+0xb0>)
    2c1c:	4798      	blx	r3
	
	display_init();
    2c1e:	4b18      	ldr	r3, [pc, #96]	; (2c80 <init+0xb4>)
    2c20:	4798      	blx	r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2c22:	4a18      	ldr	r2, [pc, #96]	; (2c84 <init+0xb8>)
    2c24:	6a13      	ldr	r3, [r2, #32]
    2c26:	021b      	lsls	r3, r3, #8
    2c28:	0a1b      	lsrs	r3, r3, #8
    2c2a:	21c0      	movs	r1, #192	; 0xc0
    2c2c:	0609      	lsls	r1, r1, #24
    2c2e:	430b      	orrs	r3, r1
    2c30:	6213      	str	r3, [r2, #32]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2c32:	4815      	ldr	r0, [pc, #84]	; (2c88 <init+0xbc>)
    2c34:	4b15      	ldr	r3, [pc, #84]	; (2c8c <init+0xc0>)
    2c36:	6043      	str	r3, [r0, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2c38:	6a13      	ldr	r3, [r2, #32]
    2c3a:	021b      	lsls	r3, r3, #8
    2c3c:	0a1b      	lsrs	r3, r3, #8
    2c3e:	430b      	orrs	r3, r1
    2c40:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2c42:	2300      	movs	r3, #0
    2c44:	6083      	str	r3, [r0, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2c46:	3307      	adds	r3, #7
    2c48:	6003      	str	r3, [r0, #0]
	
	//lower SysTick priority to minimum, so the dip switch reading does not interfere with power supply regulation
	NVIC_SetPriority(SysTick_IRQn, INTERRUPT_PRIORITY_IDLE);
	SysTick_Config(100000);
	//SysTick_Config(160000);
}
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	20000520 	.word	0x20000520
    2c50:	200004cc 	.word	0x200004cc
    2c54:	00001d91 	.word	0x00001d91
    2c58:	41004400 	.word	0x41004400
    2c5c:	00002aad 	.word	0x00002aad
    2c60:	000015ad 	.word	0x000015ad
    2c64:	00002ab9 	.word	0x00002ab9
    2c68:	00002aa1 	.word	0x00002aa1
    2c6c:	00000b1d 	.word	0x00000b1d
    2c70:	00000b29 	.word	0x00000b29
    2c74:	00002a25 	.word	0x00002a25
    2c78:	00000861 	.word	0x00000861
    2c7c:	000034fd 	.word	0x000034fd
    2c80:	00000931 	.word	0x00000931
    2c84:	e000ed00 	.word	0xe000ed00
    2c88:	e000e010 	.word	0xe000e010
    2c8c:	0001869f 	.word	0x0001869f

00002c90 <main>:

int main(void)
{
    2c90:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2c92:	4b02      	ldr	r3, [pc, #8]	; (2c9c <main+0xc>)
    2c94:	4798      	blx	r3

	init();
    2c96:	4b02      	ldr	r3, [pc, #8]	; (2ca0 <main+0x10>)
    2c98:	4798      	blx	r3
    2c9a:	e7fe      	b.n	2c9a <main+0xa>
    2c9c:	00000655 	.word	0x00000655
    2ca0:	00002bcd 	.word	0x00002bcd

00002ca4 <output_channels_init_pins>:
SineWaveSample tc5_next_sample = SINE_WAVE_DEFAULT_SAMPLE;
SineWaveSample tc6_next_sample = SINE_WAVE_DEFAULT_SAMPLE;
SineWaveSample tc7_next_sample = SINE_WAVE_DEFAULT_SAMPLE;
*/

void output_channels_init_pins(const uint8_t positive_pin, const uint8_t negative_pin) {
    2ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ca6:	46ce      	mov	lr, r9
    2ca8:	4647      	mov	r7, r8
    2caa:	b580      	push	{r7, lr}
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2cac:	0942      	lsrs	r2, r0, #5
    2cae:	271f      	movs	r7, #31
    2cb0:	4038      	ands	r0, r7
    2cb2:	2401      	movs	r4, #1
    2cb4:	0025      	movs	r5, r4
    2cb6:	4085      	lsls	r5, r0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cb8:	01d2      	lsls	r2, r2, #7
    2cba:	23c0      	movs	r3, #192	; 0xc0
    2cbc:	05db      	lsls	r3, r3, #23
    2cbe:	18d6      	adds	r6, r2, r3
    2cc0:	61b5      	str	r5, [r6, #24]
    2cc2:	094b      	lsrs	r3, r1, #5
    2cc4:	4039      	ands	r1, r7
    2cc6:	408c      	lsls	r4, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cc8:	01db      	lsls	r3, r3, #7
    2cca:	4699      	mov	r9, r3
    2ccc:	27c0      	movs	r7, #192	; 0xc0
    2cce:	05ff      	lsls	r7, r7, #23
    2cd0:	444f      	add	r7, r9
    2cd2:	617c      	str	r4, [r7, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cd4:	60b5      	str	r5, [r6, #8]
		                                | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2cd6:	042e      	lsls	r6, r5, #16
    2cd8:	0c36      	lsrs	r6, r6, #16
    2cda:	2380      	movs	r3, #128	; 0x80
    2cdc:	05db      	lsls	r3, r3, #23
    2cde:	469c      	mov	ip, r3
    2ce0:	431e      	orrs	r6, r3
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ce2:	4b12      	ldr	r3, [pc, #72]	; (2d2c <output_channels_init_pins+0x88>)
    2ce4:	4698      	mov	r8, r3
    2ce6:	4442      	add	r2, r8
    2ce8:	6296      	str	r6, [r2, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2cea:	0c2d      	lsrs	r5, r5, #16
		hri_port_write_WRCONFIG_reg(
    2cec:	26c0      	movs	r6, #192	; 0xc0
    2cee:	0636      	lsls	r6, r6, #24
    2cf0:	4335      	orrs	r5, r6
    2cf2:	6295      	str	r5, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cf4:	60bc      	str	r4, [r7, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2cf6:	0425      	lsls	r5, r4, #16
    2cf8:	0c2d      	lsrs	r5, r5, #16
    2cfa:	4663      	mov	r3, ip
    2cfc:	431d      	orrs	r5, r3
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cfe:	464b      	mov	r3, r9
    2d00:	4443      	add	r3, r8
    2d02:	629d      	str	r5, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2d04:	0c24      	lsrs	r4, r4, #16
		hri_port_write_WRCONFIG_reg(
    2d06:	4334      	orrs	r4, r6
    2d08:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_DRVSTR;
    2d0a:	1812      	adds	r2, r2, r0
    2d0c:	3240      	adds	r2, #64	; 0x40
    2d0e:	7810      	ldrb	r0, [r2, #0]
    2d10:	2440      	movs	r4, #64	; 0x40
    2d12:	4320      	orrs	r0, r4
    2d14:	b2c0      	uxtb	r0, r0
    2d16:	7010      	strb	r0, [r2, #0]
    2d18:	185b      	adds	r3, r3, r1
    2d1a:	3340      	adds	r3, #64	; 0x40
    2d1c:	781a      	ldrb	r2, [r3, #0]
    2d1e:	4322      	orrs	r2, r4
    2d20:	b2d2      	uxtb	r2, r2
    2d22:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(negative_pin, false);
	gpio_set_pin_direction(positive_pin, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(negative_pin, GPIO_DIRECTION_OUT);
	gpio_set_pin_drive_strength(positive_pin);
	gpio_set_pin_drive_strength(negative_pin);
}
    2d24:	bc0c      	pop	{r2, r3}
    2d26:	4690      	mov	r8, r2
    2d28:	4699      	mov	r9, r3
    2d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d2c:	41004400 	.word	0x41004400

00002d30 <output_channels_init_1_and_2>:

void output_channels_init_1_and_2() {
    2d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d32:	4b30      	ldr	r3, [pc, #192]	; (2df4 <output_channels_init_1_and_2+0xc4>)
    2d34:	2280      	movs	r2, #128	; 0x80
    2d36:	0212      	lsls	r2, r2, #8
    2d38:	2180      	movs	r1, #128	; 0x80
    2d3a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d40:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d44:	3101      	adds	r1, #1
    2d46:	31ff      	adds	r1, #255	; 0xff
    2d48:	505a      	str	r2, [r3, r1]
	((Tcc *)hw)->WAVE.reg = data;
    2d4a:	4a2b      	ldr	r2, [pc, #172]	; (2df8 <output_channels_init_1_and_2+0xc8>)
    2d4c:	4b2b      	ldr	r3, [pc, #172]	; (2dfc <output_channels_init_1_and_2+0xcc>)
    2d4e:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2d50:	4b2a      	ldr	r3, [pc, #168]	; (2dfc <output_channels_init_1_and_2+0xcc>)
    2d52:	689a      	ldr	r2, [r3, #8]
    2d54:	4b2a      	ldr	r3, [pc, #168]	; (2e00 <output_channels_init_1_and_2+0xd0>)
    2d56:	421a      	tst	r2, r3
    2d58:	d1fa      	bne.n	2d50 <output_channels_init_1_and_2+0x20>
	| 0 << TCC_WAVE_CIPEREN_Pos
	| 0 << TCC_WAVE_RAMP_Pos
	| TCC_WAVE_WAVEGEN_NPWM_Val << TCC_WAVE_WAVEGEN_Pos
	);

	output_channels_init_pins(CH1P, CH1N);
    2d5a:	2109      	movs	r1, #9
    2d5c:	2008      	movs	r0, #8
    2d5e:	4c29      	ldr	r4, [pc, #164]	; (2e04 <output_channels_init_1_and_2+0xd4>)
    2d60:	47a0      	blx	r4
	output_channels_init_pins(CH2P, CH2N);
    2d62:	210b      	movs	r1, #11
    2d64:	200a      	movs	r0, #10
    2d66:	47a0      	blx	r4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d68:	4b27      	ldr	r3, [pc, #156]	; (2e08 <output_channels_init_1_and_2+0xd8>)
    2d6a:	2048      	movs	r0, #72	; 0x48
    2d6c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d6e:	2601      	movs	r6, #1
    2d70:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d72:	2201      	movs	r2, #1
    2d74:	4311      	orrs	r1, r2
    2d76:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d78:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d7a:	3814      	subs	r0, #20
    2d7c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2d7e:	270f      	movs	r7, #15
    2d80:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2d82:	2404      	movs	r4, #4
    2d84:	4321      	orrs	r1, r4
    2d86:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d88:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d8a:	2449      	movs	r4, #73	; 0x49
    2d8c:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d8e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d90:	4311      	orrs	r1, r2
    2d92:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d94:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d96:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2d98:	250f      	movs	r5, #15
    2d9a:	4029      	ands	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2d9c:	2440      	movs	r4, #64	; 0x40
    2d9e:	4321      	orrs	r1, r4
    2da0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2da2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2da4:	214a      	movs	r1, #74	; 0x4a
    2da6:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2da8:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2daa:	4310      	orrs	r0, r2
    2dac:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dae:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2db0:	2435      	movs	r4, #53	; 0x35
    2db2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2db4:	43b8      	bics	r0, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2db6:	2105      	movs	r1, #5
    2db8:	4308      	orrs	r0, r1
    2dba:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2dbc:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dbe:	204b      	movs	r0, #75	; 0x4b
    2dc0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dc2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2dc4:	4311      	orrs	r1, r2
    2dc6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dc8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2dca:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2dcc:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2dce:	2150      	movs	r1, #80	; 0x50
    2dd0:	430a      	orrs	r2, r1
    2dd2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2dd4:	551a      	strb	r2, [r3, r4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2dd6:	4a07      	ldr	r2, [pc, #28]	; (2df4 <output_channels_init_1_and_2+0xc4>)
    2dd8:	20c3      	movs	r0, #195	; 0xc3
    2dda:	0080      	lsls	r0, r0, #2
    2ddc:	5813      	ldr	r3, [r2, r0]
    2dde:	021b      	lsls	r3, r3, #8
    2de0:	0a1b      	lsrs	r3, r3, #8
    2de2:	2180      	movs	r1, #128	; 0x80
    2de4:	05c9      	lsls	r1, r1, #23
    2de6:	430b      	orrs	r3, r1
    2de8:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dea:	2380      	movs	r3, #128	; 0x80
    2dec:	021b      	lsls	r3, r3, #8
    2dee:	6013      	str	r3, [r2, #0]
	gpio_set_pin_function(CH2P, PINMUX_PA10F_TCC0_WO2);
	gpio_set_pin_function(CH2N, PINMUX_PA11F_TCC0_WO3);
	
	NVIC_SetPriority(TCC0_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(TCC0_IRQn);
}
    2df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	e000e100 	.word	0xe000e100
    2df8:	000a0002 	.word	0x000a0002
    2dfc:	42002000 	.word	0x42002000
    2e00:	007f0fff 	.word	0x007f0fff
    2e04:	00002ca5 	.word	0x00002ca5
    2e08:	41004400 	.word	0x41004400

00002e0c <output_channels_init_3>:

void output_channels_init_3() {
    2e0c:	b570      	push	{r4, r5, r6, lr}
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e0e:	4b22      	ldr	r3, [pc, #136]	; (2e98 <output_channels_init_3+0x8c>)
    2e10:	2280      	movs	r2, #128	; 0x80
    2e12:	0292      	lsls	r2, r2, #10
    2e14:	2180      	movs	r1, #128	; 0x80
    2e16:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e1c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e20:	3101      	adds	r1, #1
    2e22:	31ff      	adds	r1, #255	; 0xff
    2e24:	505a      	str	r2, [r3, r1]
	((Tcc *)hw)->WAVE.reg = data;
    2e26:	4a1d      	ldr	r2, [pc, #116]	; (2e9c <output_channels_init_3+0x90>)
    2e28:	4b1d      	ldr	r3, [pc, #116]	; (2ea0 <output_channels_init_3+0x94>)
    2e2a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2e2c:	4b1c      	ldr	r3, [pc, #112]	; (2ea0 <output_channels_init_3+0x94>)
    2e2e:	689a      	ldr	r2, [r3, #8]
    2e30:	4b1c      	ldr	r3, [pc, #112]	; (2ea4 <output_channels_init_3+0x98>)
    2e32:	421a      	tst	r2, r3
    2e34:	d1fa      	bne.n	2e2c <output_channels_init_3+0x20>
	| 0 << TCC_WAVE_CIPEREN_Pos
	| 0 << TCC_WAVE_RAMP_Pos
	| TCC_WAVE_WAVEGEN_NPWM_Val << TCC_WAVE_WAVEGEN_Pos
	);

	output_channels_init_pins(CH3P, CH3N);
    2e36:	210d      	movs	r1, #13
    2e38:	200c      	movs	r0, #12
    2e3a:	4b1b      	ldr	r3, [pc, #108]	; (2ea8 <output_channels_init_3+0x9c>)
    2e3c:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e3e:	4b1b      	ldr	r3, [pc, #108]	; (2eac <output_channels_init_3+0xa0>)
    2e40:	224c      	movs	r2, #76	; 0x4c
    2e42:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e44:	2501      	movs	r5, #1
    2e46:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e48:	2401      	movs	r4, #1
    2e4a:	4321      	orrs	r1, r4
    2e4c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e4e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e50:	2036      	movs	r0, #54	; 0x36
    2e52:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2e54:	3a3d      	subs	r2, #61	; 0x3d
    2e56:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2e58:	2204      	movs	r2, #4
    2e5a:	4311      	orrs	r1, r2
    2e5c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e5e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e60:	214d      	movs	r1, #77	; 0x4d
    2e62:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e64:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e66:	4322      	orrs	r2, r4
    2e68:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e6a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e6c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2e6e:	393e      	subs	r1, #62	; 0x3e
    2e70:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2e72:	2140      	movs	r1, #64	; 0x40
    2e74:	430a      	orrs	r2, r1
    2e76:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e78:	541a      	strb	r2, [r3, r0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2e7a:	4b07      	ldr	r3, [pc, #28]	; (2e98 <output_channels_init_3+0x8c>)
    2e7c:	20c4      	movs	r0, #196	; 0xc4
    2e7e:	0080      	lsls	r0, r0, #2
    2e80:	581a      	ldr	r2, [r3, r0]
    2e82:	490b      	ldr	r1, [pc, #44]	; (2eb0 <output_channels_init_3+0xa4>)
    2e84:	4011      	ands	r1, r2
    2e86:	2280      	movs	r2, #128	; 0x80
    2e88:	01d2      	lsls	r2, r2, #7
    2e8a:	430a      	orrs	r2, r1
    2e8c:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e8e:	2280      	movs	r2, #128	; 0x80
    2e90:	0292      	lsls	r2, r2, #10
    2e92:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(CH3P, PINMUX_PA12E_TCC2_WO0);
	gpio_set_pin_function(CH3N, PINMUX_PA13E_TCC2_WO1);
	
	NVIC_SetPriority(TCC2_IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(TCC2_IRQn);
}
    2e94:	bd70      	pop	{r4, r5, r6, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	e000e100 	.word	0xe000e100
    2e9c:	00020002 	.word	0x00020002
    2ea0:	42002800 	.word	0x42002800
    2ea4:	007f0fff 	.word	0x007f0fff
    2ea8:	00002ca5 	.word	0x00002ca5
    2eac:	41004400 	.word	0x41004400
    2eb0:	ffff00ff 	.word	0xffff00ff

00002eb4 <output_channels_init_tc>:

void output_channels_init_tc(const IRQn_Type IRQn, const void *const hw, uint32_t pin_p, uint32_t pin_n, uint32_t function_p, uint32_t function_n) {
    2eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eb6:	0004      	movs	r4, r0
    2eb8:	0017      	movs	r7, r2
    2eba:	001d      	movs	r5, r3
  if ((int32_t)(IRQn) >= 0)
    2ebc:	2800      	cmp	r0, #0
    2ebe:	db0a      	blt.n	2ed6 <output_channels_init_tc+0x22>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ec0:	221f      	movs	r2, #31
    2ec2:	4002      	ands	r2, r0
    2ec4:	2301      	movs	r3, #1
    2ec6:	4093      	lsls	r3, r2
    2ec8:	2280      	movs	r2, #128	; 0x80
    2eca:	4867      	ldr	r0, [pc, #412]	; (3068 <output_channels_init_tc+0x1b4>)
    2ecc:	5083      	str	r3, [r0, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ed2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2ed6:	2c00      	cmp	r4, #0
    2ed8:	db07      	blt.n	2eea <output_channels_init_tc+0x36>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eda:	221f      	movs	r2, #31
    2edc:	4022      	ands	r2, r4
    2ede:	2301      	movs	r3, #1
    2ee0:	4093      	lsls	r3, r2
    2ee2:	22c0      	movs	r2, #192	; 0xc0
    2ee4:	0052      	lsls	r2, r2, #1
    2ee6:	4860      	ldr	r0, [pc, #384]	; (3068 <output_channels_init_tc+0x1b4>)
    2ee8:	5083      	str	r3, [r0, r2]
	((Tc *)hw)->COUNT16.CTRLC.reg = data;
    2eea:	2302      	movs	r3, #2
    2eec:	718b      	strb	r3, [r1, #6]
	| 0 << TC_CTRLC_CPTEN1_Pos
	| 0 << TC_CTRLC_INVEN0_Pos
	| 1 << TC_CTRLC_INVEN1_Pos
	);

	output_channels_init_pins(pin_p, pin_n);
    2eee:	b2e9      	uxtb	r1, r5
    2ef0:	b2fe      	uxtb	r6, r7
    2ef2:	0030      	movs	r0, r6
    2ef4:	4b5d      	ldr	r3, [pc, #372]	; (306c <output_channels_init_tc+0x1b8>)
    2ef6:	4798      	blx	r3
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    2ef8:	097f      	lsrs	r7, r7, #5
	uint8_t pin  = GPIO_PIN(gpio);
    2efa:	201f      	movs	r0, #31
    2efc:	4030      	ands	r0, r6

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2efe:	9b06      	ldr	r3, [sp, #24]
    2f00:	3301      	adds	r3, #1
    2f02:	d061      	beq.n	2fc8 <output_channels_init_tc+0x114>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f04:	22ff      	movs	r2, #255	; 0xff
    2f06:	403a      	ands	r2, r7
    2f08:	01d3      	lsls	r3, r2, #7
    2f0a:	4959      	ldr	r1, [pc, #356]	; (3070 <output_channels_init_tc+0x1bc>)
    2f0c:	468c      	mov	ip, r1
    2f0e:	4463      	add	r3, ip
    2f10:	181b      	adds	r3, r3, r0
    2f12:	3340      	adds	r3, #64	; 0x40
    2f14:	7819      	ldrb	r1, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f16:	2701      	movs	r7, #1
    2f18:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f1a:	4339      	orrs	r1, r7
    2f1c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f1e:	7019      	strb	r1, [r3, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    2f20:	07f3      	lsls	r3, r6, #31
    2f22:	d45e      	bmi.n	2fe2 <output_channels_init_tc+0x12e>
			// Odd numbered pin
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2f24:	0840      	lsrs	r0, r0, #1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f26:	01d2      	lsls	r2, r2, #7
    2f28:	4b51      	ldr	r3, [pc, #324]	; (3070 <output_channels_init_tc+0x1bc>)
    2f2a:	469c      	mov	ip, r3
    2f2c:	4462      	add	r2, ip
    2f2e:	1812      	adds	r2, r2, r0
    2f30:	3230      	adds	r2, #48	; 0x30
    2f32:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f34:	210f      	movs	r1, #15
    2f36:	438b      	bics	r3, r1
    2f38:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    2f3a:	230f      	movs	r3, #15
    2f3c:	9806      	ldr	r0, [sp, #24]
    2f3e:	4003      	ands	r3, r0
    2f40:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f42:	7013      	strb	r3, [r2, #0]
	uint8_t port = GPIO_PORT(gpio);
    2f44:	096a      	lsrs	r2, r5, #5
	uint8_t pin  = GPIO_PIN(gpio);
    2f46:	b2ed      	uxtb	r5, r5
    2f48:	201f      	movs	r0, #31
    2f4a:	4028      	ands	r0, r5
	if (function == GPIO_PIN_FUNCTION_OFF) {
    2f4c:	9b07      	ldr	r3, [sp, #28]
    2f4e:	3301      	adds	r3, #1
    2f50:	d056      	beq.n	3000 <output_channels_init_tc+0x14c>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f52:	23ff      	movs	r3, #255	; 0xff
    2f54:	401a      	ands	r2, r3
    2f56:	01d1      	lsls	r1, r2, #7
    2f58:	4b45      	ldr	r3, [pc, #276]	; (3070 <output_channels_init_tc+0x1bc>)
    2f5a:	469c      	mov	ip, r3
    2f5c:	4461      	add	r1, ip
    2f5e:	1809      	adds	r1, r1, r0
    2f60:	3140      	adds	r1, #64	; 0x40
    2f62:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f64:	2601      	movs	r6, #1
    2f66:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f68:	4333      	orrs	r3, r6
    2f6a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f6c:	700b      	strb	r3, [r1, #0]
		if (pin & 1) {
    2f6e:	07eb      	lsls	r3, r5, #31
    2f70:	d453      	bmi.n	301a <output_channels_init_tc+0x166>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2f72:	0840      	lsrs	r0, r0, #1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f74:	01d2      	lsls	r2, r2, #7
    2f76:	4b3e      	ldr	r3, [pc, #248]	; (3070 <output_channels_init_tc+0x1bc>)
    2f78:	469c      	mov	ip, r3
    2f7a:	4462      	add	r2, ip
    2f7c:	1812      	adds	r2, r2, r0
    2f7e:	3230      	adds	r2, #48	; 0x30
    2f80:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f82:	210f      	movs	r1, #15
    2f84:	438b      	bics	r3, r1
    2f86:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    2f88:	230f      	movs	r3, #15
    2f8a:	9807      	ldr	r0, [sp, #28]
    2f8c:	4003      	ands	r3, r0
    2f8e:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f90:	7013      	strb	r3, [r2, #0]
  if ((int32_t)(IRQn) >= 0)
    2f92:	2c00      	cmp	r4, #0
    2f94:	db50      	blt.n	3038 <output_channels_init_tc+0x184>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2f96:	08a3      	lsrs	r3, r4, #2
    2f98:	4833      	ldr	r0, [pc, #204]	; (3068 <output_channels_init_tc+0x1b4>)
    2f9a:	33c0      	adds	r3, #192	; 0xc0
    2f9c:	009b      	lsls	r3, r3, #2
    2f9e:	5819      	ldr	r1, [r3, r0]
    2fa0:	2203      	movs	r2, #3
    2fa2:	4022      	ands	r2, r4
    2fa4:	00d2      	lsls	r2, r2, #3
    2fa6:	25ff      	movs	r5, #255	; 0xff
    2fa8:	4095      	lsls	r5, r2
    2faa:	43a9      	bics	r1, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2fac:	2540      	movs	r5, #64	; 0x40
    2fae:	4095      	lsls	r5, r2
    2fb0:	002a      	movs	r2, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2fb2:	430a      	orrs	r2, r1
    2fb4:	501a      	str	r2, [r3, r0]
  if ((int32_t)(IRQn) >= 0)
    2fb6:	2c00      	cmp	r4, #0
    2fb8:	db05      	blt.n	2fc6 <output_channels_init_tc+0x112>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fba:	231f      	movs	r3, #31
    2fbc:	401c      	ands	r4, r3
    2fbe:	3b1e      	subs	r3, #30
    2fc0:	40a3      	lsls	r3, r4
    2fc2:	4a29      	ldr	r2, [pc, #164]	; (3068 <output_channels_init_tc+0x1b4>)
    2fc4:	6013      	str	r3, [r2, #0]
	gpio_set_pin_function(pin_p, function_p);
	gpio_set_pin_function(pin_n, function_n);
	
	NVIC_SetPriority(IRQn, INTERRUPT_PRIORITY_MEDIUM);
	NVIC_EnableIRQ(IRQn);
}
    2fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2fc8:	22ff      	movs	r2, #255	; 0xff
    2fca:	4017      	ands	r7, r2
    2fcc:	01ff      	lsls	r7, r7, #7
    2fce:	4b28      	ldr	r3, [pc, #160]	; (3070 <output_channels_init_tc+0x1bc>)
    2fd0:	469c      	mov	ip, r3
    2fd2:	4467      	add	r7, ip
    2fd4:	1838      	adds	r0, r7, r0
    2fd6:	3040      	adds	r0, #64	; 0x40
    2fd8:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2fda:	3afe      	subs	r2, #254	; 0xfe
    2fdc:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2fde:	7003      	strb	r3, [r0, #0]
    2fe0:	e7b0      	b.n	2f44 <output_channels_init_tc+0x90>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2fe2:	0843      	lsrs	r3, r0, #1
    2fe4:	4669      	mov	r1, sp
    2fe6:	7e09      	ldrb	r1, [r1, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2fe8:	01d0      	lsls	r0, r2, #7
    2fea:	4460      	add	r0, ip
    2fec:	18c0      	adds	r0, r0, r3
    2fee:	3030      	adds	r0, #48	; 0x30
    2ff0:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2ff2:	220f      	movs	r2, #15
    2ff4:	4013      	ands	r3, r2
	tmp |= PORT_PMUX_PMUXO(data);
    2ff6:	0109      	lsls	r1, r1, #4
    2ff8:	b2ca      	uxtb	r2, r1
    2ffa:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ffc:	7003      	strb	r3, [r0, #0]
    2ffe:	e7a1      	b.n	2f44 <output_channels_init_tc+0x90>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3000:	23ff      	movs	r3, #255	; 0xff
    3002:	4013      	ands	r3, r2
    3004:	01db      	lsls	r3, r3, #7
    3006:	4a1a      	ldr	r2, [pc, #104]	; (3070 <output_channels_init_tc+0x1bc>)
    3008:	4694      	mov	ip, r2
    300a:	4463      	add	r3, ip
    300c:	1818      	adds	r0, r3, r0
    300e:	3040      	adds	r0, #64	; 0x40
    3010:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3012:	2201      	movs	r2, #1
    3014:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3016:	7003      	strb	r3, [r0, #0]
    3018:	e7bb      	b.n	2f92 <output_channels_init_tc+0xde>
    301a:	0840      	lsrs	r0, r0, #1
    301c:	466b      	mov	r3, sp
    301e:	7f19      	ldrb	r1, [r3, #28]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3020:	01d2      	lsls	r2, r2, #7
    3022:	4462      	add	r2, ip
    3024:	1812      	adds	r2, r2, r0
    3026:	3230      	adds	r2, #48	; 0x30
    3028:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    302a:	200f      	movs	r0, #15
    302c:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
    302e:	0109      	lsls	r1, r1, #4
    3030:	b2c9      	uxtb	r1, r1
    3032:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3034:	7013      	strb	r3, [r2, #0]
    3036:	e7ac      	b.n	2f92 <output_channels_init_tc+0xde>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3038:	b2e2      	uxtb	r2, r4
    303a:	230f      	movs	r3, #15
    303c:	0010      	movs	r0, r2
    303e:	4013      	ands	r3, r2
    3040:	3b08      	subs	r3, #8
    3042:	089b      	lsrs	r3, r3, #2
    3044:	3306      	adds	r3, #6
    3046:	009b      	lsls	r3, r3, #2
    3048:	4a0a      	ldr	r2, [pc, #40]	; (3074 <output_channels_init_tc+0x1c0>)
    304a:	4694      	mov	ip, r2
    304c:	4463      	add	r3, ip
    304e:	6859      	ldr	r1, [r3, #4]
    3050:	2203      	movs	r2, #3
    3052:	4002      	ands	r2, r0
    3054:	00d2      	lsls	r2, r2, #3
    3056:	20ff      	movs	r0, #255	; 0xff
    3058:	4090      	lsls	r0, r2
    305a:	4381      	bics	r1, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    305c:	2040      	movs	r0, #64	; 0x40
    305e:	4090      	lsls	r0, r2
    3060:	0002      	movs	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3062:	430a      	orrs	r2, r1
    3064:	605a      	str	r2, [r3, #4]
    3066:	e7a6      	b.n	2fb6 <output_channels_init_tc+0x102>
    3068:	e000e100 	.word	0xe000e100
    306c:	00002ca5 	.word	0x00002ca5
    3070:	41004400 	.word	0x41004400
    3074:	e000ed00 	.word	0xe000ed00

00003078 <output_channels_init_4_5_6_7_8>:

void output_channels_init_4_5_6_7_8() {
    3078:	b510      	push	{r4, lr}
    307a:	b082      	sub	sp, #8
	output_channels_init_tc(TC3_IRQn, TC3, CH4P, CH4N, PINMUX_PA18E_TC3_WO0, PINMUX_PA19E_TC3_WO1);
    307c:	4b17      	ldr	r3, [pc, #92]	; (30dc <output_channels_init_4_5_6_7_8+0x64>)
    307e:	9301      	str	r3, [sp, #4]
    3080:	4b17      	ldr	r3, [pc, #92]	; (30e0 <output_channels_init_4_5_6_7_8+0x68>)
    3082:	9300      	str	r3, [sp, #0]
    3084:	2313      	movs	r3, #19
    3086:	2212      	movs	r2, #18
    3088:	4916      	ldr	r1, [pc, #88]	; (30e4 <output_channels_init_4_5_6_7_8+0x6c>)
    308a:	2012      	movs	r0, #18
    308c:	4c16      	ldr	r4, [pc, #88]	; (30e8 <output_channels_init_4_5_6_7_8+0x70>)
    308e:	47a0      	blx	r4
	output_channels_init_tc(TC6_IRQn, TC6, CH5P, CH5N, PINMUX_PB02E_TC6_WO0, PINMUX_PB03E_TC6_WO1);
    3090:	4b16      	ldr	r3, [pc, #88]	; (30ec <output_channels_init_4_5_6_7_8+0x74>)
    3092:	9301      	str	r3, [sp, #4]
    3094:	4b16      	ldr	r3, [pc, #88]	; (30f0 <output_channels_init_4_5_6_7_8+0x78>)
    3096:	9300      	str	r3, [sp, #0]
    3098:	2323      	movs	r3, #35	; 0x23
    309a:	2222      	movs	r2, #34	; 0x22
    309c:	4915      	ldr	r1, [pc, #84]	; (30f4 <output_channels_init_4_5_6_7_8+0x7c>)
    309e:	2015      	movs	r0, #21
    30a0:	47a0      	blx	r4
	output_channels_init_tc(TC4_IRQn, TC4, CH6P, CH6N, PINMUX_PB08E_TC4_WO0, PINMUX_PB09E_TC4_WO1);
    30a2:	4b15      	ldr	r3, [pc, #84]	; (30f8 <output_channels_init_4_5_6_7_8+0x80>)
    30a4:	9301      	str	r3, [sp, #4]
    30a6:	4b15      	ldr	r3, [pc, #84]	; (30fc <output_channels_init_4_5_6_7_8+0x84>)
    30a8:	9300      	str	r3, [sp, #0]
    30aa:	2329      	movs	r3, #41	; 0x29
    30ac:	2228      	movs	r2, #40	; 0x28
    30ae:	4914      	ldr	r1, [pc, #80]	; (3100 <output_channels_init_4_5_6_7_8+0x88>)
    30b0:	2013      	movs	r0, #19
    30b2:	47a0      	blx	r4
	output_channels_init_tc(TC5_IRQn, TC5, CH7P, CH7N, PINMUX_PB10E_TC5_WO0, PINMUX_PB11E_TC5_WO1);
    30b4:	4b13      	ldr	r3, [pc, #76]	; (3104 <output_channels_init_4_5_6_7_8+0x8c>)
    30b6:	9301      	str	r3, [sp, #4]
    30b8:	4b13      	ldr	r3, [pc, #76]	; (3108 <output_channels_init_4_5_6_7_8+0x90>)
    30ba:	9300      	str	r3, [sp, #0]
    30bc:	232b      	movs	r3, #43	; 0x2b
    30be:	222a      	movs	r2, #42	; 0x2a
    30c0:	4912      	ldr	r1, [pc, #72]	; (310c <output_channels_init_4_5_6_7_8+0x94>)
    30c2:	2014      	movs	r0, #20
    30c4:	47a0      	blx	r4
	output_channels_init_tc(TC7_IRQn, TC7, CH8P, CH8N, PINMUX_PB22E_TC7_WO0, PINMUX_PB23E_TC7_WO1);
    30c6:	4b12      	ldr	r3, [pc, #72]	; (3110 <output_channels_init_4_5_6_7_8+0x98>)
    30c8:	9301      	str	r3, [sp, #4]
    30ca:	4b12      	ldr	r3, [pc, #72]	; (3114 <output_channels_init_4_5_6_7_8+0x9c>)
    30cc:	9300      	str	r3, [sp, #0]
    30ce:	2337      	movs	r3, #55	; 0x37
    30d0:	2236      	movs	r2, #54	; 0x36
    30d2:	4911      	ldr	r1, [pc, #68]	; (3118 <output_channels_init_4_5_6_7_8+0xa0>)
    30d4:	2016      	movs	r0, #22
    30d6:	47a0      	blx	r4
}
    30d8:	b002      	add	sp, #8
    30da:	bd10      	pop	{r4, pc}
    30dc:	00130004 	.word	0x00130004
    30e0:	00120004 	.word	0x00120004
    30e4:	42002c00 	.word	0x42002c00
    30e8:	00002eb5 	.word	0x00002eb5
    30ec:	00230004 	.word	0x00230004
    30f0:	00220004 	.word	0x00220004
    30f4:	42003800 	.word	0x42003800
    30f8:	00290004 	.word	0x00290004
    30fc:	00280004 	.word	0x00280004
    3100:	42003000 	.word	0x42003000
    3104:	002b0004 	.word	0x002b0004
    3108:	002a0004 	.word	0x002a0004
    310c:	42003400 	.word	0x42003400
    3110:	00370004 	.word	0x00370004
    3114:	00360004 	.word	0x00360004
    3118:	42003c00 	.word	0x42003c00

0000311c <TCC0_Handler>:

void TCC0_Handler() {
    311c:	b510      	push	{r4, lr}
    311e:	b084      	sub	sp, #16
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    3120:	2201      	movs	r2, #1
    3122:	4b2c      	ldr	r3, [pc, #176]	; (31d4 <TCC0_Handler+0xb8>)
    3124:	62da      	str	r2, [r3, #44]	; 0x2c
	if (sine->updated) {
    3126:	4b2c      	ldr	r3, [pc, #176]	; (31d8 <TCC0_Handler+0xbc>)
    3128:	7a9b      	ldrb	r3, [r3, #10]
    312a:	2b00      	cmp	r3, #0
    312c:	d006      	beq.n	313c <TCC0_Handler+0x20>
		sine->frequency = sine->frequency_buffer;
    312e:	4b2a      	ldr	r3, [pc, #168]	; (31d8 <TCC0_Handler+0xbc>)
    3130:	891a      	ldrh	r2, [r3, #8]
    3132:	809a      	strh	r2, [r3, #4]
		sine->amplitude = sine->amplitude_buffer;
    3134:	799a      	ldrb	r2, [r3, #6]
    3136:	709a      	strb	r2, [r3, #2]
		sine->updated = false;
    3138:	2200      	movs	r2, #0
    313a:	729a      	strb	r2, [r3, #10]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    313c:	4c26      	ldr	r4, [pc, #152]	; (31d8 <TCC0_Handler+0xbc>)
    313e:	8820      	ldrh	r0, [r4, #0]
    3140:	88a3      	ldrh	r3, [r4, #4]
    3142:	18c0      	adds	r0, r0, r3
    3144:	4925      	ldr	r1, [pc, #148]	; (31dc <TCC0_Handler+0xc0>)
    3146:	4b26      	ldr	r3, [pc, #152]	; (31e0 <TCC0_Handler+0xc4>)
    3148:	4798      	blx	r3
    314a:	b289      	uxth	r1, r1
    314c:	8021      	strh	r1, [r4, #0]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    314e:	09c9      	lsrs	r1, r1, #7
    3150:	0049      	lsls	r1, r1, #1
    3152:	4b24      	ldr	r3, [pc, #144]	; (31e4 <TCC0_Handler+0xc8>)
    3154:	5ec9      	ldrsh	r1, [r1, r3]
    3156:	78a2      	ldrb	r2, [r4, #2]
    3158:	1c53      	adds	r3, r2, #1
    315a:	434b      	muls	r3, r1
    315c:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    315e:	b2db      	uxtb	r3, r3
    3160:	4669      	mov	r1, sp
    3162:	700b      	strb	r3, [r1, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3164:	1a9b      	subs	r3, r3, r2
    3166:	3b01      	subs	r3, #1
    3168:	704b      	strb	r3, [r1, #1]
	return sample;
    316a:	880b      	ldrh	r3, [r1, #0]
    316c:	aa03      	add	r2, sp, #12
    316e:	8013      	strh	r3, [r2, #0]
    3170:	a901      	add	r1, sp, #4
    3172:	800b      	strh	r3, [r1, #0]
	hri_tcc_clear_interrupt_OVF_bit(TCC0);

	//channel 1
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[0]));
	hri_tcc_write_CCB_reg_no_lock(TCC0, 2, next_value.pos);
    3174:	b2db      	uxtb	r3, r3
	((Tcc *)hw)->CCB[index].reg = data;
    3176:	4a17      	ldr	r2, [pc, #92]	; (31d4 <TCC0_Handler+0xb8>)
    3178:	6793      	str	r3, [r2, #120]	; 0x78
	hri_tcc_write_CCB_reg_no_lock(TCC0, 3, next_value.neg);
    317a:	784b      	ldrb	r3, [r1, #1]
    317c:	67d3      	str	r3, [r2, #124]	; 0x7c
	if (sine->updated) {
    317e:	7da3      	ldrb	r3, [r4, #22]
    3180:	2b00      	cmp	r3, #0
    3182:	d005      	beq.n	3190 <TCC0_Handler+0x74>
		sine->frequency = sine->frequency_buffer;
    3184:	8aa2      	ldrh	r2, [r4, #20]
    3186:	8222      	strh	r2, [r4, #16]
		sine->amplitude = sine->amplitude_buffer;
    3188:	7ca2      	ldrb	r2, [r4, #18]
    318a:	73a2      	strb	r2, [r4, #14]
		sine->updated = false;
    318c:	2200      	movs	r2, #0
    318e:	75a2      	strb	r2, [r4, #22]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3190:	4c11      	ldr	r4, [pc, #68]	; (31d8 <TCC0_Handler+0xbc>)
    3192:	89a0      	ldrh	r0, [r4, #12]
    3194:	8a23      	ldrh	r3, [r4, #16]
    3196:	18c0      	adds	r0, r0, r3
    3198:	4910      	ldr	r1, [pc, #64]	; (31dc <TCC0_Handler+0xc0>)
    319a:	4b11      	ldr	r3, [pc, #68]	; (31e0 <TCC0_Handler+0xc4>)
    319c:	4798      	blx	r3
    319e:	b289      	uxth	r1, r1
    31a0:	81a1      	strh	r1, [r4, #12]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    31a2:	09c9      	lsrs	r1, r1, #7
    31a4:	0049      	lsls	r1, r1, #1
    31a6:	4b0f      	ldr	r3, [pc, #60]	; (31e4 <TCC0_Handler+0xc8>)
    31a8:	5ec9      	ldrsh	r1, [r1, r3]
    31aa:	7ba2      	ldrb	r2, [r4, #14]
    31ac:	1c53      	adds	r3, r2, #1
    31ae:	434b      	muls	r3, r1
    31b0:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    31b2:	b2db      	uxtb	r3, r3
    31b4:	4669      	mov	r1, sp
    31b6:	700b      	strb	r3, [r1, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    31b8:	1a9b      	subs	r3, r3, r2
    31ba:	3b01      	subs	r3, #1
    31bc:	466a      	mov	r2, sp
    31be:	704b      	strb	r3, [r1, #1]
    31c0:	a901      	add	r1, sp, #4
    31c2:	8813      	ldrh	r3, [r2, #0]
    31c4:	800b      	strh	r3, [r1, #0]
		
	//channel 2
	next_value = sine_wave_next(&(output_channels_wave_form[1]));
	hri_tcc_write_CCB_reg_no_lock(TCC0, 0, next_value.pos);
    31c6:	b2db      	uxtb	r3, r3
    31c8:	4a02      	ldr	r2, [pc, #8]	; (31d4 <TCC0_Handler+0xb8>)
    31ca:	6713      	str	r3, [r2, #112]	; 0x70
	hri_tcc_write_CCB_reg_no_lock(TCC0, 1, next_value.neg);
    31cc:	784b      	ldrb	r3, [r1, #1]
    31ce:	6753      	str	r3, [r2, #116]	; 0x74
	//gpio_set_pin_level(LED2, next_value.pos != 0);
}
    31d0:	b004      	add	sp, #16
    31d2:	bd10      	pop	{r4, pc}
    31d4:	42002000 	.word	0x42002000
    31d8:	2000008c 	.word	0x2000008c
    31dc:	0000c180 	.word	0x0000c180
    31e0:	000038a5 	.word	0x000038a5
    31e4:	200000ec 	.word	0x200000ec

000031e8 <TCC2_Handler>:

void TCC2_Handler() {
    31e8:	b510      	push	{r4, lr}
    31ea:	b084      	sub	sp, #16
    31ec:	2201      	movs	r2, #1
    31ee:	4b18      	ldr	r3, [pc, #96]	; (3250 <TCC2_Handler+0x68>)
    31f0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (sine->updated) {
    31f2:	2322      	movs	r3, #34	; 0x22
    31f4:	4a17      	ldr	r2, [pc, #92]	; (3254 <TCC2_Handler+0x6c>)
    31f6:	5cd3      	ldrb	r3, [r2, r3]
    31f8:	2b00      	cmp	r3, #0
    31fa:	d007      	beq.n	320c <TCC2_Handler+0x24>
		sine->frequency = sine->frequency_buffer;
    31fc:	0013      	movs	r3, r2
    31fe:	8c12      	ldrh	r2, [r2, #32]
    3200:	839a      	strh	r2, [r3, #28]
		sine->amplitude = sine->amplitude_buffer;
    3202:	7f9a      	ldrb	r2, [r3, #30]
    3204:	769a      	strb	r2, [r3, #26]
		sine->updated = false;
    3206:	2100      	movs	r1, #0
    3208:	2222      	movs	r2, #34	; 0x22
    320a:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    320c:	4c11      	ldr	r4, [pc, #68]	; (3254 <TCC2_Handler+0x6c>)
    320e:	8b20      	ldrh	r0, [r4, #24]
    3210:	8ba3      	ldrh	r3, [r4, #28]
    3212:	18c0      	adds	r0, r0, r3
    3214:	4910      	ldr	r1, [pc, #64]	; (3258 <TCC2_Handler+0x70>)
    3216:	4b11      	ldr	r3, [pc, #68]	; (325c <TCC2_Handler+0x74>)
    3218:	4798      	blx	r3
    321a:	b289      	uxth	r1, r1
    321c:	8321      	strh	r1, [r4, #24]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    321e:	09c9      	lsrs	r1, r1, #7
    3220:	0049      	lsls	r1, r1, #1
    3222:	4b0f      	ldr	r3, [pc, #60]	; (3260 <TCC2_Handler+0x78>)
    3224:	5eca      	ldrsh	r2, [r1, r3]
    3226:	7ea1      	ldrb	r1, [r4, #26]
    3228:	1c4b      	adds	r3, r1, #1
    322a:	4353      	muls	r3, r2
    322c:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    322e:	b2db      	uxtb	r3, r3
    3230:	aa01      	add	r2, sp, #4
    3232:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3234:	1a5b      	subs	r3, r3, r1
    3236:	3b01      	subs	r3, #1
    3238:	7053      	strb	r3, [r2, #1]
    323a:	a902      	add	r1, sp, #8
    323c:	8813      	ldrh	r3, [r2, #0]
    323e:	800b      	strh	r3, [r1, #0]
	hri_tcc_clear_interrupt_OVF_bit(TCC2);

	//channel 3
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[2]));
	hri_tcc_write_CCB_reg_no_lock(TCC2, 0, next_value.pos);
    3240:	b2db      	uxtb	r3, r3
    3242:	4a03      	ldr	r2, [pc, #12]	; (3250 <TCC2_Handler+0x68>)
    3244:	6713      	str	r3, [r2, #112]	; 0x70
	hri_tcc_write_CCB_reg_no_lock(TCC2, 1, next_value.neg);
    3246:	784b      	ldrb	r3, [r1, #1]
    3248:	6753      	str	r3, [r2, #116]	; 0x74
}
    324a:	b004      	add	sp, #16
    324c:	bd10      	pop	{r4, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	42002800 	.word	0x42002800
    3254:	2000008c 	.word	0x2000008c
    3258:	0000c180 	.word	0x0000c180
    325c:	000038a5 	.word	0x000038a5
    3260:	200000ec 	.word	0x200000ec

00003264 <TC3_Handler>:
	SineWaveSample next_value = sine_wave_next(&(output_channels_wave_form[channel])); \
	hri_tccount8_write_CC_reg_no_lock(hw, 0, next_value.pos); \
	hri_tccount8_write_CC_reg_no_lock(hw, 1, next_value.neg); \
}

TC_HANDLER(TC3, 3)
    3264:	b510      	push	{r4, lr}
    3266:	b084      	sub	sp, #16
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3268:	2201      	movs	r2, #1
    326a:	4b19      	ldr	r3, [pc, #100]	; (32d0 <TC3_Handler+0x6c>)
    326c:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    326e:	232e      	movs	r3, #46	; 0x2e
    3270:	4a18      	ldr	r2, [pc, #96]	; (32d4 <TC3_Handler+0x70>)
    3272:	5cd3      	ldrb	r3, [r2, r3]
    3274:	2b00      	cmp	r3, #0
    3276:	d009      	beq.n	328c <TC3_Handler+0x28>
		sine->frequency = sine->frequency_buffer;
    3278:	0013      	movs	r3, r2
    327a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    327c:	851a      	strh	r2, [r3, #40]	; 0x28
		sine->amplitude = sine->amplitude_buffer;
    327e:	222a      	movs	r2, #42	; 0x2a
    3280:	5c99      	ldrb	r1, [r3, r2]
    3282:	3a04      	subs	r2, #4
    3284:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    3286:	2100      	movs	r1, #0
    3288:	3208      	adds	r2, #8
    328a:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    328c:	4c11      	ldr	r4, [pc, #68]	; (32d4 <TC3_Handler+0x70>)
    328e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    3290:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3292:	18c0      	adds	r0, r0, r3
    3294:	4910      	ldr	r1, [pc, #64]	; (32d8 <TC3_Handler+0x74>)
    3296:	4b11      	ldr	r3, [pc, #68]	; (32dc <TC3_Handler+0x78>)
    3298:	4798      	blx	r3
    329a:	b289      	uxth	r1, r1
    329c:	84a1      	strh	r1, [r4, #36]	; 0x24
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    329e:	09c9      	lsrs	r1, r1, #7
    32a0:	0049      	lsls	r1, r1, #1
    32a2:	4b0f      	ldr	r3, [pc, #60]	; (32e0 <TC3_Handler+0x7c>)
    32a4:	5eca      	ldrsh	r2, [r1, r3]
    32a6:	2326      	movs	r3, #38	; 0x26
    32a8:	5ce1      	ldrb	r1, [r4, r3]
    32aa:	1c4b      	adds	r3, r1, #1
    32ac:	4353      	muls	r3, r2
    32ae:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    32b0:	b2db      	uxtb	r3, r3
    32b2:	aa01      	add	r2, sp, #4
    32b4:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    32b6:	1a5b      	subs	r3, r3, r1
    32b8:	3b01      	subs	r3, #1
    32ba:	7053      	strb	r3, [r2, #1]
    32bc:	a902      	add	r1, sp, #8
    32be:	8813      	ldrh	r3, [r2, #0]
    32c0:	800b      	strh	r3, [r1, #0]
    32c2:	b2db      	uxtb	r3, r3
#ifndef TC_UTIL_H_
#define TC_UTIL_H_

static inline void hri_tccount8_write_CC_reg_no_lock(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    32c4:	4a02      	ldr	r2, [pc, #8]	; (32d0 <TC3_Handler+0x6c>)
    32c6:	7613      	strb	r3, [r2, #24]
    32c8:	784b      	ldrb	r3, [r1, #1]
    32ca:	7653      	strb	r3, [r2, #25]
    32cc:	b004      	add	sp, #16
    32ce:	bd10      	pop	{r4, pc}
    32d0:	42002c00 	.word	0x42002c00
    32d4:	2000008c 	.word	0x2000008c
    32d8:	0000c180 	.word	0x0000c180
    32dc:	000038a5 	.word	0x000038a5
    32e0:	200000ec 	.word	0x200000ec

000032e4 <TC6_Handler>:
TC_HANDLER(TC6, 4)
    32e4:	b510      	push	{r4, lr}
    32e6:	b084      	sub	sp, #16
    32e8:	2201      	movs	r2, #1
    32ea:	4b19      	ldr	r3, [pc, #100]	; (3350 <TC6_Handler+0x6c>)
    32ec:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    32ee:	233a      	movs	r3, #58	; 0x3a
    32f0:	4a18      	ldr	r2, [pc, #96]	; (3354 <TC6_Handler+0x70>)
    32f2:	5cd3      	ldrb	r3, [r2, r3]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d009      	beq.n	330c <TC6_Handler+0x28>
		sine->frequency = sine->frequency_buffer;
    32f8:	0013      	movs	r3, r2
    32fa:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    32fc:	869a      	strh	r2, [r3, #52]	; 0x34
		sine->amplitude = sine->amplitude_buffer;
    32fe:	2236      	movs	r2, #54	; 0x36
    3300:	5c99      	ldrb	r1, [r3, r2]
    3302:	3a04      	subs	r2, #4
    3304:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    3306:	2100      	movs	r1, #0
    3308:	3208      	adds	r2, #8
    330a:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    330c:	4c11      	ldr	r4, [pc, #68]	; (3354 <TC6_Handler+0x70>)
    330e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    3310:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3312:	18c0      	adds	r0, r0, r3
    3314:	4910      	ldr	r1, [pc, #64]	; (3358 <TC6_Handler+0x74>)
    3316:	4b11      	ldr	r3, [pc, #68]	; (335c <TC6_Handler+0x78>)
    3318:	4798      	blx	r3
    331a:	b289      	uxth	r1, r1
    331c:	8621      	strh	r1, [r4, #48]	; 0x30
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    331e:	09c9      	lsrs	r1, r1, #7
    3320:	0049      	lsls	r1, r1, #1
    3322:	4b0f      	ldr	r3, [pc, #60]	; (3360 <TC6_Handler+0x7c>)
    3324:	5eca      	ldrsh	r2, [r1, r3]
    3326:	2332      	movs	r3, #50	; 0x32
    3328:	5ce1      	ldrb	r1, [r4, r3]
    332a:	1c4b      	adds	r3, r1, #1
    332c:	4353      	muls	r3, r2
    332e:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    3330:	b2db      	uxtb	r3, r3
    3332:	aa01      	add	r2, sp, #4
    3334:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3336:	1a5b      	subs	r3, r3, r1
    3338:	3b01      	subs	r3, #1
    333a:	7053      	strb	r3, [r2, #1]
    333c:	a902      	add	r1, sp, #8
    333e:	8813      	ldrh	r3, [r2, #0]
    3340:	800b      	strh	r3, [r1, #0]
    3342:	b2db      	uxtb	r3, r3
    3344:	4a02      	ldr	r2, [pc, #8]	; (3350 <TC6_Handler+0x6c>)
    3346:	7613      	strb	r3, [r2, #24]
    3348:	784b      	ldrb	r3, [r1, #1]
    334a:	7653      	strb	r3, [r2, #25]
    334c:	b004      	add	sp, #16
    334e:	bd10      	pop	{r4, pc}
    3350:	42003800 	.word	0x42003800
    3354:	2000008c 	.word	0x2000008c
    3358:	0000c180 	.word	0x0000c180
    335c:	000038a5 	.word	0x000038a5
    3360:	200000ec 	.word	0x200000ec

00003364 <TC4_Handler>:
TC_HANDLER(TC4, 5)
    3364:	b510      	push	{r4, lr}
    3366:	b084      	sub	sp, #16
    3368:	2201      	movs	r2, #1
    336a:	4b1b      	ldr	r3, [pc, #108]	; (33d8 <TC4_Handler+0x74>)
    336c:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    336e:	2346      	movs	r3, #70	; 0x46
    3370:	4a1a      	ldr	r2, [pc, #104]	; (33dc <TC4_Handler+0x78>)
    3372:	5cd3      	ldrb	r3, [r2, r3]
    3374:	2b00      	cmp	r3, #0
    3376:	d00b      	beq.n	3390 <TC4_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    3378:	0013      	movs	r3, r2
    337a:	2244      	movs	r2, #68	; 0x44
    337c:	5a99      	ldrh	r1, [r3, r2]
    337e:	3a04      	subs	r2, #4
    3380:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    3382:	3202      	adds	r2, #2
    3384:	5c99      	ldrb	r1, [r3, r2]
    3386:	3a04      	subs	r2, #4
    3388:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    338a:	2100      	movs	r1, #0
    338c:	3208      	adds	r2, #8
    338e:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3390:	4c12      	ldr	r4, [pc, #72]	; (33dc <TC4_Handler+0x78>)
    3392:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    3394:	2340      	movs	r3, #64	; 0x40
    3396:	5ae3      	ldrh	r3, [r4, r3]
    3398:	18c0      	adds	r0, r0, r3
    339a:	4911      	ldr	r1, [pc, #68]	; (33e0 <TC4_Handler+0x7c>)
    339c:	4b11      	ldr	r3, [pc, #68]	; (33e4 <TC4_Handler+0x80>)
    339e:	4798      	blx	r3
    33a0:	b289      	uxth	r1, r1
    33a2:	87a1      	strh	r1, [r4, #60]	; 0x3c
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    33a4:	09c9      	lsrs	r1, r1, #7
    33a6:	0049      	lsls	r1, r1, #1
    33a8:	4b0f      	ldr	r3, [pc, #60]	; (33e8 <TC4_Handler+0x84>)
    33aa:	5eca      	ldrsh	r2, [r1, r3]
    33ac:	233e      	movs	r3, #62	; 0x3e
    33ae:	5ce1      	ldrb	r1, [r4, r3]
    33b0:	1c4b      	adds	r3, r1, #1
    33b2:	4353      	muls	r3, r2
    33b4:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    33b6:	b2db      	uxtb	r3, r3
    33b8:	aa01      	add	r2, sp, #4
    33ba:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    33bc:	1a5b      	subs	r3, r3, r1
    33be:	3b01      	subs	r3, #1
    33c0:	7053      	strb	r3, [r2, #1]
    33c2:	a902      	add	r1, sp, #8
    33c4:	8813      	ldrh	r3, [r2, #0]
    33c6:	800b      	strh	r3, [r1, #0]
    33c8:	b2db      	uxtb	r3, r3
    33ca:	4a03      	ldr	r2, [pc, #12]	; (33d8 <TC4_Handler+0x74>)
    33cc:	7613      	strb	r3, [r2, #24]
    33ce:	784b      	ldrb	r3, [r1, #1]
    33d0:	7653      	strb	r3, [r2, #25]
    33d2:	b004      	add	sp, #16
    33d4:	bd10      	pop	{r4, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	42003000 	.word	0x42003000
    33dc:	2000008c 	.word	0x2000008c
    33e0:	0000c180 	.word	0x0000c180
    33e4:	000038a5 	.word	0x000038a5
    33e8:	200000ec 	.word	0x200000ec

000033ec <TC5_Handler>:
TC_HANDLER(TC5, 6)
    33ec:	b530      	push	{r4, r5, lr}
    33ee:	b085      	sub	sp, #20
    33f0:	2201      	movs	r2, #1
    33f2:	4b1b      	ldr	r3, [pc, #108]	; (3460 <TC5_Handler+0x74>)
    33f4:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    33f6:	2352      	movs	r3, #82	; 0x52
    33f8:	4a1a      	ldr	r2, [pc, #104]	; (3464 <TC5_Handler+0x78>)
    33fa:	5cd3      	ldrb	r3, [r2, r3]
    33fc:	2b00      	cmp	r3, #0
    33fe:	d00b      	beq.n	3418 <TC5_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    3400:	0013      	movs	r3, r2
    3402:	2250      	movs	r2, #80	; 0x50
    3404:	5a99      	ldrh	r1, [r3, r2]
    3406:	3a04      	subs	r2, #4
    3408:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    340a:	3202      	adds	r2, #2
    340c:	5c99      	ldrb	r1, [r3, r2]
    340e:	3a04      	subs	r2, #4
    3410:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    3412:	2100      	movs	r1, #0
    3414:	3208      	adds	r2, #8
    3416:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    3418:	4c12      	ldr	r4, [pc, #72]	; (3464 <TC5_Handler+0x78>)
    341a:	2548      	movs	r5, #72	; 0x48
    341c:	5b60      	ldrh	r0, [r4, r5]
    341e:	234c      	movs	r3, #76	; 0x4c
    3420:	5ae3      	ldrh	r3, [r4, r3]
    3422:	18c0      	adds	r0, r0, r3
    3424:	4910      	ldr	r1, [pc, #64]	; (3468 <TC5_Handler+0x7c>)
    3426:	4b11      	ldr	r3, [pc, #68]	; (346c <TC5_Handler+0x80>)
    3428:	4798      	blx	r3
    342a:	b289      	uxth	r1, r1
    342c:	5361      	strh	r1, [r4, r5]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    342e:	09c9      	lsrs	r1, r1, #7
    3430:	0049      	lsls	r1, r1, #1
    3432:	4b0f      	ldr	r3, [pc, #60]	; (3470 <TC5_Handler+0x84>)
    3434:	5eca      	ldrsh	r2, [r1, r3]
    3436:	234a      	movs	r3, #74	; 0x4a
    3438:	5ce1      	ldrb	r1, [r4, r3]
    343a:	1c4b      	adds	r3, r1, #1
    343c:	4353      	muls	r3, r2
    343e:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    3440:	b2db      	uxtb	r3, r3
    3442:	aa01      	add	r2, sp, #4
    3444:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    3446:	1a5b      	subs	r3, r3, r1
    3448:	3b01      	subs	r3, #1
    344a:	7053      	strb	r3, [r2, #1]
    344c:	a902      	add	r1, sp, #8
    344e:	8813      	ldrh	r3, [r2, #0]
    3450:	800b      	strh	r3, [r1, #0]
    3452:	b2db      	uxtb	r3, r3
    3454:	4a02      	ldr	r2, [pc, #8]	; (3460 <TC5_Handler+0x74>)
    3456:	7613      	strb	r3, [r2, #24]
    3458:	784b      	ldrb	r3, [r1, #1]
    345a:	7653      	strb	r3, [r2, #25]
    345c:	b005      	add	sp, #20
    345e:	bd30      	pop	{r4, r5, pc}
    3460:	42003400 	.word	0x42003400
    3464:	2000008c 	.word	0x2000008c
    3468:	0000c180 	.word	0x0000c180
    346c:	000038a5 	.word	0x000038a5
    3470:	200000ec 	.word	0x200000ec

00003474 <TC7_Handler>:
TC_HANDLER(TC7, 7)
    3474:	b530      	push	{r4, r5, lr}
    3476:	b085      	sub	sp, #20
    3478:	2201      	movs	r2, #1
    347a:	4b1b      	ldr	r3, [pc, #108]	; (34e8 <TC7_Handler+0x74>)
    347c:	739a      	strb	r2, [r3, #14]
	if (sine->updated) {
    347e:	235e      	movs	r3, #94	; 0x5e
    3480:	4a1a      	ldr	r2, [pc, #104]	; (34ec <TC7_Handler+0x78>)
    3482:	5cd3      	ldrb	r3, [r2, r3]
    3484:	2b00      	cmp	r3, #0
    3486:	d00b      	beq.n	34a0 <TC7_Handler+0x2c>
		sine->frequency = sine->frequency_buffer;
    3488:	0013      	movs	r3, r2
    348a:	225c      	movs	r2, #92	; 0x5c
    348c:	5a99      	ldrh	r1, [r3, r2]
    348e:	3a04      	subs	r2, #4
    3490:	5299      	strh	r1, [r3, r2]
		sine->amplitude = sine->amplitude_buffer;
    3492:	3202      	adds	r2, #2
    3494:	5c99      	ldrb	r1, [r3, r2]
    3496:	3a04      	subs	r2, #4
    3498:	5499      	strb	r1, [r3, r2]
		sine->updated = false;
    349a:	2100      	movs	r1, #0
    349c:	3208      	adds	r2, #8
    349e:	5499      	strb	r1, [r3, r2]
	sine->position = (sine->position + sine->frequency) % SINE_WAVE_MAX_POSITION;
    34a0:	4c12      	ldr	r4, [pc, #72]	; (34ec <TC7_Handler+0x78>)
    34a2:	2554      	movs	r5, #84	; 0x54
    34a4:	5b60      	ldrh	r0, [r4, r5]
    34a6:	2358      	movs	r3, #88	; 0x58
    34a8:	5ae3      	ldrh	r3, [r4, r3]
    34aa:	18c0      	adds	r0, r0, r3
    34ac:	4910      	ldr	r1, [pc, #64]	; (34f0 <TC7_Handler+0x7c>)
    34ae:	4b11      	ldr	r3, [pc, #68]	; (34f4 <TC7_Handler+0x80>)
    34b0:	4798      	blx	r3
    34b2:	b289      	uxth	r1, r1
    34b4:	5361      	strh	r1, [r4, r5]
	int16_t result = (((int16_t) sine_wave_data[sine->position >> SINE_WAVE_FRACTIONAL_BITS]) * (((int16_t) sine->amplitude) + 1)) >> SINE_WAVE_AMPLITUDE_BITS;
    34b6:	09c9      	lsrs	r1, r1, #7
    34b8:	0049      	lsls	r1, r1, #1
    34ba:	4b0f      	ldr	r3, [pc, #60]	; (34f8 <TC7_Handler+0x84>)
    34bc:	5eca      	ldrsh	r2, [r1, r3]
    34be:	2356      	movs	r3, #86	; 0x56
    34c0:	5ce1      	ldrb	r1, [r4, r3]
    34c2:	1c4b      	adds	r3, r1, #1
    34c4:	4353      	muls	r3, r2
    34c6:	121b      	asrs	r3, r3, #8
	sample.pos = result;
    34c8:	b2db      	uxtb	r3, r3
    34ca:	aa01      	add	r2, sp, #4
    34cc:	7013      	strb	r3, [r2, #0]
	sample.neg = SINE_WAVE_MAX_AMPLITUDE - ((int16_t) sine->amplitude) + result;
    34ce:	1a5b      	subs	r3, r3, r1
    34d0:	3b01      	subs	r3, #1
    34d2:	7053      	strb	r3, [r2, #1]
    34d4:	a902      	add	r1, sp, #8
    34d6:	8813      	ldrh	r3, [r2, #0]
    34d8:	800b      	strh	r3, [r1, #0]
    34da:	b2db      	uxtb	r3, r3
    34dc:	4a02      	ldr	r2, [pc, #8]	; (34e8 <TC7_Handler+0x74>)
    34de:	7613      	strb	r3, [r2, #24]
    34e0:	784b      	ldrb	r3, [r1, #1]
    34e2:	7653      	strb	r3, [r2, #25]
    34e4:	b005      	add	sp, #20
    34e6:	bd30      	pop	{r4, r5, pc}
    34e8:	42003c00 	.word	0x42003c00
    34ec:	2000008c 	.word	0x2000008c
    34f0:	0000c180 	.word	0x0000c180
    34f4:	000038a5 	.word	0x000038a5
    34f8:	200000ec 	.word	0x200000ec

000034fc <output_channels_init>:
		}
	}
*/
//}

void output_channels_init() {
    34fc:	b510      	push	{r4, lr}
	output_channels_init_1_and_2();
    34fe:	4b03      	ldr	r3, [pc, #12]	; (350c <output_channels_init+0x10>)
    3500:	4798      	blx	r3
	output_channels_init_3();
    3502:	4b03      	ldr	r3, [pc, #12]	; (3510 <output_channels_init+0x14>)
    3504:	4798      	blx	r3
	output_channels_init_4_5_6_7_8();
    3506:	4b03      	ldr	r3, [pc, #12]	; (3514 <output_channels_init+0x18>)
    3508:	4798      	blx	r3
    350a:	bd10      	pop	{r4, pc}
    350c:	00002d31 	.word	0x00002d31
    3510:	00002e0d 	.word	0x00002e0d
    3514:	00003079 	.word	0x00003079

00003518 <round>:
    3518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351a:	4a26      	ldr	r2, [pc, #152]	; (35b4 <round+0x9c>)
    351c:	004b      	lsls	r3, r1, #1
    351e:	0d5b      	lsrs	r3, r3, #21
    3520:	189a      	adds	r2, r3, r2
    3522:	0007      	movs	r7, r0
    3524:	000c      	movs	r4, r1
    3526:	2a13      	cmp	r2, #19
    3528:	dc10      	bgt.n	354c <round+0x34>
    352a:	2a00      	cmp	r2, #0
    352c:	db39      	blt.n	35a2 <round+0x8a>
    352e:	4b22      	ldr	r3, [pc, #136]	; (35b8 <round+0xa0>)
    3530:	4113      	asrs	r3, r2
    3532:	420b      	tst	r3, r1
    3534:	d030      	beq.n	3598 <round+0x80>
    3536:	2480      	movs	r4, #128	; 0x80
    3538:	0324      	lsls	r4, r4, #12
    353a:	4114      	asrs	r4, r2
    353c:	2000      	movs	r0, #0
    353e:	1864      	adds	r4, r4, r1
    3540:	439c      	bics	r4, r3
    3542:	0006      	movs	r6, r0
    3544:	0025      	movs	r5, r4
    3546:	0030      	movs	r0, r6
    3548:	0029      	movs	r1, r5
    354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    354c:	2a33      	cmp	r2, #51	; 0x33
    354e:	dd0c      	ble.n	356a <round+0x52>
    3550:	2380      	movs	r3, #128	; 0x80
    3552:	0006      	movs	r6, r0
    3554:	00db      	lsls	r3, r3, #3
    3556:	000d      	movs	r5, r1
    3558:	429a      	cmp	r2, r3
    355a:	d1f4      	bne.n	3546 <round+0x2e>
    355c:	0002      	movs	r2, r0
    355e:	000b      	movs	r3, r1
    3560:	f000 fd54 	bl	400c <__aeabi_dadd>
    3564:	0006      	movs	r6, r0
    3566:	000d      	movs	r5, r1
    3568:	e7ed      	b.n	3546 <round+0x2e>
    356a:	4d14      	ldr	r5, [pc, #80]	; (35bc <round+0xa4>)
    356c:	0006      	movs	r6, r0
    356e:	46ac      	mov	ip, r5
    3570:	2501      	movs	r5, #1
    3572:	4463      	add	r3, ip
    3574:	426d      	negs	r5, r5
    3576:	40dd      	lsrs	r5, r3
    3578:	46ac      	mov	ip, r5
    357a:	4663      	mov	r3, ip
    357c:	000d      	movs	r5, r1
    357e:	4203      	tst	r3, r0
    3580:	d0e1      	beq.n	3546 <round+0x2e>
    3582:	2333      	movs	r3, #51	; 0x33
    3584:	1a9a      	subs	r2, r3, r2
    3586:	3b32      	subs	r3, #50	; 0x32
    3588:	4093      	lsls	r3, r2
    358a:	1818      	adds	r0, r3, r0
    358c:	4287      	cmp	r7, r0
    358e:	d900      	bls.n	3592 <round+0x7a>
    3590:	1c4c      	adds	r4, r1, #1
    3592:	4663      	mov	r3, ip
    3594:	4398      	bics	r0, r3
    3596:	e7d4      	b.n	3542 <round+0x2a>
    3598:	0006      	movs	r6, r0
    359a:	000d      	movs	r5, r1
    359c:	2800      	cmp	r0, #0
    359e:	d1ca      	bne.n	3536 <round+0x1e>
    35a0:	e7d1      	b.n	3546 <round+0x2e>
    35a2:	0fc9      	lsrs	r1, r1, #31
    35a4:	07cc      	lsls	r4, r1, #31
    35a6:	2000      	movs	r0, #0
    35a8:	1c53      	adds	r3, r2, #1
    35aa:	d1ca      	bne.n	3542 <round+0x2a>
    35ac:	4b04      	ldr	r3, [pc, #16]	; (35c0 <round+0xa8>)
    35ae:	431c      	orrs	r4, r3
    35b0:	e7c7      	b.n	3542 <round+0x2a>
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	fffffc01 	.word	0xfffffc01
    35b8:	000fffff 	.word	0x000fffff
    35bc:	fffffbed 	.word	0xfffffbed
    35c0:	3ff00000 	.word	0x3ff00000

000035c4 <__udivsi3>:
    35c4:	2200      	movs	r2, #0
    35c6:	0843      	lsrs	r3, r0, #1
    35c8:	428b      	cmp	r3, r1
    35ca:	d374      	bcc.n	36b6 <__udivsi3+0xf2>
    35cc:	0903      	lsrs	r3, r0, #4
    35ce:	428b      	cmp	r3, r1
    35d0:	d35f      	bcc.n	3692 <__udivsi3+0xce>
    35d2:	0a03      	lsrs	r3, r0, #8
    35d4:	428b      	cmp	r3, r1
    35d6:	d344      	bcc.n	3662 <__udivsi3+0x9e>
    35d8:	0b03      	lsrs	r3, r0, #12
    35da:	428b      	cmp	r3, r1
    35dc:	d328      	bcc.n	3630 <__udivsi3+0x6c>
    35de:	0c03      	lsrs	r3, r0, #16
    35e0:	428b      	cmp	r3, r1
    35e2:	d30d      	bcc.n	3600 <__udivsi3+0x3c>
    35e4:	22ff      	movs	r2, #255	; 0xff
    35e6:	0209      	lsls	r1, r1, #8
    35e8:	ba12      	rev	r2, r2
    35ea:	0c03      	lsrs	r3, r0, #16
    35ec:	428b      	cmp	r3, r1
    35ee:	d302      	bcc.n	35f6 <__udivsi3+0x32>
    35f0:	1212      	asrs	r2, r2, #8
    35f2:	0209      	lsls	r1, r1, #8
    35f4:	d065      	beq.n	36c2 <__udivsi3+0xfe>
    35f6:	0b03      	lsrs	r3, r0, #12
    35f8:	428b      	cmp	r3, r1
    35fa:	d319      	bcc.n	3630 <__udivsi3+0x6c>
    35fc:	e000      	b.n	3600 <__udivsi3+0x3c>
    35fe:	0a09      	lsrs	r1, r1, #8
    3600:	0bc3      	lsrs	r3, r0, #15
    3602:	428b      	cmp	r3, r1
    3604:	d301      	bcc.n	360a <__udivsi3+0x46>
    3606:	03cb      	lsls	r3, r1, #15
    3608:	1ac0      	subs	r0, r0, r3
    360a:	4152      	adcs	r2, r2
    360c:	0b83      	lsrs	r3, r0, #14
    360e:	428b      	cmp	r3, r1
    3610:	d301      	bcc.n	3616 <__udivsi3+0x52>
    3612:	038b      	lsls	r3, r1, #14
    3614:	1ac0      	subs	r0, r0, r3
    3616:	4152      	adcs	r2, r2
    3618:	0b43      	lsrs	r3, r0, #13
    361a:	428b      	cmp	r3, r1
    361c:	d301      	bcc.n	3622 <__udivsi3+0x5e>
    361e:	034b      	lsls	r3, r1, #13
    3620:	1ac0      	subs	r0, r0, r3
    3622:	4152      	adcs	r2, r2
    3624:	0b03      	lsrs	r3, r0, #12
    3626:	428b      	cmp	r3, r1
    3628:	d301      	bcc.n	362e <__udivsi3+0x6a>
    362a:	030b      	lsls	r3, r1, #12
    362c:	1ac0      	subs	r0, r0, r3
    362e:	4152      	adcs	r2, r2
    3630:	0ac3      	lsrs	r3, r0, #11
    3632:	428b      	cmp	r3, r1
    3634:	d301      	bcc.n	363a <__udivsi3+0x76>
    3636:	02cb      	lsls	r3, r1, #11
    3638:	1ac0      	subs	r0, r0, r3
    363a:	4152      	adcs	r2, r2
    363c:	0a83      	lsrs	r3, r0, #10
    363e:	428b      	cmp	r3, r1
    3640:	d301      	bcc.n	3646 <__udivsi3+0x82>
    3642:	028b      	lsls	r3, r1, #10
    3644:	1ac0      	subs	r0, r0, r3
    3646:	4152      	adcs	r2, r2
    3648:	0a43      	lsrs	r3, r0, #9
    364a:	428b      	cmp	r3, r1
    364c:	d301      	bcc.n	3652 <__udivsi3+0x8e>
    364e:	024b      	lsls	r3, r1, #9
    3650:	1ac0      	subs	r0, r0, r3
    3652:	4152      	adcs	r2, r2
    3654:	0a03      	lsrs	r3, r0, #8
    3656:	428b      	cmp	r3, r1
    3658:	d301      	bcc.n	365e <__udivsi3+0x9a>
    365a:	020b      	lsls	r3, r1, #8
    365c:	1ac0      	subs	r0, r0, r3
    365e:	4152      	adcs	r2, r2
    3660:	d2cd      	bcs.n	35fe <__udivsi3+0x3a>
    3662:	09c3      	lsrs	r3, r0, #7
    3664:	428b      	cmp	r3, r1
    3666:	d301      	bcc.n	366c <__udivsi3+0xa8>
    3668:	01cb      	lsls	r3, r1, #7
    366a:	1ac0      	subs	r0, r0, r3
    366c:	4152      	adcs	r2, r2
    366e:	0983      	lsrs	r3, r0, #6
    3670:	428b      	cmp	r3, r1
    3672:	d301      	bcc.n	3678 <__udivsi3+0xb4>
    3674:	018b      	lsls	r3, r1, #6
    3676:	1ac0      	subs	r0, r0, r3
    3678:	4152      	adcs	r2, r2
    367a:	0943      	lsrs	r3, r0, #5
    367c:	428b      	cmp	r3, r1
    367e:	d301      	bcc.n	3684 <__udivsi3+0xc0>
    3680:	014b      	lsls	r3, r1, #5
    3682:	1ac0      	subs	r0, r0, r3
    3684:	4152      	adcs	r2, r2
    3686:	0903      	lsrs	r3, r0, #4
    3688:	428b      	cmp	r3, r1
    368a:	d301      	bcc.n	3690 <__udivsi3+0xcc>
    368c:	010b      	lsls	r3, r1, #4
    368e:	1ac0      	subs	r0, r0, r3
    3690:	4152      	adcs	r2, r2
    3692:	08c3      	lsrs	r3, r0, #3
    3694:	428b      	cmp	r3, r1
    3696:	d301      	bcc.n	369c <__udivsi3+0xd8>
    3698:	00cb      	lsls	r3, r1, #3
    369a:	1ac0      	subs	r0, r0, r3
    369c:	4152      	adcs	r2, r2
    369e:	0883      	lsrs	r3, r0, #2
    36a0:	428b      	cmp	r3, r1
    36a2:	d301      	bcc.n	36a8 <__udivsi3+0xe4>
    36a4:	008b      	lsls	r3, r1, #2
    36a6:	1ac0      	subs	r0, r0, r3
    36a8:	4152      	adcs	r2, r2
    36aa:	0843      	lsrs	r3, r0, #1
    36ac:	428b      	cmp	r3, r1
    36ae:	d301      	bcc.n	36b4 <__udivsi3+0xf0>
    36b0:	004b      	lsls	r3, r1, #1
    36b2:	1ac0      	subs	r0, r0, r3
    36b4:	4152      	adcs	r2, r2
    36b6:	1a41      	subs	r1, r0, r1
    36b8:	d200      	bcs.n	36bc <__udivsi3+0xf8>
    36ba:	4601      	mov	r1, r0
    36bc:	4152      	adcs	r2, r2
    36be:	4610      	mov	r0, r2
    36c0:	4770      	bx	lr
    36c2:	e7ff      	b.n	36c4 <__udivsi3+0x100>
    36c4:	b501      	push	{r0, lr}
    36c6:	2000      	movs	r0, #0
    36c8:	f000 f8f0 	bl	38ac <__aeabi_idiv0>
    36cc:	bd02      	pop	{r1, pc}
    36ce:	46c0      	nop			; (mov r8, r8)

000036d0 <__aeabi_uidivmod>:
    36d0:	2900      	cmp	r1, #0
    36d2:	d0f7      	beq.n	36c4 <__udivsi3+0x100>
    36d4:	e776      	b.n	35c4 <__udivsi3>
    36d6:	4770      	bx	lr

000036d8 <__divsi3>:
    36d8:	4603      	mov	r3, r0
    36da:	430b      	orrs	r3, r1
    36dc:	d47f      	bmi.n	37de <__divsi3+0x106>
    36de:	2200      	movs	r2, #0
    36e0:	0843      	lsrs	r3, r0, #1
    36e2:	428b      	cmp	r3, r1
    36e4:	d374      	bcc.n	37d0 <__divsi3+0xf8>
    36e6:	0903      	lsrs	r3, r0, #4
    36e8:	428b      	cmp	r3, r1
    36ea:	d35f      	bcc.n	37ac <__divsi3+0xd4>
    36ec:	0a03      	lsrs	r3, r0, #8
    36ee:	428b      	cmp	r3, r1
    36f0:	d344      	bcc.n	377c <__divsi3+0xa4>
    36f2:	0b03      	lsrs	r3, r0, #12
    36f4:	428b      	cmp	r3, r1
    36f6:	d328      	bcc.n	374a <__divsi3+0x72>
    36f8:	0c03      	lsrs	r3, r0, #16
    36fa:	428b      	cmp	r3, r1
    36fc:	d30d      	bcc.n	371a <__divsi3+0x42>
    36fe:	22ff      	movs	r2, #255	; 0xff
    3700:	0209      	lsls	r1, r1, #8
    3702:	ba12      	rev	r2, r2
    3704:	0c03      	lsrs	r3, r0, #16
    3706:	428b      	cmp	r3, r1
    3708:	d302      	bcc.n	3710 <__divsi3+0x38>
    370a:	1212      	asrs	r2, r2, #8
    370c:	0209      	lsls	r1, r1, #8
    370e:	d065      	beq.n	37dc <__divsi3+0x104>
    3710:	0b03      	lsrs	r3, r0, #12
    3712:	428b      	cmp	r3, r1
    3714:	d319      	bcc.n	374a <__divsi3+0x72>
    3716:	e000      	b.n	371a <__divsi3+0x42>
    3718:	0a09      	lsrs	r1, r1, #8
    371a:	0bc3      	lsrs	r3, r0, #15
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__divsi3+0x4c>
    3720:	03cb      	lsls	r3, r1, #15
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	0b83      	lsrs	r3, r0, #14
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__divsi3+0x58>
    372c:	038b      	lsls	r3, r1, #14
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0b43      	lsrs	r3, r0, #13
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__divsi3+0x64>
    3738:	034b      	lsls	r3, r1, #13
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	0b03      	lsrs	r3, r0, #12
    3740:	428b      	cmp	r3, r1
    3742:	d301      	bcc.n	3748 <__divsi3+0x70>
    3744:	030b      	lsls	r3, r1, #12
    3746:	1ac0      	subs	r0, r0, r3
    3748:	4152      	adcs	r2, r2
    374a:	0ac3      	lsrs	r3, r0, #11
    374c:	428b      	cmp	r3, r1
    374e:	d301      	bcc.n	3754 <__divsi3+0x7c>
    3750:	02cb      	lsls	r3, r1, #11
    3752:	1ac0      	subs	r0, r0, r3
    3754:	4152      	adcs	r2, r2
    3756:	0a83      	lsrs	r3, r0, #10
    3758:	428b      	cmp	r3, r1
    375a:	d301      	bcc.n	3760 <__divsi3+0x88>
    375c:	028b      	lsls	r3, r1, #10
    375e:	1ac0      	subs	r0, r0, r3
    3760:	4152      	adcs	r2, r2
    3762:	0a43      	lsrs	r3, r0, #9
    3764:	428b      	cmp	r3, r1
    3766:	d301      	bcc.n	376c <__divsi3+0x94>
    3768:	024b      	lsls	r3, r1, #9
    376a:	1ac0      	subs	r0, r0, r3
    376c:	4152      	adcs	r2, r2
    376e:	0a03      	lsrs	r3, r0, #8
    3770:	428b      	cmp	r3, r1
    3772:	d301      	bcc.n	3778 <__divsi3+0xa0>
    3774:	020b      	lsls	r3, r1, #8
    3776:	1ac0      	subs	r0, r0, r3
    3778:	4152      	adcs	r2, r2
    377a:	d2cd      	bcs.n	3718 <__divsi3+0x40>
    377c:	09c3      	lsrs	r3, r0, #7
    377e:	428b      	cmp	r3, r1
    3780:	d301      	bcc.n	3786 <__divsi3+0xae>
    3782:	01cb      	lsls	r3, r1, #7
    3784:	1ac0      	subs	r0, r0, r3
    3786:	4152      	adcs	r2, r2
    3788:	0983      	lsrs	r3, r0, #6
    378a:	428b      	cmp	r3, r1
    378c:	d301      	bcc.n	3792 <__divsi3+0xba>
    378e:	018b      	lsls	r3, r1, #6
    3790:	1ac0      	subs	r0, r0, r3
    3792:	4152      	adcs	r2, r2
    3794:	0943      	lsrs	r3, r0, #5
    3796:	428b      	cmp	r3, r1
    3798:	d301      	bcc.n	379e <__divsi3+0xc6>
    379a:	014b      	lsls	r3, r1, #5
    379c:	1ac0      	subs	r0, r0, r3
    379e:	4152      	adcs	r2, r2
    37a0:	0903      	lsrs	r3, r0, #4
    37a2:	428b      	cmp	r3, r1
    37a4:	d301      	bcc.n	37aa <__divsi3+0xd2>
    37a6:	010b      	lsls	r3, r1, #4
    37a8:	1ac0      	subs	r0, r0, r3
    37aa:	4152      	adcs	r2, r2
    37ac:	08c3      	lsrs	r3, r0, #3
    37ae:	428b      	cmp	r3, r1
    37b0:	d301      	bcc.n	37b6 <__divsi3+0xde>
    37b2:	00cb      	lsls	r3, r1, #3
    37b4:	1ac0      	subs	r0, r0, r3
    37b6:	4152      	adcs	r2, r2
    37b8:	0883      	lsrs	r3, r0, #2
    37ba:	428b      	cmp	r3, r1
    37bc:	d301      	bcc.n	37c2 <__divsi3+0xea>
    37be:	008b      	lsls	r3, r1, #2
    37c0:	1ac0      	subs	r0, r0, r3
    37c2:	4152      	adcs	r2, r2
    37c4:	0843      	lsrs	r3, r0, #1
    37c6:	428b      	cmp	r3, r1
    37c8:	d301      	bcc.n	37ce <__divsi3+0xf6>
    37ca:	004b      	lsls	r3, r1, #1
    37cc:	1ac0      	subs	r0, r0, r3
    37ce:	4152      	adcs	r2, r2
    37d0:	1a41      	subs	r1, r0, r1
    37d2:	d200      	bcs.n	37d6 <__divsi3+0xfe>
    37d4:	4601      	mov	r1, r0
    37d6:	4152      	adcs	r2, r2
    37d8:	4610      	mov	r0, r2
    37da:	4770      	bx	lr
    37dc:	e05d      	b.n	389a <__divsi3+0x1c2>
    37de:	0fca      	lsrs	r2, r1, #31
    37e0:	d000      	beq.n	37e4 <__divsi3+0x10c>
    37e2:	4249      	negs	r1, r1
    37e4:	1003      	asrs	r3, r0, #32
    37e6:	d300      	bcc.n	37ea <__divsi3+0x112>
    37e8:	4240      	negs	r0, r0
    37ea:	4053      	eors	r3, r2
    37ec:	2200      	movs	r2, #0
    37ee:	469c      	mov	ip, r3
    37f0:	0903      	lsrs	r3, r0, #4
    37f2:	428b      	cmp	r3, r1
    37f4:	d32d      	bcc.n	3852 <__divsi3+0x17a>
    37f6:	0a03      	lsrs	r3, r0, #8
    37f8:	428b      	cmp	r3, r1
    37fa:	d312      	bcc.n	3822 <__divsi3+0x14a>
    37fc:	22fc      	movs	r2, #252	; 0xfc
    37fe:	0189      	lsls	r1, r1, #6
    3800:	ba12      	rev	r2, r2
    3802:	0a03      	lsrs	r3, r0, #8
    3804:	428b      	cmp	r3, r1
    3806:	d30c      	bcc.n	3822 <__divsi3+0x14a>
    3808:	0189      	lsls	r1, r1, #6
    380a:	1192      	asrs	r2, r2, #6
    380c:	428b      	cmp	r3, r1
    380e:	d308      	bcc.n	3822 <__divsi3+0x14a>
    3810:	0189      	lsls	r1, r1, #6
    3812:	1192      	asrs	r2, r2, #6
    3814:	428b      	cmp	r3, r1
    3816:	d304      	bcc.n	3822 <__divsi3+0x14a>
    3818:	0189      	lsls	r1, r1, #6
    381a:	d03a      	beq.n	3892 <__divsi3+0x1ba>
    381c:	1192      	asrs	r2, r2, #6
    381e:	e000      	b.n	3822 <__divsi3+0x14a>
    3820:	0989      	lsrs	r1, r1, #6
    3822:	09c3      	lsrs	r3, r0, #7
    3824:	428b      	cmp	r3, r1
    3826:	d301      	bcc.n	382c <__divsi3+0x154>
    3828:	01cb      	lsls	r3, r1, #7
    382a:	1ac0      	subs	r0, r0, r3
    382c:	4152      	adcs	r2, r2
    382e:	0983      	lsrs	r3, r0, #6
    3830:	428b      	cmp	r3, r1
    3832:	d301      	bcc.n	3838 <__divsi3+0x160>
    3834:	018b      	lsls	r3, r1, #6
    3836:	1ac0      	subs	r0, r0, r3
    3838:	4152      	adcs	r2, r2
    383a:	0943      	lsrs	r3, r0, #5
    383c:	428b      	cmp	r3, r1
    383e:	d301      	bcc.n	3844 <__divsi3+0x16c>
    3840:	014b      	lsls	r3, r1, #5
    3842:	1ac0      	subs	r0, r0, r3
    3844:	4152      	adcs	r2, r2
    3846:	0903      	lsrs	r3, r0, #4
    3848:	428b      	cmp	r3, r1
    384a:	d301      	bcc.n	3850 <__divsi3+0x178>
    384c:	010b      	lsls	r3, r1, #4
    384e:	1ac0      	subs	r0, r0, r3
    3850:	4152      	adcs	r2, r2
    3852:	08c3      	lsrs	r3, r0, #3
    3854:	428b      	cmp	r3, r1
    3856:	d301      	bcc.n	385c <__divsi3+0x184>
    3858:	00cb      	lsls	r3, r1, #3
    385a:	1ac0      	subs	r0, r0, r3
    385c:	4152      	adcs	r2, r2
    385e:	0883      	lsrs	r3, r0, #2
    3860:	428b      	cmp	r3, r1
    3862:	d301      	bcc.n	3868 <__divsi3+0x190>
    3864:	008b      	lsls	r3, r1, #2
    3866:	1ac0      	subs	r0, r0, r3
    3868:	4152      	adcs	r2, r2
    386a:	d2d9      	bcs.n	3820 <__divsi3+0x148>
    386c:	0843      	lsrs	r3, r0, #1
    386e:	428b      	cmp	r3, r1
    3870:	d301      	bcc.n	3876 <__divsi3+0x19e>
    3872:	004b      	lsls	r3, r1, #1
    3874:	1ac0      	subs	r0, r0, r3
    3876:	4152      	adcs	r2, r2
    3878:	1a41      	subs	r1, r0, r1
    387a:	d200      	bcs.n	387e <__divsi3+0x1a6>
    387c:	4601      	mov	r1, r0
    387e:	4663      	mov	r3, ip
    3880:	4152      	adcs	r2, r2
    3882:	105b      	asrs	r3, r3, #1
    3884:	4610      	mov	r0, r2
    3886:	d301      	bcc.n	388c <__divsi3+0x1b4>
    3888:	4240      	negs	r0, r0
    388a:	2b00      	cmp	r3, #0
    388c:	d500      	bpl.n	3890 <__divsi3+0x1b8>
    388e:	4249      	negs	r1, r1
    3890:	4770      	bx	lr
    3892:	4663      	mov	r3, ip
    3894:	105b      	asrs	r3, r3, #1
    3896:	d300      	bcc.n	389a <__divsi3+0x1c2>
    3898:	4240      	negs	r0, r0
    389a:	b501      	push	{r0, lr}
    389c:	2000      	movs	r0, #0
    389e:	f000 f805 	bl	38ac <__aeabi_idiv0>
    38a2:	bd02      	pop	{r1, pc}

000038a4 <__aeabi_idivmod>:
    38a4:	2900      	cmp	r1, #0
    38a6:	d0f8      	beq.n	389a <__divsi3+0x1c2>
    38a8:	e716      	b.n	36d8 <__divsi3>
    38aa:	4770      	bx	lr

000038ac <__aeabi_idiv0>:
    38ac:	4770      	bx	lr
    38ae:	46c0      	nop			; (mov r8, r8)

000038b0 <__aeabi_ldivmod>:
    38b0:	2b00      	cmp	r3, #0
    38b2:	d115      	bne.n	38e0 <__aeabi_ldivmod+0x30>
    38b4:	2a00      	cmp	r2, #0
    38b6:	d113      	bne.n	38e0 <__aeabi_ldivmod+0x30>
    38b8:	2900      	cmp	r1, #0
    38ba:	db06      	blt.n	38ca <__aeabi_ldivmod+0x1a>
    38bc:	dc01      	bgt.n	38c2 <__aeabi_ldivmod+0x12>
    38be:	2800      	cmp	r0, #0
    38c0:	d006      	beq.n	38d0 <__aeabi_ldivmod+0x20>
    38c2:	2000      	movs	r0, #0
    38c4:	43c0      	mvns	r0, r0
    38c6:	0841      	lsrs	r1, r0, #1
    38c8:	e002      	b.n	38d0 <__aeabi_ldivmod+0x20>
    38ca:	2180      	movs	r1, #128	; 0x80
    38cc:	0609      	lsls	r1, r1, #24
    38ce:	2000      	movs	r0, #0
    38d0:	b407      	push	{r0, r1, r2}
    38d2:	4802      	ldr	r0, [pc, #8]	; (38dc <__aeabi_ldivmod+0x2c>)
    38d4:	a101      	add	r1, pc, #4	; (adr r1, 38dc <__aeabi_ldivmod+0x2c>)
    38d6:	1840      	adds	r0, r0, r1
    38d8:	9002      	str	r0, [sp, #8]
    38da:	bd03      	pop	{r0, r1, pc}
    38dc:	ffffffd1 	.word	0xffffffd1
    38e0:	b403      	push	{r0, r1}
    38e2:	4668      	mov	r0, sp
    38e4:	b501      	push	{r0, lr}
    38e6:	9802      	ldr	r0, [sp, #8]
    38e8:	f000 f852 	bl	3990 <__gnu_ldivmod_helper>
    38ec:	9b01      	ldr	r3, [sp, #4]
    38ee:	469e      	mov	lr, r3
    38f0:	b002      	add	sp, #8
    38f2:	bc0c      	pop	{r2, r3}
    38f4:	4770      	bx	lr
    38f6:	46c0      	nop			; (mov r8, r8)

000038f8 <__aeabi_lmul>:
    38f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38fa:	46ce      	mov	lr, r9
    38fc:	4647      	mov	r7, r8
    38fe:	0415      	lsls	r5, r2, #16
    3900:	0c2d      	lsrs	r5, r5, #16
    3902:	002e      	movs	r6, r5
    3904:	b580      	push	{r7, lr}
    3906:	0407      	lsls	r7, r0, #16
    3908:	0c14      	lsrs	r4, r2, #16
    390a:	0c3f      	lsrs	r7, r7, #16
    390c:	4699      	mov	r9, r3
    390e:	0c03      	lsrs	r3, r0, #16
    3910:	437e      	muls	r6, r7
    3912:	435d      	muls	r5, r3
    3914:	4367      	muls	r7, r4
    3916:	4363      	muls	r3, r4
    3918:	197f      	adds	r7, r7, r5
    391a:	0c34      	lsrs	r4, r6, #16
    391c:	19e4      	adds	r4, r4, r7
    391e:	469c      	mov	ip, r3
    3920:	42a5      	cmp	r5, r4
    3922:	d903      	bls.n	392c <__aeabi_lmul+0x34>
    3924:	2380      	movs	r3, #128	; 0x80
    3926:	025b      	lsls	r3, r3, #9
    3928:	4698      	mov	r8, r3
    392a:	44c4      	add	ip, r8
    392c:	464b      	mov	r3, r9
    392e:	4351      	muls	r1, r2
    3930:	4343      	muls	r3, r0
    3932:	0436      	lsls	r6, r6, #16
    3934:	0c36      	lsrs	r6, r6, #16
    3936:	0c25      	lsrs	r5, r4, #16
    3938:	0424      	lsls	r4, r4, #16
    393a:	4465      	add	r5, ip
    393c:	19a4      	adds	r4, r4, r6
    393e:	1859      	adds	r1, r3, r1
    3940:	1949      	adds	r1, r1, r5
    3942:	0020      	movs	r0, r4
    3944:	bc0c      	pop	{r2, r3}
    3946:	4690      	mov	r8, r2
    3948:	4699      	mov	r9, r3
    394a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000394c <__ffssi2>:
    394c:	b510      	push	{r4, lr}
    394e:	2300      	movs	r3, #0
    3950:	2800      	cmp	r0, #0
    3952:	d002      	beq.n	395a <__ffssi2+0xe>
    3954:	f001 fd34 	bl	53c0 <__ctzsi2>
    3958:	1c43      	adds	r3, r0, #1
    395a:	0018      	movs	r0, r3
    395c:	bd10      	pop	{r4, pc}
    395e:	46c0      	nop			; (mov r8, r8)

00003960 <__aeabi_f2uiz>:
    3960:	219e      	movs	r1, #158	; 0x9e
    3962:	b510      	push	{r4, lr}
    3964:	05c9      	lsls	r1, r1, #23
    3966:	1c04      	adds	r4, r0, #0
    3968:	f001 fd02 	bl	5370 <__aeabi_fcmpge>
    396c:	2800      	cmp	r0, #0
    396e:	d103      	bne.n	3978 <__aeabi_f2uiz+0x18>
    3970:	1c20      	adds	r0, r4, #0
    3972:	f000 fae5 	bl	3f40 <__aeabi_f2iz>
    3976:	bd10      	pop	{r4, pc}
    3978:	219e      	movs	r1, #158	; 0x9e
    397a:	1c20      	adds	r0, r4, #0
    397c:	05c9      	lsls	r1, r1, #23
    397e:	f000 f943 	bl	3c08 <__aeabi_fsub>
    3982:	f000 fadd 	bl	3f40 <__aeabi_f2iz>
    3986:	2380      	movs	r3, #128	; 0x80
    3988:	061b      	lsls	r3, r3, #24
    398a:	469c      	mov	ip, r3
    398c:	4460      	add	r0, ip
    398e:	e7f2      	b.n	3976 <__aeabi_f2uiz+0x16>

00003990 <__gnu_ldivmod_helper>:
    3990:	b5f0      	push	{r4, r5, r6, r7, lr}
    3992:	b083      	sub	sp, #12
    3994:	0016      	movs	r6, r2
    3996:	001f      	movs	r7, r3
    3998:	9000      	str	r0, [sp, #0]
    399a:	9101      	str	r1, [sp, #4]
    399c:	f001 fd30 	bl	5400 <__divdi3>
    39a0:	0004      	movs	r4, r0
    39a2:	000d      	movs	r5, r1
    39a4:	0002      	movs	r2, r0
    39a6:	000b      	movs	r3, r1
    39a8:	0030      	movs	r0, r6
    39aa:	0039      	movs	r1, r7
    39ac:	f7ff ffa4 	bl	38f8 <__aeabi_lmul>
    39b0:	9a00      	ldr	r2, [sp, #0]
    39b2:	9b01      	ldr	r3, [sp, #4]
    39b4:	1a12      	subs	r2, r2, r0
    39b6:	418b      	sbcs	r3, r1
    39b8:	9908      	ldr	r1, [sp, #32]
    39ba:	0020      	movs	r0, r4
    39bc:	600a      	str	r2, [r1, #0]
    39be:	604b      	str	r3, [r1, #4]
    39c0:	0029      	movs	r1, r5
    39c2:	b003      	add	sp, #12
    39c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39c6:	46c0      	nop			; (mov r8, r8)

000039c8 <__aeabi_fmul>:
    39c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ca:	4657      	mov	r7, sl
    39cc:	464e      	mov	r6, r9
    39ce:	4645      	mov	r5, r8
    39d0:	46de      	mov	lr, fp
    39d2:	b5e0      	push	{r5, r6, r7, lr}
    39d4:	0247      	lsls	r7, r0, #9
    39d6:	0046      	lsls	r6, r0, #1
    39d8:	4688      	mov	r8, r1
    39da:	0a7f      	lsrs	r7, r7, #9
    39dc:	0e36      	lsrs	r6, r6, #24
    39de:	0fc4      	lsrs	r4, r0, #31
    39e0:	2e00      	cmp	r6, #0
    39e2:	d047      	beq.n	3a74 <__aeabi_fmul+0xac>
    39e4:	2eff      	cmp	r6, #255	; 0xff
    39e6:	d024      	beq.n	3a32 <__aeabi_fmul+0x6a>
    39e8:	00fb      	lsls	r3, r7, #3
    39ea:	2780      	movs	r7, #128	; 0x80
    39ec:	04ff      	lsls	r7, r7, #19
    39ee:	431f      	orrs	r7, r3
    39f0:	2300      	movs	r3, #0
    39f2:	4699      	mov	r9, r3
    39f4:	469a      	mov	sl, r3
    39f6:	3e7f      	subs	r6, #127	; 0x7f
    39f8:	4643      	mov	r3, r8
    39fa:	025d      	lsls	r5, r3, #9
    39fc:	0058      	lsls	r0, r3, #1
    39fe:	0fdb      	lsrs	r3, r3, #31
    3a00:	0a6d      	lsrs	r5, r5, #9
    3a02:	0e00      	lsrs	r0, r0, #24
    3a04:	4698      	mov	r8, r3
    3a06:	d043      	beq.n	3a90 <__aeabi_fmul+0xc8>
    3a08:	28ff      	cmp	r0, #255	; 0xff
    3a0a:	d03b      	beq.n	3a84 <__aeabi_fmul+0xbc>
    3a0c:	00eb      	lsls	r3, r5, #3
    3a0e:	2580      	movs	r5, #128	; 0x80
    3a10:	2200      	movs	r2, #0
    3a12:	04ed      	lsls	r5, r5, #19
    3a14:	431d      	orrs	r5, r3
    3a16:	387f      	subs	r0, #127	; 0x7f
    3a18:	1836      	adds	r6, r6, r0
    3a1a:	1c73      	adds	r3, r6, #1
    3a1c:	4641      	mov	r1, r8
    3a1e:	469b      	mov	fp, r3
    3a20:	464b      	mov	r3, r9
    3a22:	4061      	eors	r1, r4
    3a24:	4313      	orrs	r3, r2
    3a26:	2b0f      	cmp	r3, #15
    3a28:	d864      	bhi.n	3af4 <__aeabi_fmul+0x12c>
    3a2a:	4875      	ldr	r0, [pc, #468]	; (3c00 <__aeabi_fmul+0x238>)
    3a2c:	009b      	lsls	r3, r3, #2
    3a2e:	58c3      	ldr	r3, [r0, r3]
    3a30:	469f      	mov	pc, r3
    3a32:	2f00      	cmp	r7, #0
    3a34:	d142      	bne.n	3abc <__aeabi_fmul+0xf4>
    3a36:	2308      	movs	r3, #8
    3a38:	4699      	mov	r9, r3
    3a3a:	3b06      	subs	r3, #6
    3a3c:	26ff      	movs	r6, #255	; 0xff
    3a3e:	469a      	mov	sl, r3
    3a40:	e7da      	b.n	39f8 <__aeabi_fmul+0x30>
    3a42:	4641      	mov	r1, r8
    3a44:	2a02      	cmp	r2, #2
    3a46:	d028      	beq.n	3a9a <__aeabi_fmul+0xd2>
    3a48:	2a03      	cmp	r2, #3
    3a4a:	d100      	bne.n	3a4e <__aeabi_fmul+0x86>
    3a4c:	e0ce      	b.n	3bec <__aeabi_fmul+0x224>
    3a4e:	2a01      	cmp	r2, #1
    3a50:	d000      	beq.n	3a54 <__aeabi_fmul+0x8c>
    3a52:	e0ac      	b.n	3bae <__aeabi_fmul+0x1e6>
    3a54:	4011      	ands	r1, r2
    3a56:	2000      	movs	r0, #0
    3a58:	2200      	movs	r2, #0
    3a5a:	b2cc      	uxtb	r4, r1
    3a5c:	0240      	lsls	r0, r0, #9
    3a5e:	05d2      	lsls	r2, r2, #23
    3a60:	0a40      	lsrs	r0, r0, #9
    3a62:	07e4      	lsls	r4, r4, #31
    3a64:	4310      	orrs	r0, r2
    3a66:	4320      	orrs	r0, r4
    3a68:	bc3c      	pop	{r2, r3, r4, r5}
    3a6a:	4690      	mov	r8, r2
    3a6c:	4699      	mov	r9, r3
    3a6e:	46a2      	mov	sl, r4
    3a70:	46ab      	mov	fp, r5
    3a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a74:	2f00      	cmp	r7, #0
    3a76:	d115      	bne.n	3aa4 <__aeabi_fmul+0xdc>
    3a78:	2304      	movs	r3, #4
    3a7a:	4699      	mov	r9, r3
    3a7c:	3b03      	subs	r3, #3
    3a7e:	2600      	movs	r6, #0
    3a80:	469a      	mov	sl, r3
    3a82:	e7b9      	b.n	39f8 <__aeabi_fmul+0x30>
    3a84:	20ff      	movs	r0, #255	; 0xff
    3a86:	2202      	movs	r2, #2
    3a88:	2d00      	cmp	r5, #0
    3a8a:	d0c5      	beq.n	3a18 <__aeabi_fmul+0x50>
    3a8c:	2203      	movs	r2, #3
    3a8e:	e7c3      	b.n	3a18 <__aeabi_fmul+0x50>
    3a90:	2d00      	cmp	r5, #0
    3a92:	d119      	bne.n	3ac8 <__aeabi_fmul+0x100>
    3a94:	2000      	movs	r0, #0
    3a96:	2201      	movs	r2, #1
    3a98:	e7be      	b.n	3a18 <__aeabi_fmul+0x50>
    3a9a:	2401      	movs	r4, #1
    3a9c:	22ff      	movs	r2, #255	; 0xff
    3a9e:	400c      	ands	r4, r1
    3aa0:	2000      	movs	r0, #0
    3aa2:	e7db      	b.n	3a5c <__aeabi_fmul+0x94>
    3aa4:	0038      	movs	r0, r7
    3aa6:	f001 fc6d 	bl	5384 <__clzsi2>
    3aaa:	2676      	movs	r6, #118	; 0x76
    3aac:	1f43      	subs	r3, r0, #5
    3aae:	409f      	lsls	r7, r3
    3ab0:	2300      	movs	r3, #0
    3ab2:	4276      	negs	r6, r6
    3ab4:	1a36      	subs	r6, r6, r0
    3ab6:	4699      	mov	r9, r3
    3ab8:	469a      	mov	sl, r3
    3aba:	e79d      	b.n	39f8 <__aeabi_fmul+0x30>
    3abc:	230c      	movs	r3, #12
    3abe:	4699      	mov	r9, r3
    3ac0:	3b09      	subs	r3, #9
    3ac2:	26ff      	movs	r6, #255	; 0xff
    3ac4:	469a      	mov	sl, r3
    3ac6:	e797      	b.n	39f8 <__aeabi_fmul+0x30>
    3ac8:	0028      	movs	r0, r5
    3aca:	f001 fc5b 	bl	5384 <__clzsi2>
    3ace:	1f43      	subs	r3, r0, #5
    3ad0:	409d      	lsls	r5, r3
    3ad2:	2376      	movs	r3, #118	; 0x76
    3ad4:	425b      	negs	r3, r3
    3ad6:	1a18      	subs	r0, r3, r0
    3ad8:	2200      	movs	r2, #0
    3ada:	e79d      	b.n	3a18 <__aeabi_fmul+0x50>
    3adc:	2080      	movs	r0, #128	; 0x80
    3ade:	2400      	movs	r4, #0
    3ae0:	03c0      	lsls	r0, r0, #15
    3ae2:	22ff      	movs	r2, #255	; 0xff
    3ae4:	e7ba      	b.n	3a5c <__aeabi_fmul+0x94>
    3ae6:	003d      	movs	r5, r7
    3ae8:	4652      	mov	r2, sl
    3aea:	e7ab      	b.n	3a44 <__aeabi_fmul+0x7c>
    3aec:	003d      	movs	r5, r7
    3aee:	0021      	movs	r1, r4
    3af0:	4652      	mov	r2, sl
    3af2:	e7a7      	b.n	3a44 <__aeabi_fmul+0x7c>
    3af4:	0c3b      	lsrs	r3, r7, #16
    3af6:	469c      	mov	ip, r3
    3af8:	042a      	lsls	r2, r5, #16
    3afa:	0c12      	lsrs	r2, r2, #16
    3afc:	0c2b      	lsrs	r3, r5, #16
    3afe:	0014      	movs	r4, r2
    3b00:	4660      	mov	r0, ip
    3b02:	4665      	mov	r5, ip
    3b04:	043f      	lsls	r7, r7, #16
    3b06:	0c3f      	lsrs	r7, r7, #16
    3b08:	437c      	muls	r4, r7
    3b0a:	4342      	muls	r2, r0
    3b0c:	435d      	muls	r5, r3
    3b0e:	437b      	muls	r3, r7
    3b10:	0c27      	lsrs	r7, r4, #16
    3b12:	189b      	adds	r3, r3, r2
    3b14:	18ff      	adds	r7, r7, r3
    3b16:	42ba      	cmp	r2, r7
    3b18:	d903      	bls.n	3b22 <__aeabi_fmul+0x15a>
    3b1a:	2380      	movs	r3, #128	; 0x80
    3b1c:	025b      	lsls	r3, r3, #9
    3b1e:	469c      	mov	ip, r3
    3b20:	4465      	add	r5, ip
    3b22:	0424      	lsls	r4, r4, #16
    3b24:	043a      	lsls	r2, r7, #16
    3b26:	0c24      	lsrs	r4, r4, #16
    3b28:	1912      	adds	r2, r2, r4
    3b2a:	0193      	lsls	r3, r2, #6
    3b2c:	1e5c      	subs	r4, r3, #1
    3b2e:	41a3      	sbcs	r3, r4
    3b30:	0c3f      	lsrs	r7, r7, #16
    3b32:	0e92      	lsrs	r2, r2, #26
    3b34:	197d      	adds	r5, r7, r5
    3b36:	431a      	orrs	r2, r3
    3b38:	01ad      	lsls	r5, r5, #6
    3b3a:	4315      	orrs	r5, r2
    3b3c:	012b      	lsls	r3, r5, #4
    3b3e:	d504      	bpl.n	3b4a <__aeabi_fmul+0x182>
    3b40:	2301      	movs	r3, #1
    3b42:	465e      	mov	r6, fp
    3b44:	086a      	lsrs	r2, r5, #1
    3b46:	401d      	ands	r5, r3
    3b48:	4315      	orrs	r5, r2
    3b4a:	0032      	movs	r2, r6
    3b4c:	327f      	adds	r2, #127	; 0x7f
    3b4e:	2a00      	cmp	r2, #0
    3b50:	dd25      	ble.n	3b9e <__aeabi_fmul+0x1d6>
    3b52:	076b      	lsls	r3, r5, #29
    3b54:	d004      	beq.n	3b60 <__aeabi_fmul+0x198>
    3b56:	230f      	movs	r3, #15
    3b58:	402b      	ands	r3, r5
    3b5a:	2b04      	cmp	r3, #4
    3b5c:	d000      	beq.n	3b60 <__aeabi_fmul+0x198>
    3b5e:	3504      	adds	r5, #4
    3b60:	012b      	lsls	r3, r5, #4
    3b62:	d503      	bpl.n	3b6c <__aeabi_fmul+0x1a4>
    3b64:	0032      	movs	r2, r6
    3b66:	4b27      	ldr	r3, [pc, #156]	; (3c04 <__aeabi_fmul+0x23c>)
    3b68:	3280      	adds	r2, #128	; 0x80
    3b6a:	401d      	ands	r5, r3
    3b6c:	2afe      	cmp	r2, #254	; 0xfe
    3b6e:	dc94      	bgt.n	3a9a <__aeabi_fmul+0xd2>
    3b70:	2401      	movs	r4, #1
    3b72:	01a8      	lsls	r0, r5, #6
    3b74:	0a40      	lsrs	r0, r0, #9
    3b76:	b2d2      	uxtb	r2, r2
    3b78:	400c      	ands	r4, r1
    3b7a:	e76f      	b.n	3a5c <__aeabi_fmul+0x94>
    3b7c:	2080      	movs	r0, #128	; 0x80
    3b7e:	03c0      	lsls	r0, r0, #15
    3b80:	4207      	tst	r7, r0
    3b82:	d007      	beq.n	3b94 <__aeabi_fmul+0x1cc>
    3b84:	4205      	tst	r5, r0
    3b86:	d105      	bne.n	3b94 <__aeabi_fmul+0x1cc>
    3b88:	4328      	orrs	r0, r5
    3b8a:	0240      	lsls	r0, r0, #9
    3b8c:	0a40      	lsrs	r0, r0, #9
    3b8e:	4644      	mov	r4, r8
    3b90:	22ff      	movs	r2, #255	; 0xff
    3b92:	e763      	b.n	3a5c <__aeabi_fmul+0x94>
    3b94:	4338      	orrs	r0, r7
    3b96:	0240      	lsls	r0, r0, #9
    3b98:	0a40      	lsrs	r0, r0, #9
    3b9a:	22ff      	movs	r2, #255	; 0xff
    3b9c:	e75e      	b.n	3a5c <__aeabi_fmul+0x94>
    3b9e:	2401      	movs	r4, #1
    3ba0:	1aa3      	subs	r3, r4, r2
    3ba2:	2b1b      	cmp	r3, #27
    3ba4:	dd05      	ble.n	3bb2 <__aeabi_fmul+0x1ea>
    3ba6:	400c      	ands	r4, r1
    3ba8:	2200      	movs	r2, #0
    3baa:	2000      	movs	r0, #0
    3bac:	e756      	b.n	3a5c <__aeabi_fmul+0x94>
    3bae:	465e      	mov	r6, fp
    3bb0:	e7cb      	b.n	3b4a <__aeabi_fmul+0x182>
    3bb2:	002a      	movs	r2, r5
    3bb4:	2020      	movs	r0, #32
    3bb6:	40da      	lsrs	r2, r3
    3bb8:	1ac3      	subs	r3, r0, r3
    3bba:	409d      	lsls	r5, r3
    3bbc:	002b      	movs	r3, r5
    3bbe:	1e5d      	subs	r5, r3, #1
    3bc0:	41ab      	sbcs	r3, r5
    3bc2:	4313      	orrs	r3, r2
    3bc4:	075a      	lsls	r2, r3, #29
    3bc6:	d004      	beq.n	3bd2 <__aeabi_fmul+0x20a>
    3bc8:	220f      	movs	r2, #15
    3bca:	401a      	ands	r2, r3
    3bcc:	2a04      	cmp	r2, #4
    3bce:	d000      	beq.n	3bd2 <__aeabi_fmul+0x20a>
    3bd0:	3304      	adds	r3, #4
    3bd2:	015a      	lsls	r2, r3, #5
    3bd4:	d504      	bpl.n	3be0 <__aeabi_fmul+0x218>
    3bd6:	2401      	movs	r4, #1
    3bd8:	2201      	movs	r2, #1
    3bda:	400c      	ands	r4, r1
    3bdc:	2000      	movs	r0, #0
    3bde:	e73d      	b.n	3a5c <__aeabi_fmul+0x94>
    3be0:	2401      	movs	r4, #1
    3be2:	019b      	lsls	r3, r3, #6
    3be4:	0a58      	lsrs	r0, r3, #9
    3be6:	400c      	ands	r4, r1
    3be8:	2200      	movs	r2, #0
    3bea:	e737      	b.n	3a5c <__aeabi_fmul+0x94>
    3bec:	2080      	movs	r0, #128	; 0x80
    3bee:	2401      	movs	r4, #1
    3bf0:	03c0      	lsls	r0, r0, #15
    3bf2:	4328      	orrs	r0, r5
    3bf4:	0240      	lsls	r0, r0, #9
    3bf6:	0a40      	lsrs	r0, r0, #9
    3bf8:	400c      	ands	r4, r1
    3bfa:	22ff      	movs	r2, #255	; 0xff
    3bfc:	e72e      	b.n	3a5c <__aeabi_fmul+0x94>
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	000059ac 	.word	0x000059ac
    3c04:	f7ffffff 	.word	0xf7ffffff

00003c08 <__aeabi_fsub>:
    3c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0a:	464f      	mov	r7, r9
    3c0c:	46d6      	mov	lr, sl
    3c0e:	4646      	mov	r6, r8
    3c10:	0044      	lsls	r4, r0, #1
    3c12:	b5c0      	push	{r6, r7, lr}
    3c14:	0fc2      	lsrs	r2, r0, #31
    3c16:	0247      	lsls	r7, r0, #9
    3c18:	0248      	lsls	r0, r1, #9
    3c1a:	0a40      	lsrs	r0, r0, #9
    3c1c:	4684      	mov	ip, r0
    3c1e:	4666      	mov	r6, ip
    3c20:	0a7b      	lsrs	r3, r7, #9
    3c22:	0048      	lsls	r0, r1, #1
    3c24:	0fc9      	lsrs	r1, r1, #31
    3c26:	469a      	mov	sl, r3
    3c28:	0e24      	lsrs	r4, r4, #24
    3c2a:	0015      	movs	r5, r2
    3c2c:	00db      	lsls	r3, r3, #3
    3c2e:	0e00      	lsrs	r0, r0, #24
    3c30:	4689      	mov	r9, r1
    3c32:	00f6      	lsls	r6, r6, #3
    3c34:	28ff      	cmp	r0, #255	; 0xff
    3c36:	d100      	bne.n	3c3a <__aeabi_fsub+0x32>
    3c38:	e08f      	b.n	3d5a <__aeabi_fsub+0x152>
    3c3a:	2101      	movs	r1, #1
    3c3c:	464f      	mov	r7, r9
    3c3e:	404f      	eors	r7, r1
    3c40:	0039      	movs	r1, r7
    3c42:	4291      	cmp	r1, r2
    3c44:	d066      	beq.n	3d14 <__aeabi_fsub+0x10c>
    3c46:	1a22      	subs	r2, r4, r0
    3c48:	2a00      	cmp	r2, #0
    3c4a:	dc00      	bgt.n	3c4e <__aeabi_fsub+0x46>
    3c4c:	e09d      	b.n	3d8a <__aeabi_fsub+0x182>
    3c4e:	2800      	cmp	r0, #0
    3c50:	d13d      	bne.n	3cce <__aeabi_fsub+0xc6>
    3c52:	2e00      	cmp	r6, #0
    3c54:	d100      	bne.n	3c58 <__aeabi_fsub+0x50>
    3c56:	e08b      	b.n	3d70 <__aeabi_fsub+0x168>
    3c58:	1e51      	subs	r1, r2, #1
    3c5a:	2900      	cmp	r1, #0
    3c5c:	d000      	beq.n	3c60 <__aeabi_fsub+0x58>
    3c5e:	e0b5      	b.n	3dcc <__aeabi_fsub+0x1c4>
    3c60:	2401      	movs	r4, #1
    3c62:	1b9b      	subs	r3, r3, r6
    3c64:	015a      	lsls	r2, r3, #5
    3c66:	d544      	bpl.n	3cf2 <__aeabi_fsub+0xea>
    3c68:	019b      	lsls	r3, r3, #6
    3c6a:	099f      	lsrs	r7, r3, #6
    3c6c:	0038      	movs	r0, r7
    3c6e:	f001 fb89 	bl	5384 <__clzsi2>
    3c72:	3805      	subs	r0, #5
    3c74:	4087      	lsls	r7, r0
    3c76:	4284      	cmp	r4, r0
    3c78:	dd00      	ble.n	3c7c <__aeabi_fsub+0x74>
    3c7a:	e096      	b.n	3daa <__aeabi_fsub+0x1a2>
    3c7c:	1b04      	subs	r4, r0, r4
    3c7e:	003a      	movs	r2, r7
    3c80:	2020      	movs	r0, #32
    3c82:	3401      	adds	r4, #1
    3c84:	40e2      	lsrs	r2, r4
    3c86:	1b04      	subs	r4, r0, r4
    3c88:	40a7      	lsls	r7, r4
    3c8a:	003b      	movs	r3, r7
    3c8c:	1e5f      	subs	r7, r3, #1
    3c8e:	41bb      	sbcs	r3, r7
    3c90:	2400      	movs	r4, #0
    3c92:	4313      	orrs	r3, r2
    3c94:	075a      	lsls	r2, r3, #29
    3c96:	d004      	beq.n	3ca2 <__aeabi_fsub+0x9a>
    3c98:	220f      	movs	r2, #15
    3c9a:	401a      	ands	r2, r3
    3c9c:	2a04      	cmp	r2, #4
    3c9e:	d000      	beq.n	3ca2 <__aeabi_fsub+0x9a>
    3ca0:	3304      	adds	r3, #4
    3ca2:	015a      	lsls	r2, r3, #5
    3ca4:	d527      	bpl.n	3cf6 <__aeabi_fsub+0xee>
    3ca6:	3401      	adds	r4, #1
    3ca8:	2cff      	cmp	r4, #255	; 0xff
    3caa:	d100      	bne.n	3cae <__aeabi_fsub+0xa6>
    3cac:	e079      	b.n	3da2 <__aeabi_fsub+0x19a>
    3cae:	2201      	movs	r2, #1
    3cb0:	019b      	lsls	r3, r3, #6
    3cb2:	0a5b      	lsrs	r3, r3, #9
    3cb4:	b2e4      	uxtb	r4, r4
    3cb6:	402a      	ands	r2, r5
    3cb8:	025b      	lsls	r3, r3, #9
    3cba:	05e4      	lsls	r4, r4, #23
    3cbc:	0a58      	lsrs	r0, r3, #9
    3cbe:	07d2      	lsls	r2, r2, #31
    3cc0:	4320      	orrs	r0, r4
    3cc2:	4310      	orrs	r0, r2
    3cc4:	bc1c      	pop	{r2, r3, r4}
    3cc6:	4690      	mov	r8, r2
    3cc8:	4699      	mov	r9, r3
    3cca:	46a2      	mov	sl, r4
    3ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cce:	2cff      	cmp	r4, #255	; 0xff
    3cd0:	d0e0      	beq.n	3c94 <__aeabi_fsub+0x8c>
    3cd2:	2180      	movs	r1, #128	; 0x80
    3cd4:	04c9      	lsls	r1, r1, #19
    3cd6:	430e      	orrs	r6, r1
    3cd8:	2a1b      	cmp	r2, #27
    3cda:	dc7b      	bgt.n	3dd4 <__aeabi_fsub+0x1cc>
    3cdc:	0031      	movs	r1, r6
    3cde:	2020      	movs	r0, #32
    3ce0:	40d1      	lsrs	r1, r2
    3ce2:	1a82      	subs	r2, r0, r2
    3ce4:	4096      	lsls	r6, r2
    3ce6:	1e72      	subs	r2, r6, #1
    3ce8:	4196      	sbcs	r6, r2
    3cea:	430e      	orrs	r6, r1
    3cec:	1b9b      	subs	r3, r3, r6
    3cee:	015a      	lsls	r2, r3, #5
    3cf0:	d4ba      	bmi.n	3c68 <__aeabi_fsub+0x60>
    3cf2:	075a      	lsls	r2, r3, #29
    3cf4:	d1d0      	bne.n	3c98 <__aeabi_fsub+0x90>
    3cf6:	2201      	movs	r2, #1
    3cf8:	08df      	lsrs	r7, r3, #3
    3cfa:	402a      	ands	r2, r5
    3cfc:	2cff      	cmp	r4, #255	; 0xff
    3cfe:	d133      	bne.n	3d68 <__aeabi_fsub+0x160>
    3d00:	2f00      	cmp	r7, #0
    3d02:	d100      	bne.n	3d06 <__aeabi_fsub+0xfe>
    3d04:	e0a8      	b.n	3e58 <__aeabi_fsub+0x250>
    3d06:	2380      	movs	r3, #128	; 0x80
    3d08:	03db      	lsls	r3, r3, #15
    3d0a:	433b      	orrs	r3, r7
    3d0c:	025b      	lsls	r3, r3, #9
    3d0e:	0a5b      	lsrs	r3, r3, #9
    3d10:	24ff      	movs	r4, #255	; 0xff
    3d12:	e7d1      	b.n	3cb8 <__aeabi_fsub+0xb0>
    3d14:	1a21      	subs	r1, r4, r0
    3d16:	2900      	cmp	r1, #0
    3d18:	dd4c      	ble.n	3db4 <__aeabi_fsub+0x1ac>
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d02a      	beq.n	3d74 <__aeabi_fsub+0x16c>
    3d1e:	2cff      	cmp	r4, #255	; 0xff
    3d20:	d0b8      	beq.n	3c94 <__aeabi_fsub+0x8c>
    3d22:	2080      	movs	r0, #128	; 0x80
    3d24:	04c0      	lsls	r0, r0, #19
    3d26:	4306      	orrs	r6, r0
    3d28:	291b      	cmp	r1, #27
    3d2a:	dd00      	ble.n	3d2e <__aeabi_fsub+0x126>
    3d2c:	e0af      	b.n	3e8e <__aeabi_fsub+0x286>
    3d2e:	0030      	movs	r0, r6
    3d30:	2720      	movs	r7, #32
    3d32:	40c8      	lsrs	r0, r1
    3d34:	1a79      	subs	r1, r7, r1
    3d36:	408e      	lsls	r6, r1
    3d38:	1e71      	subs	r1, r6, #1
    3d3a:	418e      	sbcs	r6, r1
    3d3c:	4306      	orrs	r6, r0
    3d3e:	199b      	adds	r3, r3, r6
    3d40:	0159      	lsls	r1, r3, #5
    3d42:	d5d6      	bpl.n	3cf2 <__aeabi_fsub+0xea>
    3d44:	3401      	adds	r4, #1
    3d46:	2cff      	cmp	r4, #255	; 0xff
    3d48:	d100      	bne.n	3d4c <__aeabi_fsub+0x144>
    3d4a:	e085      	b.n	3e58 <__aeabi_fsub+0x250>
    3d4c:	2201      	movs	r2, #1
    3d4e:	497a      	ldr	r1, [pc, #488]	; (3f38 <__aeabi_fsub+0x330>)
    3d50:	401a      	ands	r2, r3
    3d52:	085b      	lsrs	r3, r3, #1
    3d54:	400b      	ands	r3, r1
    3d56:	4313      	orrs	r3, r2
    3d58:	e79c      	b.n	3c94 <__aeabi_fsub+0x8c>
    3d5a:	2e00      	cmp	r6, #0
    3d5c:	d000      	beq.n	3d60 <__aeabi_fsub+0x158>
    3d5e:	e770      	b.n	3c42 <__aeabi_fsub+0x3a>
    3d60:	e76b      	b.n	3c3a <__aeabi_fsub+0x32>
    3d62:	1e3b      	subs	r3, r7, #0
    3d64:	d1c5      	bne.n	3cf2 <__aeabi_fsub+0xea>
    3d66:	2200      	movs	r2, #0
    3d68:	027b      	lsls	r3, r7, #9
    3d6a:	0a5b      	lsrs	r3, r3, #9
    3d6c:	b2e4      	uxtb	r4, r4
    3d6e:	e7a3      	b.n	3cb8 <__aeabi_fsub+0xb0>
    3d70:	0014      	movs	r4, r2
    3d72:	e78f      	b.n	3c94 <__aeabi_fsub+0x8c>
    3d74:	2e00      	cmp	r6, #0
    3d76:	d04d      	beq.n	3e14 <__aeabi_fsub+0x20c>
    3d78:	1e48      	subs	r0, r1, #1
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d157      	bne.n	3e2e <__aeabi_fsub+0x226>
    3d7e:	199b      	adds	r3, r3, r6
    3d80:	2401      	movs	r4, #1
    3d82:	015a      	lsls	r2, r3, #5
    3d84:	d5b5      	bpl.n	3cf2 <__aeabi_fsub+0xea>
    3d86:	2402      	movs	r4, #2
    3d88:	e7e0      	b.n	3d4c <__aeabi_fsub+0x144>
    3d8a:	2a00      	cmp	r2, #0
    3d8c:	d125      	bne.n	3dda <__aeabi_fsub+0x1d2>
    3d8e:	1c62      	adds	r2, r4, #1
    3d90:	b2d2      	uxtb	r2, r2
    3d92:	2a01      	cmp	r2, #1
    3d94:	dd72      	ble.n	3e7c <__aeabi_fsub+0x274>
    3d96:	1b9f      	subs	r7, r3, r6
    3d98:	017a      	lsls	r2, r7, #5
    3d9a:	d535      	bpl.n	3e08 <__aeabi_fsub+0x200>
    3d9c:	1af7      	subs	r7, r6, r3
    3d9e:	000d      	movs	r5, r1
    3da0:	e764      	b.n	3c6c <__aeabi_fsub+0x64>
    3da2:	2201      	movs	r2, #1
    3da4:	2300      	movs	r3, #0
    3da6:	402a      	ands	r2, r5
    3da8:	e786      	b.n	3cb8 <__aeabi_fsub+0xb0>
    3daa:	003b      	movs	r3, r7
    3dac:	4a63      	ldr	r2, [pc, #396]	; (3f3c <__aeabi_fsub+0x334>)
    3dae:	1a24      	subs	r4, r4, r0
    3db0:	4013      	ands	r3, r2
    3db2:	e76f      	b.n	3c94 <__aeabi_fsub+0x8c>
    3db4:	2900      	cmp	r1, #0
    3db6:	d16c      	bne.n	3e92 <__aeabi_fsub+0x28a>
    3db8:	1c61      	adds	r1, r4, #1
    3dba:	b2c8      	uxtb	r0, r1
    3dbc:	2801      	cmp	r0, #1
    3dbe:	dd4e      	ble.n	3e5e <__aeabi_fsub+0x256>
    3dc0:	29ff      	cmp	r1, #255	; 0xff
    3dc2:	d049      	beq.n	3e58 <__aeabi_fsub+0x250>
    3dc4:	199b      	adds	r3, r3, r6
    3dc6:	085b      	lsrs	r3, r3, #1
    3dc8:	000c      	movs	r4, r1
    3dca:	e763      	b.n	3c94 <__aeabi_fsub+0x8c>
    3dcc:	2aff      	cmp	r2, #255	; 0xff
    3dce:	d041      	beq.n	3e54 <__aeabi_fsub+0x24c>
    3dd0:	000a      	movs	r2, r1
    3dd2:	e781      	b.n	3cd8 <__aeabi_fsub+0xd0>
    3dd4:	2601      	movs	r6, #1
    3dd6:	1b9b      	subs	r3, r3, r6
    3dd8:	e789      	b.n	3cee <__aeabi_fsub+0xe6>
    3dda:	2c00      	cmp	r4, #0
    3ddc:	d01c      	beq.n	3e18 <__aeabi_fsub+0x210>
    3dde:	28ff      	cmp	r0, #255	; 0xff
    3de0:	d021      	beq.n	3e26 <__aeabi_fsub+0x21e>
    3de2:	2480      	movs	r4, #128	; 0x80
    3de4:	04e4      	lsls	r4, r4, #19
    3de6:	4252      	negs	r2, r2
    3de8:	4323      	orrs	r3, r4
    3dea:	2a1b      	cmp	r2, #27
    3dec:	dd00      	ble.n	3df0 <__aeabi_fsub+0x1e8>
    3dee:	e096      	b.n	3f1e <__aeabi_fsub+0x316>
    3df0:	001c      	movs	r4, r3
    3df2:	2520      	movs	r5, #32
    3df4:	40d4      	lsrs	r4, r2
    3df6:	1aaa      	subs	r2, r5, r2
    3df8:	4093      	lsls	r3, r2
    3dfa:	1e5a      	subs	r2, r3, #1
    3dfc:	4193      	sbcs	r3, r2
    3dfe:	4323      	orrs	r3, r4
    3e00:	1af3      	subs	r3, r6, r3
    3e02:	0004      	movs	r4, r0
    3e04:	000d      	movs	r5, r1
    3e06:	e72d      	b.n	3c64 <__aeabi_fsub+0x5c>
    3e08:	2f00      	cmp	r7, #0
    3e0a:	d000      	beq.n	3e0e <__aeabi_fsub+0x206>
    3e0c:	e72e      	b.n	3c6c <__aeabi_fsub+0x64>
    3e0e:	2200      	movs	r2, #0
    3e10:	2400      	movs	r4, #0
    3e12:	e7a9      	b.n	3d68 <__aeabi_fsub+0x160>
    3e14:	000c      	movs	r4, r1
    3e16:	e73d      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d058      	beq.n	3ece <__aeabi_fsub+0x2c6>
    3e1c:	43d2      	mvns	r2, r2
    3e1e:	2a00      	cmp	r2, #0
    3e20:	d0ee      	beq.n	3e00 <__aeabi_fsub+0x1f8>
    3e22:	28ff      	cmp	r0, #255	; 0xff
    3e24:	d1e1      	bne.n	3dea <__aeabi_fsub+0x1e2>
    3e26:	0033      	movs	r3, r6
    3e28:	24ff      	movs	r4, #255	; 0xff
    3e2a:	000d      	movs	r5, r1
    3e2c:	e732      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e2e:	29ff      	cmp	r1, #255	; 0xff
    3e30:	d010      	beq.n	3e54 <__aeabi_fsub+0x24c>
    3e32:	0001      	movs	r1, r0
    3e34:	e778      	b.n	3d28 <__aeabi_fsub+0x120>
    3e36:	2b00      	cmp	r3, #0
    3e38:	d06e      	beq.n	3f18 <__aeabi_fsub+0x310>
    3e3a:	24ff      	movs	r4, #255	; 0xff
    3e3c:	2e00      	cmp	r6, #0
    3e3e:	d100      	bne.n	3e42 <__aeabi_fsub+0x23a>
    3e40:	e728      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e42:	2280      	movs	r2, #128	; 0x80
    3e44:	4651      	mov	r1, sl
    3e46:	03d2      	lsls	r2, r2, #15
    3e48:	4211      	tst	r1, r2
    3e4a:	d003      	beq.n	3e54 <__aeabi_fsub+0x24c>
    3e4c:	4661      	mov	r1, ip
    3e4e:	4211      	tst	r1, r2
    3e50:	d100      	bne.n	3e54 <__aeabi_fsub+0x24c>
    3e52:	0033      	movs	r3, r6
    3e54:	24ff      	movs	r4, #255	; 0xff
    3e56:	e71d      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e58:	24ff      	movs	r4, #255	; 0xff
    3e5a:	2300      	movs	r3, #0
    3e5c:	e72c      	b.n	3cb8 <__aeabi_fsub+0xb0>
    3e5e:	2c00      	cmp	r4, #0
    3e60:	d1e9      	bne.n	3e36 <__aeabi_fsub+0x22e>
    3e62:	2b00      	cmp	r3, #0
    3e64:	d063      	beq.n	3f2e <__aeabi_fsub+0x326>
    3e66:	2e00      	cmp	r6, #0
    3e68:	d100      	bne.n	3e6c <__aeabi_fsub+0x264>
    3e6a:	e713      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e6c:	199b      	adds	r3, r3, r6
    3e6e:	015a      	lsls	r2, r3, #5
    3e70:	d400      	bmi.n	3e74 <__aeabi_fsub+0x26c>
    3e72:	e73e      	b.n	3cf2 <__aeabi_fsub+0xea>
    3e74:	4a31      	ldr	r2, [pc, #196]	; (3f3c <__aeabi_fsub+0x334>)
    3e76:	000c      	movs	r4, r1
    3e78:	4013      	ands	r3, r2
    3e7a:	e70b      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e7c:	2c00      	cmp	r4, #0
    3e7e:	d11e      	bne.n	3ebe <__aeabi_fsub+0x2b6>
    3e80:	2b00      	cmp	r3, #0
    3e82:	d12f      	bne.n	3ee4 <__aeabi_fsub+0x2dc>
    3e84:	2e00      	cmp	r6, #0
    3e86:	d04f      	beq.n	3f28 <__aeabi_fsub+0x320>
    3e88:	0033      	movs	r3, r6
    3e8a:	000d      	movs	r5, r1
    3e8c:	e702      	b.n	3c94 <__aeabi_fsub+0x8c>
    3e8e:	2601      	movs	r6, #1
    3e90:	e755      	b.n	3d3e <__aeabi_fsub+0x136>
    3e92:	2c00      	cmp	r4, #0
    3e94:	d11f      	bne.n	3ed6 <__aeabi_fsub+0x2ce>
    3e96:	2b00      	cmp	r3, #0
    3e98:	d043      	beq.n	3f22 <__aeabi_fsub+0x31a>
    3e9a:	43c9      	mvns	r1, r1
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d00b      	beq.n	3eb8 <__aeabi_fsub+0x2b0>
    3ea0:	28ff      	cmp	r0, #255	; 0xff
    3ea2:	d039      	beq.n	3f18 <__aeabi_fsub+0x310>
    3ea4:	291b      	cmp	r1, #27
    3ea6:	dc44      	bgt.n	3f32 <__aeabi_fsub+0x32a>
    3ea8:	001c      	movs	r4, r3
    3eaa:	2720      	movs	r7, #32
    3eac:	40cc      	lsrs	r4, r1
    3eae:	1a79      	subs	r1, r7, r1
    3eb0:	408b      	lsls	r3, r1
    3eb2:	1e59      	subs	r1, r3, #1
    3eb4:	418b      	sbcs	r3, r1
    3eb6:	4323      	orrs	r3, r4
    3eb8:	199b      	adds	r3, r3, r6
    3eba:	0004      	movs	r4, r0
    3ebc:	e740      	b.n	3d40 <__aeabi_fsub+0x138>
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d11a      	bne.n	3ef8 <__aeabi_fsub+0x2f0>
    3ec2:	2e00      	cmp	r6, #0
    3ec4:	d124      	bne.n	3f10 <__aeabi_fsub+0x308>
    3ec6:	2780      	movs	r7, #128	; 0x80
    3ec8:	2200      	movs	r2, #0
    3eca:	03ff      	lsls	r7, r7, #15
    3ecc:	e71b      	b.n	3d06 <__aeabi_fsub+0xfe>
    3ece:	0033      	movs	r3, r6
    3ed0:	0004      	movs	r4, r0
    3ed2:	000d      	movs	r5, r1
    3ed4:	e6de      	b.n	3c94 <__aeabi_fsub+0x8c>
    3ed6:	28ff      	cmp	r0, #255	; 0xff
    3ed8:	d01e      	beq.n	3f18 <__aeabi_fsub+0x310>
    3eda:	2480      	movs	r4, #128	; 0x80
    3edc:	04e4      	lsls	r4, r4, #19
    3ede:	4249      	negs	r1, r1
    3ee0:	4323      	orrs	r3, r4
    3ee2:	e7df      	b.n	3ea4 <__aeabi_fsub+0x29c>
    3ee4:	2e00      	cmp	r6, #0
    3ee6:	d100      	bne.n	3eea <__aeabi_fsub+0x2e2>
    3ee8:	e6d4      	b.n	3c94 <__aeabi_fsub+0x8c>
    3eea:	1b9f      	subs	r7, r3, r6
    3eec:	017a      	lsls	r2, r7, #5
    3eee:	d400      	bmi.n	3ef2 <__aeabi_fsub+0x2ea>
    3ef0:	e737      	b.n	3d62 <__aeabi_fsub+0x15a>
    3ef2:	1af3      	subs	r3, r6, r3
    3ef4:	000d      	movs	r5, r1
    3ef6:	e6cd      	b.n	3c94 <__aeabi_fsub+0x8c>
    3ef8:	24ff      	movs	r4, #255	; 0xff
    3efa:	2e00      	cmp	r6, #0
    3efc:	d100      	bne.n	3f00 <__aeabi_fsub+0x2f8>
    3efe:	e6c9      	b.n	3c94 <__aeabi_fsub+0x8c>
    3f00:	2280      	movs	r2, #128	; 0x80
    3f02:	4650      	mov	r0, sl
    3f04:	03d2      	lsls	r2, r2, #15
    3f06:	4210      	tst	r0, r2
    3f08:	d0a4      	beq.n	3e54 <__aeabi_fsub+0x24c>
    3f0a:	4660      	mov	r0, ip
    3f0c:	4210      	tst	r0, r2
    3f0e:	d1a1      	bne.n	3e54 <__aeabi_fsub+0x24c>
    3f10:	0033      	movs	r3, r6
    3f12:	000d      	movs	r5, r1
    3f14:	24ff      	movs	r4, #255	; 0xff
    3f16:	e6bd      	b.n	3c94 <__aeabi_fsub+0x8c>
    3f18:	0033      	movs	r3, r6
    3f1a:	24ff      	movs	r4, #255	; 0xff
    3f1c:	e6ba      	b.n	3c94 <__aeabi_fsub+0x8c>
    3f1e:	2301      	movs	r3, #1
    3f20:	e76e      	b.n	3e00 <__aeabi_fsub+0x1f8>
    3f22:	0033      	movs	r3, r6
    3f24:	0004      	movs	r4, r0
    3f26:	e6b5      	b.n	3c94 <__aeabi_fsub+0x8c>
    3f28:	2700      	movs	r7, #0
    3f2a:	2200      	movs	r2, #0
    3f2c:	e71c      	b.n	3d68 <__aeabi_fsub+0x160>
    3f2e:	0033      	movs	r3, r6
    3f30:	e6b0      	b.n	3c94 <__aeabi_fsub+0x8c>
    3f32:	2301      	movs	r3, #1
    3f34:	e7c0      	b.n	3eb8 <__aeabi_fsub+0x2b0>
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	7dffffff 	.word	0x7dffffff
    3f3c:	fbffffff 	.word	0xfbffffff

00003f40 <__aeabi_f2iz>:
    3f40:	0241      	lsls	r1, r0, #9
    3f42:	0043      	lsls	r3, r0, #1
    3f44:	0fc2      	lsrs	r2, r0, #31
    3f46:	0a49      	lsrs	r1, r1, #9
    3f48:	0e1b      	lsrs	r3, r3, #24
    3f4a:	2000      	movs	r0, #0
    3f4c:	2b7e      	cmp	r3, #126	; 0x7e
    3f4e:	dd0d      	ble.n	3f6c <__aeabi_f2iz+0x2c>
    3f50:	2b9d      	cmp	r3, #157	; 0x9d
    3f52:	dc0c      	bgt.n	3f6e <__aeabi_f2iz+0x2e>
    3f54:	2080      	movs	r0, #128	; 0x80
    3f56:	0400      	lsls	r0, r0, #16
    3f58:	4301      	orrs	r1, r0
    3f5a:	2b95      	cmp	r3, #149	; 0x95
    3f5c:	dc0a      	bgt.n	3f74 <__aeabi_f2iz+0x34>
    3f5e:	2096      	movs	r0, #150	; 0x96
    3f60:	1ac3      	subs	r3, r0, r3
    3f62:	40d9      	lsrs	r1, r3
    3f64:	4248      	negs	r0, r1
    3f66:	2a00      	cmp	r2, #0
    3f68:	d100      	bne.n	3f6c <__aeabi_f2iz+0x2c>
    3f6a:	0008      	movs	r0, r1
    3f6c:	4770      	bx	lr
    3f6e:	4b03      	ldr	r3, [pc, #12]	; (3f7c <__aeabi_f2iz+0x3c>)
    3f70:	18d0      	adds	r0, r2, r3
    3f72:	e7fb      	b.n	3f6c <__aeabi_f2iz+0x2c>
    3f74:	3b96      	subs	r3, #150	; 0x96
    3f76:	4099      	lsls	r1, r3
    3f78:	e7f4      	b.n	3f64 <__aeabi_f2iz+0x24>
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	7fffffff 	.word	0x7fffffff

00003f80 <__aeabi_ui2f>:
    3f80:	b510      	push	{r4, lr}
    3f82:	1e04      	subs	r4, r0, #0
    3f84:	d027      	beq.n	3fd6 <__aeabi_ui2f+0x56>
    3f86:	f001 f9fd 	bl	5384 <__clzsi2>
    3f8a:	239e      	movs	r3, #158	; 0x9e
    3f8c:	1a1b      	subs	r3, r3, r0
    3f8e:	2b96      	cmp	r3, #150	; 0x96
    3f90:	dc0a      	bgt.n	3fa8 <__aeabi_ui2f+0x28>
    3f92:	2296      	movs	r2, #150	; 0x96
    3f94:	1ad2      	subs	r2, r2, r3
    3f96:	4094      	lsls	r4, r2
    3f98:	0264      	lsls	r4, r4, #9
    3f9a:	0a64      	lsrs	r4, r4, #9
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	0264      	lsls	r4, r4, #9
    3fa0:	05db      	lsls	r3, r3, #23
    3fa2:	0a60      	lsrs	r0, r4, #9
    3fa4:	4318      	orrs	r0, r3
    3fa6:	bd10      	pop	{r4, pc}
    3fa8:	2b99      	cmp	r3, #153	; 0x99
    3faa:	dc17      	bgt.n	3fdc <__aeabi_ui2f+0x5c>
    3fac:	2299      	movs	r2, #153	; 0x99
    3fae:	1ad2      	subs	r2, r2, r3
    3fb0:	2a00      	cmp	r2, #0
    3fb2:	dd27      	ble.n	4004 <__aeabi_ui2f+0x84>
    3fb4:	4094      	lsls	r4, r2
    3fb6:	0022      	movs	r2, r4
    3fb8:	4c13      	ldr	r4, [pc, #76]	; (4008 <__aeabi_ui2f+0x88>)
    3fba:	4014      	ands	r4, r2
    3fbc:	0751      	lsls	r1, r2, #29
    3fbe:	d004      	beq.n	3fca <__aeabi_ui2f+0x4a>
    3fc0:	210f      	movs	r1, #15
    3fc2:	400a      	ands	r2, r1
    3fc4:	2a04      	cmp	r2, #4
    3fc6:	d000      	beq.n	3fca <__aeabi_ui2f+0x4a>
    3fc8:	3404      	adds	r4, #4
    3fca:	0162      	lsls	r2, r4, #5
    3fcc:	d412      	bmi.n	3ff4 <__aeabi_ui2f+0x74>
    3fce:	01a4      	lsls	r4, r4, #6
    3fd0:	0a64      	lsrs	r4, r4, #9
    3fd2:	b2db      	uxtb	r3, r3
    3fd4:	e7e3      	b.n	3f9e <__aeabi_ui2f+0x1e>
    3fd6:	2300      	movs	r3, #0
    3fd8:	2400      	movs	r4, #0
    3fda:	e7e0      	b.n	3f9e <__aeabi_ui2f+0x1e>
    3fdc:	22b9      	movs	r2, #185	; 0xb9
    3fde:	0021      	movs	r1, r4
    3fe0:	1ad2      	subs	r2, r2, r3
    3fe2:	4091      	lsls	r1, r2
    3fe4:	000a      	movs	r2, r1
    3fe6:	1e51      	subs	r1, r2, #1
    3fe8:	418a      	sbcs	r2, r1
    3fea:	2105      	movs	r1, #5
    3fec:	1a09      	subs	r1, r1, r0
    3fee:	40cc      	lsrs	r4, r1
    3ff0:	4314      	orrs	r4, r2
    3ff2:	e7db      	b.n	3fac <__aeabi_ui2f+0x2c>
    3ff4:	4b04      	ldr	r3, [pc, #16]	; (4008 <__aeabi_ui2f+0x88>)
    3ff6:	401c      	ands	r4, r3
    3ff8:	239f      	movs	r3, #159	; 0x9f
    3ffa:	01a4      	lsls	r4, r4, #6
    3ffc:	1a1b      	subs	r3, r3, r0
    3ffe:	0a64      	lsrs	r4, r4, #9
    4000:	b2db      	uxtb	r3, r3
    4002:	e7cc      	b.n	3f9e <__aeabi_ui2f+0x1e>
    4004:	0022      	movs	r2, r4
    4006:	e7d7      	b.n	3fb8 <__aeabi_ui2f+0x38>
    4008:	fbffffff 	.word	0xfbffffff

0000400c <__aeabi_dadd>:
    400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400e:	4645      	mov	r5, r8
    4010:	46de      	mov	lr, fp
    4012:	4657      	mov	r7, sl
    4014:	464e      	mov	r6, r9
    4016:	030c      	lsls	r4, r1, #12
    4018:	b5e0      	push	{r5, r6, r7, lr}
    401a:	004e      	lsls	r6, r1, #1
    401c:	0fc9      	lsrs	r1, r1, #31
    401e:	4688      	mov	r8, r1
    4020:	000d      	movs	r5, r1
    4022:	0a61      	lsrs	r1, r4, #9
    4024:	0f44      	lsrs	r4, r0, #29
    4026:	430c      	orrs	r4, r1
    4028:	00c7      	lsls	r7, r0, #3
    402a:	0319      	lsls	r1, r3, #12
    402c:	0058      	lsls	r0, r3, #1
    402e:	0fdb      	lsrs	r3, r3, #31
    4030:	469b      	mov	fp, r3
    4032:	0a4b      	lsrs	r3, r1, #9
    4034:	0f51      	lsrs	r1, r2, #29
    4036:	430b      	orrs	r3, r1
    4038:	0d76      	lsrs	r6, r6, #21
    403a:	0d40      	lsrs	r0, r0, #21
    403c:	0019      	movs	r1, r3
    403e:	00d2      	lsls	r2, r2, #3
    4040:	45d8      	cmp	r8, fp
    4042:	d100      	bne.n	4046 <__aeabi_dadd+0x3a>
    4044:	e0ae      	b.n	41a4 <__aeabi_dadd+0x198>
    4046:	1a35      	subs	r5, r6, r0
    4048:	2d00      	cmp	r5, #0
    404a:	dc00      	bgt.n	404e <__aeabi_dadd+0x42>
    404c:	e0f6      	b.n	423c <__aeabi_dadd+0x230>
    404e:	2800      	cmp	r0, #0
    4050:	d10f      	bne.n	4072 <__aeabi_dadd+0x66>
    4052:	4313      	orrs	r3, r2
    4054:	d100      	bne.n	4058 <__aeabi_dadd+0x4c>
    4056:	e0db      	b.n	4210 <__aeabi_dadd+0x204>
    4058:	1e6b      	subs	r3, r5, #1
    405a:	2b00      	cmp	r3, #0
    405c:	d000      	beq.n	4060 <__aeabi_dadd+0x54>
    405e:	e137      	b.n	42d0 <__aeabi_dadd+0x2c4>
    4060:	1aba      	subs	r2, r7, r2
    4062:	4297      	cmp	r7, r2
    4064:	41bf      	sbcs	r7, r7
    4066:	1a64      	subs	r4, r4, r1
    4068:	427f      	negs	r7, r7
    406a:	1be4      	subs	r4, r4, r7
    406c:	2601      	movs	r6, #1
    406e:	0017      	movs	r7, r2
    4070:	e024      	b.n	40bc <__aeabi_dadd+0xb0>
    4072:	4bc6      	ldr	r3, [pc, #792]	; (438c <__aeabi_dadd+0x380>)
    4074:	429e      	cmp	r6, r3
    4076:	d04d      	beq.n	4114 <__aeabi_dadd+0x108>
    4078:	2380      	movs	r3, #128	; 0x80
    407a:	041b      	lsls	r3, r3, #16
    407c:	4319      	orrs	r1, r3
    407e:	2d38      	cmp	r5, #56	; 0x38
    4080:	dd00      	ble.n	4084 <__aeabi_dadd+0x78>
    4082:	e107      	b.n	4294 <__aeabi_dadd+0x288>
    4084:	2d1f      	cmp	r5, #31
    4086:	dd00      	ble.n	408a <__aeabi_dadd+0x7e>
    4088:	e138      	b.n	42fc <__aeabi_dadd+0x2f0>
    408a:	2020      	movs	r0, #32
    408c:	1b43      	subs	r3, r0, r5
    408e:	469a      	mov	sl, r3
    4090:	000b      	movs	r3, r1
    4092:	4650      	mov	r0, sl
    4094:	4083      	lsls	r3, r0
    4096:	4699      	mov	r9, r3
    4098:	0013      	movs	r3, r2
    409a:	4648      	mov	r0, r9
    409c:	40eb      	lsrs	r3, r5
    409e:	4318      	orrs	r0, r3
    40a0:	0003      	movs	r3, r0
    40a2:	4650      	mov	r0, sl
    40a4:	4082      	lsls	r2, r0
    40a6:	1e50      	subs	r0, r2, #1
    40a8:	4182      	sbcs	r2, r0
    40aa:	40e9      	lsrs	r1, r5
    40ac:	431a      	orrs	r2, r3
    40ae:	1aba      	subs	r2, r7, r2
    40b0:	1a61      	subs	r1, r4, r1
    40b2:	4297      	cmp	r7, r2
    40b4:	41a4      	sbcs	r4, r4
    40b6:	0017      	movs	r7, r2
    40b8:	4264      	negs	r4, r4
    40ba:	1b0c      	subs	r4, r1, r4
    40bc:	0223      	lsls	r3, r4, #8
    40be:	d562      	bpl.n	4186 <__aeabi_dadd+0x17a>
    40c0:	0264      	lsls	r4, r4, #9
    40c2:	0a65      	lsrs	r5, r4, #9
    40c4:	2d00      	cmp	r5, #0
    40c6:	d100      	bne.n	40ca <__aeabi_dadd+0xbe>
    40c8:	e0df      	b.n	428a <__aeabi_dadd+0x27e>
    40ca:	0028      	movs	r0, r5
    40cc:	f001 f95a 	bl	5384 <__clzsi2>
    40d0:	0003      	movs	r3, r0
    40d2:	3b08      	subs	r3, #8
    40d4:	2b1f      	cmp	r3, #31
    40d6:	dd00      	ble.n	40da <__aeabi_dadd+0xce>
    40d8:	e0d2      	b.n	4280 <__aeabi_dadd+0x274>
    40da:	2220      	movs	r2, #32
    40dc:	003c      	movs	r4, r7
    40de:	1ad2      	subs	r2, r2, r3
    40e0:	409d      	lsls	r5, r3
    40e2:	40d4      	lsrs	r4, r2
    40e4:	409f      	lsls	r7, r3
    40e6:	4325      	orrs	r5, r4
    40e8:	429e      	cmp	r6, r3
    40ea:	dd00      	ble.n	40ee <__aeabi_dadd+0xe2>
    40ec:	e0c4      	b.n	4278 <__aeabi_dadd+0x26c>
    40ee:	1b9e      	subs	r6, r3, r6
    40f0:	1c73      	adds	r3, r6, #1
    40f2:	2b1f      	cmp	r3, #31
    40f4:	dd00      	ble.n	40f8 <__aeabi_dadd+0xec>
    40f6:	e0f1      	b.n	42dc <__aeabi_dadd+0x2d0>
    40f8:	2220      	movs	r2, #32
    40fa:	0038      	movs	r0, r7
    40fc:	0029      	movs	r1, r5
    40fe:	1ad2      	subs	r2, r2, r3
    4100:	40d8      	lsrs	r0, r3
    4102:	4091      	lsls	r1, r2
    4104:	4097      	lsls	r7, r2
    4106:	002c      	movs	r4, r5
    4108:	4301      	orrs	r1, r0
    410a:	1e78      	subs	r0, r7, #1
    410c:	4187      	sbcs	r7, r0
    410e:	40dc      	lsrs	r4, r3
    4110:	2600      	movs	r6, #0
    4112:	430f      	orrs	r7, r1
    4114:	077b      	lsls	r3, r7, #29
    4116:	d009      	beq.n	412c <__aeabi_dadd+0x120>
    4118:	230f      	movs	r3, #15
    411a:	403b      	ands	r3, r7
    411c:	2b04      	cmp	r3, #4
    411e:	d005      	beq.n	412c <__aeabi_dadd+0x120>
    4120:	1d3b      	adds	r3, r7, #4
    4122:	42bb      	cmp	r3, r7
    4124:	41bf      	sbcs	r7, r7
    4126:	427f      	negs	r7, r7
    4128:	19e4      	adds	r4, r4, r7
    412a:	001f      	movs	r7, r3
    412c:	0223      	lsls	r3, r4, #8
    412e:	d52c      	bpl.n	418a <__aeabi_dadd+0x17e>
    4130:	4b96      	ldr	r3, [pc, #600]	; (438c <__aeabi_dadd+0x380>)
    4132:	3601      	adds	r6, #1
    4134:	429e      	cmp	r6, r3
    4136:	d100      	bne.n	413a <__aeabi_dadd+0x12e>
    4138:	e09a      	b.n	4270 <__aeabi_dadd+0x264>
    413a:	4645      	mov	r5, r8
    413c:	4b94      	ldr	r3, [pc, #592]	; (4390 <__aeabi_dadd+0x384>)
    413e:	08ff      	lsrs	r7, r7, #3
    4140:	401c      	ands	r4, r3
    4142:	0760      	lsls	r0, r4, #29
    4144:	0576      	lsls	r6, r6, #21
    4146:	0264      	lsls	r4, r4, #9
    4148:	4307      	orrs	r7, r0
    414a:	0b24      	lsrs	r4, r4, #12
    414c:	0d76      	lsrs	r6, r6, #21
    414e:	2100      	movs	r1, #0
    4150:	0324      	lsls	r4, r4, #12
    4152:	0b23      	lsrs	r3, r4, #12
    4154:	0d0c      	lsrs	r4, r1, #20
    4156:	4a8f      	ldr	r2, [pc, #572]	; (4394 <__aeabi_dadd+0x388>)
    4158:	0524      	lsls	r4, r4, #20
    415a:	431c      	orrs	r4, r3
    415c:	4014      	ands	r4, r2
    415e:	0533      	lsls	r3, r6, #20
    4160:	4323      	orrs	r3, r4
    4162:	005b      	lsls	r3, r3, #1
    4164:	07ed      	lsls	r5, r5, #31
    4166:	085b      	lsrs	r3, r3, #1
    4168:	432b      	orrs	r3, r5
    416a:	0038      	movs	r0, r7
    416c:	0019      	movs	r1, r3
    416e:	bc3c      	pop	{r2, r3, r4, r5}
    4170:	4690      	mov	r8, r2
    4172:	4699      	mov	r9, r3
    4174:	46a2      	mov	sl, r4
    4176:	46ab      	mov	fp, r5
    4178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    417a:	4664      	mov	r4, ip
    417c:	4304      	orrs	r4, r0
    417e:	d100      	bne.n	4182 <__aeabi_dadd+0x176>
    4180:	e211      	b.n	45a6 <__aeabi_dadd+0x59a>
    4182:	0004      	movs	r4, r0
    4184:	4667      	mov	r7, ip
    4186:	077b      	lsls	r3, r7, #29
    4188:	d1c6      	bne.n	4118 <__aeabi_dadd+0x10c>
    418a:	4645      	mov	r5, r8
    418c:	0760      	lsls	r0, r4, #29
    418e:	08ff      	lsrs	r7, r7, #3
    4190:	4307      	orrs	r7, r0
    4192:	08e4      	lsrs	r4, r4, #3
    4194:	4b7d      	ldr	r3, [pc, #500]	; (438c <__aeabi_dadd+0x380>)
    4196:	429e      	cmp	r6, r3
    4198:	d030      	beq.n	41fc <__aeabi_dadd+0x1f0>
    419a:	0324      	lsls	r4, r4, #12
    419c:	0576      	lsls	r6, r6, #21
    419e:	0b24      	lsrs	r4, r4, #12
    41a0:	0d76      	lsrs	r6, r6, #21
    41a2:	e7d4      	b.n	414e <__aeabi_dadd+0x142>
    41a4:	1a33      	subs	r3, r6, r0
    41a6:	469a      	mov	sl, r3
    41a8:	2b00      	cmp	r3, #0
    41aa:	dd78      	ble.n	429e <__aeabi_dadd+0x292>
    41ac:	2800      	cmp	r0, #0
    41ae:	d031      	beq.n	4214 <__aeabi_dadd+0x208>
    41b0:	4876      	ldr	r0, [pc, #472]	; (438c <__aeabi_dadd+0x380>)
    41b2:	4286      	cmp	r6, r0
    41b4:	d0ae      	beq.n	4114 <__aeabi_dadd+0x108>
    41b6:	2080      	movs	r0, #128	; 0x80
    41b8:	0400      	lsls	r0, r0, #16
    41ba:	4301      	orrs	r1, r0
    41bc:	4653      	mov	r3, sl
    41be:	2b38      	cmp	r3, #56	; 0x38
    41c0:	dc00      	bgt.n	41c4 <__aeabi_dadd+0x1b8>
    41c2:	e0e9      	b.n	4398 <__aeabi_dadd+0x38c>
    41c4:	430a      	orrs	r2, r1
    41c6:	1e51      	subs	r1, r2, #1
    41c8:	418a      	sbcs	r2, r1
    41ca:	2100      	movs	r1, #0
    41cc:	19d2      	adds	r2, r2, r7
    41ce:	42ba      	cmp	r2, r7
    41d0:	41bf      	sbcs	r7, r7
    41d2:	1909      	adds	r1, r1, r4
    41d4:	427c      	negs	r4, r7
    41d6:	0017      	movs	r7, r2
    41d8:	190c      	adds	r4, r1, r4
    41da:	0223      	lsls	r3, r4, #8
    41dc:	d5d3      	bpl.n	4186 <__aeabi_dadd+0x17a>
    41de:	4b6b      	ldr	r3, [pc, #428]	; (438c <__aeabi_dadd+0x380>)
    41e0:	3601      	adds	r6, #1
    41e2:	429e      	cmp	r6, r3
    41e4:	d100      	bne.n	41e8 <__aeabi_dadd+0x1dc>
    41e6:	e13a      	b.n	445e <__aeabi_dadd+0x452>
    41e8:	2001      	movs	r0, #1
    41ea:	4b69      	ldr	r3, [pc, #420]	; (4390 <__aeabi_dadd+0x384>)
    41ec:	401c      	ands	r4, r3
    41ee:	087b      	lsrs	r3, r7, #1
    41f0:	4007      	ands	r7, r0
    41f2:	431f      	orrs	r7, r3
    41f4:	07e0      	lsls	r0, r4, #31
    41f6:	4307      	orrs	r7, r0
    41f8:	0864      	lsrs	r4, r4, #1
    41fa:	e78b      	b.n	4114 <__aeabi_dadd+0x108>
    41fc:	0023      	movs	r3, r4
    41fe:	433b      	orrs	r3, r7
    4200:	d100      	bne.n	4204 <__aeabi_dadd+0x1f8>
    4202:	e1cb      	b.n	459c <__aeabi_dadd+0x590>
    4204:	2280      	movs	r2, #128	; 0x80
    4206:	0312      	lsls	r2, r2, #12
    4208:	4314      	orrs	r4, r2
    420a:	0324      	lsls	r4, r4, #12
    420c:	0b24      	lsrs	r4, r4, #12
    420e:	e79e      	b.n	414e <__aeabi_dadd+0x142>
    4210:	002e      	movs	r6, r5
    4212:	e77f      	b.n	4114 <__aeabi_dadd+0x108>
    4214:	0008      	movs	r0, r1
    4216:	4310      	orrs	r0, r2
    4218:	d100      	bne.n	421c <__aeabi_dadd+0x210>
    421a:	e0b4      	b.n	4386 <__aeabi_dadd+0x37a>
    421c:	1e58      	subs	r0, r3, #1
    421e:	2800      	cmp	r0, #0
    4220:	d000      	beq.n	4224 <__aeabi_dadd+0x218>
    4222:	e0de      	b.n	43e2 <__aeabi_dadd+0x3d6>
    4224:	18ba      	adds	r2, r7, r2
    4226:	42ba      	cmp	r2, r7
    4228:	419b      	sbcs	r3, r3
    422a:	1864      	adds	r4, r4, r1
    422c:	425b      	negs	r3, r3
    422e:	18e4      	adds	r4, r4, r3
    4230:	0017      	movs	r7, r2
    4232:	2601      	movs	r6, #1
    4234:	0223      	lsls	r3, r4, #8
    4236:	d5a6      	bpl.n	4186 <__aeabi_dadd+0x17a>
    4238:	2602      	movs	r6, #2
    423a:	e7d5      	b.n	41e8 <__aeabi_dadd+0x1dc>
    423c:	2d00      	cmp	r5, #0
    423e:	d16e      	bne.n	431e <__aeabi_dadd+0x312>
    4240:	1c70      	adds	r0, r6, #1
    4242:	0540      	lsls	r0, r0, #21
    4244:	0d40      	lsrs	r0, r0, #21
    4246:	2801      	cmp	r0, #1
    4248:	dc00      	bgt.n	424c <__aeabi_dadd+0x240>
    424a:	e0f9      	b.n	4440 <__aeabi_dadd+0x434>
    424c:	1ab8      	subs	r0, r7, r2
    424e:	4684      	mov	ip, r0
    4250:	4287      	cmp	r7, r0
    4252:	4180      	sbcs	r0, r0
    4254:	1ae5      	subs	r5, r4, r3
    4256:	4240      	negs	r0, r0
    4258:	1a2d      	subs	r5, r5, r0
    425a:	0228      	lsls	r0, r5, #8
    425c:	d400      	bmi.n	4260 <__aeabi_dadd+0x254>
    425e:	e089      	b.n	4374 <__aeabi_dadd+0x368>
    4260:	1bd7      	subs	r7, r2, r7
    4262:	42ba      	cmp	r2, r7
    4264:	4192      	sbcs	r2, r2
    4266:	1b1c      	subs	r4, r3, r4
    4268:	4252      	negs	r2, r2
    426a:	1aa5      	subs	r5, r4, r2
    426c:	46d8      	mov	r8, fp
    426e:	e729      	b.n	40c4 <__aeabi_dadd+0xb8>
    4270:	4645      	mov	r5, r8
    4272:	2400      	movs	r4, #0
    4274:	2700      	movs	r7, #0
    4276:	e76a      	b.n	414e <__aeabi_dadd+0x142>
    4278:	4c45      	ldr	r4, [pc, #276]	; (4390 <__aeabi_dadd+0x384>)
    427a:	1af6      	subs	r6, r6, r3
    427c:	402c      	ands	r4, r5
    427e:	e749      	b.n	4114 <__aeabi_dadd+0x108>
    4280:	003d      	movs	r5, r7
    4282:	3828      	subs	r0, #40	; 0x28
    4284:	4085      	lsls	r5, r0
    4286:	2700      	movs	r7, #0
    4288:	e72e      	b.n	40e8 <__aeabi_dadd+0xdc>
    428a:	0038      	movs	r0, r7
    428c:	f001 f87a 	bl	5384 <__clzsi2>
    4290:	3020      	adds	r0, #32
    4292:	e71d      	b.n	40d0 <__aeabi_dadd+0xc4>
    4294:	430a      	orrs	r2, r1
    4296:	1e51      	subs	r1, r2, #1
    4298:	418a      	sbcs	r2, r1
    429a:	2100      	movs	r1, #0
    429c:	e707      	b.n	40ae <__aeabi_dadd+0xa2>
    429e:	2b00      	cmp	r3, #0
    42a0:	d000      	beq.n	42a4 <__aeabi_dadd+0x298>
    42a2:	e0f3      	b.n	448c <__aeabi_dadd+0x480>
    42a4:	1c70      	adds	r0, r6, #1
    42a6:	0543      	lsls	r3, r0, #21
    42a8:	0d5b      	lsrs	r3, r3, #21
    42aa:	2b01      	cmp	r3, #1
    42ac:	dc00      	bgt.n	42b0 <__aeabi_dadd+0x2a4>
    42ae:	e0ad      	b.n	440c <__aeabi_dadd+0x400>
    42b0:	4b36      	ldr	r3, [pc, #216]	; (438c <__aeabi_dadd+0x380>)
    42b2:	4298      	cmp	r0, r3
    42b4:	d100      	bne.n	42b8 <__aeabi_dadd+0x2ac>
    42b6:	e0d1      	b.n	445c <__aeabi_dadd+0x450>
    42b8:	18ba      	adds	r2, r7, r2
    42ba:	42ba      	cmp	r2, r7
    42bc:	41bf      	sbcs	r7, r7
    42be:	1864      	adds	r4, r4, r1
    42c0:	427f      	negs	r7, r7
    42c2:	19e4      	adds	r4, r4, r7
    42c4:	07e7      	lsls	r7, r4, #31
    42c6:	0852      	lsrs	r2, r2, #1
    42c8:	4317      	orrs	r7, r2
    42ca:	0864      	lsrs	r4, r4, #1
    42cc:	0006      	movs	r6, r0
    42ce:	e721      	b.n	4114 <__aeabi_dadd+0x108>
    42d0:	482e      	ldr	r0, [pc, #184]	; (438c <__aeabi_dadd+0x380>)
    42d2:	4285      	cmp	r5, r0
    42d4:	d100      	bne.n	42d8 <__aeabi_dadd+0x2cc>
    42d6:	e093      	b.n	4400 <__aeabi_dadd+0x3f4>
    42d8:	001d      	movs	r5, r3
    42da:	e6d0      	b.n	407e <__aeabi_dadd+0x72>
    42dc:	0029      	movs	r1, r5
    42de:	3e1f      	subs	r6, #31
    42e0:	40f1      	lsrs	r1, r6
    42e2:	2b20      	cmp	r3, #32
    42e4:	d100      	bne.n	42e8 <__aeabi_dadd+0x2dc>
    42e6:	e08d      	b.n	4404 <__aeabi_dadd+0x3f8>
    42e8:	2240      	movs	r2, #64	; 0x40
    42ea:	1ad3      	subs	r3, r2, r3
    42ec:	409d      	lsls	r5, r3
    42ee:	432f      	orrs	r7, r5
    42f0:	1e7d      	subs	r5, r7, #1
    42f2:	41af      	sbcs	r7, r5
    42f4:	2400      	movs	r4, #0
    42f6:	430f      	orrs	r7, r1
    42f8:	2600      	movs	r6, #0
    42fa:	e744      	b.n	4186 <__aeabi_dadd+0x17a>
    42fc:	002b      	movs	r3, r5
    42fe:	0008      	movs	r0, r1
    4300:	3b20      	subs	r3, #32
    4302:	40d8      	lsrs	r0, r3
    4304:	0003      	movs	r3, r0
    4306:	2d20      	cmp	r5, #32
    4308:	d100      	bne.n	430c <__aeabi_dadd+0x300>
    430a:	e07d      	b.n	4408 <__aeabi_dadd+0x3fc>
    430c:	2040      	movs	r0, #64	; 0x40
    430e:	1b45      	subs	r5, r0, r5
    4310:	40a9      	lsls	r1, r5
    4312:	430a      	orrs	r2, r1
    4314:	1e51      	subs	r1, r2, #1
    4316:	418a      	sbcs	r2, r1
    4318:	2100      	movs	r1, #0
    431a:	431a      	orrs	r2, r3
    431c:	e6c7      	b.n	40ae <__aeabi_dadd+0xa2>
    431e:	2e00      	cmp	r6, #0
    4320:	d050      	beq.n	43c4 <__aeabi_dadd+0x3b8>
    4322:	4e1a      	ldr	r6, [pc, #104]	; (438c <__aeabi_dadd+0x380>)
    4324:	42b0      	cmp	r0, r6
    4326:	d057      	beq.n	43d8 <__aeabi_dadd+0x3cc>
    4328:	2680      	movs	r6, #128	; 0x80
    432a:	426b      	negs	r3, r5
    432c:	4699      	mov	r9, r3
    432e:	0436      	lsls	r6, r6, #16
    4330:	4334      	orrs	r4, r6
    4332:	464b      	mov	r3, r9
    4334:	2b38      	cmp	r3, #56	; 0x38
    4336:	dd00      	ble.n	433a <__aeabi_dadd+0x32e>
    4338:	e0d6      	b.n	44e8 <__aeabi_dadd+0x4dc>
    433a:	2b1f      	cmp	r3, #31
    433c:	dd00      	ble.n	4340 <__aeabi_dadd+0x334>
    433e:	e135      	b.n	45ac <__aeabi_dadd+0x5a0>
    4340:	2620      	movs	r6, #32
    4342:	1af5      	subs	r5, r6, r3
    4344:	0026      	movs	r6, r4
    4346:	40ae      	lsls	r6, r5
    4348:	46b2      	mov	sl, r6
    434a:	003e      	movs	r6, r7
    434c:	40de      	lsrs	r6, r3
    434e:	46ac      	mov	ip, r5
    4350:	0035      	movs	r5, r6
    4352:	4656      	mov	r6, sl
    4354:	432e      	orrs	r6, r5
    4356:	4665      	mov	r5, ip
    4358:	40af      	lsls	r7, r5
    435a:	1e7d      	subs	r5, r7, #1
    435c:	41af      	sbcs	r7, r5
    435e:	40dc      	lsrs	r4, r3
    4360:	4337      	orrs	r7, r6
    4362:	1bd7      	subs	r7, r2, r7
    4364:	42ba      	cmp	r2, r7
    4366:	4192      	sbcs	r2, r2
    4368:	1b0c      	subs	r4, r1, r4
    436a:	4252      	negs	r2, r2
    436c:	1aa4      	subs	r4, r4, r2
    436e:	0006      	movs	r6, r0
    4370:	46d8      	mov	r8, fp
    4372:	e6a3      	b.n	40bc <__aeabi_dadd+0xb0>
    4374:	4664      	mov	r4, ip
    4376:	4667      	mov	r7, ip
    4378:	432c      	orrs	r4, r5
    437a:	d000      	beq.n	437e <__aeabi_dadd+0x372>
    437c:	e6a2      	b.n	40c4 <__aeabi_dadd+0xb8>
    437e:	2500      	movs	r5, #0
    4380:	2600      	movs	r6, #0
    4382:	2700      	movs	r7, #0
    4384:	e706      	b.n	4194 <__aeabi_dadd+0x188>
    4386:	001e      	movs	r6, r3
    4388:	e6c4      	b.n	4114 <__aeabi_dadd+0x108>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	000007ff 	.word	0x000007ff
    4390:	ff7fffff 	.word	0xff7fffff
    4394:	800fffff 	.word	0x800fffff
    4398:	2b1f      	cmp	r3, #31
    439a:	dc63      	bgt.n	4464 <__aeabi_dadd+0x458>
    439c:	2020      	movs	r0, #32
    439e:	1ac3      	subs	r3, r0, r3
    43a0:	0008      	movs	r0, r1
    43a2:	4098      	lsls	r0, r3
    43a4:	469c      	mov	ip, r3
    43a6:	4683      	mov	fp, r0
    43a8:	4653      	mov	r3, sl
    43aa:	0010      	movs	r0, r2
    43ac:	40d8      	lsrs	r0, r3
    43ae:	0003      	movs	r3, r0
    43b0:	4658      	mov	r0, fp
    43b2:	4318      	orrs	r0, r3
    43b4:	4663      	mov	r3, ip
    43b6:	409a      	lsls	r2, r3
    43b8:	1e53      	subs	r3, r2, #1
    43ba:	419a      	sbcs	r2, r3
    43bc:	4653      	mov	r3, sl
    43be:	4302      	orrs	r2, r0
    43c0:	40d9      	lsrs	r1, r3
    43c2:	e703      	b.n	41cc <__aeabi_dadd+0x1c0>
    43c4:	0026      	movs	r6, r4
    43c6:	433e      	orrs	r6, r7
    43c8:	d006      	beq.n	43d8 <__aeabi_dadd+0x3cc>
    43ca:	43eb      	mvns	r3, r5
    43cc:	4699      	mov	r9, r3
    43ce:	2b00      	cmp	r3, #0
    43d0:	d0c7      	beq.n	4362 <__aeabi_dadd+0x356>
    43d2:	4e94      	ldr	r6, [pc, #592]	; (4624 <__aeabi_dadd+0x618>)
    43d4:	42b0      	cmp	r0, r6
    43d6:	d1ac      	bne.n	4332 <__aeabi_dadd+0x326>
    43d8:	000c      	movs	r4, r1
    43da:	0017      	movs	r7, r2
    43dc:	0006      	movs	r6, r0
    43de:	46d8      	mov	r8, fp
    43e0:	e698      	b.n	4114 <__aeabi_dadd+0x108>
    43e2:	4b90      	ldr	r3, [pc, #576]	; (4624 <__aeabi_dadd+0x618>)
    43e4:	459a      	cmp	sl, r3
    43e6:	d00b      	beq.n	4400 <__aeabi_dadd+0x3f4>
    43e8:	4682      	mov	sl, r0
    43ea:	e6e7      	b.n	41bc <__aeabi_dadd+0x1b0>
    43ec:	2800      	cmp	r0, #0
    43ee:	d000      	beq.n	43f2 <__aeabi_dadd+0x3e6>
    43f0:	e09e      	b.n	4530 <__aeabi_dadd+0x524>
    43f2:	0018      	movs	r0, r3
    43f4:	4310      	orrs	r0, r2
    43f6:	d100      	bne.n	43fa <__aeabi_dadd+0x3ee>
    43f8:	e0e9      	b.n	45ce <__aeabi_dadd+0x5c2>
    43fa:	001c      	movs	r4, r3
    43fc:	0017      	movs	r7, r2
    43fe:	46d8      	mov	r8, fp
    4400:	4e88      	ldr	r6, [pc, #544]	; (4624 <__aeabi_dadd+0x618>)
    4402:	e687      	b.n	4114 <__aeabi_dadd+0x108>
    4404:	2500      	movs	r5, #0
    4406:	e772      	b.n	42ee <__aeabi_dadd+0x2e2>
    4408:	2100      	movs	r1, #0
    440a:	e782      	b.n	4312 <__aeabi_dadd+0x306>
    440c:	0023      	movs	r3, r4
    440e:	433b      	orrs	r3, r7
    4410:	2e00      	cmp	r6, #0
    4412:	d000      	beq.n	4416 <__aeabi_dadd+0x40a>
    4414:	e0ab      	b.n	456e <__aeabi_dadd+0x562>
    4416:	2b00      	cmp	r3, #0
    4418:	d100      	bne.n	441c <__aeabi_dadd+0x410>
    441a:	e0e7      	b.n	45ec <__aeabi_dadd+0x5e0>
    441c:	000b      	movs	r3, r1
    441e:	4313      	orrs	r3, r2
    4420:	d100      	bne.n	4424 <__aeabi_dadd+0x418>
    4422:	e677      	b.n	4114 <__aeabi_dadd+0x108>
    4424:	18ba      	adds	r2, r7, r2
    4426:	42ba      	cmp	r2, r7
    4428:	41bf      	sbcs	r7, r7
    442a:	1864      	adds	r4, r4, r1
    442c:	427f      	negs	r7, r7
    442e:	19e4      	adds	r4, r4, r7
    4430:	0223      	lsls	r3, r4, #8
    4432:	d400      	bmi.n	4436 <__aeabi_dadd+0x42a>
    4434:	e0f2      	b.n	461c <__aeabi_dadd+0x610>
    4436:	4b7c      	ldr	r3, [pc, #496]	; (4628 <__aeabi_dadd+0x61c>)
    4438:	0017      	movs	r7, r2
    443a:	401c      	ands	r4, r3
    443c:	0006      	movs	r6, r0
    443e:	e669      	b.n	4114 <__aeabi_dadd+0x108>
    4440:	0020      	movs	r0, r4
    4442:	4338      	orrs	r0, r7
    4444:	2e00      	cmp	r6, #0
    4446:	d1d1      	bne.n	43ec <__aeabi_dadd+0x3e0>
    4448:	2800      	cmp	r0, #0
    444a:	d15b      	bne.n	4504 <__aeabi_dadd+0x4f8>
    444c:	001c      	movs	r4, r3
    444e:	4314      	orrs	r4, r2
    4450:	d100      	bne.n	4454 <__aeabi_dadd+0x448>
    4452:	e0a8      	b.n	45a6 <__aeabi_dadd+0x59a>
    4454:	001c      	movs	r4, r3
    4456:	0017      	movs	r7, r2
    4458:	46d8      	mov	r8, fp
    445a:	e65b      	b.n	4114 <__aeabi_dadd+0x108>
    445c:	0006      	movs	r6, r0
    445e:	2400      	movs	r4, #0
    4460:	2700      	movs	r7, #0
    4462:	e697      	b.n	4194 <__aeabi_dadd+0x188>
    4464:	4650      	mov	r0, sl
    4466:	000b      	movs	r3, r1
    4468:	3820      	subs	r0, #32
    446a:	40c3      	lsrs	r3, r0
    446c:	4699      	mov	r9, r3
    446e:	4653      	mov	r3, sl
    4470:	2b20      	cmp	r3, #32
    4472:	d100      	bne.n	4476 <__aeabi_dadd+0x46a>
    4474:	e095      	b.n	45a2 <__aeabi_dadd+0x596>
    4476:	2340      	movs	r3, #64	; 0x40
    4478:	4650      	mov	r0, sl
    447a:	1a1b      	subs	r3, r3, r0
    447c:	4099      	lsls	r1, r3
    447e:	430a      	orrs	r2, r1
    4480:	1e51      	subs	r1, r2, #1
    4482:	418a      	sbcs	r2, r1
    4484:	464b      	mov	r3, r9
    4486:	2100      	movs	r1, #0
    4488:	431a      	orrs	r2, r3
    448a:	e69f      	b.n	41cc <__aeabi_dadd+0x1c0>
    448c:	2e00      	cmp	r6, #0
    448e:	d130      	bne.n	44f2 <__aeabi_dadd+0x4e6>
    4490:	0026      	movs	r6, r4
    4492:	433e      	orrs	r6, r7
    4494:	d067      	beq.n	4566 <__aeabi_dadd+0x55a>
    4496:	43db      	mvns	r3, r3
    4498:	469a      	mov	sl, r3
    449a:	2b00      	cmp	r3, #0
    449c:	d01c      	beq.n	44d8 <__aeabi_dadd+0x4cc>
    449e:	4e61      	ldr	r6, [pc, #388]	; (4624 <__aeabi_dadd+0x618>)
    44a0:	42b0      	cmp	r0, r6
    44a2:	d060      	beq.n	4566 <__aeabi_dadd+0x55a>
    44a4:	4653      	mov	r3, sl
    44a6:	2b38      	cmp	r3, #56	; 0x38
    44a8:	dd00      	ble.n	44ac <__aeabi_dadd+0x4a0>
    44aa:	e096      	b.n	45da <__aeabi_dadd+0x5ce>
    44ac:	2b1f      	cmp	r3, #31
    44ae:	dd00      	ble.n	44b2 <__aeabi_dadd+0x4a6>
    44b0:	e09f      	b.n	45f2 <__aeabi_dadd+0x5e6>
    44b2:	2620      	movs	r6, #32
    44b4:	1af3      	subs	r3, r6, r3
    44b6:	0026      	movs	r6, r4
    44b8:	409e      	lsls	r6, r3
    44ba:	469c      	mov	ip, r3
    44bc:	46b3      	mov	fp, r6
    44be:	4653      	mov	r3, sl
    44c0:	003e      	movs	r6, r7
    44c2:	40de      	lsrs	r6, r3
    44c4:	0033      	movs	r3, r6
    44c6:	465e      	mov	r6, fp
    44c8:	431e      	orrs	r6, r3
    44ca:	4663      	mov	r3, ip
    44cc:	409f      	lsls	r7, r3
    44ce:	1e7b      	subs	r3, r7, #1
    44d0:	419f      	sbcs	r7, r3
    44d2:	4653      	mov	r3, sl
    44d4:	40dc      	lsrs	r4, r3
    44d6:	4337      	orrs	r7, r6
    44d8:	18bf      	adds	r7, r7, r2
    44da:	4297      	cmp	r7, r2
    44dc:	4192      	sbcs	r2, r2
    44de:	1864      	adds	r4, r4, r1
    44e0:	4252      	negs	r2, r2
    44e2:	18a4      	adds	r4, r4, r2
    44e4:	0006      	movs	r6, r0
    44e6:	e678      	b.n	41da <__aeabi_dadd+0x1ce>
    44e8:	4327      	orrs	r7, r4
    44ea:	1e7c      	subs	r4, r7, #1
    44ec:	41a7      	sbcs	r7, r4
    44ee:	2400      	movs	r4, #0
    44f0:	e737      	b.n	4362 <__aeabi_dadd+0x356>
    44f2:	4e4c      	ldr	r6, [pc, #304]	; (4624 <__aeabi_dadd+0x618>)
    44f4:	42b0      	cmp	r0, r6
    44f6:	d036      	beq.n	4566 <__aeabi_dadd+0x55a>
    44f8:	2680      	movs	r6, #128	; 0x80
    44fa:	425b      	negs	r3, r3
    44fc:	0436      	lsls	r6, r6, #16
    44fe:	469a      	mov	sl, r3
    4500:	4334      	orrs	r4, r6
    4502:	e7cf      	b.n	44a4 <__aeabi_dadd+0x498>
    4504:	0018      	movs	r0, r3
    4506:	4310      	orrs	r0, r2
    4508:	d100      	bne.n	450c <__aeabi_dadd+0x500>
    450a:	e603      	b.n	4114 <__aeabi_dadd+0x108>
    450c:	1ab8      	subs	r0, r7, r2
    450e:	4684      	mov	ip, r0
    4510:	4567      	cmp	r7, ip
    4512:	41ad      	sbcs	r5, r5
    4514:	1ae0      	subs	r0, r4, r3
    4516:	426d      	negs	r5, r5
    4518:	1b40      	subs	r0, r0, r5
    451a:	0205      	lsls	r5, r0, #8
    451c:	d400      	bmi.n	4520 <__aeabi_dadd+0x514>
    451e:	e62c      	b.n	417a <__aeabi_dadd+0x16e>
    4520:	1bd7      	subs	r7, r2, r7
    4522:	42ba      	cmp	r2, r7
    4524:	4192      	sbcs	r2, r2
    4526:	1b1c      	subs	r4, r3, r4
    4528:	4252      	negs	r2, r2
    452a:	1aa4      	subs	r4, r4, r2
    452c:	46d8      	mov	r8, fp
    452e:	e5f1      	b.n	4114 <__aeabi_dadd+0x108>
    4530:	0018      	movs	r0, r3
    4532:	4310      	orrs	r0, r2
    4534:	d100      	bne.n	4538 <__aeabi_dadd+0x52c>
    4536:	e763      	b.n	4400 <__aeabi_dadd+0x3f4>
    4538:	08f8      	lsrs	r0, r7, #3
    453a:	0767      	lsls	r7, r4, #29
    453c:	4307      	orrs	r7, r0
    453e:	2080      	movs	r0, #128	; 0x80
    4540:	08e4      	lsrs	r4, r4, #3
    4542:	0300      	lsls	r0, r0, #12
    4544:	4204      	tst	r4, r0
    4546:	d008      	beq.n	455a <__aeabi_dadd+0x54e>
    4548:	08dd      	lsrs	r5, r3, #3
    454a:	4205      	tst	r5, r0
    454c:	d105      	bne.n	455a <__aeabi_dadd+0x54e>
    454e:	08d2      	lsrs	r2, r2, #3
    4550:	0759      	lsls	r1, r3, #29
    4552:	4311      	orrs	r1, r2
    4554:	000f      	movs	r7, r1
    4556:	002c      	movs	r4, r5
    4558:	46d8      	mov	r8, fp
    455a:	0f7b      	lsrs	r3, r7, #29
    455c:	00e4      	lsls	r4, r4, #3
    455e:	431c      	orrs	r4, r3
    4560:	00ff      	lsls	r7, r7, #3
    4562:	4e30      	ldr	r6, [pc, #192]	; (4624 <__aeabi_dadd+0x618>)
    4564:	e5d6      	b.n	4114 <__aeabi_dadd+0x108>
    4566:	000c      	movs	r4, r1
    4568:	0017      	movs	r7, r2
    456a:	0006      	movs	r6, r0
    456c:	e5d2      	b.n	4114 <__aeabi_dadd+0x108>
    456e:	2b00      	cmp	r3, #0
    4570:	d038      	beq.n	45e4 <__aeabi_dadd+0x5d8>
    4572:	000b      	movs	r3, r1
    4574:	4313      	orrs	r3, r2
    4576:	d100      	bne.n	457a <__aeabi_dadd+0x56e>
    4578:	e742      	b.n	4400 <__aeabi_dadd+0x3f4>
    457a:	08f8      	lsrs	r0, r7, #3
    457c:	0767      	lsls	r7, r4, #29
    457e:	4307      	orrs	r7, r0
    4580:	2080      	movs	r0, #128	; 0x80
    4582:	08e4      	lsrs	r4, r4, #3
    4584:	0300      	lsls	r0, r0, #12
    4586:	4204      	tst	r4, r0
    4588:	d0e7      	beq.n	455a <__aeabi_dadd+0x54e>
    458a:	08cb      	lsrs	r3, r1, #3
    458c:	4203      	tst	r3, r0
    458e:	d1e4      	bne.n	455a <__aeabi_dadd+0x54e>
    4590:	08d2      	lsrs	r2, r2, #3
    4592:	0749      	lsls	r1, r1, #29
    4594:	4311      	orrs	r1, r2
    4596:	000f      	movs	r7, r1
    4598:	001c      	movs	r4, r3
    459a:	e7de      	b.n	455a <__aeabi_dadd+0x54e>
    459c:	2700      	movs	r7, #0
    459e:	2400      	movs	r4, #0
    45a0:	e5d5      	b.n	414e <__aeabi_dadd+0x142>
    45a2:	2100      	movs	r1, #0
    45a4:	e76b      	b.n	447e <__aeabi_dadd+0x472>
    45a6:	2500      	movs	r5, #0
    45a8:	2700      	movs	r7, #0
    45aa:	e5f3      	b.n	4194 <__aeabi_dadd+0x188>
    45ac:	464e      	mov	r6, r9
    45ae:	0025      	movs	r5, r4
    45b0:	3e20      	subs	r6, #32
    45b2:	40f5      	lsrs	r5, r6
    45b4:	464b      	mov	r3, r9
    45b6:	002e      	movs	r6, r5
    45b8:	2b20      	cmp	r3, #32
    45ba:	d02d      	beq.n	4618 <__aeabi_dadd+0x60c>
    45bc:	2540      	movs	r5, #64	; 0x40
    45be:	1aed      	subs	r5, r5, r3
    45c0:	40ac      	lsls	r4, r5
    45c2:	4327      	orrs	r7, r4
    45c4:	1e7c      	subs	r4, r7, #1
    45c6:	41a7      	sbcs	r7, r4
    45c8:	2400      	movs	r4, #0
    45ca:	4337      	orrs	r7, r6
    45cc:	e6c9      	b.n	4362 <__aeabi_dadd+0x356>
    45ce:	2480      	movs	r4, #128	; 0x80
    45d0:	2500      	movs	r5, #0
    45d2:	0324      	lsls	r4, r4, #12
    45d4:	4e13      	ldr	r6, [pc, #76]	; (4624 <__aeabi_dadd+0x618>)
    45d6:	2700      	movs	r7, #0
    45d8:	e5dc      	b.n	4194 <__aeabi_dadd+0x188>
    45da:	4327      	orrs	r7, r4
    45dc:	1e7c      	subs	r4, r7, #1
    45de:	41a7      	sbcs	r7, r4
    45e0:	2400      	movs	r4, #0
    45e2:	e779      	b.n	44d8 <__aeabi_dadd+0x4cc>
    45e4:	000c      	movs	r4, r1
    45e6:	0017      	movs	r7, r2
    45e8:	4e0e      	ldr	r6, [pc, #56]	; (4624 <__aeabi_dadd+0x618>)
    45ea:	e593      	b.n	4114 <__aeabi_dadd+0x108>
    45ec:	000c      	movs	r4, r1
    45ee:	0017      	movs	r7, r2
    45f0:	e590      	b.n	4114 <__aeabi_dadd+0x108>
    45f2:	4656      	mov	r6, sl
    45f4:	0023      	movs	r3, r4
    45f6:	3e20      	subs	r6, #32
    45f8:	40f3      	lsrs	r3, r6
    45fa:	4699      	mov	r9, r3
    45fc:	4653      	mov	r3, sl
    45fe:	2b20      	cmp	r3, #32
    4600:	d00e      	beq.n	4620 <__aeabi_dadd+0x614>
    4602:	2340      	movs	r3, #64	; 0x40
    4604:	4656      	mov	r6, sl
    4606:	1b9b      	subs	r3, r3, r6
    4608:	409c      	lsls	r4, r3
    460a:	4327      	orrs	r7, r4
    460c:	1e7c      	subs	r4, r7, #1
    460e:	41a7      	sbcs	r7, r4
    4610:	464b      	mov	r3, r9
    4612:	2400      	movs	r4, #0
    4614:	431f      	orrs	r7, r3
    4616:	e75f      	b.n	44d8 <__aeabi_dadd+0x4cc>
    4618:	2400      	movs	r4, #0
    461a:	e7d2      	b.n	45c2 <__aeabi_dadd+0x5b6>
    461c:	0017      	movs	r7, r2
    461e:	e5b2      	b.n	4186 <__aeabi_dadd+0x17a>
    4620:	2400      	movs	r4, #0
    4622:	e7f2      	b.n	460a <__aeabi_dadd+0x5fe>
    4624:	000007ff 	.word	0x000007ff
    4628:	ff7fffff 	.word	0xff7fffff

0000462c <__aeabi_dmul>:
    462c:	b5f0      	push	{r4, r5, r6, r7, lr}
    462e:	4657      	mov	r7, sl
    4630:	4645      	mov	r5, r8
    4632:	46de      	mov	lr, fp
    4634:	464e      	mov	r6, r9
    4636:	b5e0      	push	{r5, r6, r7, lr}
    4638:	030c      	lsls	r4, r1, #12
    463a:	4698      	mov	r8, r3
    463c:	004e      	lsls	r6, r1, #1
    463e:	0b23      	lsrs	r3, r4, #12
    4640:	b087      	sub	sp, #28
    4642:	0007      	movs	r7, r0
    4644:	4692      	mov	sl, r2
    4646:	469b      	mov	fp, r3
    4648:	0d76      	lsrs	r6, r6, #21
    464a:	0fcd      	lsrs	r5, r1, #31
    464c:	2e00      	cmp	r6, #0
    464e:	d06b      	beq.n	4728 <__aeabi_dmul+0xfc>
    4650:	4b6d      	ldr	r3, [pc, #436]	; (4808 <__aeabi_dmul+0x1dc>)
    4652:	429e      	cmp	r6, r3
    4654:	d035      	beq.n	46c2 <__aeabi_dmul+0x96>
    4656:	2480      	movs	r4, #128	; 0x80
    4658:	465b      	mov	r3, fp
    465a:	0f42      	lsrs	r2, r0, #29
    465c:	0424      	lsls	r4, r4, #16
    465e:	00db      	lsls	r3, r3, #3
    4660:	4314      	orrs	r4, r2
    4662:	431c      	orrs	r4, r3
    4664:	00c3      	lsls	r3, r0, #3
    4666:	4699      	mov	r9, r3
    4668:	4b68      	ldr	r3, [pc, #416]	; (480c <__aeabi_dmul+0x1e0>)
    466a:	46a3      	mov	fp, r4
    466c:	469c      	mov	ip, r3
    466e:	2300      	movs	r3, #0
    4670:	2700      	movs	r7, #0
    4672:	4466      	add	r6, ip
    4674:	9302      	str	r3, [sp, #8]
    4676:	4643      	mov	r3, r8
    4678:	031c      	lsls	r4, r3, #12
    467a:	005a      	lsls	r2, r3, #1
    467c:	0fdb      	lsrs	r3, r3, #31
    467e:	4650      	mov	r0, sl
    4680:	0b24      	lsrs	r4, r4, #12
    4682:	0d52      	lsrs	r2, r2, #21
    4684:	4698      	mov	r8, r3
    4686:	d100      	bne.n	468a <__aeabi_dmul+0x5e>
    4688:	e076      	b.n	4778 <__aeabi_dmul+0x14c>
    468a:	4b5f      	ldr	r3, [pc, #380]	; (4808 <__aeabi_dmul+0x1dc>)
    468c:	429a      	cmp	r2, r3
    468e:	d06d      	beq.n	476c <__aeabi_dmul+0x140>
    4690:	2380      	movs	r3, #128	; 0x80
    4692:	0f41      	lsrs	r1, r0, #29
    4694:	041b      	lsls	r3, r3, #16
    4696:	430b      	orrs	r3, r1
    4698:	495c      	ldr	r1, [pc, #368]	; (480c <__aeabi_dmul+0x1e0>)
    469a:	00e4      	lsls	r4, r4, #3
    469c:	468c      	mov	ip, r1
    469e:	431c      	orrs	r4, r3
    46a0:	00c3      	lsls	r3, r0, #3
    46a2:	2000      	movs	r0, #0
    46a4:	4462      	add	r2, ip
    46a6:	4641      	mov	r1, r8
    46a8:	18b6      	adds	r6, r6, r2
    46aa:	4069      	eors	r1, r5
    46ac:	1c72      	adds	r2, r6, #1
    46ae:	9101      	str	r1, [sp, #4]
    46b0:	4694      	mov	ip, r2
    46b2:	4307      	orrs	r7, r0
    46b4:	2f0f      	cmp	r7, #15
    46b6:	d900      	bls.n	46ba <__aeabi_dmul+0x8e>
    46b8:	e0b0      	b.n	481c <__aeabi_dmul+0x1f0>
    46ba:	4a55      	ldr	r2, [pc, #340]	; (4810 <__aeabi_dmul+0x1e4>)
    46bc:	00bf      	lsls	r7, r7, #2
    46be:	59d2      	ldr	r2, [r2, r7]
    46c0:	4697      	mov	pc, r2
    46c2:	465b      	mov	r3, fp
    46c4:	4303      	orrs	r3, r0
    46c6:	4699      	mov	r9, r3
    46c8:	d000      	beq.n	46cc <__aeabi_dmul+0xa0>
    46ca:	e087      	b.n	47dc <__aeabi_dmul+0x1b0>
    46cc:	2300      	movs	r3, #0
    46ce:	469b      	mov	fp, r3
    46d0:	3302      	adds	r3, #2
    46d2:	2708      	movs	r7, #8
    46d4:	9302      	str	r3, [sp, #8]
    46d6:	e7ce      	b.n	4676 <__aeabi_dmul+0x4a>
    46d8:	4642      	mov	r2, r8
    46da:	9201      	str	r2, [sp, #4]
    46dc:	2802      	cmp	r0, #2
    46de:	d067      	beq.n	47b0 <__aeabi_dmul+0x184>
    46e0:	2803      	cmp	r0, #3
    46e2:	d100      	bne.n	46e6 <__aeabi_dmul+0xba>
    46e4:	e20e      	b.n	4b04 <__aeabi_dmul+0x4d8>
    46e6:	2801      	cmp	r0, #1
    46e8:	d000      	beq.n	46ec <__aeabi_dmul+0xc0>
    46ea:	e162      	b.n	49b2 <__aeabi_dmul+0x386>
    46ec:	2300      	movs	r3, #0
    46ee:	2400      	movs	r4, #0
    46f0:	2200      	movs	r2, #0
    46f2:	4699      	mov	r9, r3
    46f4:	9901      	ldr	r1, [sp, #4]
    46f6:	4001      	ands	r1, r0
    46f8:	b2cd      	uxtb	r5, r1
    46fa:	2100      	movs	r1, #0
    46fc:	0312      	lsls	r2, r2, #12
    46fe:	0d0b      	lsrs	r3, r1, #20
    4700:	0b12      	lsrs	r2, r2, #12
    4702:	051b      	lsls	r3, r3, #20
    4704:	4313      	orrs	r3, r2
    4706:	4a43      	ldr	r2, [pc, #268]	; (4814 <__aeabi_dmul+0x1e8>)
    4708:	0524      	lsls	r4, r4, #20
    470a:	4013      	ands	r3, r2
    470c:	431c      	orrs	r4, r3
    470e:	0064      	lsls	r4, r4, #1
    4710:	07ed      	lsls	r5, r5, #31
    4712:	0864      	lsrs	r4, r4, #1
    4714:	432c      	orrs	r4, r5
    4716:	4648      	mov	r0, r9
    4718:	0021      	movs	r1, r4
    471a:	b007      	add	sp, #28
    471c:	bc3c      	pop	{r2, r3, r4, r5}
    471e:	4690      	mov	r8, r2
    4720:	4699      	mov	r9, r3
    4722:	46a2      	mov	sl, r4
    4724:	46ab      	mov	fp, r5
    4726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4728:	4303      	orrs	r3, r0
    472a:	4699      	mov	r9, r3
    472c:	d04f      	beq.n	47ce <__aeabi_dmul+0x1a2>
    472e:	465b      	mov	r3, fp
    4730:	2b00      	cmp	r3, #0
    4732:	d100      	bne.n	4736 <__aeabi_dmul+0x10a>
    4734:	e189      	b.n	4a4a <__aeabi_dmul+0x41e>
    4736:	4658      	mov	r0, fp
    4738:	f000 fe24 	bl	5384 <__clzsi2>
    473c:	0003      	movs	r3, r0
    473e:	3b0b      	subs	r3, #11
    4740:	2b1c      	cmp	r3, #28
    4742:	dd00      	ble.n	4746 <__aeabi_dmul+0x11a>
    4744:	e17a      	b.n	4a3c <__aeabi_dmul+0x410>
    4746:	221d      	movs	r2, #29
    4748:	1ad3      	subs	r3, r2, r3
    474a:	003a      	movs	r2, r7
    474c:	0001      	movs	r1, r0
    474e:	465c      	mov	r4, fp
    4750:	40da      	lsrs	r2, r3
    4752:	3908      	subs	r1, #8
    4754:	408c      	lsls	r4, r1
    4756:	0013      	movs	r3, r2
    4758:	408f      	lsls	r7, r1
    475a:	4323      	orrs	r3, r4
    475c:	469b      	mov	fp, r3
    475e:	46b9      	mov	r9, r7
    4760:	2300      	movs	r3, #0
    4762:	4e2d      	ldr	r6, [pc, #180]	; (4818 <__aeabi_dmul+0x1ec>)
    4764:	2700      	movs	r7, #0
    4766:	1a36      	subs	r6, r6, r0
    4768:	9302      	str	r3, [sp, #8]
    476a:	e784      	b.n	4676 <__aeabi_dmul+0x4a>
    476c:	4653      	mov	r3, sl
    476e:	4323      	orrs	r3, r4
    4770:	d12a      	bne.n	47c8 <__aeabi_dmul+0x19c>
    4772:	2400      	movs	r4, #0
    4774:	2002      	movs	r0, #2
    4776:	e796      	b.n	46a6 <__aeabi_dmul+0x7a>
    4778:	4653      	mov	r3, sl
    477a:	4323      	orrs	r3, r4
    477c:	d020      	beq.n	47c0 <__aeabi_dmul+0x194>
    477e:	2c00      	cmp	r4, #0
    4780:	d100      	bne.n	4784 <__aeabi_dmul+0x158>
    4782:	e157      	b.n	4a34 <__aeabi_dmul+0x408>
    4784:	0020      	movs	r0, r4
    4786:	f000 fdfd 	bl	5384 <__clzsi2>
    478a:	0003      	movs	r3, r0
    478c:	3b0b      	subs	r3, #11
    478e:	2b1c      	cmp	r3, #28
    4790:	dd00      	ble.n	4794 <__aeabi_dmul+0x168>
    4792:	e149      	b.n	4a28 <__aeabi_dmul+0x3fc>
    4794:	211d      	movs	r1, #29
    4796:	1acb      	subs	r3, r1, r3
    4798:	4651      	mov	r1, sl
    479a:	0002      	movs	r2, r0
    479c:	40d9      	lsrs	r1, r3
    479e:	4653      	mov	r3, sl
    47a0:	3a08      	subs	r2, #8
    47a2:	4094      	lsls	r4, r2
    47a4:	4093      	lsls	r3, r2
    47a6:	430c      	orrs	r4, r1
    47a8:	4a1b      	ldr	r2, [pc, #108]	; (4818 <__aeabi_dmul+0x1ec>)
    47aa:	1a12      	subs	r2, r2, r0
    47ac:	2000      	movs	r0, #0
    47ae:	e77a      	b.n	46a6 <__aeabi_dmul+0x7a>
    47b0:	2501      	movs	r5, #1
    47b2:	9b01      	ldr	r3, [sp, #4]
    47b4:	4c14      	ldr	r4, [pc, #80]	; (4808 <__aeabi_dmul+0x1dc>)
    47b6:	401d      	ands	r5, r3
    47b8:	2300      	movs	r3, #0
    47ba:	2200      	movs	r2, #0
    47bc:	4699      	mov	r9, r3
    47be:	e79c      	b.n	46fa <__aeabi_dmul+0xce>
    47c0:	2400      	movs	r4, #0
    47c2:	2200      	movs	r2, #0
    47c4:	2001      	movs	r0, #1
    47c6:	e76e      	b.n	46a6 <__aeabi_dmul+0x7a>
    47c8:	4653      	mov	r3, sl
    47ca:	2003      	movs	r0, #3
    47cc:	e76b      	b.n	46a6 <__aeabi_dmul+0x7a>
    47ce:	2300      	movs	r3, #0
    47d0:	469b      	mov	fp, r3
    47d2:	3301      	adds	r3, #1
    47d4:	2704      	movs	r7, #4
    47d6:	2600      	movs	r6, #0
    47d8:	9302      	str	r3, [sp, #8]
    47da:	e74c      	b.n	4676 <__aeabi_dmul+0x4a>
    47dc:	2303      	movs	r3, #3
    47de:	4681      	mov	r9, r0
    47e0:	270c      	movs	r7, #12
    47e2:	9302      	str	r3, [sp, #8]
    47e4:	e747      	b.n	4676 <__aeabi_dmul+0x4a>
    47e6:	2280      	movs	r2, #128	; 0x80
    47e8:	2300      	movs	r3, #0
    47ea:	2500      	movs	r5, #0
    47ec:	0312      	lsls	r2, r2, #12
    47ee:	4699      	mov	r9, r3
    47f0:	4c05      	ldr	r4, [pc, #20]	; (4808 <__aeabi_dmul+0x1dc>)
    47f2:	e782      	b.n	46fa <__aeabi_dmul+0xce>
    47f4:	465c      	mov	r4, fp
    47f6:	464b      	mov	r3, r9
    47f8:	9802      	ldr	r0, [sp, #8]
    47fa:	e76f      	b.n	46dc <__aeabi_dmul+0xb0>
    47fc:	465c      	mov	r4, fp
    47fe:	464b      	mov	r3, r9
    4800:	9501      	str	r5, [sp, #4]
    4802:	9802      	ldr	r0, [sp, #8]
    4804:	e76a      	b.n	46dc <__aeabi_dmul+0xb0>
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	000007ff 	.word	0x000007ff
    480c:	fffffc01 	.word	0xfffffc01
    4810:	000059ec 	.word	0x000059ec
    4814:	800fffff 	.word	0x800fffff
    4818:	fffffc0d 	.word	0xfffffc0d
    481c:	464a      	mov	r2, r9
    481e:	4649      	mov	r1, r9
    4820:	0c17      	lsrs	r7, r2, #16
    4822:	0c1a      	lsrs	r2, r3, #16
    4824:	041b      	lsls	r3, r3, #16
    4826:	0c1b      	lsrs	r3, r3, #16
    4828:	0408      	lsls	r0, r1, #16
    482a:	0019      	movs	r1, r3
    482c:	0c00      	lsrs	r0, r0, #16
    482e:	4341      	muls	r1, r0
    4830:	0015      	movs	r5, r2
    4832:	4688      	mov	r8, r1
    4834:	0019      	movs	r1, r3
    4836:	437d      	muls	r5, r7
    4838:	4379      	muls	r1, r7
    483a:	9503      	str	r5, [sp, #12]
    483c:	4689      	mov	r9, r1
    483e:	0029      	movs	r1, r5
    4840:	0015      	movs	r5, r2
    4842:	4345      	muls	r5, r0
    4844:	444d      	add	r5, r9
    4846:	9502      	str	r5, [sp, #8]
    4848:	4645      	mov	r5, r8
    484a:	0c2d      	lsrs	r5, r5, #16
    484c:	46aa      	mov	sl, r5
    484e:	9d02      	ldr	r5, [sp, #8]
    4850:	4455      	add	r5, sl
    4852:	45a9      	cmp	r9, r5
    4854:	d906      	bls.n	4864 <__aeabi_dmul+0x238>
    4856:	468a      	mov	sl, r1
    4858:	2180      	movs	r1, #128	; 0x80
    485a:	0249      	lsls	r1, r1, #9
    485c:	4689      	mov	r9, r1
    485e:	44ca      	add	sl, r9
    4860:	4651      	mov	r1, sl
    4862:	9103      	str	r1, [sp, #12]
    4864:	0c29      	lsrs	r1, r5, #16
    4866:	9104      	str	r1, [sp, #16]
    4868:	4641      	mov	r1, r8
    486a:	0409      	lsls	r1, r1, #16
    486c:	042d      	lsls	r5, r5, #16
    486e:	0c09      	lsrs	r1, r1, #16
    4870:	4688      	mov	r8, r1
    4872:	0029      	movs	r1, r5
    4874:	0c25      	lsrs	r5, r4, #16
    4876:	0424      	lsls	r4, r4, #16
    4878:	4441      	add	r1, r8
    487a:	0c24      	lsrs	r4, r4, #16
    487c:	9105      	str	r1, [sp, #20]
    487e:	0021      	movs	r1, r4
    4880:	4341      	muls	r1, r0
    4882:	4688      	mov	r8, r1
    4884:	0021      	movs	r1, r4
    4886:	4379      	muls	r1, r7
    4888:	468a      	mov	sl, r1
    488a:	4368      	muls	r0, r5
    488c:	4641      	mov	r1, r8
    488e:	4450      	add	r0, sl
    4890:	4681      	mov	r9, r0
    4892:	0c08      	lsrs	r0, r1, #16
    4894:	4448      	add	r0, r9
    4896:	436f      	muls	r7, r5
    4898:	4582      	cmp	sl, r0
    489a:	d903      	bls.n	48a4 <__aeabi_dmul+0x278>
    489c:	2180      	movs	r1, #128	; 0x80
    489e:	0249      	lsls	r1, r1, #9
    48a0:	4689      	mov	r9, r1
    48a2:	444f      	add	r7, r9
    48a4:	0c01      	lsrs	r1, r0, #16
    48a6:	4689      	mov	r9, r1
    48a8:	0039      	movs	r1, r7
    48aa:	4449      	add	r1, r9
    48ac:	9102      	str	r1, [sp, #8]
    48ae:	4641      	mov	r1, r8
    48b0:	040f      	lsls	r7, r1, #16
    48b2:	9904      	ldr	r1, [sp, #16]
    48b4:	0c3f      	lsrs	r7, r7, #16
    48b6:	4688      	mov	r8, r1
    48b8:	0400      	lsls	r0, r0, #16
    48ba:	19c0      	adds	r0, r0, r7
    48bc:	4480      	add	r8, r0
    48be:	4641      	mov	r1, r8
    48c0:	9104      	str	r1, [sp, #16]
    48c2:	4659      	mov	r1, fp
    48c4:	0c0f      	lsrs	r7, r1, #16
    48c6:	0409      	lsls	r1, r1, #16
    48c8:	0c09      	lsrs	r1, r1, #16
    48ca:	4688      	mov	r8, r1
    48cc:	4359      	muls	r1, r3
    48ce:	468a      	mov	sl, r1
    48d0:	0039      	movs	r1, r7
    48d2:	4351      	muls	r1, r2
    48d4:	4689      	mov	r9, r1
    48d6:	4641      	mov	r1, r8
    48d8:	434a      	muls	r2, r1
    48da:	4651      	mov	r1, sl
    48dc:	0c09      	lsrs	r1, r1, #16
    48de:	468b      	mov	fp, r1
    48e0:	437b      	muls	r3, r7
    48e2:	18d2      	adds	r2, r2, r3
    48e4:	445a      	add	r2, fp
    48e6:	4293      	cmp	r3, r2
    48e8:	d903      	bls.n	48f2 <__aeabi_dmul+0x2c6>
    48ea:	2380      	movs	r3, #128	; 0x80
    48ec:	025b      	lsls	r3, r3, #9
    48ee:	469b      	mov	fp, r3
    48f0:	44d9      	add	r9, fp
    48f2:	4651      	mov	r1, sl
    48f4:	0409      	lsls	r1, r1, #16
    48f6:	0c09      	lsrs	r1, r1, #16
    48f8:	468a      	mov	sl, r1
    48fa:	4641      	mov	r1, r8
    48fc:	4361      	muls	r1, r4
    48fe:	437c      	muls	r4, r7
    4900:	0c13      	lsrs	r3, r2, #16
    4902:	0412      	lsls	r2, r2, #16
    4904:	444b      	add	r3, r9
    4906:	4452      	add	r2, sl
    4908:	46a1      	mov	r9, r4
    490a:	468a      	mov	sl, r1
    490c:	003c      	movs	r4, r7
    490e:	4641      	mov	r1, r8
    4910:	436c      	muls	r4, r5
    4912:	434d      	muls	r5, r1
    4914:	4651      	mov	r1, sl
    4916:	444d      	add	r5, r9
    4918:	0c0f      	lsrs	r7, r1, #16
    491a:	197d      	adds	r5, r7, r5
    491c:	45a9      	cmp	r9, r5
    491e:	d903      	bls.n	4928 <__aeabi_dmul+0x2fc>
    4920:	2180      	movs	r1, #128	; 0x80
    4922:	0249      	lsls	r1, r1, #9
    4924:	4688      	mov	r8, r1
    4926:	4444      	add	r4, r8
    4928:	9f04      	ldr	r7, [sp, #16]
    492a:	9903      	ldr	r1, [sp, #12]
    492c:	46b8      	mov	r8, r7
    492e:	4441      	add	r1, r8
    4930:	468b      	mov	fp, r1
    4932:	4583      	cmp	fp, r0
    4934:	4180      	sbcs	r0, r0
    4936:	4241      	negs	r1, r0
    4938:	4688      	mov	r8, r1
    493a:	4651      	mov	r1, sl
    493c:	0408      	lsls	r0, r1, #16
    493e:	042f      	lsls	r7, r5, #16
    4940:	0c00      	lsrs	r0, r0, #16
    4942:	183f      	adds	r7, r7, r0
    4944:	4658      	mov	r0, fp
    4946:	9902      	ldr	r1, [sp, #8]
    4948:	1810      	adds	r0, r2, r0
    494a:	4689      	mov	r9, r1
    494c:	4290      	cmp	r0, r2
    494e:	4192      	sbcs	r2, r2
    4950:	444f      	add	r7, r9
    4952:	46ba      	mov	sl, r7
    4954:	4252      	negs	r2, r2
    4956:	4699      	mov	r9, r3
    4958:	4693      	mov	fp, r2
    495a:	44c2      	add	sl, r8
    495c:	44d1      	add	r9, sl
    495e:	44cb      	add	fp, r9
    4960:	428f      	cmp	r7, r1
    4962:	41bf      	sbcs	r7, r7
    4964:	45c2      	cmp	sl, r8
    4966:	4189      	sbcs	r1, r1
    4968:	4599      	cmp	r9, r3
    496a:	419b      	sbcs	r3, r3
    496c:	4593      	cmp	fp, r2
    496e:	4192      	sbcs	r2, r2
    4970:	427f      	negs	r7, r7
    4972:	4249      	negs	r1, r1
    4974:	0c2d      	lsrs	r5, r5, #16
    4976:	4252      	negs	r2, r2
    4978:	430f      	orrs	r7, r1
    497a:	425b      	negs	r3, r3
    497c:	4313      	orrs	r3, r2
    497e:	197f      	adds	r7, r7, r5
    4980:	18ff      	adds	r7, r7, r3
    4982:	465b      	mov	r3, fp
    4984:	193c      	adds	r4, r7, r4
    4986:	0ddb      	lsrs	r3, r3, #23
    4988:	9a05      	ldr	r2, [sp, #20]
    498a:	0264      	lsls	r4, r4, #9
    498c:	431c      	orrs	r4, r3
    498e:	0243      	lsls	r3, r0, #9
    4990:	4313      	orrs	r3, r2
    4992:	1e5d      	subs	r5, r3, #1
    4994:	41ab      	sbcs	r3, r5
    4996:	465a      	mov	r2, fp
    4998:	0dc0      	lsrs	r0, r0, #23
    499a:	4303      	orrs	r3, r0
    499c:	0252      	lsls	r2, r2, #9
    499e:	4313      	orrs	r3, r2
    49a0:	01e2      	lsls	r2, r4, #7
    49a2:	d556      	bpl.n	4a52 <__aeabi_dmul+0x426>
    49a4:	2001      	movs	r0, #1
    49a6:	085a      	lsrs	r2, r3, #1
    49a8:	4003      	ands	r3, r0
    49aa:	4313      	orrs	r3, r2
    49ac:	07e2      	lsls	r2, r4, #31
    49ae:	4313      	orrs	r3, r2
    49b0:	0864      	lsrs	r4, r4, #1
    49b2:	485a      	ldr	r0, [pc, #360]	; (4b1c <__aeabi_dmul+0x4f0>)
    49b4:	4460      	add	r0, ip
    49b6:	2800      	cmp	r0, #0
    49b8:	dd4d      	ble.n	4a56 <__aeabi_dmul+0x42a>
    49ba:	075a      	lsls	r2, r3, #29
    49bc:	d009      	beq.n	49d2 <__aeabi_dmul+0x3a6>
    49be:	220f      	movs	r2, #15
    49c0:	401a      	ands	r2, r3
    49c2:	2a04      	cmp	r2, #4
    49c4:	d005      	beq.n	49d2 <__aeabi_dmul+0x3a6>
    49c6:	1d1a      	adds	r2, r3, #4
    49c8:	429a      	cmp	r2, r3
    49ca:	419b      	sbcs	r3, r3
    49cc:	425b      	negs	r3, r3
    49ce:	18e4      	adds	r4, r4, r3
    49d0:	0013      	movs	r3, r2
    49d2:	01e2      	lsls	r2, r4, #7
    49d4:	d504      	bpl.n	49e0 <__aeabi_dmul+0x3b4>
    49d6:	2080      	movs	r0, #128	; 0x80
    49d8:	4a51      	ldr	r2, [pc, #324]	; (4b20 <__aeabi_dmul+0x4f4>)
    49da:	00c0      	lsls	r0, r0, #3
    49dc:	4014      	ands	r4, r2
    49de:	4460      	add	r0, ip
    49e0:	4a50      	ldr	r2, [pc, #320]	; (4b24 <__aeabi_dmul+0x4f8>)
    49e2:	4290      	cmp	r0, r2
    49e4:	dd00      	ble.n	49e8 <__aeabi_dmul+0x3bc>
    49e6:	e6e3      	b.n	47b0 <__aeabi_dmul+0x184>
    49e8:	2501      	movs	r5, #1
    49ea:	08db      	lsrs	r3, r3, #3
    49ec:	0762      	lsls	r2, r4, #29
    49ee:	431a      	orrs	r2, r3
    49f0:	0264      	lsls	r4, r4, #9
    49f2:	9b01      	ldr	r3, [sp, #4]
    49f4:	4691      	mov	r9, r2
    49f6:	0b22      	lsrs	r2, r4, #12
    49f8:	0544      	lsls	r4, r0, #21
    49fa:	0d64      	lsrs	r4, r4, #21
    49fc:	401d      	ands	r5, r3
    49fe:	e67c      	b.n	46fa <__aeabi_dmul+0xce>
    4a00:	2280      	movs	r2, #128	; 0x80
    4a02:	4659      	mov	r1, fp
    4a04:	0312      	lsls	r2, r2, #12
    4a06:	4211      	tst	r1, r2
    4a08:	d008      	beq.n	4a1c <__aeabi_dmul+0x3f0>
    4a0a:	4214      	tst	r4, r2
    4a0c:	d106      	bne.n	4a1c <__aeabi_dmul+0x3f0>
    4a0e:	4322      	orrs	r2, r4
    4a10:	0312      	lsls	r2, r2, #12
    4a12:	0b12      	lsrs	r2, r2, #12
    4a14:	4645      	mov	r5, r8
    4a16:	4699      	mov	r9, r3
    4a18:	4c43      	ldr	r4, [pc, #268]	; (4b28 <__aeabi_dmul+0x4fc>)
    4a1a:	e66e      	b.n	46fa <__aeabi_dmul+0xce>
    4a1c:	465b      	mov	r3, fp
    4a1e:	431a      	orrs	r2, r3
    4a20:	0312      	lsls	r2, r2, #12
    4a22:	0b12      	lsrs	r2, r2, #12
    4a24:	4c40      	ldr	r4, [pc, #256]	; (4b28 <__aeabi_dmul+0x4fc>)
    4a26:	e668      	b.n	46fa <__aeabi_dmul+0xce>
    4a28:	0003      	movs	r3, r0
    4a2a:	4654      	mov	r4, sl
    4a2c:	3b28      	subs	r3, #40	; 0x28
    4a2e:	409c      	lsls	r4, r3
    4a30:	2300      	movs	r3, #0
    4a32:	e6b9      	b.n	47a8 <__aeabi_dmul+0x17c>
    4a34:	f000 fca6 	bl	5384 <__clzsi2>
    4a38:	3020      	adds	r0, #32
    4a3a:	e6a6      	b.n	478a <__aeabi_dmul+0x15e>
    4a3c:	0003      	movs	r3, r0
    4a3e:	3b28      	subs	r3, #40	; 0x28
    4a40:	409f      	lsls	r7, r3
    4a42:	2300      	movs	r3, #0
    4a44:	46bb      	mov	fp, r7
    4a46:	4699      	mov	r9, r3
    4a48:	e68a      	b.n	4760 <__aeabi_dmul+0x134>
    4a4a:	f000 fc9b 	bl	5384 <__clzsi2>
    4a4e:	3020      	adds	r0, #32
    4a50:	e674      	b.n	473c <__aeabi_dmul+0x110>
    4a52:	46b4      	mov	ip, r6
    4a54:	e7ad      	b.n	49b2 <__aeabi_dmul+0x386>
    4a56:	2501      	movs	r5, #1
    4a58:	1a2a      	subs	r2, r5, r0
    4a5a:	2a38      	cmp	r2, #56	; 0x38
    4a5c:	dd06      	ble.n	4a6c <__aeabi_dmul+0x440>
    4a5e:	9b01      	ldr	r3, [sp, #4]
    4a60:	2400      	movs	r4, #0
    4a62:	401d      	ands	r5, r3
    4a64:	2300      	movs	r3, #0
    4a66:	2200      	movs	r2, #0
    4a68:	4699      	mov	r9, r3
    4a6a:	e646      	b.n	46fa <__aeabi_dmul+0xce>
    4a6c:	2a1f      	cmp	r2, #31
    4a6e:	dc21      	bgt.n	4ab4 <__aeabi_dmul+0x488>
    4a70:	2520      	movs	r5, #32
    4a72:	0020      	movs	r0, r4
    4a74:	1aad      	subs	r5, r5, r2
    4a76:	001e      	movs	r6, r3
    4a78:	40ab      	lsls	r3, r5
    4a7a:	40a8      	lsls	r0, r5
    4a7c:	40d6      	lsrs	r6, r2
    4a7e:	1e5d      	subs	r5, r3, #1
    4a80:	41ab      	sbcs	r3, r5
    4a82:	4330      	orrs	r0, r6
    4a84:	4318      	orrs	r0, r3
    4a86:	40d4      	lsrs	r4, r2
    4a88:	0743      	lsls	r3, r0, #29
    4a8a:	d009      	beq.n	4aa0 <__aeabi_dmul+0x474>
    4a8c:	230f      	movs	r3, #15
    4a8e:	4003      	ands	r3, r0
    4a90:	2b04      	cmp	r3, #4
    4a92:	d005      	beq.n	4aa0 <__aeabi_dmul+0x474>
    4a94:	0003      	movs	r3, r0
    4a96:	1d18      	adds	r0, r3, #4
    4a98:	4298      	cmp	r0, r3
    4a9a:	419b      	sbcs	r3, r3
    4a9c:	425b      	negs	r3, r3
    4a9e:	18e4      	adds	r4, r4, r3
    4aa0:	0223      	lsls	r3, r4, #8
    4aa2:	d521      	bpl.n	4ae8 <__aeabi_dmul+0x4bc>
    4aa4:	2501      	movs	r5, #1
    4aa6:	9b01      	ldr	r3, [sp, #4]
    4aa8:	2401      	movs	r4, #1
    4aaa:	401d      	ands	r5, r3
    4aac:	2300      	movs	r3, #0
    4aae:	2200      	movs	r2, #0
    4ab0:	4699      	mov	r9, r3
    4ab2:	e622      	b.n	46fa <__aeabi_dmul+0xce>
    4ab4:	251f      	movs	r5, #31
    4ab6:	0021      	movs	r1, r4
    4ab8:	426d      	negs	r5, r5
    4aba:	1a28      	subs	r0, r5, r0
    4abc:	40c1      	lsrs	r1, r0
    4abe:	0008      	movs	r0, r1
    4ac0:	2a20      	cmp	r2, #32
    4ac2:	d01d      	beq.n	4b00 <__aeabi_dmul+0x4d4>
    4ac4:	355f      	adds	r5, #95	; 0x5f
    4ac6:	1aaa      	subs	r2, r5, r2
    4ac8:	4094      	lsls	r4, r2
    4aca:	4323      	orrs	r3, r4
    4acc:	1e5c      	subs	r4, r3, #1
    4ace:	41a3      	sbcs	r3, r4
    4ad0:	2507      	movs	r5, #7
    4ad2:	4303      	orrs	r3, r0
    4ad4:	401d      	ands	r5, r3
    4ad6:	2200      	movs	r2, #0
    4ad8:	2d00      	cmp	r5, #0
    4ada:	d009      	beq.n	4af0 <__aeabi_dmul+0x4c4>
    4adc:	220f      	movs	r2, #15
    4ade:	2400      	movs	r4, #0
    4ae0:	401a      	ands	r2, r3
    4ae2:	0018      	movs	r0, r3
    4ae4:	2a04      	cmp	r2, #4
    4ae6:	d1d6      	bne.n	4a96 <__aeabi_dmul+0x46a>
    4ae8:	0003      	movs	r3, r0
    4aea:	0765      	lsls	r5, r4, #29
    4aec:	0264      	lsls	r4, r4, #9
    4aee:	0b22      	lsrs	r2, r4, #12
    4af0:	08db      	lsrs	r3, r3, #3
    4af2:	432b      	orrs	r3, r5
    4af4:	2501      	movs	r5, #1
    4af6:	4699      	mov	r9, r3
    4af8:	9b01      	ldr	r3, [sp, #4]
    4afa:	2400      	movs	r4, #0
    4afc:	401d      	ands	r5, r3
    4afe:	e5fc      	b.n	46fa <__aeabi_dmul+0xce>
    4b00:	2400      	movs	r4, #0
    4b02:	e7e2      	b.n	4aca <__aeabi_dmul+0x49e>
    4b04:	2280      	movs	r2, #128	; 0x80
    4b06:	2501      	movs	r5, #1
    4b08:	0312      	lsls	r2, r2, #12
    4b0a:	4322      	orrs	r2, r4
    4b0c:	9901      	ldr	r1, [sp, #4]
    4b0e:	0312      	lsls	r2, r2, #12
    4b10:	0b12      	lsrs	r2, r2, #12
    4b12:	400d      	ands	r5, r1
    4b14:	4699      	mov	r9, r3
    4b16:	4c04      	ldr	r4, [pc, #16]	; (4b28 <__aeabi_dmul+0x4fc>)
    4b18:	e5ef      	b.n	46fa <__aeabi_dmul+0xce>
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	000003ff 	.word	0x000003ff
    4b20:	feffffff 	.word	0xfeffffff
    4b24:	000007fe 	.word	0x000007fe
    4b28:	000007ff 	.word	0x000007ff

00004b2c <__aeabi_dsub>:
    4b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b2e:	4646      	mov	r6, r8
    4b30:	46d6      	mov	lr, sl
    4b32:	464f      	mov	r7, r9
    4b34:	030c      	lsls	r4, r1, #12
    4b36:	b5c0      	push	{r6, r7, lr}
    4b38:	0fcd      	lsrs	r5, r1, #31
    4b3a:	004e      	lsls	r6, r1, #1
    4b3c:	0a61      	lsrs	r1, r4, #9
    4b3e:	0f44      	lsrs	r4, r0, #29
    4b40:	430c      	orrs	r4, r1
    4b42:	00c1      	lsls	r1, r0, #3
    4b44:	0058      	lsls	r0, r3, #1
    4b46:	0d40      	lsrs	r0, r0, #21
    4b48:	4684      	mov	ip, r0
    4b4a:	468a      	mov	sl, r1
    4b4c:	000f      	movs	r7, r1
    4b4e:	0319      	lsls	r1, r3, #12
    4b50:	0f50      	lsrs	r0, r2, #29
    4b52:	0a49      	lsrs	r1, r1, #9
    4b54:	4301      	orrs	r1, r0
    4b56:	48c6      	ldr	r0, [pc, #792]	; (4e70 <__aeabi_dsub+0x344>)
    4b58:	0d76      	lsrs	r6, r6, #21
    4b5a:	46a8      	mov	r8, r5
    4b5c:	0fdb      	lsrs	r3, r3, #31
    4b5e:	00d2      	lsls	r2, r2, #3
    4b60:	4584      	cmp	ip, r0
    4b62:	d100      	bne.n	4b66 <__aeabi_dsub+0x3a>
    4b64:	e0d8      	b.n	4d18 <__aeabi_dsub+0x1ec>
    4b66:	2001      	movs	r0, #1
    4b68:	4043      	eors	r3, r0
    4b6a:	42ab      	cmp	r3, r5
    4b6c:	d100      	bne.n	4b70 <__aeabi_dsub+0x44>
    4b6e:	e0a6      	b.n	4cbe <__aeabi_dsub+0x192>
    4b70:	4660      	mov	r0, ip
    4b72:	1a35      	subs	r5, r6, r0
    4b74:	2d00      	cmp	r5, #0
    4b76:	dc00      	bgt.n	4b7a <__aeabi_dsub+0x4e>
    4b78:	e105      	b.n	4d86 <__aeabi_dsub+0x25a>
    4b7a:	2800      	cmp	r0, #0
    4b7c:	d110      	bne.n	4ba0 <__aeabi_dsub+0x74>
    4b7e:	000b      	movs	r3, r1
    4b80:	4313      	orrs	r3, r2
    4b82:	d100      	bne.n	4b86 <__aeabi_dsub+0x5a>
    4b84:	e0d7      	b.n	4d36 <__aeabi_dsub+0x20a>
    4b86:	1e6b      	subs	r3, r5, #1
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d000      	beq.n	4b8e <__aeabi_dsub+0x62>
    4b8c:	e14b      	b.n	4e26 <__aeabi_dsub+0x2fa>
    4b8e:	4653      	mov	r3, sl
    4b90:	1a9f      	subs	r7, r3, r2
    4b92:	45ba      	cmp	sl, r7
    4b94:	4180      	sbcs	r0, r0
    4b96:	1a64      	subs	r4, r4, r1
    4b98:	4240      	negs	r0, r0
    4b9a:	1a24      	subs	r4, r4, r0
    4b9c:	2601      	movs	r6, #1
    4b9e:	e01e      	b.n	4bde <__aeabi_dsub+0xb2>
    4ba0:	4bb3      	ldr	r3, [pc, #716]	; (4e70 <__aeabi_dsub+0x344>)
    4ba2:	429e      	cmp	r6, r3
    4ba4:	d048      	beq.n	4c38 <__aeabi_dsub+0x10c>
    4ba6:	2380      	movs	r3, #128	; 0x80
    4ba8:	041b      	lsls	r3, r3, #16
    4baa:	4319      	orrs	r1, r3
    4bac:	2d38      	cmp	r5, #56	; 0x38
    4bae:	dd00      	ble.n	4bb2 <__aeabi_dsub+0x86>
    4bb0:	e119      	b.n	4de6 <__aeabi_dsub+0x2ba>
    4bb2:	2d1f      	cmp	r5, #31
    4bb4:	dd00      	ble.n	4bb8 <__aeabi_dsub+0x8c>
    4bb6:	e14c      	b.n	4e52 <__aeabi_dsub+0x326>
    4bb8:	2320      	movs	r3, #32
    4bba:	000f      	movs	r7, r1
    4bbc:	1b5b      	subs	r3, r3, r5
    4bbe:	0010      	movs	r0, r2
    4bc0:	409a      	lsls	r2, r3
    4bc2:	409f      	lsls	r7, r3
    4bc4:	40e8      	lsrs	r0, r5
    4bc6:	1e53      	subs	r3, r2, #1
    4bc8:	419a      	sbcs	r2, r3
    4bca:	40e9      	lsrs	r1, r5
    4bcc:	4307      	orrs	r7, r0
    4bce:	4317      	orrs	r7, r2
    4bd0:	4653      	mov	r3, sl
    4bd2:	1bdf      	subs	r7, r3, r7
    4bd4:	1a61      	subs	r1, r4, r1
    4bd6:	45ba      	cmp	sl, r7
    4bd8:	41a4      	sbcs	r4, r4
    4bda:	4264      	negs	r4, r4
    4bdc:	1b0c      	subs	r4, r1, r4
    4bde:	0223      	lsls	r3, r4, #8
    4be0:	d400      	bmi.n	4be4 <__aeabi_dsub+0xb8>
    4be2:	e0c5      	b.n	4d70 <__aeabi_dsub+0x244>
    4be4:	0264      	lsls	r4, r4, #9
    4be6:	0a65      	lsrs	r5, r4, #9
    4be8:	2d00      	cmp	r5, #0
    4bea:	d100      	bne.n	4bee <__aeabi_dsub+0xc2>
    4bec:	e0f6      	b.n	4ddc <__aeabi_dsub+0x2b0>
    4bee:	0028      	movs	r0, r5
    4bf0:	f000 fbc8 	bl	5384 <__clzsi2>
    4bf4:	0003      	movs	r3, r0
    4bf6:	3b08      	subs	r3, #8
    4bf8:	2b1f      	cmp	r3, #31
    4bfa:	dd00      	ble.n	4bfe <__aeabi_dsub+0xd2>
    4bfc:	e0e9      	b.n	4dd2 <__aeabi_dsub+0x2a6>
    4bfe:	2220      	movs	r2, #32
    4c00:	003c      	movs	r4, r7
    4c02:	1ad2      	subs	r2, r2, r3
    4c04:	409d      	lsls	r5, r3
    4c06:	40d4      	lsrs	r4, r2
    4c08:	409f      	lsls	r7, r3
    4c0a:	4325      	orrs	r5, r4
    4c0c:	429e      	cmp	r6, r3
    4c0e:	dd00      	ble.n	4c12 <__aeabi_dsub+0xe6>
    4c10:	e0db      	b.n	4dca <__aeabi_dsub+0x29e>
    4c12:	1b9e      	subs	r6, r3, r6
    4c14:	1c73      	adds	r3, r6, #1
    4c16:	2b1f      	cmp	r3, #31
    4c18:	dd00      	ble.n	4c1c <__aeabi_dsub+0xf0>
    4c1a:	e10a      	b.n	4e32 <__aeabi_dsub+0x306>
    4c1c:	2220      	movs	r2, #32
    4c1e:	0038      	movs	r0, r7
    4c20:	1ad2      	subs	r2, r2, r3
    4c22:	0029      	movs	r1, r5
    4c24:	4097      	lsls	r7, r2
    4c26:	002c      	movs	r4, r5
    4c28:	4091      	lsls	r1, r2
    4c2a:	40d8      	lsrs	r0, r3
    4c2c:	1e7a      	subs	r2, r7, #1
    4c2e:	4197      	sbcs	r7, r2
    4c30:	40dc      	lsrs	r4, r3
    4c32:	2600      	movs	r6, #0
    4c34:	4301      	orrs	r1, r0
    4c36:	430f      	orrs	r7, r1
    4c38:	077b      	lsls	r3, r7, #29
    4c3a:	d009      	beq.n	4c50 <__aeabi_dsub+0x124>
    4c3c:	230f      	movs	r3, #15
    4c3e:	403b      	ands	r3, r7
    4c40:	2b04      	cmp	r3, #4
    4c42:	d005      	beq.n	4c50 <__aeabi_dsub+0x124>
    4c44:	1d3b      	adds	r3, r7, #4
    4c46:	42bb      	cmp	r3, r7
    4c48:	41bf      	sbcs	r7, r7
    4c4a:	427f      	negs	r7, r7
    4c4c:	19e4      	adds	r4, r4, r7
    4c4e:	001f      	movs	r7, r3
    4c50:	0223      	lsls	r3, r4, #8
    4c52:	d525      	bpl.n	4ca0 <__aeabi_dsub+0x174>
    4c54:	4b86      	ldr	r3, [pc, #536]	; (4e70 <__aeabi_dsub+0x344>)
    4c56:	3601      	adds	r6, #1
    4c58:	429e      	cmp	r6, r3
    4c5a:	d100      	bne.n	4c5e <__aeabi_dsub+0x132>
    4c5c:	e0af      	b.n	4dbe <__aeabi_dsub+0x292>
    4c5e:	4b85      	ldr	r3, [pc, #532]	; (4e74 <__aeabi_dsub+0x348>)
    4c60:	2501      	movs	r5, #1
    4c62:	401c      	ands	r4, r3
    4c64:	4643      	mov	r3, r8
    4c66:	0762      	lsls	r2, r4, #29
    4c68:	08ff      	lsrs	r7, r7, #3
    4c6a:	0264      	lsls	r4, r4, #9
    4c6c:	0576      	lsls	r6, r6, #21
    4c6e:	4317      	orrs	r7, r2
    4c70:	0b24      	lsrs	r4, r4, #12
    4c72:	0d76      	lsrs	r6, r6, #21
    4c74:	401d      	ands	r5, r3
    4c76:	2100      	movs	r1, #0
    4c78:	0324      	lsls	r4, r4, #12
    4c7a:	0b23      	lsrs	r3, r4, #12
    4c7c:	0d0c      	lsrs	r4, r1, #20
    4c7e:	4a7e      	ldr	r2, [pc, #504]	; (4e78 <__aeabi_dsub+0x34c>)
    4c80:	0524      	lsls	r4, r4, #20
    4c82:	431c      	orrs	r4, r3
    4c84:	4014      	ands	r4, r2
    4c86:	0533      	lsls	r3, r6, #20
    4c88:	4323      	orrs	r3, r4
    4c8a:	005b      	lsls	r3, r3, #1
    4c8c:	07ed      	lsls	r5, r5, #31
    4c8e:	085b      	lsrs	r3, r3, #1
    4c90:	432b      	orrs	r3, r5
    4c92:	0038      	movs	r0, r7
    4c94:	0019      	movs	r1, r3
    4c96:	bc1c      	pop	{r2, r3, r4}
    4c98:	4690      	mov	r8, r2
    4c9a:	4699      	mov	r9, r3
    4c9c:	46a2      	mov	sl, r4
    4c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca0:	2501      	movs	r5, #1
    4ca2:	4643      	mov	r3, r8
    4ca4:	0762      	lsls	r2, r4, #29
    4ca6:	08ff      	lsrs	r7, r7, #3
    4ca8:	4317      	orrs	r7, r2
    4caa:	08e4      	lsrs	r4, r4, #3
    4cac:	401d      	ands	r5, r3
    4cae:	4b70      	ldr	r3, [pc, #448]	; (4e70 <__aeabi_dsub+0x344>)
    4cb0:	429e      	cmp	r6, r3
    4cb2:	d036      	beq.n	4d22 <__aeabi_dsub+0x1f6>
    4cb4:	0324      	lsls	r4, r4, #12
    4cb6:	0576      	lsls	r6, r6, #21
    4cb8:	0b24      	lsrs	r4, r4, #12
    4cba:	0d76      	lsrs	r6, r6, #21
    4cbc:	e7db      	b.n	4c76 <__aeabi_dsub+0x14a>
    4cbe:	4663      	mov	r3, ip
    4cc0:	1af3      	subs	r3, r6, r3
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	dc00      	bgt.n	4cc8 <__aeabi_dsub+0x19c>
    4cc6:	e094      	b.n	4df2 <__aeabi_dsub+0x2c6>
    4cc8:	4660      	mov	r0, ip
    4cca:	2800      	cmp	r0, #0
    4ccc:	d035      	beq.n	4d3a <__aeabi_dsub+0x20e>
    4cce:	4868      	ldr	r0, [pc, #416]	; (4e70 <__aeabi_dsub+0x344>)
    4cd0:	4286      	cmp	r6, r0
    4cd2:	d0b1      	beq.n	4c38 <__aeabi_dsub+0x10c>
    4cd4:	2780      	movs	r7, #128	; 0x80
    4cd6:	043f      	lsls	r7, r7, #16
    4cd8:	4339      	orrs	r1, r7
    4cda:	2b38      	cmp	r3, #56	; 0x38
    4cdc:	dc00      	bgt.n	4ce0 <__aeabi_dsub+0x1b4>
    4cde:	e0fd      	b.n	4edc <__aeabi_dsub+0x3b0>
    4ce0:	430a      	orrs	r2, r1
    4ce2:	0017      	movs	r7, r2
    4ce4:	2100      	movs	r1, #0
    4ce6:	1e7a      	subs	r2, r7, #1
    4ce8:	4197      	sbcs	r7, r2
    4cea:	4457      	add	r7, sl
    4cec:	4557      	cmp	r7, sl
    4cee:	4180      	sbcs	r0, r0
    4cf0:	1909      	adds	r1, r1, r4
    4cf2:	4244      	negs	r4, r0
    4cf4:	190c      	adds	r4, r1, r4
    4cf6:	0223      	lsls	r3, r4, #8
    4cf8:	d53a      	bpl.n	4d70 <__aeabi_dsub+0x244>
    4cfa:	4b5d      	ldr	r3, [pc, #372]	; (4e70 <__aeabi_dsub+0x344>)
    4cfc:	3601      	adds	r6, #1
    4cfe:	429e      	cmp	r6, r3
    4d00:	d100      	bne.n	4d04 <__aeabi_dsub+0x1d8>
    4d02:	e14b      	b.n	4f9c <__aeabi_dsub+0x470>
    4d04:	2201      	movs	r2, #1
    4d06:	4b5b      	ldr	r3, [pc, #364]	; (4e74 <__aeabi_dsub+0x348>)
    4d08:	401c      	ands	r4, r3
    4d0a:	087b      	lsrs	r3, r7, #1
    4d0c:	4017      	ands	r7, r2
    4d0e:	431f      	orrs	r7, r3
    4d10:	07e2      	lsls	r2, r4, #31
    4d12:	4317      	orrs	r7, r2
    4d14:	0864      	lsrs	r4, r4, #1
    4d16:	e78f      	b.n	4c38 <__aeabi_dsub+0x10c>
    4d18:	0008      	movs	r0, r1
    4d1a:	4310      	orrs	r0, r2
    4d1c:	d000      	beq.n	4d20 <__aeabi_dsub+0x1f4>
    4d1e:	e724      	b.n	4b6a <__aeabi_dsub+0x3e>
    4d20:	e721      	b.n	4b66 <__aeabi_dsub+0x3a>
    4d22:	0023      	movs	r3, r4
    4d24:	433b      	orrs	r3, r7
    4d26:	d100      	bne.n	4d2a <__aeabi_dsub+0x1fe>
    4d28:	e1b9      	b.n	509e <__aeabi_dsub+0x572>
    4d2a:	2280      	movs	r2, #128	; 0x80
    4d2c:	0312      	lsls	r2, r2, #12
    4d2e:	4314      	orrs	r4, r2
    4d30:	0324      	lsls	r4, r4, #12
    4d32:	0b24      	lsrs	r4, r4, #12
    4d34:	e79f      	b.n	4c76 <__aeabi_dsub+0x14a>
    4d36:	002e      	movs	r6, r5
    4d38:	e77e      	b.n	4c38 <__aeabi_dsub+0x10c>
    4d3a:	0008      	movs	r0, r1
    4d3c:	4310      	orrs	r0, r2
    4d3e:	d100      	bne.n	4d42 <__aeabi_dsub+0x216>
    4d40:	e0ca      	b.n	4ed8 <__aeabi_dsub+0x3ac>
    4d42:	1e58      	subs	r0, r3, #1
    4d44:	4684      	mov	ip, r0
    4d46:	2800      	cmp	r0, #0
    4d48:	d000      	beq.n	4d4c <__aeabi_dsub+0x220>
    4d4a:	e0e7      	b.n	4f1c <__aeabi_dsub+0x3f0>
    4d4c:	4452      	add	r2, sl
    4d4e:	4552      	cmp	r2, sl
    4d50:	4180      	sbcs	r0, r0
    4d52:	1864      	adds	r4, r4, r1
    4d54:	4240      	negs	r0, r0
    4d56:	1824      	adds	r4, r4, r0
    4d58:	0017      	movs	r7, r2
    4d5a:	2601      	movs	r6, #1
    4d5c:	0223      	lsls	r3, r4, #8
    4d5e:	d507      	bpl.n	4d70 <__aeabi_dsub+0x244>
    4d60:	2602      	movs	r6, #2
    4d62:	e7cf      	b.n	4d04 <__aeabi_dsub+0x1d8>
    4d64:	4664      	mov	r4, ip
    4d66:	432c      	orrs	r4, r5
    4d68:	d100      	bne.n	4d6c <__aeabi_dsub+0x240>
    4d6a:	e1b3      	b.n	50d4 <__aeabi_dsub+0x5a8>
    4d6c:	002c      	movs	r4, r5
    4d6e:	4667      	mov	r7, ip
    4d70:	077b      	lsls	r3, r7, #29
    4d72:	d000      	beq.n	4d76 <__aeabi_dsub+0x24a>
    4d74:	e762      	b.n	4c3c <__aeabi_dsub+0x110>
    4d76:	0763      	lsls	r3, r4, #29
    4d78:	08ff      	lsrs	r7, r7, #3
    4d7a:	431f      	orrs	r7, r3
    4d7c:	2501      	movs	r5, #1
    4d7e:	4643      	mov	r3, r8
    4d80:	08e4      	lsrs	r4, r4, #3
    4d82:	401d      	ands	r5, r3
    4d84:	e793      	b.n	4cae <__aeabi_dsub+0x182>
    4d86:	2d00      	cmp	r5, #0
    4d88:	d178      	bne.n	4e7c <__aeabi_dsub+0x350>
    4d8a:	1c75      	adds	r5, r6, #1
    4d8c:	056d      	lsls	r5, r5, #21
    4d8e:	0d6d      	lsrs	r5, r5, #21
    4d90:	2d01      	cmp	r5, #1
    4d92:	dc00      	bgt.n	4d96 <__aeabi_dsub+0x26a>
    4d94:	e0f2      	b.n	4f7c <__aeabi_dsub+0x450>
    4d96:	4650      	mov	r0, sl
    4d98:	1a80      	subs	r0, r0, r2
    4d9a:	4582      	cmp	sl, r0
    4d9c:	41bf      	sbcs	r7, r7
    4d9e:	1a65      	subs	r5, r4, r1
    4da0:	427f      	negs	r7, r7
    4da2:	1bed      	subs	r5, r5, r7
    4da4:	4684      	mov	ip, r0
    4da6:	0228      	lsls	r0, r5, #8
    4da8:	d400      	bmi.n	4dac <__aeabi_dsub+0x280>
    4daa:	e08c      	b.n	4ec6 <__aeabi_dsub+0x39a>
    4dac:	4650      	mov	r0, sl
    4dae:	1a17      	subs	r7, r2, r0
    4db0:	42ba      	cmp	r2, r7
    4db2:	4192      	sbcs	r2, r2
    4db4:	1b0c      	subs	r4, r1, r4
    4db6:	4255      	negs	r5, r2
    4db8:	1b65      	subs	r5, r4, r5
    4dba:	4698      	mov	r8, r3
    4dbc:	e714      	b.n	4be8 <__aeabi_dsub+0xbc>
    4dbe:	2501      	movs	r5, #1
    4dc0:	4643      	mov	r3, r8
    4dc2:	2400      	movs	r4, #0
    4dc4:	401d      	ands	r5, r3
    4dc6:	2700      	movs	r7, #0
    4dc8:	e755      	b.n	4c76 <__aeabi_dsub+0x14a>
    4dca:	4c2a      	ldr	r4, [pc, #168]	; (4e74 <__aeabi_dsub+0x348>)
    4dcc:	1af6      	subs	r6, r6, r3
    4dce:	402c      	ands	r4, r5
    4dd0:	e732      	b.n	4c38 <__aeabi_dsub+0x10c>
    4dd2:	003d      	movs	r5, r7
    4dd4:	3828      	subs	r0, #40	; 0x28
    4dd6:	4085      	lsls	r5, r0
    4dd8:	2700      	movs	r7, #0
    4dda:	e717      	b.n	4c0c <__aeabi_dsub+0xe0>
    4ddc:	0038      	movs	r0, r7
    4dde:	f000 fad1 	bl	5384 <__clzsi2>
    4de2:	3020      	adds	r0, #32
    4de4:	e706      	b.n	4bf4 <__aeabi_dsub+0xc8>
    4de6:	430a      	orrs	r2, r1
    4de8:	0017      	movs	r7, r2
    4dea:	2100      	movs	r1, #0
    4dec:	1e7a      	subs	r2, r7, #1
    4dee:	4197      	sbcs	r7, r2
    4df0:	e6ee      	b.n	4bd0 <__aeabi_dsub+0xa4>
    4df2:	2b00      	cmp	r3, #0
    4df4:	d000      	beq.n	4df8 <__aeabi_dsub+0x2cc>
    4df6:	e0e5      	b.n	4fc4 <__aeabi_dsub+0x498>
    4df8:	1c73      	adds	r3, r6, #1
    4dfa:	469c      	mov	ip, r3
    4dfc:	055b      	lsls	r3, r3, #21
    4dfe:	0d5b      	lsrs	r3, r3, #21
    4e00:	2b01      	cmp	r3, #1
    4e02:	dc00      	bgt.n	4e06 <__aeabi_dsub+0x2da>
    4e04:	e09f      	b.n	4f46 <__aeabi_dsub+0x41a>
    4e06:	4b1a      	ldr	r3, [pc, #104]	; (4e70 <__aeabi_dsub+0x344>)
    4e08:	459c      	cmp	ip, r3
    4e0a:	d100      	bne.n	4e0e <__aeabi_dsub+0x2e2>
    4e0c:	e0c5      	b.n	4f9a <__aeabi_dsub+0x46e>
    4e0e:	4452      	add	r2, sl
    4e10:	4552      	cmp	r2, sl
    4e12:	4180      	sbcs	r0, r0
    4e14:	1864      	adds	r4, r4, r1
    4e16:	4240      	negs	r0, r0
    4e18:	1824      	adds	r4, r4, r0
    4e1a:	07e7      	lsls	r7, r4, #31
    4e1c:	0852      	lsrs	r2, r2, #1
    4e1e:	4317      	orrs	r7, r2
    4e20:	0864      	lsrs	r4, r4, #1
    4e22:	4666      	mov	r6, ip
    4e24:	e708      	b.n	4c38 <__aeabi_dsub+0x10c>
    4e26:	4812      	ldr	r0, [pc, #72]	; (4e70 <__aeabi_dsub+0x344>)
    4e28:	4285      	cmp	r5, r0
    4e2a:	d100      	bne.n	4e2e <__aeabi_dsub+0x302>
    4e2c:	e085      	b.n	4f3a <__aeabi_dsub+0x40e>
    4e2e:	001d      	movs	r5, r3
    4e30:	e6bc      	b.n	4bac <__aeabi_dsub+0x80>
    4e32:	0029      	movs	r1, r5
    4e34:	3e1f      	subs	r6, #31
    4e36:	40f1      	lsrs	r1, r6
    4e38:	2b20      	cmp	r3, #32
    4e3a:	d100      	bne.n	4e3e <__aeabi_dsub+0x312>
    4e3c:	e07f      	b.n	4f3e <__aeabi_dsub+0x412>
    4e3e:	2240      	movs	r2, #64	; 0x40
    4e40:	1ad3      	subs	r3, r2, r3
    4e42:	409d      	lsls	r5, r3
    4e44:	432f      	orrs	r7, r5
    4e46:	1e7d      	subs	r5, r7, #1
    4e48:	41af      	sbcs	r7, r5
    4e4a:	2400      	movs	r4, #0
    4e4c:	430f      	orrs	r7, r1
    4e4e:	2600      	movs	r6, #0
    4e50:	e78e      	b.n	4d70 <__aeabi_dsub+0x244>
    4e52:	002b      	movs	r3, r5
    4e54:	000f      	movs	r7, r1
    4e56:	3b20      	subs	r3, #32
    4e58:	40df      	lsrs	r7, r3
    4e5a:	2d20      	cmp	r5, #32
    4e5c:	d071      	beq.n	4f42 <__aeabi_dsub+0x416>
    4e5e:	2340      	movs	r3, #64	; 0x40
    4e60:	1b5d      	subs	r5, r3, r5
    4e62:	40a9      	lsls	r1, r5
    4e64:	430a      	orrs	r2, r1
    4e66:	1e51      	subs	r1, r2, #1
    4e68:	418a      	sbcs	r2, r1
    4e6a:	2100      	movs	r1, #0
    4e6c:	4317      	orrs	r7, r2
    4e6e:	e6af      	b.n	4bd0 <__aeabi_dsub+0xa4>
    4e70:	000007ff 	.word	0x000007ff
    4e74:	ff7fffff 	.word	0xff7fffff
    4e78:	800fffff 	.word	0x800fffff
    4e7c:	2e00      	cmp	r6, #0
    4e7e:	d03e      	beq.n	4efe <__aeabi_dsub+0x3d2>
    4e80:	4eb3      	ldr	r6, [pc, #716]	; (5150 <__aeabi_dsub+0x624>)
    4e82:	45b4      	cmp	ip, r6
    4e84:	d045      	beq.n	4f12 <__aeabi_dsub+0x3e6>
    4e86:	2680      	movs	r6, #128	; 0x80
    4e88:	0436      	lsls	r6, r6, #16
    4e8a:	426d      	negs	r5, r5
    4e8c:	4334      	orrs	r4, r6
    4e8e:	2d38      	cmp	r5, #56	; 0x38
    4e90:	dd00      	ble.n	4e94 <__aeabi_dsub+0x368>
    4e92:	e0a8      	b.n	4fe6 <__aeabi_dsub+0x4ba>
    4e94:	2d1f      	cmp	r5, #31
    4e96:	dd00      	ble.n	4e9a <__aeabi_dsub+0x36e>
    4e98:	e11f      	b.n	50da <__aeabi_dsub+0x5ae>
    4e9a:	2620      	movs	r6, #32
    4e9c:	0027      	movs	r7, r4
    4e9e:	4650      	mov	r0, sl
    4ea0:	1b76      	subs	r6, r6, r5
    4ea2:	40b7      	lsls	r7, r6
    4ea4:	40e8      	lsrs	r0, r5
    4ea6:	4307      	orrs	r7, r0
    4ea8:	4650      	mov	r0, sl
    4eaa:	40b0      	lsls	r0, r6
    4eac:	1e46      	subs	r6, r0, #1
    4eae:	41b0      	sbcs	r0, r6
    4eb0:	40ec      	lsrs	r4, r5
    4eb2:	4338      	orrs	r0, r7
    4eb4:	1a17      	subs	r7, r2, r0
    4eb6:	42ba      	cmp	r2, r7
    4eb8:	4192      	sbcs	r2, r2
    4eba:	1b0c      	subs	r4, r1, r4
    4ebc:	4252      	negs	r2, r2
    4ebe:	1aa4      	subs	r4, r4, r2
    4ec0:	4666      	mov	r6, ip
    4ec2:	4698      	mov	r8, r3
    4ec4:	e68b      	b.n	4bde <__aeabi_dsub+0xb2>
    4ec6:	4664      	mov	r4, ip
    4ec8:	4667      	mov	r7, ip
    4eca:	432c      	orrs	r4, r5
    4ecc:	d000      	beq.n	4ed0 <__aeabi_dsub+0x3a4>
    4ece:	e68b      	b.n	4be8 <__aeabi_dsub+0xbc>
    4ed0:	2500      	movs	r5, #0
    4ed2:	2600      	movs	r6, #0
    4ed4:	2700      	movs	r7, #0
    4ed6:	e6ea      	b.n	4cae <__aeabi_dsub+0x182>
    4ed8:	001e      	movs	r6, r3
    4eda:	e6ad      	b.n	4c38 <__aeabi_dsub+0x10c>
    4edc:	2b1f      	cmp	r3, #31
    4ede:	dc60      	bgt.n	4fa2 <__aeabi_dsub+0x476>
    4ee0:	2720      	movs	r7, #32
    4ee2:	1af8      	subs	r0, r7, r3
    4ee4:	000f      	movs	r7, r1
    4ee6:	4684      	mov	ip, r0
    4ee8:	4087      	lsls	r7, r0
    4eea:	0010      	movs	r0, r2
    4eec:	40d8      	lsrs	r0, r3
    4eee:	4307      	orrs	r7, r0
    4ef0:	4660      	mov	r0, ip
    4ef2:	4082      	lsls	r2, r0
    4ef4:	1e50      	subs	r0, r2, #1
    4ef6:	4182      	sbcs	r2, r0
    4ef8:	40d9      	lsrs	r1, r3
    4efa:	4317      	orrs	r7, r2
    4efc:	e6f5      	b.n	4cea <__aeabi_dsub+0x1be>
    4efe:	0026      	movs	r6, r4
    4f00:	4650      	mov	r0, sl
    4f02:	4306      	orrs	r6, r0
    4f04:	d005      	beq.n	4f12 <__aeabi_dsub+0x3e6>
    4f06:	43ed      	mvns	r5, r5
    4f08:	2d00      	cmp	r5, #0
    4f0a:	d0d3      	beq.n	4eb4 <__aeabi_dsub+0x388>
    4f0c:	4e90      	ldr	r6, [pc, #576]	; (5150 <__aeabi_dsub+0x624>)
    4f0e:	45b4      	cmp	ip, r6
    4f10:	d1bd      	bne.n	4e8e <__aeabi_dsub+0x362>
    4f12:	000c      	movs	r4, r1
    4f14:	0017      	movs	r7, r2
    4f16:	4666      	mov	r6, ip
    4f18:	4698      	mov	r8, r3
    4f1a:	e68d      	b.n	4c38 <__aeabi_dsub+0x10c>
    4f1c:	488c      	ldr	r0, [pc, #560]	; (5150 <__aeabi_dsub+0x624>)
    4f1e:	4283      	cmp	r3, r0
    4f20:	d00b      	beq.n	4f3a <__aeabi_dsub+0x40e>
    4f22:	4663      	mov	r3, ip
    4f24:	e6d9      	b.n	4cda <__aeabi_dsub+0x1ae>
    4f26:	2d00      	cmp	r5, #0
    4f28:	d000      	beq.n	4f2c <__aeabi_dsub+0x400>
    4f2a:	e096      	b.n	505a <__aeabi_dsub+0x52e>
    4f2c:	0008      	movs	r0, r1
    4f2e:	4310      	orrs	r0, r2
    4f30:	d100      	bne.n	4f34 <__aeabi_dsub+0x408>
    4f32:	e0e2      	b.n	50fa <__aeabi_dsub+0x5ce>
    4f34:	000c      	movs	r4, r1
    4f36:	0017      	movs	r7, r2
    4f38:	4698      	mov	r8, r3
    4f3a:	4e85      	ldr	r6, [pc, #532]	; (5150 <__aeabi_dsub+0x624>)
    4f3c:	e67c      	b.n	4c38 <__aeabi_dsub+0x10c>
    4f3e:	2500      	movs	r5, #0
    4f40:	e780      	b.n	4e44 <__aeabi_dsub+0x318>
    4f42:	2100      	movs	r1, #0
    4f44:	e78e      	b.n	4e64 <__aeabi_dsub+0x338>
    4f46:	0023      	movs	r3, r4
    4f48:	4650      	mov	r0, sl
    4f4a:	4303      	orrs	r3, r0
    4f4c:	2e00      	cmp	r6, #0
    4f4e:	d000      	beq.n	4f52 <__aeabi_dsub+0x426>
    4f50:	e0a8      	b.n	50a4 <__aeabi_dsub+0x578>
    4f52:	2b00      	cmp	r3, #0
    4f54:	d100      	bne.n	4f58 <__aeabi_dsub+0x42c>
    4f56:	e0de      	b.n	5116 <__aeabi_dsub+0x5ea>
    4f58:	000b      	movs	r3, r1
    4f5a:	4313      	orrs	r3, r2
    4f5c:	d100      	bne.n	4f60 <__aeabi_dsub+0x434>
    4f5e:	e66b      	b.n	4c38 <__aeabi_dsub+0x10c>
    4f60:	4452      	add	r2, sl
    4f62:	4552      	cmp	r2, sl
    4f64:	4180      	sbcs	r0, r0
    4f66:	1864      	adds	r4, r4, r1
    4f68:	4240      	negs	r0, r0
    4f6a:	1824      	adds	r4, r4, r0
    4f6c:	0017      	movs	r7, r2
    4f6e:	0223      	lsls	r3, r4, #8
    4f70:	d400      	bmi.n	4f74 <__aeabi_dsub+0x448>
    4f72:	e6fd      	b.n	4d70 <__aeabi_dsub+0x244>
    4f74:	4b77      	ldr	r3, [pc, #476]	; (5154 <__aeabi_dsub+0x628>)
    4f76:	4666      	mov	r6, ip
    4f78:	401c      	ands	r4, r3
    4f7a:	e65d      	b.n	4c38 <__aeabi_dsub+0x10c>
    4f7c:	0025      	movs	r5, r4
    4f7e:	4650      	mov	r0, sl
    4f80:	4305      	orrs	r5, r0
    4f82:	2e00      	cmp	r6, #0
    4f84:	d1cf      	bne.n	4f26 <__aeabi_dsub+0x3fa>
    4f86:	2d00      	cmp	r5, #0
    4f88:	d14f      	bne.n	502a <__aeabi_dsub+0x4fe>
    4f8a:	000c      	movs	r4, r1
    4f8c:	4314      	orrs	r4, r2
    4f8e:	d100      	bne.n	4f92 <__aeabi_dsub+0x466>
    4f90:	e0a0      	b.n	50d4 <__aeabi_dsub+0x5a8>
    4f92:	000c      	movs	r4, r1
    4f94:	0017      	movs	r7, r2
    4f96:	4698      	mov	r8, r3
    4f98:	e64e      	b.n	4c38 <__aeabi_dsub+0x10c>
    4f9a:	4666      	mov	r6, ip
    4f9c:	2400      	movs	r4, #0
    4f9e:	2700      	movs	r7, #0
    4fa0:	e685      	b.n	4cae <__aeabi_dsub+0x182>
    4fa2:	001f      	movs	r7, r3
    4fa4:	0008      	movs	r0, r1
    4fa6:	3f20      	subs	r7, #32
    4fa8:	40f8      	lsrs	r0, r7
    4faa:	0007      	movs	r7, r0
    4fac:	2b20      	cmp	r3, #32
    4fae:	d100      	bne.n	4fb2 <__aeabi_dsub+0x486>
    4fb0:	e08e      	b.n	50d0 <__aeabi_dsub+0x5a4>
    4fb2:	2040      	movs	r0, #64	; 0x40
    4fb4:	1ac3      	subs	r3, r0, r3
    4fb6:	4099      	lsls	r1, r3
    4fb8:	430a      	orrs	r2, r1
    4fba:	1e51      	subs	r1, r2, #1
    4fbc:	418a      	sbcs	r2, r1
    4fbe:	2100      	movs	r1, #0
    4fc0:	4317      	orrs	r7, r2
    4fc2:	e692      	b.n	4cea <__aeabi_dsub+0x1be>
    4fc4:	2e00      	cmp	r6, #0
    4fc6:	d114      	bne.n	4ff2 <__aeabi_dsub+0x4c6>
    4fc8:	0026      	movs	r6, r4
    4fca:	4650      	mov	r0, sl
    4fcc:	4306      	orrs	r6, r0
    4fce:	d062      	beq.n	5096 <__aeabi_dsub+0x56a>
    4fd0:	43db      	mvns	r3, r3
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d15c      	bne.n	5090 <__aeabi_dsub+0x564>
    4fd6:	1887      	adds	r7, r0, r2
    4fd8:	4297      	cmp	r7, r2
    4fda:	4192      	sbcs	r2, r2
    4fdc:	1864      	adds	r4, r4, r1
    4fde:	4252      	negs	r2, r2
    4fe0:	18a4      	adds	r4, r4, r2
    4fe2:	4666      	mov	r6, ip
    4fe4:	e687      	b.n	4cf6 <__aeabi_dsub+0x1ca>
    4fe6:	4650      	mov	r0, sl
    4fe8:	4320      	orrs	r0, r4
    4fea:	1e44      	subs	r4, r0, #1
    4fec:	41a0      	sbcs	r0, r4
    4fee:	2400      	movs	r4, #0
    4ff0:	e760      	b.n	4eb4 <__aeabi_dsub+0x388>
    4ff2:	4e57      	ldr	r6, [pc, #348]	; (5150 <__aeabi_dsub+0x624>)
    4ff4:	45b4      	cmp	ip, r6
    4ff6:	d04e      	beq.n	5096 <__aeabi_dsub+0x56a>
    4ff8:	2680      	movs	r6, #128	; 0x80
    4ffa:	0436      	lsls	r6, r6, #16
    4ffc:	425b      	negs	r3, r3
    4ffe:	4334      	orrs	r4, r6
    5000:	2b38      	cmp	r3, #56	; 0x38
    5002:	dd00      	ble.n	5006 <__aeabi_dsub+0x4da>
    5004:	e07f      	b.n	5106 <__aeabi_dsub+0x5da>
    5006:	2b1f      	cmp	r3, #31
    5008:	dd00      	ble.n	500c <__aeabi_dsub+0x4e0>
    500a:	e08b      	b.n	5124 <__aeabi_dsub+0x5f8>
    500c:	2620      	movs	r6, #32
    500e:	0027      	movs	r7, r4
    5010:	4650      	mov	r0, sl
    5012:	1af6      	subs	r6, r6, r3
    5014:	40b7      	lsls	r7, r6
    5016:	40d8      	lsrs	r0, r3
    5018:	4307      	orrs	r7, r0
    501a:	4650      	mov	r0, sl
    501c:	40b0      	lsls	r0, r6
    501e:	1e46      	subs	r6, r0, #1
    5020:	41b0      	sbcs	r0, r6
    5022:	4307      	orrs	r7, r0
    5024:	40dc      	lsrs	r4, r3
    5026:	18bf      	adds	r7, r7, r2
    5028:	e7d6      	b.n	4fd8 <__aeabi_dsub+0x4ac>
    502a:	000d      	movs	r5, r1
    502c:	4315      	orrs	r5, r2
    502e:	d100      	bne.n	5032 <__aeabi_dsub+0x506>
    5030:	e602      	b.n	4c38 <__aeabi_dsub+0x10c>
    5032:	4650      	mov	r0, sl
    5034:	1a80      	subs	r0, r0, r2
    5036:	4582      	cmp	sl, r0
    5038:	41bf      	sbcs	r7, r7
    503a:	1a65      	subs	r5, r4, r1
    503c:	427f      	negs	r7, r7
    503e:	1bed      	subs	r5, r5, r7
    5040:	4684      	mov	ip, r0
    5042:	0228      	lsls	r0, r5, #8
    5044:	d400      	bmi.n	5048 <__aeabi_dsub+0x51c>
    5046:	e68d      	b.n	4d64 <__aeabi_dsub+0x238>
    5048:	4650      	mov	r0, sl
    504a:	1a17      	subs	r7, r2, r0
    504c:	42ba      	cmp	r2, r7
    504e:	4192      	sbcs	r2, r2
    5050:	1b0c      	subs	r4, r1, r4
    5052:	4252      	negs	r2, r2
    5054:	1aa4      	subs	r4, r4, r2
    5056:	4698      	mov	r8, r3
    5058:	e5ee      	b.n	4c38 <__aeabi_dsub+0x10c>
    505a:	000d      	movs	r5, r1
    505c:	4315      	orrs	r5, r2
    505e:	d100      	bne.n	5062 <__aeabi_dsub+0x536>
    5060:	e76b      	b.n	4f3a <__aeabi_dsub+0x40e>
    5062:	4650      	mov	r0, sl
    5064:	0767      	lsls	r7, r4, #29
    5066:	08c0      	lsrs	r0, r0, #3
    5068:	4307      	orrs	r7, r0
    506a:	2080      	movs	r0, #128	; 0x80
    506c:	08e4      	lsrs	r4, r4, #3
    506e:	0300      	lsls	r0, r0, #12
    5070:	4204      	tst	r4, r0
    5072:	d007      	beq.n	5084 <__aeabi_dsub+0x558>
    5074:	08cd      	lsrs	r5, r1, #3
    5076:	4205      	tst	r5, r0
    5078:	d104      	bne.n	5084 <__aeabi_dsub+0x558>
    507a:	002c      	movs	r4, r5
    507c:	4698      	mov	r8, r3
    507e:	08d7      	lsrs	r7, r2, #3
    5080:	0749      	lsls	r1, r1, #29
    5082:	430f      	orrs	r7, r1
    5084:	0f7b      	lsrs	r3, r7, #29
    5086:	00e4      	lsls	r4, r4, #3
    5088:	431c      	orrs	r4, r3
    508a:	00ff      	lsls	r7, r7, #3
    508c:	4e30      	ldr	r6, [pc, #192]	; (5150 <__aeabi_dsub+0x624>)
    508e:	e5d3      	b.n	4c38 <__aeabi_dsub+0x10c>
    5090:	4e2f      	ldr	r6, [pc, #188]	; (5150 <__aeabi_dsub+0x624>)
    5092:	45b4      	cmp	ip, r6
    5094:	d1b4      	bne.n	5000 <__aeabi_dsub+0x4d4>
    5096:	000c      	movs	r4, r1
    5098:	0017      	movs	r7, r2
    509a:	4666      	mov	r6, ip
    509c:	e5cc      	b.n	4c38 <__aeabi_dsub+0x10c>
    509e:	2700      	movs	r7, #0
    50a0:	2400      	movs	r4, #0
    50a2:	e5e8      	b.n	4c76 <__aeabi_dsub+0x14a>
    50a4:	2b00      	cmp	r3, #0
    50a6:	d039      	beq.n	511c <__aeabi_dsub+0x5f0>
    50a8:	000b      	movs	r3, r1
    50aa:	4313      	orrs	r3, r2
    50ac:	d100      	bne.n	50b0 <__aeabi_dsub+0x584>
    50ae:	e744      	b.n	4f3a <__aeabi_dsub+0x40e>
    50b0:	08c0      	lsrs	r0, r0, #3
    50b2:	0767      	lsls	r7, r4, #29
    50b4:	4307      	orrs	r7, r0
    50b6:	2080      	movs	r0, #128	; 0x80
    50b8:	08e4      	lsrs	r4, r4, #3
    50ba:	0300      	lsls	r0, r0, #12
    50bc:	4204      	tst	r4, r0
    50be:	d0e1      	beq.n	5084 <__aeabi_dsub+0x558>
    50c0:	08cb      	lsrs	r3, r1, #3
    50c2:	4203      	tst	r3, r0
    50c4:	d1de      	bne.n	5084 <__aeabi_dsub+0x558>
    50c6:	08d7      	lsrs	r7, r2, #3
    50c8:	0749      	lsls	r1, r1, #29
    50ca:	430f      	orrs	r7, r1
    50cc:	001c      	movs	r4, r3
    50ce:	e7d9      	b.n	5084 <__aeabi_dsub+0x558>
    50d0:	2100      	movs	r1, #0
    50d2:	e771      	b.n	4fb8 <__aeabi_dsub+0x48c>
    50d4:	2500      	movs	r5, #0
    50d6:	2700      	movs	r7, #0
    50d8:	e5e9      	b.n	4cae <__aeabi_dsub+0x182>
    50da:	002e      	movs	r6, r5
    50dc:	0027      	movs	r7, r4
    50de:	3e20      	subs	r6, #32
    50e0:	40f7      	lsrs	r7, r6
    50e2:	2d20      	cmp	r5, #32
    50e4:	d02f      	beq.n	5146 <__aeabi_dsub+0x61a>
    50e6:	2640      	movs	r6, #64	; 0x40
    50e8:	1b75      	subs	r5, r6, r5
    50ea:	40ac      	lsls	r4, r5
    50ec:	4650      	mov	r0, sl
    50ee:	4320      	orrs	r0, r4
    50f0:	1e44      	subs	r4, r0, #1
    50f2:	41a0      	sbcs	r0, r4
    50f4:	2400      	movs	r4, #0
    50f6:	4338      	orrs	r0, r7
    50f8:	e6dc      	b.n	4eb4 <__aeabi_dsub+0x388>
    50fa:	2480      	movs	r4, #128	; 0x80
    50fc:	2500      	movs	r5, #0
    50fe:	0324      	lsls	r4, r4, #12
    5100:	4e13      	ldr	r6, [pc, #76]	; (5150 <__aeabi_dsub+0x624>)
    5102:	2700      	movs	r7, #0
    5104:	e5d3      	b.n	4cae <__aeabi_dsub+0x182>
    5106:	4650      	mov	r0, sl
    5108:	4320      	orrs	r0, r4
    510a:	0007      	movs	r7, r0
    510c:	1e78      	subs	r0, r7, #1
    510e:	4187      	sbcs	r7, r0
    5110:	2400      	movs	r4, #0
    5112:	18bf      	adds	r7, r7, r2
    5114:	e760      	b.n	4fd8 <__aeabi_dsub+0x4ac>
    5116:	000c      	movs	r4, r1
    5118:	0017      	movs	r7, r2
    511a:	e58d      	b.n	4c38 <__aeabi_dsub+0x10c>
    511c:	000c      	movs	r4, r1
    511e:	0017      	movs	r7, r2
    5120:	4e0b      	ldr	r6, [pc, #44]	; (5150 <__aeabi_dsub+0x624>)
    5122:	e589      	b.n	4c38 <__aeabi_dsub+0x10c>
    5124:	001e      	movs	r6, r3
    5126:	0027      	movs	r7, r4
    5128:	3e20      	subs	r6, #32
    512a:	40f7      	lsrs	r7, r6
    512c:	2b20      	cmp	r3, #32
    512e:	d00c      	beq.n	514a <__aeabi_dsub+0x61e>
    5130:	2640      	movs	r6, #64	; 0x40
    5132:	1af3      	subs	r3, r6, r3
    5134:	409c      	lsls	r4, r3
    5136:	4650      	mov	r0, sl
    5138:	4320      	orrs	r0, r4
    513a:	1e44      	subs	r4, r0, #1
    513c:	41a0      	sbcs	r0, r4
    513e:	4307      	orrs	r7, r0
    5140:	2400      	movs	r4, #0
    5142:	18bf      	adds	r7, r7, r2
    5144:	e748      	b.n	4fd8 <__aeabi_dsub+0x4ac>
    5146:	2400      	movs	r4, #0
    5148:	e7d0      	b.n	50ec <__aeabi_dsub+0x5c0>
    514a:	2400      	movs	r4, #0
    514c:	e7f3      	b.n	5136 <__aeabi_dsub+0x60a>
    514e:	46c0      	nop			; (mov r8, r8)
    5150:	000007ff 	.word	0x000007ff
    5154:	ff7fffff 	.word	0xff7fffff

00005158 <__aeabi_f2d>:
    5158:	0041      	lsls	r1, r0, #1
    515a:	0e09      	lsrs	r1, r1, #24
    515c:	1c4b      	adds	r3, r1, #1
    515e:	b570      	push	{r4, r5, r6, lr}
    5160:	b2db      	uxtb	r3, r3
    5162:	0246      	lsls	r6, r0, #9
    5164:	0a75      	lsrs	r5, r6, #9
    5166:	0fc4      	lsrs	r4, r0, #31
    5168:	2b01      	cmp	r3, #1
    516a:	dd14      	ble.n	5196 <__aeabi_f2d+0x3e>
    516c:	23e0      	movs	r3, #224	; 0xe0
    516e:	009b      	lsls	r3, r3, #2
    5170:	076d      	lsls	r5, r5, #29
    5172:	0b36      	lsrs	r6, r6, #12
    5174:	18cb      	adds	r3, r1, r3
    5176:	2100      	movs	r1, #0
    5178:	0d0a      	lsrs	r2, r1, #20
    517a:	0028      	movs	r0, r5
    517c:	0512      	lsls	r2, r2, #20
    517e:	4d1c      	ldr	r5, [pc, #112]	; (51f0 <__aeabi_f2d+0x98>)
    5180:	4332      	orrs	r2, r6
    5182:	055b      	lsls	r3, r3, #21
    5184:	402a      	ands	r2, r5
    5186:	085b      	lsrs	r3, r3, #1
    5188:	4313      	orrs	r3, r2
    518a:	005b      	lsls	r3, r3, #1
    518c:	07e4      	lsls	r4, r4, #31
    518e:	085b      	lsrs	r3, r3, #1
    5190:	4323      	orrs	r3, r4
    5192:	0019      	movs	r1, r3
    5194:	bd70      	pop	{r4, r5, r6, pc}
    5196:	2900      	cmp	r1, #0
    5198:	d114      	bne.n	51c4 <__aeabi_f2d+0x6c>
    519a:	2d00      	cmp	r5, #0
    519c:	d01e      	beq.n	51dc <__aeabi_f2d+0x84>
    519e:	0028      	movs	r0, r5
    51a0:	f000 f8f0 	bl	5384 <__clzsi2>
    51a4:	280a      	cmp	r0, #10
    51a6:	dc1c      	bgt.n	51e2 <__aeabi_f2d+0x8a>
    51a8:	230b      	movs	r3, #11
    51aa:	002a      	movs	r2, r5
    51ac:	1a1b      	subs	r3, r3, r0
    51ae:	40da      	lsrs	r2, r3
    51b0:	0003      	movs	r3, r0
    51b2:	3315      	adds	r3, #21
    51b4:	409d      	lsls	r5, r3
    51b6:	4b0f      	ldr	r3, [pc, #60]	; (51f4 <__aeabi_f2d+0x9c>)
    51b8:	0312      	lsls	r2, r2, #12
    51ba:	1a1b      	subs	r3, r3, r0
    51bc:	055b      	lsls	r3, r3, #21
    51be:	0b16      	lsrs	r6, r2, #12
    51c0:	0d5b      	lsrs	r3, r3, #21
    51c2:	e7d8      	b.n	5176 <__aeabi_f2d+0x1e>
    51c4:	2d00      	cmp	r5, #0
    51c6:	d006      	beq.n	51d6 <__aeabi_f2d+0x7e>
    51c8:	0b32      	lsrs	r2, r6, #12
    51ca:	2680      	movs	r6, #128	; 0x80
    51cc:	0336      	lsls	r6, r6, #12
    51ce:	076d      	lsls	r5, r5, #29
    51d0:	4316      	orrs	r6, r2
    51d2:	4b09      	ldr	r3, [pc, #36]	; (51f8 <__aeabi_f2d+0xa0>)
    51d4:	e7cf      	b.n	5176 <__aeabi_f2d+0x1e>
    51d6:	4b08      	ldr	r3, [pc, #32]	; (51f8 <__aeabi_f2d+0xa0>)
    51d8:	2600      	movs	r6, #0
    51da:	e7cc      	b.n	5176 <__aeabi_f2d+0x1e>
    51dc:	2300      	movs	r3, #0
    51de:	2600      	movs	r6, #0
    51e0:	e7c9      	b.n	5176 <__aeabi_f2d+0x1e>
    51e2:	0003      	movs	r3, r0
    51e4:	002a      	movs	r2, r5
    51e6:	3b0b      	subs	r3, #11
    51e8:	409a      	lsls	r2, r3
    51ea:	2500      	movs	r5, #0
    51ec:	e7e3      	b.n	51b6 <__aeabi_f2d+0x5e>
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	800fffff 	.word	0x800fffff
    51f4:	00000389 	.word	0x00000389
    51f8:	000007ff 	.word	0x000007ff

000051fc <__aeabi_d2f>:
    51fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fe:	004c      	lsls	r4, r1, #1
    5200:	0d64      	lsrs	r4, r4, #21
    5202:	030b      	lsls	r3, r1, #12
    5204:	1c62      	adds	r2, r4, #1
    5206:	0f45      	lsrs	r5, r0, #29
    5208:	0a5b      	lsrs	r3, r3, #9
    520a:	0552      	lsls	r2, r2, #21
    520c:	432b      	orrs	r3, r5
    520e:	0fc9      	lsrs	r1, r1, #31
    5210:	00c5      	lsls	r5, r0, #3
    5212:	0d52      	lsrs	r2, r2, #21
    5214:	2a01      	cmp	r2, #1
    5216:	dd28      	ble.n	526a <__aeabi_d2f+0x6e>
    5218:	4a3a      	ldr	r2, [pc, #232]	; (5304 <__aeabi_d2f+0x108>)
    521a:	18a6      	adds	r6, r4, r2
    521c:	2efe      	cmp	r6, #254	; 0xfe
    521e:	dc1b      	bgt.n	5258 <__aeabi_d2f+0x5c>
    5220:	2e00      	cmp	r6, #0
    5222:	dd3e      	ble.n	52a2 <__aeabi_d2f+0xa6>
    5224:	0180      	lsls	r0, r0, #6
    5226:	0002      	movs	r2, r0
    5228:	1e50      	subs	r0, r2, #1
    522a:	4182      	sbcs	r2, r0
    522c:	0f6d      	lsrs	r5, r5, #29
    522e:	432a      	orrs	r2, r5
    5230:	00db      	lsls	r3, r3, #3
    5232:	4313      	orrs	r3, r2
    5234:	075a      	lsls	r2, r3, #29
    5236:	d004      	beq.n	5242 <__aeabi_d2f+0x46>
    5238:	220f      	movs	r2, #15
    523a:	401a      	ands	r2, r3
    523c:	2a04      	cmp	r2, #4
    523e:	d000      	beq.n	5242 <__aeabi_d2f+0x46>
    5240:	3304      	adds	r3, #4
    5242:	2280      	movs	r2, #128	; 0x80
    5244:	04d2      	lsls	r2, r2, #19
    5246:	401a      	ands	r2, r3
    5248:	d05a      	beq.n	5300 <__aeabi_d2f+0x104>
    524a:	3601      	adds	r6, #1
    524c:	2eff      	cmp	r6, #255	; 0xff
    524e:	d003      	beq.n	5258 <__aeabi_d2f+0x5c>
    5250:	019b      	lsls	r3, r3, #6
    5252:	0a5b      	lsrs	r3, r3, #9
    5254:	b2f4      	uxtb	r4, r6
    5256:	e001      	b.n	525c <__aeabi_d2f+0x60>
    5258:	24ff      	movs	r4, #255	; 0xff
    525a:	2300      	movs	r3, #0
    525c:	0258      	lsls	r0, r3, #9
    525e:	05e4      	lsls	r4, r4, #23
    5260:	0a40      	lsrs	r0, r0, #9
    5262:	07c9      	lsls	r1, r1, #31
    5264:	4320      	orrs	r0, r4
    5266:	4308      	orrs	r0, r1
    5268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    526a:	2c00      	cmp	r4, #0
    526c:	d007      	beq.n	527e <__aeabi_d2f+0x82>
    526e:	431d      	orrs	r5, r3
    5270:	d0f2      	beq.n	5258 <__aeabi_d2f+0x5c>
    5272:	2080      	movs	r0, #128	; 0x80
    5274:	00db      	lsls	r3, r3, #3
    5276:	0480      	lsls	r0, r0, #18
    5278:	4303      	orrs	r3, r0
    527a:	26ff      	movs	r6, #255	; 0xff
    527c:	e7da      	b.n	5234 <__aeabi_d2f+0x38>
    527e:	432b      	orrs	r3, r5
    5280:	d003      	beq.n	528a <__aeabi_d2f+0x8e>
    5282:	2305      	movs	r3, #5
    5284:	08db      	lsrs	r3, r3, #3
    5286:	2cff      	cmp	r4, #255	; 0xff
    5288:	d003      	beq.n	5292 <__aeabi_d2f+0x96>
    528a:	025b      	lsls	r3, r3, #9
    528c:	0a5b      	lsrs	r3, r3, #9
    528e:	b2e4      	uxtb	r4, r4
    5290:	e7e4      	b.n	525c <__aeabi_d2f+0x60>
    5292:	2b00      	cmp	r3, #0
    5294:	d032      	beq.n	52fc <__aeabi_d2f+0x100>
    5296:	2080      	movs	r0, #128	; 0x80
    5298:	03c0      	lsls	r0, r0, #15
    529a:	4303      	orrs	r3, r0
    529c:	025b      	lsls	r3, r3, #9
    529e:	0a5b      	lsrs	r3, r3, #9
    52a0:	e7dc      	b.n	525c <__aeabi_d2f+0x60>
    52a2:	0032      	movs	r2, r6
    52a4:	3217      	adds	r2, #23
    52a6:	db14      	blt.n	52d2 <__aeabi_d2f+0xd6>
    52a8:	2280      	movs	r2, #128	; 0x80
    52aa:	271e      	movs	r7, #30
    52ac:	0412      	lsls	r2, r2, #16
    52ae:	4313      	orrs	r3, r2
    52b0:	1bbf      	subs	r7, r7, r6
    52b2:	2f1f      	cmp	r7, #31
    52b4:	dc0f      	bgt.n	52d6 <__aeabi_d2f+0xda>
    52b6:	4a14      	ldr	r2, [pc, #80]	; (5308 <__aeabi_d2f+0x10c>)
    52b8:	4694      	mov	ip, r2
    52ba:	4464      	add	r4, ip
    52bc:	002a      	movs	r2, r5
    52be:	40a5      	lsls	r5, r4
    52c0:	002e      	movs	r6, r5
    52c2:	40a3      	lsls	r3, r4
    52c4:	1e75      	subs	r5, r6, #1
    52c6:	41ae      	sbcs	r6, r5
    52c8:	40fa      	lsrs	r2, r7
    52ca:	4333      	orrs	r3, r6
    52cc:	4313      	orrs	r3, r2
    52ce:	2600      	movs	r6, #0
    52d0:	e7b0      	b.n	5234 <__aeabi_d2f+0x38>
    52d2:	2400      	movs	r4, #0
    52d4:	e7d5      	b.n	5282 <__aeabi_d2f+0x86>
    52d6:	2202      	movs	r2, #2
    52d8:	4252      	negs	r2, r2
    52da:	1b96      	subs	r6, r2, r6
    52dc:	001a      	movs	r2, r3
    52de:	40f2      	lsrs	r2, r6
    52e0:	2f20      	cmp	r7, #32
    52e2:	d009      	beq.n	52f8 <__aeabi_d2f+0xfc>
    52e4:	4809      	ldr	r0, [pc, #36]	; (530c <__aeabi_d2f+0x110>)
    52e6:	4684      	mov	ip, r0
    52e8:	4464      	add	r4, ip
    52ea:	40a3      	lsls	r3, r4
    52ec:	432b      	orrs	r3, r5
    52ee:	1e5d      	subs	r5, r3, #1
    52f0:	41ab      	sbcs	r3, r5
    52f2:	2600      	movs	r6, #0
    52f4:	4313      	orrs	r3, r2
    52f6:	e79d      	b.n	5234 <__aeabi_d2f+0x38>
    52f8:	2300      	movs	r3, #0
    52fa:	e7f7      	b.n	52ec <__aeabi_d2f+0xf0>
    52fc:	2300      	movs	r3, #0
    52fe:	e7ad      	b.n	525c <__aeabi_d2f+0x60>
    5300:	0034      	movs	r4, r6
    5302:	e7bf      	b.n	5284 <__aeabi_d2f+0x88>
    5304:	fffffc80 	.word	0xfffffc80
    5308:	fffffc82 	.word	0xfffffc82
    530c:	fffffca2 	.word	0xfffffca2

00005310 <__aeabi_cfrcmple>:
    5310:	4684      	mov	ip, r0
    5312:	1c08      	adds	r0, r1, #0
    5314:	4661      	mov	r1, ip
    5316:	e7ff      	b.n	5318 <__aeabi_cfcmpeq>

00005318 <__aeabi_cfcmpeq>:
    5318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    531a:	f000 f9b3 	bl	5684 <__lesf2>
    531e:	2800      	cmp	r0, #0
    5320:	d401      	bmi.n	5326 <__aeabi_cfcmpeq+0xe>
    5322:	2100      	movs	r1, #0
    5324:	42c8      	cmn	r0, r1
    5326:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005328 <__aeabi_fcmpeq>:
    5328:	b510      	push	{r4, lr}
    532a:	f000 f945 	bl	55b8 <__eqsf2>
    532e:	4240      	negs	r0, r0
    5330:	3001      	adds	r0, #1
    5332:	bd10      	pop	{r4, pc}

00005334 <__aeabi_fcmplt>:
    5334:	b510      	push	{r4, lr}
    5336:	f000 f9a5 	bl	5684 <__lesf2>
    533a:	2800      	cmp	r0, #0
    533c:	db01      	blt.n	5342 <__aeabi_fcmplt+0xe>
    533e:	2000      	movs	r0, #0
    5340:	bd10      	pop	{r4, pc}
    5342:	2001      	movs	r0, #1
    5344:	bd10      	pop	{r4, pc}
    5346:	46c0      	nop			; (mov r8, r8)

00005348 <__aeabi_fcmple>:
    5348:	b510      	push	{r4, lr}
    534a:	f000 f99b 	bl	5684 <__lesf2>
    534e:	2800      	cmp	r0, #0
    5350:	dd01      	ble.n	5356 <__aeabi_fcmple+0xe>
    5352:	2000      	movs	r0, #0
    5354:	bd10      	pop	{r4, pc}
    5356:	2001      	movs	r0, #1
    5358:	bd10      	pop	{r4, pc}
    535a:	46c0      	nop			; (mov r8, r8)

0000535c <__aeabi_fcmpgt>:
    535c:	b510      	push	{r4, lr}
    535e:	f000 f951 	bl	5604 <__gesf2>
    5362:	2800      	cmp	r0, #0
    5364:	dc01      	bgt.n	536a <__aeabi_fcmpgt+0xe>
    5366:	2000      	movs	r0, #0
    5368:	bd10      	pop	{r4, pc}
    536a:	2001      	movs	r0, #1
    536c:	bd10      	pop	{r4, pc}
    536e:	46c0      	nop			; (mov r8, r8)

00005370 <__aeabi_fcmpge>:
    5370:	b510      	push	{r4, lr}
    5372:	f000 f947 	bl	5604 <__gesf2>
    5376:	2800      	cmp	r0, #0
    5378:	da01      	bge.n	537e <__aeabi_fcmpge+0xe>
    537a:	2000      	movs	r0, #0
    537c:	bd10      	pop	{r4, pc}
    537e:	2001      	movs	r0, #1
    5380:	bd10      	pop	{r4, pc}
    5382:	46c0      	nop			; (mov r8, r8)

00005384 <__clzsi2>:
    5384:	211c      	movs	r1, #28
    5386:	2301      	movs	r3, #1
    5388:	041b      	lsls	r3, r3, #16
    538a:	4298      	cmp	r0, r3
    538c:	d301      	bcc.n	5392 <__clzsi2+0xe>
    538e:	0c00      	lsrs	r0, r0, #16
    5390:	3910      	subs	r1, #16
    5392:	0a1b      	lsrs	r3, r3, #8
    5394:	4298      	cmp	r0, r3
    5396:	d301      	bcc.n	539c <__clzsi2+0x18>
    5398:	0a00      	lsrs	r0, r0, #8
    539a:	3908      	subs	r1, #8
    539c:	091b      	lsrs	r3, r3, #4
    539e:	4298      	cmp	r0, r3
    53a0:	d301      	bcc.n	53a6 <__clzsi2+0x22>
    53a2:	0900      	lsrs	r0, r0, #4
    53a4:	3904      	subs	r1, #4
    53a6:	a202      	add	r2, pc, #8	; (adr r2, 53b0 <__clzsi2+0x2c>)
    53a8:	5c10      	ldrb	r0, [r2, r0]
    53aa:	1840      	adds	r0, r0, r1
    53ac:	4770      	bx	lr
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	02020304 	.word	0x02020304
    53b4:	01010101 	.word	0x01010101
	...

000053c0 <__ctzsi2>:
    53c0:	4241      	negs	r1, r0
    53c2:	4008      	ands	r0, r1
    53c4:	211c      	movs	r1, #28
    53c6:	2301      	movs	r3, #1
    53c8:	041b      	lsls	r3, r3, #16
    53ca:	4298      	cmp	r0, r3
    53cc:	d301      	bcc.n	53d2 <__ctzsi2+0x12>
    53ce:	0c00      	lsrs	r0, r0, #16
    53d0:	3910      	subs	r1, #16
    53d2:	0a1b      	lsrs	r3, r3, #8
    53d4:	4298      	cmp	r0, r3
    53d6:	d301      	bcc.n	53dc <__ctzsi2+0x1c>
    53d8:	0a00      	lsrs	r0, r0, #8
    53da:	3908      	subs	r1, #8
    53dc:	091b      	lsrs	r3, r3, #4
    53de:	4298      	cmp	r0, r3
    53e0:	d301      	bcc.n	53e6 <__ctzsi2+0x26>
    53e2:	0900      	lsrs	r0, r0, #4
    53e4:	3904      	subs	r1, #4
    53e6:	a202      	add	r2, pc, #8	; (adr r2, 53f0 <__ctzsi2+0x30>)
    53e8:	5c10      	ldrb	r0, [r2, r0]
    53ea:	1a40      	subs	r0, r0, r1
    53ec:	4770      	bx	lr
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	1d1d1c1b 	.word	0x1d1d1c1b
    53f4:	1e1e1e1e 	.word	0x1e1e1e1e
    53f8:	1f1f1f1f 	.word	0x1f1f1f1f
    53fc:	1f1f1f1f 	.word	0x1f1f1f1f

00005400 <__divdi3>:
    5400:	b5f0      	push	{r4, r5, r6, r7, lr}
    5402:	464e      	mov	r6, r9
    5404:	4657      	mov	r7, sl
    5406:	46de      	mov	lr, fp
    5408:	4645      	mov	r5, r8
    540a:	b5e0      	push	{r5, r6, r7, lr}
    540c:	0006      	movs	r6, r0
    540e:	2000      	movs	r0, #0
    5410:	000f      	movs	r7, r1
    5412:	b083      	sub	sp, #12
    5414:	0019      	movs	r1, r3
    5416:	4681      	mov	r9, r0
    5418:	2f00      	cmp	r7, #0
    541a:	da00      	bge.n	541e <__divdi3+0x1e>
    541c:	e08c      	b.n	5538 <__divdi3+0x138>
    541e:	2900      	cmp	r1, #0
    5420:	da00      	bge.n	5424 <__divdi3+0x24>
    5422:	e080      	b.n	5526 <__divdi3+0x126>
    5424:	0034      	movs	r4, r6
    5426:	003d      	movs	r5, r7
    5428:	4692      	mov	sl, r2
    542a:	4698      	mov	r8, r3
    542c:	42bb      	cmp	r3, r7
    542e:	d869      	bhi.n	5504 <__divdi3+0x104>
    5430:	d066      	beq.n	5500 <__divdi3+0x100>
    5432:	4641      	mov	r1, r8
    5434:	4650      	mov	r0, sl
    5436:	f000 f967 	bl	5708 <__clzdi2>
    543a:	4683      	mov	fp, r0
    543c:	0039      	movs	r1, r7
    543e:	0030      	movs	r0, r6
    5440:	f000 f962 	bl	5708 <__clzdi2>
    5444:	465b      	mov	r3, fp
    5446:	1a1b      	subs	r3, r3, r0
    5448:	469c      	mov	ip, r3
    544a:	3b20      	subs	r3, #32
    544c:	469b      	mov	fp, r3
    544e:	d500      	bpl.n	5452 <__divdi3+0x52>
    5450:	e087      	b.n	5562 <__divdi3+0x162>
    5452:	4651      	mov	r1, sl
    5454:	4658      	mov	r0, fp
    5456:	4081      	lsls	r1, r0
    5458:	000b      	movs	r3, r1
    545a:	4651      	mov	r1, sl
    545c:	4660      	mov	r0, ip
    545e:	4081      	lsls	r1, r0
    5460:	000a      	movs	r2, r1
    5462:	42bb      	cmp	r3, r7
    5464:	d900      	bls.n	5468 <__divdi3+0x68>
    5466:	e072      	b.n	554e <__divdi3+0x14e>
    5468:	d06e      	beq.n	5548 <__divdi3+0x148>
    546a:	0034      	movs	r4, r6
    546c:	003d      	movs	r5, r7
    546e:	4659      	mov	r1, fp
    5470:	1aa4      	subs	r4, r4, r2
    5472:	419d      	sbcs	r5, r3
    5474:	2900      	cmp	r1, #0
    5476:	da00      	bge.n	547a <__divdi3+0x7a>
    5478:	e08a      	b.n	5590 <__divdi3+0x190>
    547a:	2100      	movs	r1, #0
    547c:	2000      	movs	r0, #0
    547e:	2601      	movs	r6, #1
    5480:	9000      	str	r0, [sp, #0]
    5482:	9101      	str	r1, [sp, #4]
    5484:	4659      	mov	r1, fp
    5486:	408e      	lsls	r6, r1
    5488:	9601      	str	r6, [sp, #4]
    548a:	4661      	mov	r1, ip
    548c:	2601      	movs	r6, #1
    548e:	408e      	lsls	r6, r1
    5490:	4661      	mov	r1, ip
    5492:	9600      	str	r6, [sp, #0]
    5494:	2900      	cmp	r1, #0
    5496:	d061      	beq.n	555c <__divdi3+0x15c>
    5498:	07d9      	lsls	r1, r3, #31
    549a:	0856      	lsrs	r6, r2, #1
    549c:	430e      	orrs	r6, r1
    549e:	085f      	lsrs	r7, r3, #1
    54a0:	4661      	mov	r1, ip
    54a2:	2201      	movs	r2, #1
    54a4:	2300      	movs	r3, #0
    54a6:	e00c      	b.n	54c2 <__divdi3+0xc2>
    54a8:	42af      	cmp	r7, r5
    54aa:	d101      	bne.n	54b0 <__divdi3+0xb0>
    54ac:	42a6      	cmp	r6, r4
    54ae:	d80a      	bhi.n	54c6 <__divdi3+0xc6>
    54b0:	1ba4      	subs	r4, r4, r6
    54b2:	41bd      	sbcs	r5, r7
    54b4:	1924      	adds	r4, r4, r4
    54b6:	416d      	adcs	r5, r5
    54b8:	3901      	subs	r1, #1
    54ba:	18a4      	adds	r4, r4, r2
    54bc:	415d      	adcs	r5, r3
    54be:	2900      	cmp	r1, #0
    54c0:	d006      	beq.n	54d0 <__divdi3+0xd0>
    54c2:	42af      	cmp	r7, r5
    54c4:	d9f0      	bls.n	54a8 <__divdi3+0xa8>
    54c6:	3901      	subs	r1, #1
    54c8:	1924      	adds	r4, r4, r4
    54ca:	416d      	adcs	r5, r5
    54cc:	2900      	cmp	r1, #0
    54ce:	d1f8      	bne.n	54c2 <__divdi3+0xc2>
    54d0:	465b      	mov	r3, fp
    54d2:	9800      	ldr	r0, [sp, #0]
    54d4:	9901      	ldr	r1, [sp, #4]
    54d6:	1900      	adds	r0, r0, r4
    54d8:	4169      	adcs	r1, r5
    54da:	2b00      	cmp	r3, #0
    54dc:	db4d      	blt.n	557a <__divdi3+0x17a>
    54de:	002e      	movs	r6, r5
    54e0:	40de      	lsrs	r6, r3
    54e2:	4663      	mov	r3, ip
    54e4:	002c      	movs	r4, r5
    54e6:	40dc      	lsrs	r4, r3
    54e8:	465b      	mov	r3, fp
    54ea:	2b00      	cmp	r3, #0
    54ec:	db5b      	blt.n	55a6 <__divdi3+0x1a6>
    54ee:	0034      	movs	r4, r6
    54f0:	409c      	lsls	r4, r3
    54f2:	0023      	movs	r3, r4
    54f4:	4664      	mov	r4, ip
    54f6:	40a6      	lsls	r6, r4
    54f8:	0032      	movs	r2, r6
    54fa:	1a80      	subs	r0, r0, r2
    54fc:	4199      	sbcs	r1, r3
    54fe:	e003      	b.n	5508 <__divdi3+0x108>
    5500:	42b2      	cmp	r2, r6
    5502:	d996      	bls.n	5432 <__divdi3+0x32>
    5504:	2000      	movs	r0, #0
    5506:	2100      	movs	r1, #0
    5508:	464b      	mov	r3, r9
    550a:	2b00      	cmp	r3, #0
    550c:	d004      	beq.n	5518 <__divdi3+0x118>
    550e:	0003      	movs	r3, r0
    5510:	000c      	movs	r4, r1
    5512:	2100      	movs	r1, #0
    5514:	4258      	negs	r0, r3
    5516:	41a1      	sbcs	r1, r4
    5518:	b003      	add	sp, #12
    551a:	bc3c      	pop	{r2, r3, r4, r5}
    551c:	4690      	mov	r8, r2
    551e:	4699      	mov	r9, r3
    5520:	46a2      	mov	sl, r4
    5522:	46ab      	mov	fp, r5
    5524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5526:	4649      	mov	r1, r9
    5528:	43c9      	mvns	r1, r1
    552a:	0010      	movs	r0, r2
    552c:	4689      	mov	r9, r1
    552e:	0019      	movs	r1, r3
    5530:	2300      	movs	r3, #0
    5532:	4242      	negs	r2, r0
    5534:	418b      	sbcs	r3, r1
    5536:	e775      	b.n	5424 <__divdi3+0x24>
    5538:	0034      	movs	r4, r6
    553a:	003d      	movs	r5, r7
    553c:	3801      	subs	r0, #1
    553e:	2700      	movs	r7, #0
    5540:	4266      	negs	r6, r4
    5542:	41af      	sbcs	r7, r5
    5544:	4681      	mov	r9, r0
    5546:	e76a      	b.n	541e <__divdi3+0x1e>
    5548:	42b1      	cmp	r1, r6
    554a:	d800      	bhi.n	554e <__divdi3+0x14e>
    554c:	e78d      	b.n	546a <__divdi3+0x6a>
    554e:	2100      	movs	r1, #0
    5550:	2000      	movs	r0, #0
    5552:	9000      	str	r0, [sp, #0]
    5554:	9101      	str	r1, [sp, #4]
    5556:	4661      	mov	r1, ip
    5558:	2900      	cmp	r1, #0
    555a:	d19d      	bne.n	5498 <__divdi3+0x98>
    555c:	9800      	ldr	r0, [sp, #0]
    555e:	9901      	ldr	r1, [sp, #4]
    5560:	e7d2      	b.n	5508 <__divdi3+0x108>
    5562:	4662      	mov	r2, ip
    5564:	4640      	mov	r0, r8
    5566:	2320      	movs	r3, #32
    5568:	4651      	mov	r1, sl
    556a:	4090      	lsls	r0, r2
    556c:	1a9b      	subs	r3, r3, r2
    556e:	40d9      	lsrs	r1, r3
    5570:	0003      	movs	r3, r0
    5572:	9100      	str	r1, [sp, #0]
    5574:	9900      	ldr	r1, [sp, #0]
    5576:	430b      	orrs	r3, r1
    5578:	e76f      	b.n	545a <__divdi3+0x5a>
    557a:	4662      	mov	r2, ip
    557c:	2320      	movs	r3, #32
    557e:	1a9b      	subs	r3, r3, r2
    5580:	002a      	movs	r2, r5
    5582:	409a      	lsls	r2, r3
    5584:	0026      	movs	r6, r4
    5586:	0013      	movs	r3, r2
    5588:	4662      	mov	r2, ip
    558a:	40d6      	lsrs	r6, r2
    558c:	431e      	orrs	r6, r3
    558e:	e7a8      	b.n	54e2 <__divdi3+0xe2>
    5590:	4661      	mov	r1, ip
    5592:	2620      	movs	r6, #32
    5594:	2701      	movs	r7, #1
    5596:	1a76      	subs	r6, r6, r1
    5598:	2000      	movs	r0, #0
    559a:	2100      	movs	r1, #0
    559c:	40f7      	lsrs	r7, r6
    559e:	9000      	str	r0, [sp, #0]
    55a0:	9101      	str	r1, [sp, #4]
    55a2:	9701      	str	r7, [sp, #4]
    55a4:	e771      	b.n	548a <__divdi3+0x8a>
    55a6:	4662      	mov	r2, ip
    55a8:	2320      	movs	r3, #32
    55aa:	0035      	movs	r5, r6
    55ac:	4094      	lsls	r4, r2
    55ae:	1a9b      	subs	r3, r3, r2
    55b0:	40dd      	lsrs	r5, r3
    55b2:	0023      	movs	r3, r4
    55b4:	432b      	orrs	r3, r5
    55b6:	e79d      	b.n	54f4 <__divdi3+0xf4>

000055b8 <__eqsf2>:
    55b8:	b570      	push	{r4, r5, r6, lr}
    55ba:	0042      	lsls	r2, r0, #1
    55bc:	0245      	lsls	r5, r0, #9
    55be:	024e      	lsls	r6, r1, #9
    55c0:	004c      	lsls	r4, r1, #1
    55c2:	0fc3      	lsrs	r3, r0, #31
    55c4:	0a6d      	lsrs	r5, r5, #9
    55c6:	0e12      	lsrs	r2, r2, #24
    55c8:	0a76      	lsrs	r6, r6, #9
    55ca:	0e24      	lsrs	r4, r4, #24
    55cc:	0fc9      	lsrs	r1, r1, #31
    55ce:	2001      	movs	r0, #1
    55d0:	2aff      	cmp	r2, #255	; 0xff
    55d2:	d006      	beq.n	55e2 <__eqsf2+0x2a>
    55d4:	2cff      	cmp	r4, #255	; 0xff
    55d6:	d003      	beq.n	55e0 <__eqsf2+0x28>
    55d8:	42a2      	cmp	r2, r4
    55da:	d101      	bne.n	55e0 <__eqsf2+0x28>
    55dc:	42b5      	cmp	r5, r6
    55de:	d006      	beq.n	55ee <__eqsf2+0x36>
    55e0:	bd70      	pop	{r4, r5, r6, pc}
    55e2:	2d00      	cmp	r5, #0
    55e4:	d1fc      	bne.n	55e0 <__eqsf2+0x28>
    55e6:	2cff      	cmp	r4, #255	; 0xff
    55e8:	d1fa      	bne.n	55e0 <__eqsf2+0x28>
    55ea:	2e00      	cmp	r6, #0
    55ec:	d1f8      	bne.n	55e0 <__eqsf2+0x28>
    55ee:	428b      	cmp	r3, r1
    55f0:	d006      	beq.n	5600 <__eqsf2+0x48>
    55f2:	2001      	movs	r0, #1
    55f4:	2a00      	cmp	r2, #0
    55f6:	d1f3      	bne.n	55e0 <__eqsf2+0x28>
    55f8:	0028      	movs	r0, r5
    55fa:	1e45      	subs	r5, r0, #1
    55fc:	41a8      	sbcs	r0, r5
    55fe:	e7ef      	b.n	55e0 <__eqsf2+0x28>
    5600:	2000      	movs	r0, #0
    5602:	e7ed      	b.n	55e0 <__eqsf2+0x28>

00005604 <__gesf2>:
    5604:	b5f0      	push	{r4, r5, r6, r7, lr}
    5606:	0042      	lsls	r2, r0, #1
    5608:	0245      	lsls	r5, r0, #9
    560a:	024c      	lsls	r4, r1, #9
    560c:	0fc3      	lsrs	r3, r0, #31
    560e:	0048      	lsls	r0, r1, #1
    5610:	0a6d      	lsrs	r5, r5, #9
    5612:	0e12      	lsrs	r2, r2, #24
    5614:	0a64      	lsrs	r4, r4, #9
    5616:	0e00      	lsrs	r0, r0, #24
    5618:	0fc9      	lsrs	r1, r1, #31
    561a:	2aff      	cmp	r2, #255	; 0xff
    561c:	d01e      	beq.n	565c <__gesf2+0x58>
    561e:	28ff      	cmp	r0, #255	; 0xff
    5620:	d021      	beq.n	5666 <__gesf2+0x62>
    5622:	2a00      	cmp	r2, #0
    5624:	d10a      	bne.n	563c <__gesf2+0x38>
    5626:	426e      	negs	r6, r5
    5628:	416e      	adcs	r6, r5
    562a:	b2f6      	uxtb	r6, r6
    562c:	2800      	cmp	r0, #0
    562e:	d10f      	bne.n	5650 <__gesf2+0x4c>
    5630:	2c00      	cmp	r4, #0
    5632:	d10d      	bne.n	5650 <__gesf2+0x4c>
    5634:	2000      	movs	r0, #0
    5636:	2d00      	cmp	r5, #0
    5638:	d009      	beq.n	564e <__gesf2+0x4a>
    563a:	e005      	b.n	5648 <__gesf2+0x44>
    563c:	2800      	cmp	r0, #0
    563e:	d101      	bne.n	5644 <__gesf2+0x40>
    5640:	2c00      	cmp	r4, #0
    5642:	d001      	beq.n	5648 <__gesf2+0x44>
    5644:	428b      	cmp	r3, r1
    5646:	d011      	beq.n	566c <__gesf2+0x68>
    5648:	2101      	movs	r1, #1
    564a:	4258      	negs	r0, r3
    564c:	4308      	orrs	r0, r1
    564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5650:	2e00      	cmp	r6, #0
    5652:	d0f7      	beq.n	5644 <__gesf2+0x40>
    5654:	2001      	movs	r0, #1
    5656:	3901      	subs	r1, #1
    5658:	4308      	orrs	r0, r1
    565a:	e7f8      	b.n	564e <__gesf2+0x4a>
    565c:	2d00      	cmp	r5, #0
    565e:	d0de      	beq.n	561e <__gesf2+0x1a>
    5660:	2002      	movs	r0, #2
    5662:	4240      	negs	r0, r0
    5664:	e7f3      	b.n	564e <__gesf2+0x4a>
    5666:	2c00      	cmp	r4, #0
    5668:	d0db      	beq.n	5622 <__gesf2+0x1e>
    566a:	e7f9      	b.n	5660 <__gesf2+0x5c>
    566c:	4282      	cmp	r2, r0
    566e:	dceb      	bgt.n	5648 <__gesf2+0x44>
    5670:	db04      	blt.n	567c <__gesf2+0x78>
    5672:	42a5      	cmp	r5, r4
    5674:	d8e8      	bhi.n	5648 <__gesf2+0x44>
    5676:	2000      	movs	r0, #0
    5678:	42a5      	cmp	r5, r4
    567a:	d2e8      	bcs.n	564e <__gesf2+0x4a>
    567c:	2101      	movs	r1, #1
    567e:	1e58      	subs	r0, r3, #1
    5680:	4308      	orrs	r0, r1
    5682:	e7e4      	b.n	564e <__gesf2+0x4a>

00005684 <__lesf2>:
    5684:	b5f0      	push	{r4, r5, r6, r7, lr}
    5686:	0042      	lsls	r2, r0, #1
    5688:	024d      	lsls	r5, r1, #9
    568a:	004c      	lsls	r4, r1, #1
    568c:	0246      	lsls	r6, r0, #9
    568e:	0a76      	lsrs	r6, r6, #9
    5690:	0e12      	lsrs	r2, r2, #24
    5692:	0fc3      	lsrs	r3, r0, #31
    5694:	0a6d      	lsrs	r5, r5, #9
    5696:	0e24      	lsrs	r4, r4, #24
    5698:	0fc9      	lsrs	r1, r1, #31
    569a:	2aff      	cmp	r2, #255	; 0xff
    569c:	d016      	beq.n	56cc <__lesf2+0x48>
    569e:	2cff      	cmp	r4, #255	; 0xff
    56a0:	d018      	beq.n	56d4 <__lesf2+0x50>
    56a2:	2a00      	cmp	r2, #0
    56a4:	d10a      	bne.n	56bc <__lesf2+0x38>
    56a6:	4270      	negs	r0, r6
    56a8:	4170      	adcs	r0, r6
    56aa:	b2c0      	uxtb	r0, r0
    56ac:	2c00      	cmp	r4, #0
    56ae:	d015      	beq.n	56dc <__lesf2+0x58>
    56b0:	2800      	cmp	r0, #0
    56b2:	d005      	beq.n	56c0 <__lesf2+0x3c>
    56b4:	2001      	movs	r0, #1
    56b6:	3901      	subs	r1, #1
    56b8:	4308      	orrs	r0, r1
    56ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56bc:	2c00      	cmp	r4, #0
    56be:	d013      	beq.n	56e8 <__lesf2+0x64>
    56c0:	4299      	cmp	r1, r3
    56c2:	d014      	beq.n	56ee <__lesf2+0x6a>
    56c4:	2001      	movs	r0, #1
    56c6:	425b      	negs	r3, r3
    56c8:	4318      	orrs	r0, r3
    56ca:	e7f6      	b.n	56ba <__lesf2+0x36>
    56cc:	2002      	movs	r0, #2
    56ce:	2e00      	cmp	r6, #0
    56d0:	d1f3      	bne.n	56ba <__lesf2+0x36>
    56d2:	e7e4      	b.n	569e <__lesf2+0x1a>
    56d4:	2002      	movs	r0, #2
    56d6:	2d00      	cmp	r5, #0
    56d8:	d1ef      	bne.n	56ba <__lesf2+0x36>
    56da:	e7e2      	b.n	56a2 <__lesf2+0x1e>
    56dc:	2d00      	cmp	r5, #0
    56de:	d1e7      	bne.n	56b0 <__lesf2+0x2c>
    56e0:	2000      	movs	r0, #0
    56e2:	2e00      	cmp	r6, #0
    56e4:	d0e9      	beq.n	56ba <__lesf2+0x36>
    56e6:	e7ed      	b.n	56c4 <__lesf2+0x40>
    56e8:	2d00      	cmp	r5, #0
    56ea:	d1e9      	bne.n	56c0 <__lesf2+0x3c>
    56ec:	e7ea      	b.n	56c4 <__lesf2+0x40>
    56ee:	42a2      	cmp	r2, r4
    56f0:	dc06      	bgt.n	5700 <__lesf2+0x7c>
    56f2:	dbdf      	blt.n	56b4 <__lesf2+0x30>
    56f4:	42ae      	cmp	r6, r5
    56f6:	d803      	bhi.n	5700 <__lesf2+0x7c>
    56f8:	2000      	movs	r0, #0
    56fa:	42ae      	cmp	r6, r5
    56fc:	d3da      	bcc.n	56b4 <__lesf2+0x30>
    56fe:	e7dc      	b.n	56ba <__lesf2+0x36>
    5700:	2001      	movs	r0, #1
    5702:	4249      	negs	r1, r1
    5704:	4308      	orrs	r0, r1
    5706:	e7d8      	b.n	56ba <__lesf2+0x36>

00005708 <__clzdi2>:
    5708:	b510      	push	{r4, lr}
    570a:	2900      	cmp	r1, #0
    570c:	d103      	bne.n	5716 <__clzdi2+0xe>
    570e:	f7ff fe39 	bl	5384 <__clzsi2>
    5712:	3020      	adds	r0, #32
    5714:	e002      	b.n	571c <__clzdi2+0x14>
    5716:	1c08      	adds	r0, r1, #0
    5718:	f7ff fe34 	bl	5384 <__clzsi2>
    571c:	bd10      	pop	{r4, pc}
    571e:	46c0      	nop			; (mov r8, r8)

00005720 <__libc_init_array>:
    5720:	b570      	push	{r4, r5, r6, lr}
    5722:	2600      	movs	r6, #0
    5724:	4d0c      	ldr	r5, [pc, #48]	; (5758 <__libc_init_array+0x38>)
    5726:	4c0d      	ldr	r4, [pc, #52]	; (575c <__libc_init_array+0x3c>)
    5728:	1b64      	subs	r4, r4, r5
    572a:	10a4      	asrs	r4, r4, #2
    572c:	42a6      	cmp	r6, r4
    572e:	d109      	bne.n	5744 <__libc_init_array+0x24>
    5730:	2600      	movs	r6, #0
    5732:	f000 f97b 	bl	5a2c <_init>
    5736:	4d0a      	ldr	r5, [pc, #40]	; (5760 <__libc_init_array+0x40>)
    5738:	4c0a      	ldr	r4, [pc, #40]	; (5764 <__libc_init_array+0x44>)
    573a:	1b64      	subs	r4, r4, r5
    573c:	10a4      	asrs	r4, r4, #2
    573e:	42a6      	cmp	r6, r4
    5740:	d105      	bne.n	574e <__libc_init_array+0x2e>
    5742:	bd70      	pop	{r4, r5, r6, pc}
    5744:	00b3      	lsls	r3, r6, #2
    5746:	58eb      	ldr	r3, [r5, r3]
    5748:	4798      	blx	r3
    574a:	3601      	adds	r6, #1
    574c:	e7ee      	b.n	572c <__libc_init_array+0xc>
    574e:	00b3      	lsls	r3, r6, #2
    5750:	58eb      	ldr	r3, [r5, r3]
    5752:	4798      	blx	r3
    5754:	3601      	adds	r6, #1
    5756:	e7f2      	b.n	573e <__libc_init_array+0x1e>
    5758:	00005a38 	.word	0x00005a38
    575c:	00005a38 	.word	0x00005a38
    5760:	00005a38 	.word	0x00005a38
    5764:	00005a3c 	.word	0x00005a3c
    5768:	612f2e2e 	.word	0x612f2e2e
    576c:	682f6364 	.word	0x682f6364
    5770:	615f6c61 	.word	0x615f6c61
    5774:	615f6364 	.word	0x615f6364
    5778:	636e7973 	.word	0x636e7973
    577c:	0000632e 	.word	0x0000632e

00005780 <_adcs>:
    5780:	00020200 03000000 00000000 00000001     ................
    5790:	00000001 00000000 00000000 612f2e2e     ............../a
    57a0:	682f6364 615f6c70 632e6364 00000000     dc/hpl_adc.c....

000057b0 <DIP_SWITCH_THRESHOLDS>:
    57b0:	00190000 0080004e 00c900a7 011100ef     ....N...........
    57c0:	01520133 0185016c 01aa0198 01d101be     3.R.l...........

000057d0 <DISPLAY_VALUES_OUTER>:
    57d0:	06124f01 0f20244c 30080400 38307931     .O..L$ ....01y08
    57e0:	437f4821 49497178 18011801 79413f24     !H.CxqII....$?Ay
    57f0:	377f7f49 7e777e7f                       I..7.~w~

000057f8 <DISPLAY_VALUES_INNER>:
    57f8:	3f3f7f7f 7f3f3f3f 733f3f3f 7f7f5e7f     ..?????.???s.^..
    5808:	7f6d3f3f 5b577f73 3b7b3f7f 767f6d3f     ??m.s.W[.?{;?m.v
    5818:	7655527a 007f3f7f                       zRUv.?..

00005820 <DISPLAY_SEGMENTS>:
    5820:	000c0003 00c00030 0c000300 c0003000     ....0........0..
    5830:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    5840:	73615f63 2e636e79 00000063 682f2e2e     c_async.c...../h
    5850:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    5860:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    5870:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    5880:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    5890:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    58a0:	00632e72                                r.c.

000058a4 <_cfgs>:
    58a4:	42004400 00000018 00000762 00001762     .D.B....b...b...
    58b4:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    58c4:	63615f6c 0000632e 682f2e2e 642f6c70     l_ac.c..../hpl/d
    58d4:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000058e4 <_map>:
    58e4:	00000000 00000010 00000001 00000011     ................
    58f4:	00000005 00000015 0000000e 0000000e     ................
    5904:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5914:	632e6369 00000000                       ic.c....

0000591c <user_mux_confs>:
    591c:	00010000 00030002 00050004 00070006     ................
    592c:	00090008 000b000a 000d010c 000f000e     ................
    593c:	00110010 00130012 00150014 01170016     ................
    594c:	00190018 001b001a 001d001c 0000001e     ................

0000595c <channel_confs>:
    595c:	022c0000 00000001 00000002 00000003     ..,.............
    596c:	00000004 00000005 00000006 00000007     ................
    597c:	00000008 00000009 0000000a 0000000b     ................
    598c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    599c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    59ac:	00003af4 00003a44 00003a44 00003a42     .:..D:..D:..B:..
    59bc:	00003ae6 00003ae6 00003adc 00003a42     .:...:...:..B:..
    59cc:	00003ae6 00003adc 00003ae6 00003a42     .:...:...:..B:..
    59dc:	00003aec 00003aec 00003aec 00003b7c     .:...:...:..|;..
    59ec:	0000481c 000046dc 000046dc 000046d8     .H...F...F...F..
    59fc:	000047f4 000047f4 000047e6 000046d8     .G...G...G...F..
    5a0c:	000047f4 000047e6 000047f4 000046d8     .G...G...G...F..
    5a1c:	000047fc 000047fc 000047fc 00004a00     .G...G...G...J..

00005a2c <_init>:
    5a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a2e:	46c0      	nop			; (mov r8, r8)
    5a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a32:	bc08      	pop	{r3}
    5a34:	469e      	mov	lr, r3
    5a36:	4770      	bx	lr

00005a38 <__init_array_start>:
    5a38:	000000dd 	.word	0x000000dd

00005a3c <_fini>:
    5a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a42:	bc08      	pop	{r3}
    5a44:	469e      	mov	lr, r3
    5a46:	4770      	bx	lr

00005a48 <__fini_array_start>:
    5a48:	000000b5 	.word	0x000000b5
